import {
  g as hh,
  r as Ro,
  a as P,
  _ as W,
  b as Ae,
  c as _o,
  d as ge,
  e as Ue,
  i as xi,
  f as Je,
  h as dh,
  j as w,
  k as R,
  N as Ks,
  l as uh,
  m as fh,
  u as Tt,
  n as gh,
  L as ph,
  o as za,
  R as mh,
  p as gt,
  q as xh,
} from "./index-J0HNuP5J.js";
import { a as Le, b as ne } from "./js.cookie-47-wOPc-.js";
var vh = Ro();
const ie = hh(vh);
function bh({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M3.75 21h16.5M4.5 3h15M5.25 3v18m13.5-18v18M9 6.75h1.5m-1.5 3h1.5m-1.5 3h1.5m3-6H15m-1.5 3H15m-1.5 3H15M9 21v-3.375c0-.621.504-1.125 1.125-1.125h3.75c.621 0 1.125.504 1.125 1.125V21",
    })
  );
}
const yh = P.forwardRef(bh);
function wh({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "m19.5 8.25-7.5 7.5-7.5-7.5",
    })
  );
}
const kh = P.forwardRef(wh);
function Ah({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "m4.5 15.75 7.5-7.5 7.5 7.5",
    })
  );
}
const Ch = P.forwardRef(Ah);
function Sh({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 5.25h.008v.008H12v-.008Z",
    })
  );
}
const Th = P.forwardRef(Sh);
function Ph({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z",
    })
  );
}
const Qs = P.forwardRef(Ph);
function Lh({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-.952 4.125 4.125 0 0 0-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 0 1 8.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0 1 11.964-3.07M12 6.375a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0Zm8.25 2.25a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z",
    })
  );
}
const Mh = P.forwardRef(Lh);
function Eh({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M9 4.5v15m6-15v15m-10.875 0h15.75c.621 0 1.125-.504 1.125-1.125V5.625c0-.621-.504-1.125-1.125-1.125H4.125C3.504 4.5 3 5.004 3 5.625v12.75c0 .621.504 1.125 1.125 1.125Z",
    })
  );
}
const Ih = P.forwardRef(Eh);
function Rh({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M6 18 18 6M6 6l12 12",
    })
  );
}
const _h = P.forwardRef(Rh);
var Oh = {},
  Nh = "production",
  cs = typeof process > "u" || Oh === void 0 ? Nh : "production",
  nt = function (r) {
    return {
      isEnabled: function (e) {
        return r.some(function (t) {
          return !!e[t];
        });
      },
    };
  },
  Ta = {
    measureLayout: nt(["layout", "layoutId", "drag"]),
    animation: nt([
      "animate",
      "exit",
      "variants",
      "whileHover",
      "whileTap",
      "whileFocus",
      "whileDrag",
      "whileInView",
    ]),
    exit: nt(["exit"]),
    drag: nt(["drag", "dragControls"]),
    focus: nt(["whileFocus"]),
    hover: nt(["whileHover", "onHoverStart", "onHoverEnd"]),
    tap: nt(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
    pan: nt(["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"]),
    inView: nt(["whileInView", "onViewportEnter", "onViewportLeave"]),
  };
function jh(r) {
  for (var e in r)
    r[e] !== null &&
      (e === "projectionNodeConstructor"
        ? (Ta.projectionNodeConstructor = r[e])
        : (Ta[e].Component = r[e]));
}
var Oo = P.createContext({ strict: !1 }),
  No = Object.keys(Ta),
  Fh = No.length;
function Dh(r, e, t) {
  var a = [],
    i = P.useContext(Oo);
  if (!e) return null;
  cs !== "production" && t && i.strict;
  for (var s = 0; s < Fh; s++) {
    var n = No[s],
      o = Ta[n],
      l = o.isEnabled,
      c = o.Component;
    l(r) &&
      c &&
      a.push(P.createElement(c, W({ key: n }, r, { visualElement: e })));
  }
  return a;
}
var hs = P.createContext({
    transformPagePoint: function (r) {
      return r;
    },
    isStatic: !1,
    reducedMotion: "never",
  }),
  Oi = P.createContext({});
function zh() {
  return P.useContext(Oi).visualElement;
}
var Ha = P.createContext(null),
  sa = typeof document < "u",
  vi = sa ? P.useLayoutEffect : P.useEffect,
  Ar = { current: null },
  jo = !1;
function Hh() {
  if (((jo = !0), !!sa))
    if (window.matchMedia) {
      var r = window.matchMedia("(prefers-reduced-motion)"),
        e = function () {
          return (Ar.current = r.matches);
        };
      r.addListener(e), e();
    } else Ar.current = !1;
}
function Xh() {
  !jo && Hh();
  var r = Ae(P.useState(Ar.current), 1),
    e = r[0];
  return e;
}
function Bh() {
  var r = Xh(),
    e = P.useContext(hs).reducedMotion;
  return e === "never" ? !1 : e === "always" ? !0 : r;
}
function Yh(r, e, t, a) {
  var i = P.useContext(Oo),
    s = zh(),
    n = P.useContext(Ha),
    o = Bh(),
    l = P.useRef(void 0);
  a || (a = i.renderer),
    !l.current &&
      a &&
      (l.current = a(r, {
        visualState: e,
        parent: s,
        props: t,
        presenceId: n == null ? void 0 : n.id,
        blockInitialAnimation: (n == null ? void 0 : n.initial) === !1,
        shouldReduceMotion: o,
      }));
  var c = l.current;
  return (
    vi(function () {
      c == null || c.syncRender();
    }),
    P.useEffect(function () {
      var h;
      (h = c == null ? void 0 : c.animationState) === null ||
        h === void 0 ||
        h.animateChanges();
    }),
    vi(function () {
      return function () {
        return c == null ? void 0 : c.notifyUnmount();
      };
    }, []),
    c
  );
}
function $t(r) {
  return (
    typeof r == "object" && Object.prototype.hasOwnProperty.call(r, "current")
  );
}
function Wh(r, e, t) {
  return P.useCallback(
    function (a) {
      var i;
      a && ((i = r.mount) === null || i === void 0 || i.call(r, a)),
        e && (a ? e.mount(a) : e.unmount()),
        t && (typeof t == "function" ? t(a) : $t(t) && (t.current = a));
    },
    [e]
  );
}
function Fo(r) {
  return Array.isArray(r);
}
function Ze(r) {
  return typeof r == "string" || Fo(r);
}
function Vh(r) {
  var e = {};
  return (
    r.forEachValue(function (t, a) {
      return (e[a] = t.get());
    }),
    e
  );
}
function Gh(r) {
  var e = {};
  return (
    r.forEachValue(function (t, a) {
      return (e[a] = t.getVelocity());
    }),
    e
  );
}
function Do(r, e, t, a, i) {
  var s;
  return (
    a === void 0 && (a = {}),
    i === void 0 && (i = {}),
    typeof e == "function" && (e = e(t ?? r.custom, a, i)),
    typeof e == "string" &&
      (e = (s = r.variants) === null || s === void 0 ? void 0 : s[e]),
    typeof e == "function" && (e = e(t ?? r.custom, a, i)),
    e
  );
}
function Ni(r, e, t) {
  var a = r.getProps();
  return Do(a, e, t ?? a.custom, Vh(r), Gh(r));
}
function ji(r) {
  var e;
  return (
    typeof ((e = r.animate) === null || e === void 0 ? void 0 : e.start) ==
      "function" ||
    Ze(r.initial) ||
    Ze(r.animate) ||
    Ze(r.whileHover) ||
    Ze(r.whileDrag) ||
    Ze(r.whileTap) ||
    Ze(r.whileFocus) ||
    Ze(r.exit)
  );
}
function zo(r) {
  return !!(ji(r) || r.variants);
}
function Uh(r, e) {
  if (ji(r)) {
    var t = r.initial,
      a = r.animate;
    return {
      initial: t === !1 || Ze(t) ? t : void 0,
      animate: Ze(a) ? a : void 0,
    };
  }
  return r.inherit !== !1 ? e : {};
}
function $h(r) {
  var e = Uh(r, P.useContext(Oi)),
    t = e.initial,
    a = e.animate;
  return P.useMemo(
    function () {
      return { initial: t, animate: a };
    },
    [Js(t), Js(a)]
  );
}
function Js(r) {
  return Array.isArray(r) ? r.join(" ") : r;
}
function Xa(r) {
  var e = P.useRef(null);
  return e.current === null && (e.current = r()), e.current;
}
var va = { hasAnimatedSinceResize: !0, hasEverUpdated: !1 },
  qh = 1;
function Zh() {
  return Xa(function () {
    if (va.hasEverUpdated) return qh++;
  });
}
var ds = P.createContext({}),
  Ho = P.createContext({});
function Kh(r, e, t, a) {
  var i,
    s = e.layoutId,
    n = e.layout,
    o = e.drag,
    l = e.dragConstraints,
    c = e.layoutScroll,
    h = P.useContext(Ho);
  !a ||
    !t ||
    (t != null && t.projection) ||
    ((t.projection = new a(
      r,
      t.getLatestValues(),
      (i = t.parent) === null || i === void 0 ? void 0 : i.projection
    )),
    t.projection.setOptions({
      layoutId: s,
      layout: n,
      alwaysMeasureLayout: !!o || (l && $t(l)),
      visualElement: t,
      scheduleRender: function () {
        return t.scheduleRender();
      },
      animationType: typeof n == "string" ? n : "both",
      initialPromotionConfig: h,
      layoutScroll: c,
    }));
}
var Qh = (function (r) {
  _o(e, r);
  function e() {
    return (r !== null && r.apply(this, arguments)) || this;
  }
  return (
    (e.prototype.getSnapshotBeforeUpdate = function () {
      return this.updateProps(), null;
    }),
    (e.prototype.componentDidUpdate = function () {}),
    (e.prototype.updateProps = function () {
      var t = this.props,
        a = t.visualElement,
        i = t.props;
      a && a.setProps(i);
    }),
    (e.prototype.render = function () {
      return this.props.children;
    }),
    e
  );
})(ge.Component);
function Jh(r) {
  var e = r.preloadedFeatures,
    t = r.createVisualElement,
    a = r.projectionNodeConstructor,
    i = r.useRender,
    s = r.useVisualState,
    n = r.Component;
  e && jh(e);
  function o(l, c) {
    var h = ed(l);
    l = W(W({}, l), { layoutId: h });
    var d = P.useContext(hs),
      u = null,
      f = $h(l),
      g = d.isStatic ? void 0 : Zh(),
      p = s(l, d.isStatic);
    return (
      !d.isStatic &&
        sa &&
        ((f.visualElement = Yh(n, p, W(W({}, d), l), t)),
        Kh(g, l, f.visualElement, a || Ta.projectionNodeConstructor),
        (u = Dh(l, f.visualElement, e))),
      P.createElement(
        Qh,
        { visualElement: f.visualElement, props: W(W({}, d), l) },
        u,
        P.createElement(
          Oi.Provider,
          { value: f },
          i(n, l, g, Wh(p, f.visualElement, c), p, d.isStatic, f.visualElement)
        )
      )
    );
  }
  return P.forwardRef(o);
}
function ed(r) {
  var e,
    t = r.layoutId,
    a = (e = P.useContext(ds)) === null || e === void 0 ? void 0 : e.id;
  return a && t !== void 0 ? a + "-" + t : t;
}
function td(r) {
  function e(a, i) {
    return i === void 0 && (i = {}), Jh(r(a, i));
  }
  if (typeof Proxy > "u") return e;
  var t = new Map();
  return new Proxy(e, {
    get: function (a, i) {
      return t.has(i) || t.set(i, e(i)), t.get(i);
    },
  });
}
var ad = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "svg",
  "switch",
  "symbol",
  "text",
  "tspan",
  "use",
  "view",
];
function us(r) {
  return typeof r != "string" || r.includes("-")
    ? !1
    : !!(ad.indexOf(r) > -1 || /[A-Z]/.test(r));
}
var bi = {};
function id(r) {
  Object.assign(bi, r);
}
var Cr = ["", "X", "Y", "Z"],
  rd = ["translate", "scale", "rotate", "skew"],
  Pa = ["transformPerspective", "x", "y", "z"];
rd.forEach(function (r) {
  return Cr.forEach(function (e) {
    return Pa.push(r + e);
  });
});
function sd(r, e) {
  return Pa.indexOf(r) - Pa.indexOf(e);
}
var nd = new Set(Pa);
function Ba(r) {
  return nd.has(r);
}
var od = new Set(["originX", "originY", "originZ"]);
function Xo(r) {
  return od.has(r);
}
function Bo(r, e) {
  var t = e.layout,
    a = e.layoutId;
  return (
    Ba(r) || Xo(r) || ((t || a !== void 0) && (!!bi[r] || r === "opacity"))
  );
}
var ct = function (r) {
    return !!(r !== null && typeof r == "object" && r.getVelocity);
  },
  ld = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective",
  };
function cd(r, e, t, a) {
  var i = r.transform,
    s = r.transformKeys,
    n = e.enableHardwareAcceleration,
    o = n === void 0 ? !0 : n,
    l = e.allowTransformNone,
    c = l === void 0 ? !0 : l,
    h = "";
  s.sort(sd);
  for (var d = !1, u = s.length, f = 0; f < u; f++) {
    var g = s[f];
    (h += "".concat(ld[g] || g, "(").concat(i[g], ") ")), g === "z" && (d = !0);
  }
  return (
    !d && o ? (h += "translateZ(0)") : (h = h.trim()),
    a ? (h = a(i, t ? "" : h)) : c && t && (h = "none"),
    h
  );
}
function hd(r) {
  var e = r.originX,
    t = e === void 0 ? "50%" : e,
    a = r.originY,
    i = a === void 0 ? "50%" : a,
    s = r.originZ,
    n = s === void 0 ? 0 : s;
  return "".concat(t, " ").concat(i, " ").concat(n);
}
function Yo(r) {
  return r.startsWith("--");
}
var dd = function (r, e) {
  return e && typeof r == "number" ? e.transform(r) : r;
};
const Wo = (r, e) => (t) => Math.max(Math.min(t, e), r),
  ba = (r) => (r % 1 ? Number(r.toFixed(5)) : r),
  La = /(-)?([\d]*\.?[\d])+/g,
  Sr =
    /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,
  ud =
    /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
function Ya(r) {
  return typeof r == "string";
}
const Bt = {
    test: (r) => typeof r == "number",
    parse: parseFloat,
    transform: (r) => r,
  },
  ya = Object.assign(Object.assign({}, Bt), { transform: Wo(0, 1) }),
  ei = Object.assign(Object.assign({}, Bt), { default: 1 }),
  Wa = (r) => ({
    test: (e) => Ya(e) && e.endsWith(r) && e.split(" ").length === 1,
    parse: parseFloat,
    transform: (e) => `${e}${r}`,
  }),
  mt = Wa("deg"),
  it = Wa("%"),
  ee = Wa("px"),
  fd = Wa("vh"),
  gd = Wa("vw"),
  en = Object.assign(Object.assign({}, it), {
    parse: (r) => it.parse(r) / 100,
    transform: (r) => it.transform(r * 100),
  }),
  fs = (r, e) => (t) =>
    !!(
      (Ya(t) && ud.test(t) && t.startsWith(r)) ||
      (e && Object.prototype.hasOwnProperty.call(t, e))
    ),
  Vo = (r, e, t) => (a) => {
    if (!Ya(a)) return a;
    const [i, s, n, o] = a.match(La);
    return {
      [r]: parseFloat(i),
      [e]: parseFloat(s),
      [t]: parseFloat(n),
      alpha: o !== void 0 ? parseFloat(o) : 1,
    };
  },
  _t = {
    test: fs("hsl", "hue"),
    parse: Vo("hue", "saturation", "lightness"),
    transform: ({ hue: r, saturation: e, lightness: t, alpha: a = 1 }) =>
      "hsla(" +
      Math.round(r) +
      ", " +
      it.transform(ba(e)) +
      ", " +
      it.transform(ba(t)) +
      ", " +
      ba(ya.transform(a)) +
      ")",
  },
  pd = Wo(0, 255),
  $i = Object.assign(Object.assign({}, Bt), {
    transform: (r) => Math.round(pd(r)),
  }),
  yt = {
    test: fs("rgb", "red"),
    parse: Vo("red", "green", "blue"),
    transform: ({ red: r, green: e, blue: t, alpha: a = 1 }) =>
      "rgba(" +
      $i.transform(r) +
      ", " +
      $i.transform(e) +
      ", " +
      $i.transform(t) +
      ", " +
      ba(ya.transform(a)) +
      ")",
  };
function md(r) {
  let e = "",
    t = "",
    a = "",
    i = "";
  return (
    r.length > 5
      ? ((e = r.substr(1, 2)),
        (t = r.substr(3, 2)),
        (a = r.substr(5, 2)),
        (i = r.substr(7, 2)))
      : ((e = r.substr(1, 1)),
        (t = r.substr(2, 1)),
        (a = r.substr(3, 1)),
        (i = r.substr(4, 1)),
        (e += e),
        (t += t),
        (a += a),
        (i += i)),
    {
      red: parseInt(e, 16),
      green: parseInt(t, 16),
      blue: parseInt(a, 16),
      alpha: i ? parseInt(i, 16) / 255 : 1,
    }
  );
}
const Tr = { test: fs("#"), parse: md, transform: yt.transform },
  Ne = {
    test: (r) => yt.test(r) || Tr.test(r) || _t.test(r),
    parse: (r) =>
      yt.test(r) ? yt.parse(r) : _t.test(r) ? _t.parse(r) : Tr.parse(r),
    transform: (r) =>
      Ya(r) ? r : r.hasOwnProperty("red") ? yt.transform(r) : _t.transform(r),
  },
  Go = "${c}",
  Uo = "${n}";
function xd(r) {
  var e, t, a, i;
  return (
    isNaN(r) &&
    Ya(r) &&
    ((t = (e = r.match(La)) === null || e === void 0 ? void 0 : e.length) !==
      null && t !== void 0
      ? t
      : 0) +
      ((i = (a = r.match(Sr)) === null || a === void 0 ? void 0 : a.length) !==
        null && i !== void 0
        ? i
        : 0) >
      0
  );
}
function $o(r) {
  typeof r == "number" && (r = `${r}`);
  const e = [];
  let t = 0;
  const a = r.match(Sr);
  a && ((t = a.length), (r = r.replace(Sr, Go)), e.push(...a.map(Ne.parse)));
  const i = r.match(La);
  return (
    i && ((r = r.replace(La, Uo)), e.push(...i.map(Bt.parse))),
    { values: e, numColors: t, tokenised: r }
  );
}
function qo(r) {
  return $o(r).values;
}
function Zo(r) {
  const { values: e, numColors: t, tokenised: a } = $o(r),
    i = e.length;
  return (s) => {
    let n = a;
    for (let o = 0; o < i; o++)
      n = n.replace(o < t ? Go : Uo, o < t ? Ne.transform(s[o]) : ba(s[o]));
    return n;
  };
}
const vd = (r) => (typeof r == "number" ? 0 : r);
function bd(r) {
  const e = qo(r);
  return Zo(r)(e.map(vd));
}
const ht = {
    test: xd,
    parse: qo,
    createTransformer: Zo,
    getAnimatableNone: bd,
  },
  yd = new Set(["brightness", "contrast", "saturate", "opacity"]);
function wd(r) {
  let [e, t] = r.slice(0, -1).split("(");
  if (e === "drop-shadow") return r;
  const [a] = t.match(La) || [];
  if (!a) return r;
  const i = t.replace(a, "");
  let s = yd.has(e) ? 1 : 0;
  return a !== t && (s *= 100), e + "(" + s + i + ")";
}
const kd = /([a-z-]*)\(.*?\)/g,
  Pr = Object.assign(Object.assign({}, ht), {
    getAnimatableNone: (r) => {
      const e = r.match(kd);
      return e ? e.map(wd).join(" ") : r;
    },
  });
var tn = W(W({}, Bt), { transform: Math.round }),
  Ko = {
    borderWidth: ee,
    borderTopWidth: ee,
    borderRightWidth: ee,
    borderBottomWidth: ee,
    borderLeftWidth: ee,
    borderRadius: ee,
    radius: ee,
    borderTopLeftRadius: ee,
    borderTopRightRadius: ee,
    borderBottomRightRadius: ee,
    borderBottomLeftRadius: ee,
    width: ee,
    maxWidth: ee,
    height: ee,
    maxHeight: ee,
    size: ee,
    top: ee,
    right: ee,
    bottom: ee,
    left: ee,
    padding: ee,
    paddingTop: ee,
    paddingRight: ee,
    paddingBottom: ee,
    paddingLeft: ee,
    margin: ee,
    marginTop: ee,
    marginRight: ee,
    marginBottom: ee,
    marginLeft: ee,
    rotate: mt,
    rotateX: mt,
    rotateY: mt,
    rotateZ: mt,
    scale: ei,
    scaleX: ei,
    scaleY: ei,
    scaleZ: ei,
    skew: mt,
    skewX: mt,
    skewY: mt,
    distance: ee,
    translateX: ee,
    translateY: ee,
    translateZ: ee,
    x: ee,
    y: ee,
    z: ee,
    perspective: ee,
    transformPerspective: ee,
    opacity: ya,
    originX: en,
    originY: en,
    originZ: ee,
    zIndex: tn,
    fillOpacity: ya,
    strokeOpacity: ya,
    numOctaves: tn,
  };
function gs(r, e, t, a) {
  var i,
    s = r.style,
    n = r.vars,
    o = r.transform,
    l = r.transformKeys,
    c = r.transformOrigin;
  l.length = 0;
  var h = !1,
    d = !1,
    u = !0;
  for (var f in e) {
    var g = e[f];
    if (Yo(f)) {
      n[f] = g;
      continue;
    }
    var p = Ko[f],
      m = dd(g, p);
    if (Ba(f)) {
      if (((h = !0), (o[f] = m), l.push(f), !u)) continue;
      g !== ((i = p.default) !== null && i !== void 0 ? i : 0) && (u = !1);
    } else Xo(f) ? ((c[f] = m), (d = !0)) : (s[f] = m);
  }
  h
    ? (s.transform = cd(r, t, u, a))
    : a
    ? (s.transform = a({}, ""))
    : !e.transform && s.transform && (s.transform = "none"),
    d && (s.transformOrigin = hd(c));
}
var ps = function () {
  return {
    style: {},
    transform: {},
    transformKeys: [],
    transformOrigin: {},
    vars: {},
  };
};
function Qo(r, e, t) {
  for (var a in e) !ct(e[a]) && !Bo(a, t) && (r[a] = e[a]);
}
function Ad(r, e, t) {
  var a = r.transformTemplate;
  return P.useMemo(
    function () {
      var i = ps();
      gs(i, e, { enableHardwareAcceleration: !t }, a);
      var s = i.vars,
        n = i.style;
      return W(W({}, s), n);
    },
    [e]
  );
}
function Cd(r, e, t) {
  var a = r.style || {},
    i = {};
  return (
    Qo(i, a, r),
    Object.assign(i, Ad(r, e, t)),
    r.transformValues && (i = r.transformValues(i)),
    i
  );
}
function Sd(r, e, t) {
  var a = {},
    i = Cd(r, e, t);
  return (
    r.drag &&
      r.dragListener !== !1 &&
      ((a.draggable = !1),
      (i.userSelect = i.WebkitUserSelect = i.WebkitTouchCallout = "none"),
      (i.touchAction =
        r.drag === !0 ? "none" : "pan-".concat(r.drag === "x" ? "y" : "x"))),
    (a.style = i),
    a
  );
}
var Td = new Set([
  "initial",
  "animate",
  "exit",
  "style",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "layout",
  "layoutId",
  "layoutDependency",
  "onLayoutAnimationStart",
  "onLayoutAnimationComplete",
  "onLayoutMeasure",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "drag",
  "dragControls",
  "dragListener",
  "dragConstraints",
  "dragDirectionLock",
  "dragSnapToOrigin",
  "_dragX",
  "_dragY",
  "dragElastic",
  "dragMomentum",
  "dragPropagation",
  "dragTransition",
  "whileDrag",
  "onPan",
  "onPanStart",
  "onPanEnd",
  "onPanSessionStart",
  "onTap",
  "onTapStart",
  "onTapCancel",
  "onHoverStart",
  "onHoverEnd",
  "whileFocus",
  "whileTap",
  "whileHover",
  "whileInView",
  "onViewportEnter",
  "onViewportLeave",
  "viewport",
  "layoutScroll",
]);
function yi(r) {
  return Td.has(r);
}
var Jo = function (r) {
  return !yi(r);
};
function Pd(r) {
  r &&
    (Jo = function (e) {
      return e.startsWith("on") ? !yi(e) : r(e);
    });
}
try {
  Pd(require("@emotion/is-prop-valid").default);
} catch {}
function Ld(r, e, t) {
  var a = {};
  for (var i in r)
    (Jo(i) ||
      (t === !0 && yi(i)) ||
      (!e && !yi(i)) ||
      (r.draggable && i.startsWith("onDrag"))) &&
      (a[i] = r[i]);
  return a;
}
function an(r, e, t) {
  return typeof r == "string" ? r : ee.transform(e + t * r);
}
function Md(r, e, t) {
  var a = an(e, r.x, r.width),
    i = an(t, r.y, r.height);
  return "".concat(a, " ").concat(i);
}
var Ed = { offset: "strokeDashoffset", array: "strokeDasharray" };
function Id(r, e, t, a, i) {
  t === void 0 && (t = 1), a === void 0 && (a = 0), (r.pathLength = 1);
  var s = Ed;
  r[s.offset] = ee.transform(-a);
  var n = ee.transform(e),
    o = ee.transform(t);
  r[s.array] = "".concat(n, " ").concat(o);
}
function ms(r, e, t, a) {
  var i = e.attrX,
    s = e.attrY,
    n = e.originX,
    o = e.originY,
    l = e.pathLength,
    c = e.pathSpacing,
    h = c === void 0 ? 1 : c,
    d = e.pathOffset,
    u = d === void 0 ? 0 : d,
    f = Ue(e, [
      "attrX",
      "attrY",
      "originX",
      "originY",
      "pathLength",
      "pathSpacing",
      "pathOffset",
    ]);
  gs(r, f, t, a), (r.attrs = r.style), (r.style = {});
  var g = r.attrs,
    p = r.style,
    m = r.dimensions;
  g.transform && (m && (p.transform = g.transform), delete g.transform),
    m &&
      (n !== void 0 || o !== void 0 || p.transform) &&
      (p.transformOrigin = Md(
        m,
        n !== void 0 ? n : 0.5,
        o !== void 0 ? o : 0.5
      )),
    i !== void 0 && (g.x = i),
    s !== void 0 && (g.y = s),
    l !== void 0 && Id(g, l, h, u);
}
var el = function () {
  return W(W({}, ps()), { attrs: {} });
};
function Rd(r, e) {
  var t = P.useMemo(
    function () {
      var i = el();
      return (
        ms(i, e, { enableHardwareAcceleration: !1 }, r.transformTemplate),
        W(W({}, i.attrs), { style: W({}, i.style) })
      );
    },
    [e]
  );
  if (r.style) {
    var a = {};
    Qo(a, r.style, r), (t.style = W(W({}, a), t.style));
  }
  return t;
}
function _d(r) {
  r === void 0 && (r = !1);
  var e = function (t, a, i, s, n, o) {
    var l = n.latestValues,
      c = us(t) ? Rd : Sd,
      h = c(a, l, o),
      d = Ld(a, typeof t == "string", r),
      u = W(W(W({}, d), h), { ref: s });
    return i && (u["data-projection-id"] = i), P.createElement(t, u);
  };
  return e;
}
var Od = /([a-z])([A-Z])/g,
  Nd = "$1-$2",
  tl = function (r) {
    return r.replace(Od, Nd).toLowerCase();
  };
function al(r, e, t, a) {
  var i = e.style,
    s = e.vars;
  Object.assign(r.style, i, a && a.getProjectionStyles(t));
  for (var n in s) r.style.setProperty(n, s[n]);
}
var il = new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
]);
function rl(r, e, t, a) {
  al(r, e, void 0, a);
  for (var i in e.attrs) r.setAttribute(il.has(i) ? i : tl(i), e.attrs[i]);
}
function xs(r) {
  var e = r.style,
    t = {};
  for (var a in e) (ct(e[a]) || Bo(a, r)) && (t[a] = e[a]);
  return t;
}
function sl(r) {
  var e = xs(r);
  for (var t in r)
    if (ct(r[t])) {
      var a = t === "x" || t === "y" ? "attr" + t.toUpperCase() : t;
      e[a] = r[t];
    }
  return e;
}
function vs(r) {
  return typeof r == "object" && typeof r.start == "function";
}
var Ma = function (r) {
    return Array.isArray(r);
  },
  jd = function (r) {
    return !!(r && typeof r == "object" && r.mix && r.toValue);
  },
  nl = function (r) {
    return Ma(r) ? r[r.length - 1] || 0 : r;
  };
function li(r) {
  var e = ct(r) ? r.get() : r;
  return jd(e) ? e.toValue() : e;
}
function rn(r, e, t, a) {
  var i = r.scrapeMotionValuesFromProps,
    s = r.createRenderState,
    n = r.onMount,
    o = { latestValues: Fd(e, t, a, i), renderState: s() };
  return (
    n &&
      (o.mount = function (l) {
        return n(e, l, o);
      }),
    o
  );
}
var ol = function (r) {
  return function (e, t) {
    var a = P.useContext(Oi),
      i = P.useContext(Ha);
    return t
      ? rn(r, e, a, i)
      : Xa(function () {
          return rn(r, e, a, i);
        });
  };
};
function Fd(r, e, t, a) {
  var i = {},
    s = (t == null ? void 0 : t.initial) === !1,
    n = a(r);
  for (var o in n) i[o] = li(n[o]);
  var l = r.initial,
    c = r.animate,
    h = ji(r),
    d = zo(r);
  e &&
    d &&
    !h &&
    r.inherit !== !1 &&
    (l ?? (l = e.initial), c ?? (c = e.animate));
  var u = s || l === !1,
    f = u ? c : l;
  if (f && typeof f != "boolean" && !vs(f)) {
    var g = Array.isArray(f) ? f : [f];
    g.forEach(function (p) {
      var m = Do(r, p);
      if (m) {
        var x = m.transitionEnd;
        m.transition;
        var v = Ue(m, ["transitionEnd", "transition"]);
        for (var b in v) {
          var k = v[b];
          if (Array.isArray(k)) {
            var y = u ? k.length - 1 : 0;
            k = k[y];
          }
          k !== null && (i[b] = k);
        }
        for (var b in x) i[b] = x[b];
      }
    });
  }
  return i;
}
var Dd = {
    useVisualState: ol({
      scrapeMotionValuesFromProps: sl,
      createRenderState: el,
      onMount: function (r, e, t) {
        var a = t.renderState,
          i = t.latestValues;
        try {
          a.dimensions =
            typeof e.getBBox == "function"
              ? e.getBBox()
              : e.getBoundingClientRect();
        } catch {
          a.dimensions = { x: 0, y: 0, width: 0, height: 0 };
        }
        ms(a, i, { enableHardwareAcceleration: !1 }, r.transformTemplate),
          rl(e, a);
      },
    }),
  },
  zd = {
    useVisualState: ol({
      scrapeMotionValuesFromProps: xs,
      createRenderState: ps,
    }),
  };
function Hd(r, e, t, a, i) {
  var s = e.forwardMotionProps,
    n = s === void 0 ? !1 : s,
    o = us(r) ? Dd : zd;
  return W(W({}, o), {
    preloadedFeatures: t,
    useRender: _d(n),
    createVisualElement: a,
    projectionNodeConstructor: i,
    Component: r,
  });
}
var be;
(function (r) {
  (r.Animate = "animate"),
    (r.Hover = "whileHover"),
    (r.Tap = "whileTap"),
    (r.Drag = "whileDrag"),
    (r.Focus = "whileFocus"),
    (r.InView = "whileInView"),
    (r.Exit = "exit");
})(be || (be = {}));
function Fi(r, e, t, a) {
  return (
    a === void 0 && (a = { passive: !0 }),
    r.addEventListener(e, t, a),
    function () {
      return r.removeEventListener(e, t);
    }
  );
}
function Lr(r, e, t, a) {
  P.useEffect(
    function () {
      var i = r.current;
      if (t && i) return Fi(i, e, t, a);
    },
    [r, e, t, a]
  );
}
function Xd(r) {
  var e = r.whileFocus,
    t = r.visualElement,
    a = function () {
      var s;
      (s = t.animationState) === null ||
        s === void 0 ||
        s.setActive(be.Focus, !0);
    },
    i = function () {
      var s;
      (s = t.animationState) === null ||
        s === void 0 ||
        s.setActive(be.Focus, !1);
    };
  Lr(t, "focus", e ? a : void 0), Lr(t, "blur", e ? i : void 0);
}
function ll(r) {
  return typeof PointerEvent < "u" && r instanceof PointerEvent
    ? r.pointerType === "mouse"
    : r instanceof MouseEvent;
}
function cl(r) {
  var e = !!r.touches;
  return e;
}
function Bd(r) {
  return function (e) {
    var t = e instanceof MouseEvent,
      a = !t || (t && e.button === 0);
    a && r(e);
  };
}
var Yd = { pageX: 0, pageY: 0 };
function Wd(r, e) {
  e === void 0 && (e = "page");
  var t = r.touches[0] || r.changedTouches[0],
    a = t || Yd;
  return { x: a[e + "X"], y: a[e + "Y"] };
}
function Vd(r, e) {
  return e === void 0 && (e = "page"), { x: r[e + "X"], y: r[e + "Y"] };
}
function bs(r, e) {
  return e === void 0 && (e = "page"), { point: cl(r) ? Wd(r, e) : Vd(r, e) };
}
var hl = function (r, e) {
    e === void 0 && (e = !1);
    var t = function (a) {
      return r(a, bs(a));
    };
    return e ? Bd(t) : t;
  },
  Gd = function () {
    return sa && window.onpointerdown === null;
  },
  Ud = function () {
    return sa && window.ontouchstart === null;
  },
  $d = function () {
    return sa && window.onmousedown === null;
  },
  qd = {
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointercancel: "mousecancel",
    pointerover: "mouseover",
    pointerout: "mouseout",
    pointerenter: "mouseenter",
    pointerleave: "mouseleave",
  },
  Zd = {
    pointerdown: "touchstart",
    pointermove: "touchmove",
    pointerup: "touchend",
    pointercancel: "touchcancel",
  };
function dl(r) {
  return Gd() ? r : Ud() ? Zd[r] : $d() ? qd[r] : r;
}
function Kt(r, e, t, a) {
  return Fi(r, dl(e), hl(t, e === "pointerdown"), a);
}
function wi(r, e, t, a) {
  return Lr(r, dl(e), t && hl(t, e === "pointerdown"), a);
}
function ul(r) {
  var e = null;
  return function () {
    var t = function () {
      e = null;
    };
    return e === null ? ((e = r), t) : !1;
  };
}
var sn = ul("dragHorizontal"),
  nn = ul("dragVertical");
function fl(r) {
  var e = !1;
  if (r === "y") e = nn();
  else if (r === "x") e = sn();
  else {
    var t = sn(),
      a = nn();
    t && a
      ? (e = function () {
          t(), a();
        })
      : (t && t(), a && a());
  }
  return e;
}
function gl() {
  var r = fl(!0);
  return r ? (r(), !1) : !0;
}
function on(r, e, t) {
  return function (a, i) {
    var s;
    !ll(a) ||
      gl() ||
      ((s = r.animationState) === null ||
        s === void 0 ||
        s.setActive(be.Hover, e),
      t == null || t(a, i));
  };
}
function Kd(r) {
  var e = r.onHoverStart,
    t = r.onHoverEnd,
    a = r.whileHover,
    i = r.visualElement;
  wi(i, "pointerenter", e || a ? on(i, !0, e) : void 0, { passive: !e }),
    wi(i, "pointerleave", t || a ? on(i, !1, t) : void 0, { passive: !t });
}
var pl = function (r, e) {
  return e ? (r === e ? !0 : pl(r, e.parentElement)) : !1;
};
function ys(r) {
  return P.useEffect(function () {
    return function () {
      return r();
    };
  }, []);
}
const ki = (r, e, t) => Math.min(Math.max(t, r), e),
  ln = 0.001,
  Qd = 0.01,
  Jd = 10,
  eu = 0.05,
  tu = 1;
function au({
  duration: r = 800,
  bounce: e = 0.25,
  velocity: t = 0,
  mass: a = 1,
}) {
  let i,
    s,
    n = 1 - e;
  (n = ki(eu, tu, n)),
    (r = ki(Qd, Jd, r / 1e3)),
    n < 1
      ? ((i = (c) => {
          const h = c * n,
            d = h * r,
            u = h - t,
            f = Mr(c, n),
            g = Math.exp(-d);
          return ln - (u / f) * g;
        }),
        (s = (c) => {
          const d = c * n * r,
            u = d * t + t,
            f = Math.pow(n, 2) * Math.pow(c, 2) * r,
            g = Math.exp(-d),
            p = Mr(Math.pow(c, 2), n);
          return ((-i(c) + ln > 0 ? -1 : 1) * ((u - f) * g)) / p;
        }))
      : ((i = (c) => {
          const h = Math.exp(-c * r),
            d = (c - t) * r + 1;
          return -0.001 + h * d;
        }),
        (s = (c) => {
          const h = Math.exp(-c * r),
            d = (t - c) * (r * r);
          return h * d;
        }));
  const o = 5 / r,
    l = ru(i, s, o);
  if (((r = r * 1e3), isNaN(l)))
    return { stiffness: 100, damping: 10, duration: r };
  {
    const c = Math.pow(l, 2) * a;
    return { stiffness: c, damping: n * 2 * Math.sqrt(a * c), duration: r };
  }
}
const iu = 12;
function ru(r, e, t) {
  let a = t;
  for (let i = 1; i < iu; i++) a = a - r(a) / e(a);
  return a;
}
function Mr(r, e) {
  return r * Math.sqrt(1 - e * e);
}
const su = ["duration", "bounce"],
  nu = ["stiffness", "damping", "mass"];
function cn(r, e) {
  return e.some((t) => r[t] !== void 0);
}
function ou(r) {
  let e = Object.assign(
    {
      velocity: 0,
      stiffness: 100,
      damping: 10,
      mass: 1,
      isResolvedFromDuration: !1,
    },
    r
  );
  if (!cn(r, nu) && cn(r, su)) {
    const t = au(r);
    (e = Object.assign(Object.assign(Object.assign({}, e), t), {
      velocity: 0,
      mass: 1,
    })),
      (e.isResolvedFromDuration = !0);
  }
  return e;
}
function ws(r) {
  var { from: e = 0, to: t = 1, restSpeed: a = 2, restDelta: i } = r,
    s = Ue(r, ["from", "to", "restSpeed", "restDelta"]);
  const n = { done: !1, value: e };
  let {
      stiffness: o,
      damping: l,
      mass: c,
      velocity: h,
      duration: d,
      isResolvedFromDuration: u,
    } = ou(s),
    f = hn,
    g = hn;
  function p() {
    const m = h ? -(h / 1e3) : 0,
      x = t - e,
      v = l / (2 * Math.sqrt(o * c)),
      b = Math.sqrt(o / c) / 1e3;
    if ((i === void 0 && (i = Math.min(Math.abs(t - e) / 100, 0.4)), v < 1)) {
      const k = Mr(b, v);
      (f = (y) => {
        const C = Math.exp(-v * b * y);
        return (
          t -
          C * (((m + v * b * x) / k) * Math.sin(k * y) + x * Math.cos(k * y))
        );
      }),
        (g = (y) => {
          const C = Math.exp(-v * b * y);
          return (
            v *
              b *
              C *
              ((Math.sin(k * y) * (m + v * b * x)) / k + x * Math.cos(k * y)) -
            C * (Math.cos(k * y) * (m + v * b * x) - k * x * Math.sin(k * y))
          );
        });
    } else if (v === 1) f = (k) => t - Math.exp(-b * k) * (x + (m + b * x) * k);
    else {
      const k = b * Math.sqrt(v * v - 1);
      f = (y) => {
        const C = Math.exp(-v * b * y),
          A = Math.min(k * y, 300);
        return (
          t - (C * ((m + v * b * x) * Math.sinh(A) + k * x * Math.cosh(A))) / k
        );
      };
    }
  }
  return (
    p(),
    {
      next: (m) => {
        const x = f(m);
        if (u) n.done = m >= d;
        else {
          const v = g(m) * 1e3,
            b = Math.abs(v) <= a,
            k = Math.abs(t - x) <= i;
          n.done = b && k;
        }
        return (n.value = n.done ? t : x), n;
      },
      flipTarget: () => {
        (h = -h), ([e, t] = [t, e]), p();
      },
    }
  );
}
ws.needsInterpolation = (r, e) => typeof r == "string" || typeof e == "string";
const hn = (r) => 0,
  Ea = (r, e, t) => {
    const a = e - r;
    return a === 0 ? 1 : (t - r) / a;
  },
  ye = (r, e, t) => -t * r + t * e + r;
function qi(r, e, t) {
  return (
    t < 0 && (t += 1),
    t > 1 && (t -= 1),
    t < 1 / 6
      ? r + (e - r) * 6 * t
      : t < 1 / 2
      ? e
      : t < 2 / 3
      ? r + (e - r) * (2 / 3 - t) * 6
      : r
  );
}
function dn({ hue: r, saturation: e, lightness: t, alpha: a }) {
  (r /= 360), (e /= 100), (t /= 100);
  let i = 0,
    s = 0,
    n = 0;
  if (!e) i = s = n = t;
  else {
    const o = t < 0.5 ? t * (1 + e) : t + e - t * e,
      l = 2 * t - o;
    (i = qi(l, o, r + 1 / 3)), (s = qi(l, o, r)), (n = qi(l, o, r - 1 / 3));
  }
  return {
    red: Math.round(i * 255),
    green: Math.round(s * 255),
    blue: Math.round(n * 255),
    alpha: a,
  };
}
const lu = (r, e, t) => {
    const a = r * r,
      i = e * e;
    return Math.sqrt(Math.max(0, t * (i - a) + a));
  },
  cu = [Tr, yt, _t],
  un = (r) => cu.find((e) => e.test(r)),
  ml = (r, e) => {
    let t = un(r),
      a = un(e),
      i = t.parse(r),
      s = a.parse(e);
    t === _t && ((i = dn(i)), (t = yt)), a === _t && ((s = dn(s)), (a = yt));
    const n = Object.assign({}, i);
    return (o) => {
      for (const l in n) l !== "alpha" && (n[l] = lu(i[l], s[l], o));
      return (n.alpha = ye(i.alpha, s.alpha, o)), t.transform(n);
    };
  },
  Er = (r) => typeof r == "number",
  hu = (r, e) => (t) => e(r(t)),
  Di = (...r) => r.reduce(hu);
function xl(r, e) {
  return Er(r) ? (t) => ye(r, e, t) : Ne.test(r) ? ml(r, e) : bl(r, e);
}
const vl = (r, e) => {
    const t = [...r],
      a = t.length,
      i = r.map((s, n) => xl(s, e[n]));
    return (s) => {
      for (let n = 0; n < a; n++) t[n] = i[n](s);
      return t;
    };
  },
  du = (r, e) => {
    const t = Object.assign(Object.assign({}, r), e),
      a = {};
    for (const i in t)
      r[i] !== void 0 && e[i] !== void 0 && (a[i] = xl(r[i], e[i]));
    return (i) => {
      for (const s in a) t[s] = a[s](i);
      return t;
    };
  };
function fn(r) {
  const e = ht.parse(r),
    t = e.length;
  let a = 0,
    i = 0,
    s = 0;
  for (let n = 0; n < t; n++)
    a || typeof e[n] == "number" ? a++ : e[n].hue !== void 0 ? s++ : i++;
  return { parsed: e, numNumbers: a, numRGB: i, numHSL: s };
}
const bl = (r, e) => {
    const t = ht.createTransformer(e),
      a = fn(r),
      i = fn(e);
    return a.numHSL === i.numHSL &&
      a.numRGB === i.numRGB &&
      a.numNumbers >= i.numNumbers
      ? Di(vl(a.parsed, i.parsed), t)
      : (n) => `${n > 0 ? e : r}`;
  },
  uu = (r, e) => (t) => ye(r, e, t);
function fu(r) {
  if (typeof r == "number") return uu;
  if (typeof r == "string") return Ne.test(r) ? ml : bl;
  if (Array.isArray(r)) return vl;
  if (typeof r == "object") return du;
}
function gu(r, e, t) {
  const a = [],
    i = t || fu(r[0]),
    s = r.length - 1;
  for (let n = 0; n < s; n++) {
    let o = i(r[n], r[n + 1]);
    if (e) {
      const l = Array.isArray(e) ? e[n] : e;
      o = Di(l, o);
    }
    a.push(o);
  }
  return a;
}
function pu([r, e], [t]) {
  return (a) => t(Ea(r, e, a));
}
function mu(r, e) {
  const t = r.length,
    a = t - 1;
  return (i) => {
    let s = 0,
      n = !1;
    if ((i <= r[0] ? (n = !0) : i >= r[a] && ((s = a - 1), (n = !0)), !n)) {
      let l = 1;
      for (; l < t && !(r[l] > i || l === a); l++);
      s = l - 1;
    }
    const o = Ea(r[s], r[s + 1], i);
    return e[s](o);
  };
}
function yl(r, e, { clamp: t = !0, ease: a, mixer: i } = {}) {
  const s = r.length;
  xi(s === e.length),
    xi(!a || !Array.isArray(a) || a.length === s - 1),
    r[0] > r[s - 1] &&
      ((r = [].concat(r)), (e = [].concat(e)), r.reverse(), e.reverse());
  const n = gu(e, a, i),
    o = s === 2 ? pu(r, n) : mu(r, n);
  return t ? (l) => o(ki(r[0], r[s - 1], l)) : o;
}
const zi = (r) => (e) => 1 - r(1 - e),
  ks = (r) => (e) => e <= 0.5 ? r(2 * e) / 2 : (2 - r(2 * (1 - e))) / 2,
  xu = (r) => (e) => Math.pow(e, r),
  wl = (r) => (e) => e * e * ((r + 1) * e - r),
  vu = (r) => {
    const e = wl(r);
    return (t) =>
      (t *= 2) < 1 ? 0.5 * e(t) : 0.5 * (2 - Math.pow(2, -10 * (t - 1)));
  },
  kl = 1.525,
  bu = 4 / 11,
  yu = 8 / 11,
  wu = 9 / 10,
  As = (r) => r,
  Cs = xu(2),
  ku = zi(Cs),
  Al = ks(Cs),
  Cl = (r) => 1 - Math.sin(Math.acos(r)),
  Ss = zi(Cl),
  Au = ks(Ss),
  Ts = wl(kl),
  Cu = zi(Ts),
  Su = ks(Ts),
  Tu = vu(kl),
  Pu = 4356 / 361,
  Lu = 35442 / 1805,
  Mu = 16061 / 1805,
  Ai = (r) => {
    if (r === 1 || r === 0) return r;
    const e = r * r;
    return r < bu
      ? 7.5625 * e
      : r < yu
      ? 9.075 * e - 9.9 * r + 3.4
      : r < wu
      ? Pu * e - Lu * r + Mu
      : 10.8 * r * r - 20.52 * r + 10.72;
  },
  Eu = zi(Ai),
  Iu = (r) => (r < 0.5 ? 0.5 * (1 - Ai(1 - r * 2)) : 0.5 * Ai(r * 2 - 1) + 0.5);
function Ru(r, e) {
  return r.map(() => e || Al).splice(0, r.length - 1);
}
function _u(r) {
  const e = r.length;
  return r.map((t, a) => (a !== 0 ? a / (e - 1) : 0));
}
function Ou(r, e) {
  return r.map((t) => t * e);
}
function ci({ from: r = 0, to: e = 1, ease: t, offset: a, duration: i = 300 }) {
  const s = { done: !1, value: r },
    n = Array.isArray(e) ? e : [r, e],
    o = Ou(a && a.length === n.length ? a : _u(n), i);
  function l() {
    return yl(o, n, { ease: Array.isArray(t) ? t : Ru(n, t) });
  }
  let c = l();
  return {
    next: (h) => ((s.value = c(h)), (s.done = h >= i), s),
    flipTarget: () => {
      n.reverse(), (c = l());
    },
  };
}
function Nu({
  velocity: r = 0,
  from: e = 0,
  power: t = 0.8,
  timeConstant: a = 350,
  restDelta: i = 0.5,
  modifyTarget: s,
}) {
  const n = { done: !1, value: e };
  let o = t * r;
  const l = e + o,
    c = s === void 0 ? l : s(l);
  return (
    c !== l && (o = c - e),
    {
      next: (h) => {
        const d = -o * Math.exp(-h / a);
        return (n.done = !(d > i || d < -i)), (n.value = n.done ? c : c + d), n;
      },
      flipTarget: () => {},
    }
  );
}
const gn = { keyframes: ci, spring: ws, decay: Nu };
function ju(r) {
  if (Array.isArray(r.to)) return ci;
  if (gn[r.type]) return gn[r.type];
  const e = new Set(Object.keys(r));
  return e.has("ease") || (e.has("duration") && !e.has("dampingRatio"))
    ? ci
    : e.has("dampingRatio") ||
      e.has("stiffness") ||
      e.has("mass") ||
      e.has("damping") ||
      e.has("restSpeed") ||
      e.has("restDelta")
    ? ws
    : ci;
}
const Sl = (1 / 60) * 1e3,
  Fu = typeof performance < "u" ? () => performance.now() : () => Date.now(),
  Tl =
    typeof window < "u"
      ? (r) => window.requestAnimationFrame(r)
      : (r) => setTimeout(() => r(Fu()), Sl);
function Du(r) {
  let e = [],
    t = [],
    a = 0,
    i = !1,
    s = !1;
  const n = new WeakSet(),
    o = {
      schedule: (l, c = !1, h = !1) => {
        const d = h && i,
          u = d ? e : t;
        return (
          c && n.add(l),
          u.indexOf(l) === -1 && (u.push(l), d && i && (a = e.length)),
          l
        );
      },
      cancel: (l) => {
        const c = t.indexOf(l);
        c !== -1 && t.splice(c, 1), n.delete(l);
      },
      process: (l) => {
        if (i) {
          s = !0;
          return;
        }
        if (((i = !0), ([e, t] = [t, e]), (t.length = 0), (a = e.length), a))
          for (let c = 0; c < a; c++) {
            const h = e[c];
            h(l), n.has(h) && (o.schedule(h), r());
          }
        (i = !1), s && ((s = !1), o.process(l));
      },
    };
  return o;
}
const zu = 40;
let Ir = !0,
  Ia = !1,
  Rr = !1;
const Qt = { delta: 0, timestamp: 0 },
  Va = ["read", "update", "preRender", "render", "postRender"],
  Hi = Va.reduce((r, e) => ((r[e] = Du(() => (Ia = !0))), r), {}),
  et = Va.reduce((r, e) => {
    const t = Hi[e];
    return (r[e] = (a, i = !1, s = !1) => (Ia || Xu(), t.schedule(a, i, s))), r;
  }, {}),
  ea = Va.reduce((r, e) => ((r[e] = Hi[e].cancel), r), {}),
  Zi = Va.reduce((r, e) => ((r[e] = () => Hi[e].process(Qt)), r), {}),
  Hu = (r) => Hi[r].process(Qt),
  Pl = (r) => {
    (Ia = !1),
      (Qt.delta = Ir ? Sl : Math.max(Math.min(r - Qt.timestamp, zu), 1)),
      (Qt.timestamp = r),
      (Rr = !0),
      Va.forEach(Hu),
      (Rr = !1),
      Ia && ((Ir = !1), Tl(Pl));
  },
  Xu = () => {
    (Ia = !0), (Ir = !0), Rr || Tl(Pl);
  },
  Ci = () => Qt;
function Ll(r, e, t = 0) {
  return r - e - t;
}
function Bu(r, e, t = 0, a = !0) {
  return a ? Ll(e + -r, e, t) : e - (r - e) + t;
}
function Yu(r, e, t, a) {
  return a ? r >= e + t : r <= -t;
}
const Wu = (r) => {
  const e = ({ delta: t }) => r(t);
  return { start: () => et.update(e, !0), stop: () => ea.update(e) };
};
function Ml(r) {
  var e,
    t,
    {
      from: a,
      autoplay: i = !0,
      driver: s = Wu,
      elapsed: n = 0,
      repeat: o = 0,
      repeatType: l = "loop",
      repeatDelay: c = 0,
      onPlay: h,
      onStop: d,
      onComplete: u,
      onRepeat: f,
      onUpdate: g,
    } = r,
    p = Ue(r, [
      "from",
      "autoplay",
      "driver",
      "elapsed",
      "repeat",
      "repeatType",
      "repeatDelay",
      "onPlay",
      "onStop",
      "onComplete",
      "onRepeat",
      "onUpdate",
    ]);
  let { to: m } = p,
    x,
    v = 0,
    b = p.duration,
    k,
    y = !1,
    C = !0,
    A;
  const S = ju(p);
  !((t = (e = S).needsInterpolation) === null || t === void 0) &&
    t.call(e, a, m) &&
    ((A = yl([0, 100], [a, m], { clamp: !1 })), (a = 0), (m = 100));
  const T = S(Object.assign(Object.assign({}, p), { from: a, to: m }));
  function E() {
    v++,
      l === "reverse"
        ? ((C = v % 2 === 0), (n = Bu(n, b, c, C)))
        : ((n = Ll(n, b, c)), l === "mirror" && T.flipTarget()),
      (y = !1),
      f && f();
  }
  function L() {
    x.stop(), u && u();
  }
  function I(O) {
    if ((C || (O = -O), (n += O), !y)) {
      const N = T.next(Math.max(0, n));
      (k = N.value), A && (k = A(k)), (y = C ? N.done : n <= 0);
    }
    g == null || g(k),
      y && (v === 0 && (b ?? (b = n)), v < o ? Yu(n, b, c, C) && E() : L());
  }
  function M() {
    h == null || h(), (x = s(I)), x.start();
  }
  return (
    i && M(),
    {
      stop: () => {
        d == null || d(), x.stop();
      },
    }
  );
}
function El(r, e) {
  return e ? r * (1e3 / e) : 0;
}
function Vu({
  from: r = 0,
  velocity: e = 0,
  min: t,
  max: a,
  power: i = 0.8,
  timeConstant: s = 750,
  bounceStiffness: n = 500,
  bounceDamping: o = 10,
  restDelta: l = 1,
  modifyTarget: c,
  driver: h,
  onUpdate: d,
  onComplete: u,
  onStop: f,
}) {
  let g;
  function p(b) {
    return (t !== void 0 && b < t) || (a !== void 0 && b > a);
  }
  function m(b) {
    return t === void 0
      ? a
      : a === void 0 || Math.abs(t - b) < Math.abs(a - b)
      ? t
      : a;
  }
  function x(b) {
    g == null || g.stop(),
      (g = Ml(
        Object.assign(Object.assign({}, b), {
          driver: h,
          onUpdate: (k) => {
            var y;
            d == null || d(k),
              (y = b.onUpdate) === null || y === void 0 || y.call(b, k);
          },
          onComplete: u,
          onStop: f,
        })
      ));
  }
  function v(b) {
    x(
      Object.assign(
        { type: "spring", stiffness: n, damping: o, restDelta: l },
        b
      )
    );
  }
  if (p(r)) v({ from: r, velocity: e, to: m(r) });
  else {
    let b = i * e + r;
    typeof c < "u" && (b = c(b));
    const k = m(b),
      y = k === t ? -1 : 1;
    let C, A;
    const S = (T) => {
      (C = A),
        (A = T),
        (e = El(T - C, Ci().delta)),
        ((y === 1 && T > k) || (y === -1 && T < k)) &&
          v({ from: T, to: k, velocity: e });
    };
    x({
      type: "decay",
      from: r,
      velocity: e,
      timeConstant: s,
      power: i,
      restDelta: l,
      modifyTarget: c,
      onUpdate: p(b) ? S : void 0,
    });
  }
  return { stop: () => (g == null ? void 0 : g.stop()) };
}
const _r = (r) => r.hasOwnProperty("x") && r.hasOwnProperty("y"),
  pn = (r) => _r(r) && r.hasOwnProperty("z"),
  ti = (r, e) => Math.abs(r - e);
function Il(r, e) {
  if (Er(r) && Er(e)) return ti(r, e);
  if (_r(r) && _r(e)) {
    const t = ti(r.x, e.x),
      a = ti(r.y, e.y),
      i = pn(r) && pn(e) ? ti(r.z, e.z) : 0;
    return Math.sqrt(Math.pow(t, 2) + Math.pow(a, 2) + Math.pow(i, 2));
  }
}
const Rl = (r, e) => 1 - 3 * e + 3 * r,
  _l = (r, e) => 3 * e - 6 * r,
  Ol = (r) => 3 * r,
  Si = (r, e, t) => ((Rl(e, t) * r + _l(e, t)) * r + Ol(e)) * r,
  Nl = (r, e, t) => 3 * Rl(e, t) * r * r + 2 * _l(e, t) * r + Ol(e),
  Gu = 1e-7,
  Uu = 10;
function $u(r, e, t, a, i) {
  let s,
    n,
    o = 0;
  do (n = e + (t - e) / 2), (s = Si(n, a, i) - r), s > 0 ? (t = n) : (e = n);
  while (Math.abs(s) > Gu && ++o < Uu);
  return n;
}
const qu = 8,
  Zu = 0.001;
function Ku(r, e, t, a) {
  for (let i = 0; i < qu; ++i) {
    const s = Nl(e, t, a);
    if (s === 0) return e;
    const n = Si(e, t, a) - r;
    e -= n / s;
  }
  return e;
}
const hi = 11,
  ai = 1 / (hi - 1);
function Qu(r, e, t, a) {
  if (r === e && t === a) return As;
  const i = new Float32Array(hi);
  for (let n = 0; n < hi; ++n) i[n] = Si(n * ai, r, t);
  function s(n) {
    let o = 0,
      l = 1;
    const c = hi - 1;
    for (; l !== c && i[l] <= n; ++l) o += ai;
    --l;
    const h = (n - i[l]) / (i[l + 1] - i[l]),
      d = o + h * ai,
      u = Nl(d, r, t);
    return u >= Zu ? Ku(n, d, r, t) : u === 0 ? d : $u(n, o, o + ai, r, t);
  }
  return (n) => (n === 0 || n === 1 ? n : Si(s(n), e, a));
}
function Ju(r) {
  var e = r.onTap,
    t = r.onTapStart,
    a = r.onTapCancel,
    i = r.whileTap,
    s = r.visualElement,
    n = e || t || a || i,
    o = P.useRef(!1),
    l = P.useRef(null),
    c = { passive: !(t || e || a || g) };
  function h() {
    var p;
    (p = l.current) === null || p === void 0 || p.call(l), (l.current = null);
  }
  function d() {
    var p;
    return (
      h(),
      (o.current = !1),
      (p = s.animationState) === null ||
        p === void 0 ||
        p.setActive(be.Tap, !1),
      !gl()
    );
  }
  function u(p, m) {
    d() &&
      (pl(s.getInstance(), p.target)
        ? e == null || e(p, m)
        : a == null || a(p, m));
  }
  function f(p, m) {
    d() && (a == null || a(p, m));
  }
  function g(p, m) {
    var x;
    h(),
      !o.current &&
        ((o.current = !0),
        (l.current = Di(
          Kt(window, "pointerup", u, c),
          Kt(window, "pointercancel", f, c)
        )),
        (x = s.animationState) === null ||
          x === void 0 ||
          x.setActive(be.Tap, !0),
        t == null || t(p, m));
  }
  wi(s, "pointerdown", n ? g : void 0, c), ys(h);
}
var mn = new Set();
function ef(r, e, t) {
  mn.has(e) || (console.warn(e), mn.add(e));
}
var Or = new WeakMap(),
  Ki = new WeakMap(),
  tf = function (r) {
    var e;
    (e = Or.get(r.target)) === null || e === void 0 || e(r);
  },
  af = function (r) {
    r.forEach(tf);
  };
function rf(r) {
  var e = r.root,
    t = Ue(r, ["root"]),
    a = e || document;
  Ki.has(a) || Ki.set(a, {});
  var i = Ki.get(a),
    s = JSON.stringify(t);
  return i[s] || (i[s] = new IntersectionObserver(af, W({ root: e }, t))), i[s];
}
function sf(r, e, t) {
  var a = rf(e);
  return (
    Or.set(r, t),
    a.observe(r),
    function () {
      Or.delete(r), a.unobserve(r);
    }
  );
}
function nf(r) {
  var e = r.visualElement,
    t = r.whileInView,
    a = r.onViewportEnter,
    i = r.onViewportLeave,
    s = r.viewport,
    n = s === void 0 ? {} : s,
    o = P.useRef({ hasEnteredView: !1, isInView: !1 }),
    l = !!(t || a || i);
  n.once && o.current.hasEnteredView && (l = !1);
  var c = typeof IntersectionObserver > "u" ? cf : lf;
  c(l, o.current, e, n);
}
var of = { some: 0, all: 1 };
function lf(r, e, t, a) {
  var i = a.root,
    s = a.margin,
    n = a.amount,
    o = n === void 0 ? "some" : n,
    l = a.once;
  P.useEffect(
    function () {
      if (r) {
        var c = {
            root: i == null ? void 0 : i.current,
            rootMargin: s,
            threshold: typeof o == "number" ? o : of[o],
          },
          h = function (d) {
            var u,
              f = d.isIntersecting;
            if (
              e.isInView !== f &&
              ((e.isInView = f), !(l && !f && e.hasEnteredView))
            ) {
              f && (e.hasEnteredView = !0),
                (u = t.animationState) === null ||
                  u === void 0 ||
                  u.setActive(be.InView, f);
              var g = t.getProps(),
                p = f ? g.onViewportEnter : g.onViewportLeave;
              p == null || p(d);
            }
          };
        return sf(t.getInstance(), c, h);
      }
    },
    [r, i, s, o]
  );
}
function cf(r, e, t, a) {
  var i = a.fallback,
    s = i === void 0 ? !0 : i;
  P.useEffect(
    function () {
      !r ||
        !s ||
        (cs !== "production" &&
          ef(
            !1,
            "IntersectionObserver not available on this device. whileInView animations will trigger on mount."
          ),
        requestAnimationFrame(function () {
          var n;
          e.hasEnteredView = !0;
          var o = t.getProps().onViewportEnter;
          o == null || o(null),
            (n = t.animationState) === null ||
              n === void 0 ||
              n.setActive(be.InView, !0);
        }));
    },
    [r]
  );
}
var wt = function (r) {
    return function (e) {
      return r(e), null;
    };
  },
  hf = { inView: wt(nf), tap: wt(Ju), focus: wt(Xd), hover: wt(Kd) },
  df = 0,
  uf = function () {
    return df++;
  },
  jl = function () {
    return Xa(uf);
  };
function Fl() {
  var r = P.useContext(Ha);
  if (r === null) return [!0, null];
  var e = r.isPresent,
    t = r.onExitComplete,
    a = r.register,
    i = jl();
  P.useEffect(function () {
    return a(i);
  }, []);
  var s = function () {
    return t == null ? void 0 : t(i);
  };
  return !e && t ? [!1, s] : [!0];
}
function Dl(r, e) {
  if (!Array.isArray(e)) return !1;
  var t = e.length;
  if (t !== r.length) return !1;
  for (var a = 0; a < t; a++) if (e[a] !== r[a]) return !1;
  return !0;
}
var Ti = function (r) {
    return r * 1e3;
  },
  ff = {
    linear: As,
    easeIn: Cs,
    easeInOut: Al,
    easeOut: ku,
    circIn: Cl,
    circInOut: Au,
    circOut: Ss,
    backIn: Ts,
    backInOut: Su,
    backOut: Cu,
    anticipate: Tu,
    bounceIn: Eu,
    bounceInOut: Iu,
    bounceOut: Ai,
  },
  xn = function (r) {
    if (Array.isArray(r)) {
      xi(r.length === 4);
      var e = Ae(r, 4),
        t = e[0],
        a = e[1],
        i = e[2],
        s = e[3];
      return Qu(t, a, i, s);
    } else if (typeof r == "string") return ff[r];
    return r;
  },
  gf = function (r) {
    return Array.isArray(r) && typeof r[0] != "number";
  },
  vn = function (r, e) {
    return r === "zIndex"
      ? !1
      : !!(
          typeof e == "number" ||
          Array.isArray(e) ||
          (typeof e == "string" && ht.test(e) && !e.startsWith("url("))
        );
  },
  Lt = function () {
    return { type: "spring", stiffness: 500, damping: 25, restSpeed: 10 };
  },
  ii = function (r) {
    return {
      type: "spring",
      stiffness: 550,
      damping: r === 0 ? 2 * Math.sqrt(550) : 30,
      restSpeed: 10,
    };
  },
  Qi = function () {
    return { type: "keyframes", ease: "linear", duration: 0.3 };
  },
  pf = function (r) {
    return { type: "keyframes", duration: 0.8, values: r };
  },
  bn = {
    x: Lt,
    y: Lt,
    z: Lt,
    rotate: Lt,
    rotateX: Lt,
    rotateY: Lt,
    rotateZ: Lt,
    scaleX: ii,
    scaleY: ii,
    scale: ii,
    opacity: Qi,
    backgroundColor: Qi,
    color: Qi,
    default: ii,
  },
  mf = function (r, e) {
    var t;
    return Ma(e) ? (t = pf) : (t = bn[r] || bn.default), W({ to: e }, t(e));
  },
  xf = W(W({}, Ko), {
    color: Ne,
    backgroundColor: Ne,
    outlineColor: Ne,
    fill: Ne,
    stroke: Ne,
    borderColor: Ne,
    borderTopColor: Ne,
    borderRightColor: Ne,
    borderBottomColor: Ne,
    borderLeftColor: Ne,
    filter: Pr,
    WebkitFilter: Pr,
  }),
  Ps = function (r) {
    return xf[r];
  };
function Ls(r, e) {
  var t,
    a = Ps(r);
  return (
    a !== Pr && (a = ht),
    (t = a.getAnimatableNone) === null || t === void 0 ? void 0 : t.call(a, e)
  );
}
function vf(r) {
  r.when,
    r.delay,
    r.delayChildren,
    r.staggerChildren,
    r.staggerDirection,
    r.repeat,
    r.repeatType,
    r.repeatDelay,
    r.from;
  var e = Ue(r, [
    "when",
    "delay",
    "delayChildren",
    "staggerChildren",
    "staggerDirection",
    "repeat",
    "repeatType",
    "repeatDelay",
    "from",
  ]);
  return !!Object.keys(e).length;
}
function bf(r) {
  var e = r.ease,
    t = r.times,
    a = r.yoyo,
    i = r.flip,
    s = r.loop,
    n = Ue(r, ["ease", "times", "yoyo", "flip", "loop"]),
    o = W({}, n);
  return (
    t && (o.offset = t),
    n.duration && (o.duration = Ti(n.duration)),
    n.repeatDelay && (o.repeatDelay = Ti(n.repeatDelay)),
    e && (o.ease = gf(e) ? e.map(xn) : xn(e)),
    n.type === "tween" && (o.type = "keyframes"),
    (a || s || i) &&
      (a
        ? (o.repeatType = "reverse")
        : s
        ? (o.repeatType = "loop")
        : i && (o.repeatType = "mirror"),
      (o.repeat = s || a || i || n.repeat)),
    n.type !== "spring" && (o.type = "keyframes"),
    o
  );
}
function yf(r, e) {
  var t,
    a,
    i = Ms(r, e) || {};
  return (a = (t = i.delay) !== null && t !== void 0 ? t : r.delay) !== null &&
    a !== void 0
    ? a
    : 0;
}
function wf(r) {
  return (
    Array.isArray(r.to) &&
      r.to[0] === null &&
      ((r.to = Je([], Ae(r.to), !1)), (r.to[0] = r.from)),
    r
  );
}
function kf(r, e, t) {
  var a;
  return (
    Array.isArray(e.to) &&
      (((a = r.duration) !== null && a !== void 0) || (r.duration = 0.8)),
    wf(e),
    vf(r) || (r = W(W({}, r), mf(t, e.to))),
    W(W({}, e), bf(r))
  );
}
function Af(r, e, t, a, i) {
  var s,
    n = Ms(a, r),
    o = (s = n.from) !== null && s !== void 0 ? s : e.get(),
    l = vn(r, t);
  o === "none" && l && typeof t == "string"
    ? (o = Ls(r, t))
    : yn(o) && typeof t == "string"
    ? (o = wn(t))
    : !Array.isArray(t) && yn(t) && typeof o == "string" && (t = wn(o));
  var c = vn(r, o);
  function h() {
    var u = {
      from: o,
      to: t,
      velocity: e.getVelocity(),
      onComplete: i,
      onUpdate: function (f) {
        return e.set(f);
      },
    };
    return n.type === "inertia" || n.type === "decay"
      ? Vu(W(W({}, u), n))
      : Ml(
          W(W({}, kf(n, u, r)), {
            onUpdate: function (f) {
              var g;
              u.onUpdate(f),
                (g = n.onUpdate) === null || g === void 0 || g.call(n, f);
            },
            onComplete: function () {
              var f;
              u.onComplete(),
                (f = n.onComplete) === null || f === void 0 || f.call(n);
            },
          })
        );
  }
  function d() {
    var u,
      f,
      g = nl(t);
    return (
      e.set(g),
      i(),
      (u = n == null ? void 0 : n.onUpdate) === null ||
        u === void 0 ||
        u.call(n, g),
      (f = n == null ? void 0 : n.onComplete) === null ||
        f === void 0 ||
        f.call(n),
      { stop: function () {} }
    );
  }
  return !c || !l || n.type === !1 ? d : h;
}
function yn(r) {
  return (
    r === 0 ||
    (typeof r == "string" && parseFloat(r) === 0 && r.indexOf(" ") === -1)
  );
}
function wn(r) {
  return typeof r == "number" ? 0 : Ls("", r);
}
function Ms(r, e) {
  return r[e] || r.default || r;
}
function Es(r, e, t, a) {
  return (
    a === void 0 && (a = {}),
    e.start(function (i) {
      var s,
        n,
        o = Af(r, e, t, a, i),
        l = yf(a, r),
        c = function () {
          return (n = o());
        };
      return (
        l ? (s = window.setTimeout(c, Ti(l))) : c(),
        function () {
          clearTimeout(s), n == null || n.stop();
        }
      );
    })
  );
}
var Cf = function (r) {
    return /^\-?\d*\.?\d+$/.test(r);
  },
  Sf = function (r) {
    return /^0[^.\s]+$/.test(r);
  };
function Is(r, e) {
  r.indexOf(e) === -1 && r.push(e);
}
function Rs(r, e) {
  var t = r.indexOf(e);
  t > -1 && r.splice(t, 1);
}
var wa = (function () {
    function r() {
      this.subscriptions = [];
    }
    return (
      (r.prototype.add = function (e) {
        var t = this;
        return (
          Is(this.subscriptions, e),
          function () {
            return Rs(t.subscriptions, e);
          }
        );
      }),
      (r.prototype.notify = function (e, t, a) {
        var i = this.subscriptions.length;
        if (i)
          if (i === 1) this.subscriptions[0](e, t, a);
          else
            for (var s = 0; s < i; s++) {
              var n = this.subscriptions[s];
              n && n(e, t, a);
            }
      }),
      (r.prototype.getSize = function () {
        return this.subscriptions.length;
      }),
      (r.prototype.clear = function () {
        this.subscriptions.length = 0;
      }),
      r
    );
  })(),
  Tf = function (r) {
    return !isNaN(parseFloat(r));
  },
  Pf = (function () {
    function r(e) {
      var t = this;
      (this.version = "6.5.1"),
        (this.timeDelta = 0),
        (this.lastUpdated = 0),
        (this.updateSubscribers = new wa()),
        (this.velocityUpdateSubscribers = new wa()),
        (this.renderSubscribers = new wa()),
        (this.canTrackVelocity = !1),
        (this.updateAndNotify = function (a, i) {
          i === void 0 && (i = !0), (t.prev = t.current), (t.current = a);
          var s = Ci(),
            n = s.delta,
            o = s.timestamp;
          t.lastUpdated !== o &&
            ((t.timeDelta = n),
            (t.lastUpdated = o),
            et.postRender(t.scheduleVelocityCheck)),
            t.prev !== t.current && t.updateSubscribers.notify(t.current),
            t.velocityUpdateSubscribers.getSize() &&
              t.velocityUpdateSubscribers.notify(t.getVelocity()),
            i && t.renderSubscribers.notify(t.current);
        }),
        (this.scheduleVelocityCheck = function () {
          return et.postRender(t.velocityCheck);
        }),
        (this.velocityCheck = function (a) {
          var i = a.timestamp;
          i !== t.lastUpdated &&
            ((t.prev = t.current),
            t.velocityUpdateSubscribers.notify(t.getVelocity()));
        }),
        (this.hasAnimated = !1),
        (this.prev = this.current = e),
        (this.canTrackVelocity = Tf(this.current));
    }
    return (
      (r.prototype.onChange = function (e) {
        return this.updateSubscribers.add(e);
      }),
      (r.prototype.clearListeners = function () {
        this.updateSubscribers.clear();
      }),
      (r.prototype.onRenderRequest = function (e) {
        return e(this.get()), this.renderSubscribers.add(e);
      }),
      (r.prototype.attach = function (e) {
        this.passiveEffect = e;
      }),
      (r.prototype.set = function (e, t) {
        t === void 0 && (t = !0),
          !t || !this.passiveEffect
            ? this.updateAndNotify(e, t)
            : this.passiveEffect(e, this.updateAndNotify);
      }),
      (r.prototype.get = function () {
        return this.current;
      }),
      (r.prototype.getPrevious = function () {
        return this.prev;
      }),
      (r.prototype.getVelocity = function () {
        return this.canTrackVelocity
          ? El(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta)
          : 0;
      }),
      (r.prototype.start = function (e) {
        var t = this;
        return (
          this.stop(),
          new Promise(function (a) {
            (t.hasAnimated = !0), (t.stopAnimation = e(a));
          }).then(function () {
            return t.clearAnimation();
          })
        );
      }),
      (r.prototype.stop = function () {
        this.stopAnimation && this.stopAnimation(), this.clearAnimation();
      }),
      (r.prototype.isAnimating = function () {
        return !!this.stopAnimation;
      }),
      (r.prototype.clearAnimation = function () {
        this.stopAnimation = null;
      }),
      (r.prototype.destroy = function () {
        this.updateSubscribers.clear(),
          this.renderSubscribers.clear(),
          this.stop();
      }),
      r
    );
  })();
function ta(r) {
  return new Pf(r);
}
var zl = function (r) {
    return function (e) {
      return e.test(r);
    };
  },
  Lf = {
    test: function (r) {
      return r === "auto";
    },
    parse: function (r) {
      return r;
    },
  },
  Hl = [Bt, ee, it, mt, gd, fd, Lf],
  ga = function (r) {
    return Hl.find(zl(r));
  },
  Mf = Je(Je([], Ae(Hl), !1), [Ne, ht], !1),
  Ef = function (r) {
    return Mf.find(zl(r));
  };
function If(r, e, t) {
  r.hasValue(e) ? r.getValue(e).set(t) : r.addValue(e, ta(t));
}
function Rf(r, e) {
  var t = Ni(r, e),
    a = t ? r.makeTargetAnimatable(t, !1) : {},
    i = a.transitionEnd,
    s = i === void 0 ? {} : i;
  a.transition;
  var n = Ue(a, ["transitionEnd", "transition"]);
  n = W(W({}, n), s);
  for (var o in n) {
    var l = nl(n[o]);
    If(r, o, l);
  }
}
function _f(r, e, t) {
  var a,
    i,
    s,
    n,
    o = Object.keys(e).filter(function (f) {
      return !r.hasValue(f);
    }),
    l = o.length;
  if (l)
    for (var c = 0; c < l; c++) {
      var h = o[c],
        d = e[h],
        u = null;
      Array.isArray(d) && (u = d[0]),
        u === null &&
          (u =
            (i = (a = t[h]) !== null && a !== void 0 ? a : r.readValue(h)) !==
              null && i !== void 0
              ? i
              : e[h]),
        u != null &&
          (typeof u == "string" && (Cf(u) || Sf(u))
            ? (u = parseFloat(u))
            : !Ef(u) && ht.test(d) && (u = Ls(h, d)),
          r.addValue(h, ta(u)),
          ((s = (n = t)[h]) !== null && s !== void 0) || (n[h] = u),
          r.setBaseTarget(h, u));
    }
}
function Of(r, e) {
  if (e) {
    var t = e[r] || e.default || e;
    return t.from;
  }
}
function Nf(r, e, t) {
  var a,
    i,
    s = {};
  for (var n in r)
    s[n] =
      (a = Of(n, e)) !== null && a !== void 0
        ? a
        : (i = t.getValue(n)) === null || i === void 0
        ? void 0
        : i.get();
  return s;
}
function jf(r, e, t) {
  t === void 0 && (t = {}), r.notifyAnimationStart(e);
  var a;
  if (Array.isArray(e)) {
    var i = e.map(function (n) {
      return Nr(r, n, t);
    });
    a = Promise.all(i);
  } else if (typeof e == "string") a = Nr(r, e, t);
  else {
    var s = typeof e == "function" ? Ni(r, e, t.custom) : e;
    a = Xl(r, s, t);
  }
  return a.then(function () {
    return r.notifyAnimationComplete(e);
  });
}
function Nr(r, e, t) {
  var a;
  t === void 0 && (t = {});
  var i = Ni(r, e, t.custom),
    s = (i || {}).transition,
    n = s === void 0 ? r.getDefaultTransition() || {} : s;
  t.transitionOverride && (n = t.transitionOverride);
  var o = i
      ? function () {
          return Xl(r, i, t);
        }
      : function () {
          return Promise.resolve();
        },
    l =
      !((a = r.variantChildren) === null || a === void 0) && a.size
        ? function (f) {
            f === void 0 && (f = 0);
            var g = n.delayChildren,
              p = g === void 0 ? 0 : g,
              m = n.staggerChildren,
              x = n.staggerDirection;
            return Ff(r, e, p + f, m, x, t);
          }
        : function () {
            return Promise.resolve();
          },
    c = n.when;
  if (c) {
    var h = Ae(c === "beforeChildren" ? [o, l] : [l, o], 2),
      d = h[0],
      u = h[1];
    return d().then(u);
  } else return Promise.all([o(), l(t.delay)]);
}
function Xl(r, e, t) {
  var a,
    i = t === void 0 ? {} : t,
    s = i.delay,
    n = s === void 0 ? 0 : s,
    o = i.transitionOverride,
    l = i.type,
    c = r.makeTargetAnimatable(e),
    h = c.transition,
    d = h === void 0 ? r.getDefaultTransition() : h,
    u = c.transitionEnd,
    f = Ue(c, ["transition", "transitionEnd"]);
  o && (d = o);
  var g = [],
    p =
      l &&
      ((a = r.animationState) === null || a === void 0
        ? void 0
        : a.getState()[l]);
  for (var m in f) {
    var x = r.getValue(m),
      v = f[m];
    if (!(!x || v === void 0 || (p && zf(p, m)))) {
      var b = W({ delay: n }, d);
      r.shouldReduceMotion &&
        Ba(m) &&
        (b = W(W({}, b), { type: !1, delay: 0 }));
      var k = Es(m, x, v, b);
      g.push(k);
    }
  }
  return Promise.all(g).then(function () {
    u && Rf(r, u);
  });
}
function Ff(r, e, t, a, i, s) {
  t === void 0 && (t = 0), a === void 0 && (a = 0), i === void 0 && (i = 1);
  var n = [],
    o = (r.variantChildren.size - 1) * a,
    l =
      i === 1
        ? function (c) {
            return c === void 0 && (c = 0), c * a;
          }
        : function (c) {
            return c === void 0 && (c = 0), o - c * a;
          };
  return (
    Array.from(r.variantChildren)
      .sort(Df)
      .forEach(function (c, h) {
        n.push(
          Nr(c, e, W(W({}, s), { delay: t + l(h) })).then(function () {
            return c.notifyAnimationComplete(e);
          })
        );
      }),
    Promise.all(n)
  );
}
function Df(r, e) {
  return r.sortNodePosition(e);
}
function zf(r, e) {
  var t = r.protectedKeys,
    a = r.needsAnimating,
    i = t.hasOwnProperty(e) && a[e] !== !0;
  return (a[e] = !1), i;
}
var _s = [be.Animate, be.InView, be.Focus, be.Hover, be.Tap, be.Drag, be.Exit],
  Hf = Je([], Ae(_s), !1).reverse(),
  Xf = _s.length;
function Bf(r) {
  return function (e) {
    return Promise.all(
      e.map(function (t) {
        var a = t.animation,
          i = t.options;
        return jf(r, a, i);
      })
    );
  };
}
function Yf(r) {
  var e = Bf(r),
    t = Vf(),
    a = {},
    i = !0,
    s = function (h, d) {
      var u = Ni(r, d);
      if (u) {
        u.transition;
        var f = u.transitionEnd,
          g = Ue(u, ["transition", "transitionEnd"]);
        h = W(W(W({}, h), g), f);
      }
      return h;
    };
  function n(h) {
    return a[h] !== void 0;
  }
  function o(h) {
    e = h(r);
  }
  function l(h, d) {
    for (
      var u,
        f = r.getProps(),
        g = r.getVariantContext(!0) || {},
        p = [],
        m = new Set(),
        x = {},
        v = 1 / 0,
        b = function (A) {
          var S = Hf[A],
            T = t[S],
            E = (u = f[S]) !== null && u !== void 0 ? u : g[S],
            L = Ze(E),
            I = S === d ? T.isActive : null;
          I === !1 && (v = A);
          var M = E === g[S] && E !== f[S] && L;
          if (
            (M && i && r.manuallyAnimateOnMount && (M = !1),
            (T.protectedKeys = W({}, x)),
            (!T.isActive && I === null) ||
              (!E && !T.prevProp) ||
              vs(E) ||
              typeof E == "boolean")
          )
            return "continue";
          var O = Wf(T.prevProp, E),
            N = O || (S === d && T.isActive && !M && L) || (A > v && L),
            F = Array.isArray(E) ? E : [E],
            D = F.reduce(s, {});
          I === !1 && (D = {});
          var B = T.prevResolvedValues,
            z = B === void 0 ? {} : B,
            G = W(W({}, z), D),
            V = function (q) {
              (N = !0), m.delete(q), (T.needsAnimating[q] = !0);
            };
          for (var Q in G) {
            var Z = D[Q],
              X = z[Q];
            x.hasOwnProperty(Q) ||
              (Z !== X
                ? Ma(Z) && Ma(X)
                  ? !Dl(Z, X) || O
                    ? V(Q)
                    : (T.protectedKeys[Q] = !0)
                  : Z !== void 0
                  ? V(Q)
                  : m.add(Q)
                : Z !== void 0 && m.has(Q)
                ? V(Q)
                : (T.protectedKeys[Q] = !0));
          }
          (T.prevProp = E),
            (T.prevResolvedValues = D),
            T.isActive && (x = W(W({}, x), D)),
            i && r.blockInitialAnimation && (N = !1),
            N &&
              !M &&
              p.push.apply(
                p,
                Je(
                  [],
                  Ae(
                    F.map(function (q) {
                      return { animation: q, options: W({ type: S }, h) };
                    })
                  ),
                  !1
                )
              );
        },
        k = 0;
      k < Xf;
      k++
    )
      b(k);
    if (((a = W({}, x)), m.size)) {
      var y = {};
      m.forEach(function (A) {
        var S = r.getBaseTarget(A);
        S !== void 0 && (y[A] = S);
      }),
        p.push({ animation: y });
    }
    var C = !!p.length;
    return (
      i && f.initial === !1 && !r.manuallyAnimateOnMount && (C = !1),
      (i = !1),
      C ? e(p) : Promise.resolve()
    );
  }
  function c(h, d, u) {
    var f;
    if (t[h].isActive === d) return Promise.resolve();
    (f = r.variantChildren) === null ||
      f === void 0 ||
      f.forEach(function (m) {
        var x;
        return (x = m.animationState) === null || x === void 0
          ? void 0
          : x.setActive(h, d);
      }),
      (t[h].isActive = d);
    var g = l(u, h);
    for (var p in t) t[p].protectedKeys = {};
    return g;
  }
  return {
    isAnimated: n,
    animateChanges: l,
    setActive: c,
    setAnimateFunction: o,
    getState: function () {
      return t;
    },
  };
}
function Wf(r, e) {
  return typeof e == "string" ? e !== r : Fo(e) ? !Dl(e, r) : !1;
}
function Mt(r) {
  return (
    r === void 0 && (r = !1),
    {
      isActive: r,
      protectedKeys: {},
      needsAnimating: {},
      prevResolvedValues: {},
    }
  );
}
function Vf() {
  var r;
  return (
    (r = {}),
    (r[be.Animate] = Mt(!0)),
    (r[be.InView] = Mt()),
    (r[be.Hover] = Mt()),
    (r[be.Tap] = Mt()),
    (r[be.Drag] = Mt()),
    (r[be.Focus] = Mt()),
    (r[be.Exit] = Mt()),
    r
  );
}
var Gf = {
    animation: wt(function (r) {
      var e = r.visualElement,
        t = r.animate;
      e.animationState || (e.animationState = Yf(e)),
        vs(t) &&
          P.useEffect(
            function () {
              return t.subscribe(e);
            },
            [t]
          );
    }),
    exit: wt(function (r) {
      var e = r.custom,
        t = r.visualElement,
        a = Ae(Fl(), 2),
        i = a[0],
        s = a[1],
        n = P.useContext(Ha);
      P.useEffect(
        function () {
          var o, l;
          t.isPresent = i;
          var c =
            (o = t.animationState) === null || o === void 0
              ? void 0
              : o.setActive(be.Exit, !i, {
                  custom:
                    (l = n == null ? void 0 : n.custom) !== null && l !== void 0
                      ? l
                      : e,
                });
          !i && (c == null || c.then(s));
        },
        [i]
      );
    }),
  },
  Bl = (function () {
    function r(e, t, a) {
      var i = this,
        s = a === void 0 ? {} : a,
        n = s.transformPagePoint;
      if (
        ((this.startEvent = null),
        (this.lastMoveEvent = null),
        (this.lastMoveEventInfo = null),
        (this.handlers = {}),
        (this.updatePoint = function () {
          if (i.lastMoveEvent && i.lastMoveEventInfo) {
            var u = er(i.lastMoveEventInfo, i.history),
              f = i.startEvent !== null,
              g = Il(u.offset, { x: 0, y: 0 }) >= 3;
            if (!(!f && !g)) {
              var p = u.point,
                m = Ci().timestamp;
              i.history.push(W(W({}, p), { timestamp: m }));
              var x = i.handlers,
                v = x.onStart,
                b = x.onMove;
              f ||
                (v && v(i.lastMoveEvent, u), (i.startEvent = i.lastMoveEvent)),
                b && b(i.lastMoveEvent, u);
            }
          }
        }),
        (this.handlePointerMove = function (u, f) {
          if (
            ((i.lastMoveEvent = u),
            (i.lastMoveEventInfo = Ji(f, i.transformPagePoint)),
            ll(u) && u.buttons === 0)
          ) {
            i.handlePointerUp(u, f);
            return;
          }
          et.update(i.updatePoint, !0);
        }),
        (this.handlePointerUp = function (u, f) {
          i.end();
          var g = i.handlers,
            p = g.onEnd,
            m = g.onSessionEnd,
            x = er(Ji(f, i.transformPagePoint), i.history);
          i.startEvent && p && p(u, x), m && m(u, x);
        }),
        !(cl(e) && e.touches.length > 1))
      ) {
        (this.handlers = t), (this.transformPagePoint = n);
        var o = bs(e),
          l = Ji(o, this.transformPagePoint),
          c = l.point,
          h = Ci().timestamp;
        this.history = [W(W({}, c), { timestamp: h })];
        var d = t.onSessionStart;
        d && d(e, er(l, this.history)),
          (this.removeListeners = Di(
            Kt(window, "pointermove", this.handlePointerMove),
            Kt(window, "pointerup", this.handlePointerUp),
            Kt(window, "pointercancel", this.handlePointerUp)
          ));
      }
    }
    return (
      (r.prototype.updateHandlers = function (e) {
        this.handlers = e;
      }),
      (r.prototype.end = function () {
        this.removeListeners && this.removeListeners(),
          ea.update(this.updatePoint);
      }),
      r
    );
  })();
function Ji(r, e) {
  return e ? { point: e(r.point) } : r;
}
function kn(r, e) {
  return { x: r.x - e.x, y: r.y - e.y };
}
function er(r, e) {
  var t = r.point;
  return {
    point: t,
    delta: kn(t, Yl(e)),
    offset: kn(t, Uf(e)),
    velocity: $f(e, 0.1),
  };
}
function Uf(r) {
  return r[0];
}
function Yl(r) {
  return r[r.length - 1];
}
function $f(r, e) {
  if (r.length < 2) return { x: 0, y: 0 };
  for (
    var t = r.length - 1, a = null, i = Yl(r);
    t >= 0 && ((a = r[t]), !(i.timestamp - a.timestamp > Ti(e)));

  )
    t--;
  if (!a) return { x: 0, y: 0 };
  var s = (i.timestamp - a.timestamp) / 1e3;
  if (s === 0) return { x: 0, y: 0 };
  var n = { x: (i.x - a.x) / s, y: (i.y - a.y) / s };
  return n.x === 1 / 0 && (n.x = 0), n.y === 1 / 0 && (n.y = 0), n;
}
function dt(r) {
  return r.max - r.min;
}
function An(r, e, t) {
  return e === void 0 && (e = 0), t === void 0 && (t = 0.01), Il(r, e) < t;
}
function Cn(r, e, t, a) {
  a === void 0 && (a = 0.5),
    (r.origin = a),
    (r.originPoint = ye(e.min, e.max, r.origin)),
    (r.scale = dt(t) / dt(e)),
    (An(r.scale, 1, 1e-4) || isNaN(r.scale)) && (r.scale = 1),
    (r.translate = ye(t.min, t.max, r.origin) - r.originPoint),
    (An(r.translate) || isNaN(r.translate)) && (r.translate = 0);
}
function ka(r, e, t, a) {
  Cn(r.x, e.x, t.x, a == null ? void 0 : a.originX),
    Cn(r.y, e.y, t.y, a == null ? void 0 : a.originY);
}
function Sn(r, e, t) {
  (r.min = t.min + e.min), (r.max = r.min + dt(e));
}
function qf(r, e, t) {
  Sn(r.x, e.x, t.x), Sn(r.y, e.y, t.y);
}
function Tn(r, e, t) {
  (r.min = e.min - t.min), (r.max = r.min + dt(e));
}
function Aa(r, e, t) {
  Tn(r.x, e.x, t.x), Tn(r.y, e.y, t.y);
}
function Zf(r, e, t) {
  var a = e.min,
    i = e.max;
  return (
    a !== void 0 && r < a
      ? (r = t ? ye(a, r, t.min) : Math.max(r, a))
      : i !== void 0 && r > i && (r = t ? ye(i, r, t.max) : Math.min(r, i)),
    r
  );
}
function Pn(r, e, t) {
  return {
    min: e !== void 0 ? r.min + e : void 0,
    max: t !== void 0 ? r.max + t - (r.max - r.min) : void 0,
  };
}
function Kf(r, e) {
  var t = e.top,
    a = e.left,
    i = e.bottom,
    s = e.right;
  return { x: Pn(r.x, a, s), y: Pn(r.y, t, i) };
}
function Ln(r, e) {
  var t,
    a = e.min - r.min,
    i = e.max - r.max;
  return (
    e.max - e.min < r.max - r.min &&
      ((t = Ae([i, a], 2)), (a = t[0]), (i = t[1])),
    { min: a, max: i }
  );
}
function Qf(r, e) {
  return { x: Ln(r.x, e.x), y: Ln(r.y, e.y) };
}
function Jf(r, e) {
  var t = 0.5,
    a = dt(r),
    i = dt(e);
  return (
    i > a
      ? (t = Ea(e.min, e.max - a, r.min))
      : a > i && (t = Ea(r.min, r.max - i, e.min)),
    ki(0, 1, t)
  );
}
function eg(r, e) {
  var t = {};
  return (
    e.min !== void 0 && (t.min = e.min - r.min),
    e.max !== void 0 && (t.max = e.max - r.min),
    t
  );
}
var jr = 0.35;
function tg(r) {
  return (
    r === void 0 && (r = jr),
    r === !1 ? (r = 0) : r === !0 && (r = jr),
    { x: Mn(r, "left", "right"), y: Mn(r, "top", "bottom") }
  );
}
function Mn(r, e, t) {
  return { min: En(r, e), max: En(r, t) };
}
function En(r, e) {
  var t;
  return typeof r == "number" ? r : (t = r[e]) !== null && t !== void 0 ? t : 0;
}
var In = function () {
    return { translate: 0, scale: 1, origin: 0, originPoint: 0 };
  },
  Ca = function () {
    return { x: In(), y: In() };
  },
  Rn = function () {
    return { min: 0, max: 0 };
  },
  _e = function () {
    return { x: Rn(), y: Rn() };
  };
function at(r) {
  return [r("x"), r("y")];
}
function Wl(r) {
  var e = r.top,
    t = r.left,
    a = r.right,
    i = r.bottom;
  return { x: { min: t, max: a }, y: { min: e, max: i } };
}
function ag(r) {
  var e = r.x,
    t = r.y;
  return { top: t.min, right: e.max, bottom: t.max, left: e.min };
}
function ig(r, e) {
  if (!e) return r;
  var t = e({ x: r.left, y: r.top }),
    a = e({ x: r.right, y: r.bottom });
  return { top: t.y, left: t.x, bottom: a.y, right: a.x };
}
function tr(r) {
  return r === void 0 || r === 1;
}
function Vl(r) {
  var e = r.scale,
    t = r.scaleX,
    a = r.scaleY;
  return !tr(e) || !tr(t) || !tr(a);
}
function xt(r) {
  return (
    Vl(r) || _n(r.x) || _n(r.y) || r.z || r.rotate || r.rotateX || r.rotateY
  );
}
function _n(r) {
  return r && r !== "0%";
}
function Pi(r, e, t) {
  var a = r - t,
    i = e * a;
  return t + i;
}
function On(r, e, t, a, i) {
  return i !== void 0 && (r = Pi(r, i, a)), Pi(r, t, a) + e;
}
function Fr(r, e, t, a, i) {
  e === void 0 && (e = 0),
    t === void 0 && (t = 1),
    (r.min = On(r.min, e, t, a, i)),
    (r.max = On(r.max, e, t, a, i));
}
function Gl(r, e) {
  var t = e.x,
    a = e.y;
  Fr(r.x, t.translate, t.scale, t.originPoint),
    Fr(r.y, a.translate, a.scale, a.originPoint);
}
function rg(r, e, t, a) {
  var i, s;
  a === void 0 && (a = !1);
  var n = t.length;
  if (n) {
    e.x = e.y = 1;
    for (var o, l, c = 0; c < n; c++)
      (o = t[c]),
        (l = o.projectionDelta),
        ((s = (i = o.instance) === null || i === void 0 ? void 0 : i.style) ===
          null || s === void 0
          ? void 0
          : s.display) !== "contents" &&
          (a &&
            o.options.layoutScroll &&
            o.scroll &&
            o !== o.root &&
            qt(r, { x: -o.scroll.x, y: -o.scroll.y }),
          l && ((e.x *= l.x.scale), (e.y *= l.y.scale), Gl(r, l)),
          a && xt(o.latestValues) && qt(r, o.latestValues));
  }
}
function vt(r, e) {
  (r.min = r.min + e), (r.max = r.max + e);
}
function Nn(r, e, t) {
  var a = Ae(t, 3),
    i = a[0],
    s = a[1],
    n = a[2],
    o = e[n] !== void 0 ? e[n] : 0.5,
    l = ye(r.min, r.max, o);
  Fr(r, e[i], e[s], l, e.scale);
}
var sg = ["x", "scaleX", "originX"],
  ng = ["y", "scaleY", "originY"];
function qt(r, e) {
  Nn(r.x, e, sg), Nn(r.y, e, ng);
}
function Ul(r, e) {
  return Wl(ig(r.getBoundingClientRect(), e));
}
function og(r, e, t) {
  var a = Ul(r, t),
    i = e.scroll;
  return i && (vt(a.x, i.x), vt(a.y, i.y)), a;
}
var lg = new WeakMap(),
  cg = (function () {
    function r(e) {
      (this.openGlobalLock = null),
        (this.isDragging = !1),
        (this.currentDirection = null),
        (this.originPoint = { x: 0, y: 0 }),
        (this.constraints = !1),
        (this.hasMutatedConstraints = !1),
        (this.elastic = _e()),
        (this.visualElement = e);
    }
    return (
      (r.prototype.start = function (e, t) {
        var a = this,
          i = t === void 0 ? {} : t,
          s = i.snapToCursor,
          n = s === void 0 ? !1 : s;
        if (this.visualElement.isPresent !== !1) {
          var o = function (d) {
              a.stopAnimation(), n && a.snapToCursor(bs(d, "page").point);
            },
            l = function (d, u) {
              var f,
                g = a.getProps(),
                p = g.drag,
                m = g.dragPropagation,
                x = g.onDragStart;
              (p &&
                !m &&
                (a.openGlobalLock && a.openGlobalLock(),
                (a.openGlobalLock = fl(p)),
                !a.openGlobalLock)) ||
                ((a.isDragging = !0),
                (a.currentDirection = null),
                a.resolveConstraints(),
                a.visualElement.projection &&
                  ((a.visualElement.projection.isAnimationBlocked = !0),
                  (a.visualElement.projection.target = void 0)),
                at(function (v) {
                  var b,
                    k,
                    y = a.getAxisMotionValue(v).get() || 0;
                  if (it.test(y)) {
                    var C =
                      (k =
                        (b = a.visualElement.projection) === null ||
                        b === void 0
                          ? void 0
                          : b.layout) === null || k === void 0
                        ? void 0
                        : k.actual[v];
                    if (C) {
                      var A = dt(C);
                      y = A * (parseFloat(y) / 100);
                    }
                  }
                  a.originPoint[v] = y;
                }),
                x == null || x(d, u),
                (f = a.visualElement.animationState) === null ||
                  f === void 0 ||
                  f.setActive(be.Drag, !0));
            },
            c = function (d, u) {
              var f = a.getProps(),
                g = f.dragPropagation,
                p = f.dragDirectionLock,
                m = f.onDirectionLock,
                x = f.onDrag;
              if (!(!g && !a.openGlobalLock)) {
                var v = u.offset;
                if (p && a.currentDirection === null) {
                  (a.currentDirection = hg(v)),
                    a.currentDirection !== null &&
                      (m == null || m(a.currentDirection));
                  return;
                }
                a.updateAxis("x", u.point, v),
                  a.updateAxis("y", u.point, v),
                  a.visualElement.syncRender(),
                  x == null || x(d, u);
              }
            },
            h = function (d, u) {
              return a.stop(d, u);
            };
          this.panSession = new Bl(
            e,
            { onSessionStart: o, onStart: l, onMove: c, onSessionEnd: h },
            { transformPagePoint: this.visualElement.getTransformPagePoint() }
          );
        }
      }),
      (r.prototype.stop = function (e, t) {
        var a = this.isDragging;
        if ((this.cancel(), !!a)) {
          var i = t.velocity;
          this.startAnimation(i);
          var s = this.getProps().onDragEnd;
          s == null || s(e, t);
        }
      }),
      (r.prototype.cancel = function () {
        var e, t;
        (this.isDragging = !1),
          this.visualElement.projection &&
            (this.visualElement.projection.isAnimationBlocked = !1),
          (e = this.panSession) === null || e === void 0 || e.end(),
          (this.panSession = void 0);
        var a = this.getProps().dragPropagation;
        !a &&
          this.openGlobalLock &&
          (this.openGlobalLock(), (this.openGlobalLock = null)),
          (t = this.visualElement.animationState) === null ||
            t === void 0 ||
            t.setActive(be.Drag, !1);
      }),
      (r.prototype.updateAxis = function (e, t, a) {
        var i = this.getProps().drag;
        if (!(!a || !ri(e, i, this.currentDirection))) {
          var s = this.getAxisMotionValue(e),
            n = this.originPoint[e] + a[e];
          this.constraints &&
            this.constraints[e] &&
            (n = Zf(n, this.constraints[e], this.elastic[e])),
            s.set(n);
        }
      }),
      (r.prototype.resolveConstraints = function () {
        var e = this,
          t = this.getProps(),
          a = t.dragConstraints,
          i = t.dragElastic,
          s = (this.visualElement.projection || {}).layout,
          n = this.constraints;
        a && $t(a)
          ? this.constraints ||
            (this.constraints = this.resolveRefConstraints())
          : a && s
          ? (this.constraints = Kf(s.actual, a))
          : (this.constraints = !1),
          (this.elastic = tg(i)),
          n !== this.constraints &&
            s &&
            this.constraints &&
            !this.hasMutatedConstraints &&
            at(function (o) {
              e.getAxisMotionValue(o) &&
                (e.constraints[o] = eg(s.actual[o], e.constraints[o]));
            });
      }),
      (r.prototype.resolveRefConstraints = function () {
        var e = this.getProps(),
          t = e.dragConstraints,
          a = e.onMeasureDragConstraints;
        if (!t || !$t(t)) return !1;
        var i = t.current,
          s = this.visualElement.projection;
        if (!s || !s.layout) return !1;
        var n = og(i, s.root, this.visualElement.getTransformPagePoint()),
          o = Qf(s.layout.actual, n);
        if (a) {
          var l = a(ag(o));
          (this.hasMutatedConstraints = !!l), l && (o = Wl(l));
        }
        return o;
      }),
      (r.prototype.startAnimation = function (e) {
        var t = this,
          a = this.getProps(),
          i = a.drag,
          s = a.dragMomentum,
          n = a.dragElastic,
          o = a.dragTransition,
          l = a.dragSnapToOrigin,
          c = a.onDragTransitionEnd,
          h = this.constraints || {},
          d = at(function (u) {
            var f;
            if (ri(u, i, t.currentDirection)) {
              var g =
                (f = h == null ? void 0 : h[u]) !== null && f !== void 0
                  ? f
                  : {};
              l && (g = { min: 0, max: 0 });
              var p = n ? 200 : 1e6,
                m = n ? 40 : 1e7,
                x = W(
                  W(
                    {
                      type: "inertia",
                      velocity: s ? e[u] : 0,
                      bounceStiffness: p,
                      bounceDamping: m,
                      timeConstant: 750,
                      restDelta: 1,
                      restSpeed: 10,
                    },
                    o
                  ),
                  g
                );
              return t.startAxisValueAnimation(u, x);
            }
          });
        return Promise.all(d).then(c);
      }),
      (r.prototype.startAxisValueAnimation = function (e, t) {
        var a = this.getAxisMotionValue(e);
        return Es(e, a, 0, t);
      }),
      (r.prototype.stopAnimation = function () {
        var e = this;
        at(function (t) {
          return e.getAxisMotionValue(t).stop();
        });
      }),
      (r.prototype.getAxisMotionValue = function (e) {
        var t,
          a,
          i = "_drag" + e.toUpperCase(),
          s = this.visualElement.getProps()[i];
        return (
          s ||
          this.visualElement.getValue(
            e,
            (a =
              (t = this.visualElement.getProps().initial) === null ||
              t === void 0
                ? void 0
                : t[e]) !== null && a !== void 0
              ? a
              : 0
          )
        );
      }),
      (r.prototype.snapToCursor = function (e) {
        var t = this;
        at(function (a) {
          var i = t.getProps().drag;
          if (ri(a, i, t.currentDirection)) {
            var s = t.visualElement.projection,
              n = t.getAxisMotionValue(a);
            if (s && s.layout) {
              var o = s.layout.actual[a],
                l = o.min,
                c = o.max;
              n.set(e[a] - ye(l, c, 0.5));
            }
          }
        });
      }),
      (r.prototype.scalePositionWithinConstraints = function () {
        var e = this,
          t,
          a = this.getProps(),
          i = a.drag,
          s = a.dragConstraints,
          n = this.visualElement.projection;
        if (!(!$t(s) || !n || !this.constraints)) {
          this.stopAnimation();
          var o = { x: 0, y: 0 };
          at(function (c) {
            var h = e.getAxisMotionValue(c);
            if (h) {
              var d = h.get();
              o[c] = Jf({ min: d, max: d }, e.constraints[c]);
            }
          });
          var l = this.visualElement.getProps().transformTemplate;
          (this.visualElement.getInstance().style.transform = l
            ? l({}, "")
            : "none"),
            (t = n.root) === null || t === void 0 || t.updateScroll(),
            n.updateLayout(),
            this.resolveConstraints(),
            at(function (c) {
              if (ri(c, i, null)) {
                var h = e.getAxisMotionValue(c),
                  d = e.constraints[c],
                  u = d.min,
                  f = d.max;
                h.set(ye(u, f, o[c]));
              }
            });
        }
      }),
      (r.prototype.addListeners = function () {
        var e = this,
          t;
        lg.set(this.visualElement, this);
        var a = this.visualElement.getInstance(),
          i = Kt(a, "pointerdown", function (c) {
            var h = e.getProps(),
              d = h.drag,
              u = h.dragListener,
              f = u === void 0 ? !0 : u;
            d && f && e.start(c);
          }),
          s = function () {
            var c = e.getProps().dragConstraints;
            $t(c) && (e.constraints = e.resolveRefConstraints());
          },
          n = this.visualElement.projection,
          o = n.addEventListener("measure", s);
        n &&
          !n.layout &&
          ((t = n.root) === null || t === void 0 || t.updateScroll(),
          n.updateLayout()),
          s();
        var l = Fi(window, "resize", function () {
          return e.scalePositionWithinConstraints();
        });
        return (
          n.addEventListener("didUpdate", function (c) {
            var h = c.delta,
              d = c.hasLayoutChanged;
            e.isDragging &&
              d &&
              (at(function (u) {
                var f = e.getAxisMotionValue(u);
                f &&
                  ((e.originPoint[u] += h[u].translate),
                  f.set(f.get() + h[u].translate));
              }),
              e.visualElement.syncRender());
          }),
          function () {
            l(), i(), o();
          }
        );
      }),
      (r.prototype.getProps = function () {
        var e = this.visualElement.getProps(),
          t = e.drag,
          a = t === void 0 ? !1 : t,
          i = e.dragDirectionLock,
          s = i === void 0 ? !1 : i,
          n = e.dragPropagation,
          o = n === void 0 ? !1 : n,
          l = e.dragConstraints,
          c = l === void 0 ? !1 : l,
          h = e.dragElastic,
          d = h === void 0 ? jr : h,
          u = e.dragMomentum,
          f = u === void 0 ? !0 : u;
        return W(W({}, e), {
          drag: a,
          dragDirectionLock: s,
          dragPropagation: o,
          dragConstraints: c,
          dragElastic: d,
          dragMomentum: f,
        });
      }),
      r
    );
  })();
function ri(r, e, t) {
  return (e === !0 || e === r) && (t === null || t === r);
}
function hg(r, e) {
  e === void 0 && (e = 10);
  var t = null;
  return Math.abs(r.y) > e ? (t = "y") : Math.abs(r.x) > e && (t = "x"), t;
}
function dg(r) {
  var e = r.dragControls,
    t = r.visualElement,
    a = Xa(function () {
      return new cg(t);
    });
  P.useEffect(
    function () {
      return e && e.subscribe(a);
    },
    [a, e]
  ),
    P.useEffect(
      function () {
        return a.addListeners();
      },
      [a]
    );
}
function ug(r) {
  var e = r.onPan,
    t = r.onPanStart,
    a = r.onPanEnd,
    i = r.onPanSessionStart,
    s = r.visualElement,
    n = e || t || a || i,
    o = P.useRef(null),
    l = P.useContext(hs).transformPagePoint,
    c = {
      onSessionStart: i,
      onStart: t,
      onMove: e,
      onEnd: function (d, u) {
        (o.current = null), a && a(d, u);
      },
    };
  P.useEffect(function () {
    o.current !== null && o.current.updateHandlers(c);
  });
  function h(d) {
    o.current = new Bl(d, c, { transformPagePoint: l });
  }
  wi(s, "pointerdown", n && h),
    ys(function () {
      return o.current && o.current.end();
    });
}
var fg = { pan: wt(ug), drag: wt(dg) },
  si = [
    "LayoutMeasure",
    "BeforeLayoutMeasure",
    "LayoutUpdate",
    "ViewportBoxUpdate",
    "Update",
    "Render",
    "AnimationComplete",
    "LayoutAnimationComplete",
    "AnimationStart",
    "LayoutAnimationStart",
    "SetAxisTarget",
    "Unmount",
  ];
function gg() {
  var r = si.map(function () {
      return new wa();
    }),
    e = {},
    t = {
      clearAllListeners: function () {
        return r.forEach(function (a) {
          return a.clear();
        });
      },
      updatePropListeners: function (a) {
        si.forEach(function (i) {
          var s,
            n = "on" + i,
            o = a[n];
          (s = e[i]) === null || s === void 0 || s.call(e),
            o && (e[i] = t[n](o));
        });
      },
    };
  return (
    r.forEach(function (a, i) {
      (t["on" + si[i]] = function (s) {
        return a.add(s);
      }),
        (t["notify" + si[i]] = function () {
          for (var s = [], n = 0; n < arguments.length; n++)
            s[n] = arguments[n];
          return a.notify.apply(a, Je([], Ae(s), !1));
        });
    }),
    t
  );
}
function pg(r, e, t) {
  var a;
  for (var i in e) {
    var s = e[i],
      n = t[i];
    if (ct(s)) r.addValue(i, s);
    else if (ct(n)) r.addValue(i, ta(s));
    else if (n !== s)
      if (r.hasValue(i)) {
        var o = r.getValue(i);
        !o.hasAnimated && o.set(s);
      } else
        r.addValue(
          i,
          ta((a = r.getStaticValue(i)) !== null && a !== void 0 ? a : s)
        );
  }
  for (var i in t) e[i] === void 0 && r.removeValue(i);
  return e;
}
var $l = function (r) {
    var e = r.treeType,
      t = e === void 0 ? "" : e,
      a = r.build,
      i = r.getBaseTarget,
      s = r.makeTargetAnimatable,
      n = r.measureViewportBox,
      o = r.render,
      l = r.readValueFromInstance,
      c = r.removeValueFromRenderState,
      h = r.sortNodePosition,
      d = r.scrapeMotionValuesFromProps;
    return function (u, f) {
      var g = u.parent,
        p = u.props,
        m = u.presenceId,
        x = u.blockInitialAnimation,
        v = u.visualState,
        b = u.shouldReduceMotion;
      f === void 0 && (f = {});
      var k = !1,
        y = v.latestValues,
        C = v.renderState,
        A,
        S = gg(),
        T = new Map(),
        E = new Map(),
        L = {},
        I = W({}, y),
        M;
      function O() {
        !A || !k || (N(), o(A, C, p.style, Z.projection));
      }
      function N() {
        a(Z, C, y, f, p);
      }
      function F() {
        S.notifyUpdate(y);
      }
      function D(X, q) {
        var J = q.onChange(function (se) {
            (y[X] = se), p.onUpdate && et.update(F, !1, !0);
          }),
          te = q.onRenderRequest(Z.scheduleRender);
        E.set(X, function () {
          J(), te();
        });
      }
      var B = d(p);
      for (var z in B) {
        var G = B[z];
        y[z] !== void 0 && ct(G) && G.set(y[z], !1);
      }
      var V = ji(p),
        Q = zo(p),
        Z = W(
          W(
            {
              treeType: t,
              current: null,
              depth: g ? g.depth + 1 : 0,
              parent: g,
              children: new Set(),
              presenceId: m,
              shouldReduceMotion: b,
              variantChildren: Q ? new Set() : void 0,
              isVisible: void 0,
              manuallyAnimateOnMount: !!(g != null && g.isMounted()),
              blockInitialAnimation: x,
              isMounted: function () {
                return !!A;
              },
              mount: function (X) {
                (k = !0),
                  (A = Z.current = X),
                  Z.projection && Z.projection.mount(X),
                  Q &&
                    g &&
                    !V &&
                    (M = g == null ? void 0 : g.addVariantChild(Z)),
                  T.forEach(function (q, J) {
                    return D(J, q);
                  }),
                  g == null || g.children.add(Z),
                  Z.setProps(p);
              },
              unmount: function () {
                var X;
                (X = Z.projection) === null || X === void 0 || X.unmount(),
                  ea.update(F),
                  ea.render(O),
                  E.forEach(function (q) {
                    return q();
                  }),
                  M == null || M(),
                  g == null || g.children.delete(Z),
                  S.clearAllListeners(),
                  (A = void 0),
                  (k = !1);
              },
              addVariantChild: function (X) {
                var q,
                  J = Z.getClosestVariantNode();
                if (J)
                  return (
                    (q = J.variantChildren) === null ||
                      q === void 0 ||
                      q.add(X),
                    function () {
                      return J.variantChildren.delete(X);
                    }
                  );
              },
              sortNodePosition: function (X) {
                return !h || t !== X.treeType
                  ? 0
                  : h(Z.getInstance(), X.getInstance());
              },
              getClosestVariantNode: function () {
                return Q ? Z : g == null ? void 0 : g.getClosestVariantNode();
              },
              getLayoutId: function () {
                return p.layoutId;
              },
              getInstance: function () {
                return A;
              },
              getStaticValue: function (X) {
                return y[X];
              },
              setStaticValue: function (X, q) {
                return (y[X] = q);
              },
              getLatestValues: function () {
                return y;
              },
              setVisibility: function (X) {
                Z.isVisible !== X && ((Z.isVisible = X), Z.scheduleRender());
              },
              makeTargetAnimatable: function (X, q) {
                return q === void 0 && (q = !0), s(Z, X, p, q);
              },
              measureViewportBox: function () {
                return n(A, p);
              },
              addValue: function (X, q) {
                Z.hasValue(X) && Z.removeValue(X),
                  T.set(X, q),
                  (y[X] = q.get()),
                  D(X, q);
              },
              removeValue: function (X) {
                var q;
                T.delete(X),
                  (q = E.get(X)) === null || q === void 0 || q(),
                  E.delete(X),
                  delete y[X],
                  c(X, C);
              },
              hasValue: function (X) {
                return T.has(X);
              },
              getValue: function (X, q) {
                var J = T.get(X);
                return (
                  J === void 0 &&
                    q !== void 0 &&
                    ((J = ta(q)), Z.addValue(X, J)),
                  J
                );
              },
              forEachValue: function (X) {
                return T.forEach(X);
              },
              readValue: function (X) {
                var q;
                return (q = y[X]) !== null && q !== void 0 ? q : l(A, X, f);
              },
              setBaseTarget: function (X, q) {
                I[X] = q;
              },
              getBaseTarget: function (X) {
                if (i) {
                  var q = i(p, X);
                  if (q !== void 0 && !ct(q)) return q;
                }
                return I[X];
              },
            },
            S
          ),
          {
            build: function () {
              return N(), C;
            },
            scheduleRender: function () {
              et.render(O, !1, !0);
            },
            syncRender: O,
            setProps: function (X) {
              (X.transformTemplate || p.transformTemplate) &&
                Z.scheduleRender(),
                (p = X),
                S.updatePropListeners(X),
                (L = pg(Z, d(p), L));
            },
            getProps: function () {
              return p;
            },
            getVariant: function (X) {
              var q;
              return (q = p.variants) === null || q === void 0 ? void 0 : q[X];
            },
            getDefaultTransition: function () {
              return p.transition;
            },
            getTransformPagePoint: function () {
              return p.transformPagePoint;
            },
            getVariantContext: function (X) {
              if ((X === void 0 && (X = !1), X))
                return g == null ? void 0 : g.getVariantContext();
              if (!V) {
                var q = (g == null ? void 0 : g.getVariantContext()) || {};
                return p.initial !== void 0 && (q.initial = p.initial), q;
              }
              for (var J = {}, te = 0; te < mg; te++) {
                var se = ql[te],
                  xe = p[se];
                (Ze(xe) || xe === !1) && (J[se] = xe);
              }
              return J;
            },
          }
        );
      return Z;
    };
  },
  ql = Je(["initial"], Ae(_s), !1),
  mg = ql.length;
function Dr(r) {
  return typeof r == "string" && r.startsWith("var(--");
}
var Zl = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function xg(r) {
  var e = Zl.exec(r);
  if (!e) return [,];
  var t = Ae(e, 3),
    a = t[1],
    i = t[2];
  return [a, i];
}
function zr(r, e, t) {
  var a = Ae(xg(r), 2),
    i = a[0],
    s = a[1];
  if (i) {
    var n = window.getComputedStyle(e).getPropertyValue(i);
    return n ? n.trim() : Dr(s) ? zr(s, e) : s;
  }
}
function vg(r, e, t) {
  var a,
    i = Ue(e, []),
    s = r.getInstance();
  if (!(s instanceof Element)) return { target: i, transitionEnd: t };
  t && (t = W({}, t)),
    r.forEachValue(function (c) {
      var h = c.get();
      if (Dr(h)) {
        var d = zr(h, s);
        d && c.set(d);
      }
    });
  for (var n in i) {
    var o = i[n];
    if (Dr(o)) {
      var l = zr(o, s);
      l &&
        ((i[n] = l),
        t && (((a = t[n]) !== null && a !== void 0) || (t[n] = o)));
    }
  }
  return { target: i, transitionEnd: t };
}
var bg = new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    "x",
    "y",
  ]),
  Kl = function (r) {
    return bg.has(r);
  },
  yg = function (r) {
    return Object.keys(r).some(Kl);
  },
  Ql = function (r, e) {
    r.set(e, !1), r.set(e);
  },
  jn = function (r) {
    return r === Bt || r === ee;
  },
  Fn;
(function (r) {
  (r.width = "width"),
    (r.height = "height"),
    (r.left = "left"),
    (r.right = "right"),
    (r.top = "top"),
    (r.bottom = "bottom");
})(Fn || (Fn = {}));
var Dn = function (r, e) {
    return parseFloat(r.split(", ")[e]);
  },
  zn = function (r, e) {
    return function (t, a) {
      var i = a.transform;
      if (i === "none" || !i) return 0;
      var s = i.match(/^matrix3d\((.+)\)$/);
      if (s) return Dn(s[1], e);
      var n = i.match(/^matrix\((.+)\)$/);
      return n ? Dn(n[1], r) : 0;
    };
  },
  wg = new Set(["x", "y", "z"]),
  kg = Pa.filter(function (r) {
    return !wg.has(r);
  });
function Ag(r) {
  var e = [];
  return (
    kg.forEach(function (t) {
      var a = r.getValue(t);
      a !== void 0 &&
        (e.push([t, a.get()]), a.set(t.startsWith("scale") ? 1 : 0));
    }),
    e.length && r.syncRender(),
    e
  );
}
var Hn = {
    width: function (r, e) {
      var t = r.x,
        a = e.paddingLeft,
        i = a === void 0 ? "0" : a,
        s = e.paddingRight,
        n = s === void 0 ? "0" : s;
      return t.max - t.min - parseFloat(i) - parseFloat(n);
    },
    height: function (r, e) {
      var t = r.y,
        a = e.paddingTop,
        i = a === void 0 ? "0" : a,
        s = e.paddingBottom,
        n = s === void 0 ? "0" : s;
      return t.max - t.min - parseFloat(i) - parseFloat(n);
    },
    top: function (r, e) {
      var t = e.top;
      return parseFloat(t);
    },
    left: function (r, e) {
      var t = e.left;
      return parseFloat(t);
    },
    bottom: function (r, e) {
      var t = r.y,
        a = e.top;
      return parseFloat(a) + (t.max - t.min);
    },
    right: function (r, e) {
      var t = r.x,
        a = e.left;
      return parseFloat(a) + (t.max - t.min);
    },
    x: zn(4, 13),
    y: zn(5, 14),
  },
  Cg = function (r, e, t) {
    var a = e.measureViewportBox(),
      i = e.getInstance(),
      s = getComputedStyle(i),
      n = s.display,
      o = {};
    n === "none" && e.setStaticValue("display", r.display || "block"),
      t.forEach(function (c) {
        o[c] = Hn[c](a, s);
      }),
      e.syncRender();
    var l = e.measureViewportBox();
    return (
      t.forEach(function (c) {
        var h = e.getValue(c);
        Ql(h, o[c]), (r[c] = Hn[c](l, s));
      }),
      r
    );
  },
  Sg = function (r, e, t, a) {
    t === void 0 && (t = {}),
      a === void 0 && (a = {}),
      (e = W({}, e)),
      (a = W({}, a));
    var i = Object.keys(e).filter(Kl),
      s = [],
      n = !1,
      o = [];
    if (
      (i.forEach(function (h) {
        var d = r.getValue(h);
        if (r.hasValue(h)) {
          var u = t[h],
            f = ga(u),
            g = e[h],
            p;
          if (Ma(g)) {
            var m = g.length,
              x = g[0] === null ? 1 : 0;
            (u = g[x]), (f = ga(u));
            for (var v = x; v < m; v++) p ? xi(ga(g[v]) === p) : (p = ga(g[v]));
          } else p = ga(g);
          if (f !== p)
            if (jn(f) && jn(p)) {
              var b = d.get();
              typeof b == "string" && d.set(parseFloat(b)),
                typeof g == "string"
                  ? (e[h] = parseFloat(g))
                  : Array.isArray(g) && p === ee && (e[h] = g.map(parseFloat));
            } else
              f != null &&
              f.transform &&
              p != null &&
              p.transform &&
              (u === 0 || g === 0)
                ? u === 0
                  ? d.set(p.transform(u))
                  : (e[h] = f.transform(g))
                : (n || ((s = Ag(r)), (n = !0)),
                  o.push(h),
                  (a[h] = a[h] !== void 0 ? a[h] : e[h]),
                  Ql(d, g));
        }
      }),
      o.length)
    ) {
      var l = o.indexOf("height") >= 0 ? window.pageYOffset : null,
        c = Cg(e, r, o);
      return (
        s.length &&
          s.forEach(function (h) {
            var d = Ae(h, 2),
              u = d[0],
              f = d[1];
            r.getValue(u).set(f);
          }),
        r.syncRender(),
        l !== null && window.scrollTo({ top: l }),
        { target: c, transitionEnd: a }
      );
    } else return { target: e, transitionEnd: a };
  };
function Tg(r, e, t, a) {
  return yg(e) ? Sg(r, e, t, a) : { target: e, transitionEnd: a };
}
var Pg = function (r, e, t, a) {
  var i = vg(r, e, a);
  return (e = i.target), (a = i.transitionEnd), Tg(r, e, t, a);
};
function Lg(r) {
  return window.getComputedStyle(r);
}
var Jl = {
    treeType: "dom",
    readValueFromInstance: function (r, e) {
      if (Ba(e)) {
        var t = Ps(e);
        return (t && t.default) || 0;
      } else {
        var a = Lg(r);
        return (Yo(e) ? a.getPropertyValue(e) : a[e]) || 0;
      }
    },
    sortNodePosition: function (r, e) {
      return r.compareDocumentPosition(e) & 2 ? 1 : -1;
    },
    getBaseTarget: function (r, e) {
      var t;
      return (t = r.style) === null || t === void 0 ? void 0 : t[e];
    },
    measureViewportBox: function (r, e) {
      var t = e.transformPagePoint;
      return Ul(r, t);
    },
    resetTransform: function (r, e, t) {
      var a = t.transformTemplate;
      (e.style.transform = a ? a({}, "") : "none"), r.scheduleRender();
    },
    restoreTransform: function (r, e) {
      r.style.transform = e.style.transform;
    },
    removeValueFromRenderState: function (r, e) {
      var t = e.vars,
        a = e.style;
      delete t[r], delete a[r];
    },
    makeTargetAnimatable: function (r, e, t, a) {
      var i = t.transformValues;
      a === void 0 && (a = !0);
      var s = e.transition,
        n = e.transitionEnd,
        o = Ue(e, ["transition", "transitionEnd"]),
        l = Nf(o, s || {}, r);
      if ((i && (n && (n = i(n)), o && (o = i(o)), l && (l = i(l))), a)) {
        _f(r, o, l);
        var c = Pg(r, o, l, n);
        (n = c.transitionEnd), (o = c.target);
      }
      return W({ transition: s, transitionEnd: n }, o);
    },
    scrapeMotionValuesFromProps: xs,
    build: function (r, e, t, a, i) {
      r.isVisible !== void 0 &&
        (e.style.visibility = r.isVisible ? "visible" : "hidden"),
        gs(e, t, a, i.transformTemplate);
    },
    render: al,
  },
  Mg = $l(Jl),
  Eg = $l(
    W(W({}, Jl), {
      getBaseTarget: function (r, e) {
        return r[e];
      },
      readValueFromInstance: function (r, e) {
        var t;
        return Ba(e)
          ? ((t = Ps(e)) === null || t === void 0 ? void 0 : t.default) || 0
          : ((e = il.has(e) ? e : tl(e)), r.getAttribute(e));
      },
      scrapeMotionValuesFromProps: sl,
      build: function (r, e, t, a, i) {
        ms(e, t, a, i.transformTemplate);
      },
      render: rl,
    })
  ),
  Ig = function (r, e) {
    return us(r)
      ? Eg(e, { enableHardwareAcceleration: !1 })
      : Mg(e, { enableHardwareAcceleration: !0 });
  };
function Xn(r, e) {
  return e.max === e.min ? 0 : (r / (e.max - e.min)) * 100;
}
var pa = {
    correct: function (r, e) {
      if (!e.target) return r;
      if (typeof r == "string")
        if (ee.test(r)) r = parseFloat(r);
        else return r;
      var t = Xn(r, e.target.x),
        a = Xn(r, e.target.y);
      return "".concat(t, "% ").concat(a, "%");
    },
  },
  Bn = "_$css",
  Rg = {
    correct: function (r, e) {
      var t = e.treeScale,
        a = e.projectionDelta,
        i = r,
        s = r.includes("var("),
        n = [];
      s &&
        (r = r.replace(Zl, function (p) {
          return n.push(p), Bn;
        }));
      var o = ht.parse(r);
      if (o.length > 5) return i;
      var l = ht.createTransformer(r),
        c = typeof o[0] != "number" ? 1 : 0,
        h = a.x.scale * t.x,
        d = a.y.scale * t.y;
      (o[0 + c] /= h), (o[1 + c] /= d);
      var u = ye(h, d, 0.5);
      typeof o[2 + c] == "number" && (o[2 + c] /= u),
        typeof o[3 + c] == "number" && (o[3 + c] /= u);
      var f = l(o);
      if (s) {
        var g = 0;
        f = f.replace(Bn, function () {
          var p = n[g];
          return g++, p;
        });
      }
      return f;
    },
  },
  _g = (function (r) {
    _o(e, r);
    function e() {
      return (r !== null && r.apply(this, arguments)) || this;
    }
    return (
      (e.prototype.componentDidMount = function () {
        var t = this,
          a = this.props,
          i = a.visualElement,
          s = a.layoutGroup,
          n = a.switchLayoutGroup,
          o = a.layoutId,
          l = i.projection;
        id(Ng),
          l &&
            (s != null && s.group && s.group.add(l),
            n != null && n.register && o && n.register(l),
            l.root.didUpdate(),
            l.addEventListener("animationComplete", function () {
              t.safeToRemove();
            }),
            l.setOptions(
              W(W({}, l.options), {
                onExitComplete: function () {
                  return t.safeToRemove();
                },
              })
            )),
          (va.hasEverUpdated = !0);
      }),
      (e.prototype.getSnapshotBeforeUpdate = function (t) {
        var a = this,
          i = this.props,
          s = i.layoutDependency,
          n = i.visualElement,
          o = i.drag,
          l = i.isPresent,
          c = n.projection;
        return (
          c &&
            ((c.isPresent = l),
            o || t.layoutDependency !== s || s === void 0
              ? c.willUpdate()
              : this.safeToRemove(),
            t.isPresent !== l &&
              (l
                ? c.promote()
                : c.relegate() ||
                  et.postRender(function () {
                    var h;
                    (!((h = c.getStack()) === null || h === void 0) &&
                      h.members.length) ||
                      a.safeToRemove();
                  }))),
          null
        );
      }),
      (e.prototype.componentDidUpdate = function () {
        var t = this.props.visualElement.projection;
        t &&
          (t.root.didUpdate(),
          !t.currentAnimation && t.isLead() && this.safeToRemove());
      }),
      (e.prototype.componentWillUnmount = function () {
        var t = this.props,
          a = t.visualElement,
          i = t.layoutGroup,
          s = t.switchLayoutGroup,
          n = a.projection;
        n &&
          (n.scheduleCheckAfterUnmount(),
          i != null && i.group && i.group.remove(n),
          s != null && s.deregister && s.deregister(n));
      }),
      (e.prototype.safeToRemove = function () {
        var t = this.props.safeToRemove;
        t == null || t();
      }),
      (e.prototype.render = function () {
        return null;
      }),
      e
    );
  })(ge.Component);
function Og(r) {
  var e = Ae(Fl(), 2),
    t = e[0],
    a = e[1],
    i = P.useContext(ds);
  return ge.createElement(
    _g,
    W({}, r, {
      layoutGroup: i,
      switchLayoutGroup: P.useContext(Ho),
      isPresent: t,
      safeToRemove: a,
    })
  );
}
var Ng = {
    borderRadius: W(W({}, pa), {
      applyTo: [
        "borderTopLeftRadius",
        "borderTopRightRadius",
        "borderBottomLeftRadius",
        "borderBottomRightRadius",
      ],
    }),
    borderTopLeftRadius: pa,
    borderTopRightRadius: pa,
    borderBottomLeftRadius: pa,
    borderBottomRightRadius: pa,
    boxShadow: Rg,
  },
  jg = { measureLayout: Og };
function Fg(r, e, t) {
  t === void 0 && (t = {});
  var a = ct(r) ? r : ta(r);
  return (
    Es("", a, e, t),
    {
      stop: function () {
        return a.stop();
      },
      isAnimating: function () {
        return a.isAnimating();
      },
    }
  );
}
var ec = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"],
  Dg = ec.length,
  Yn = function (r) {
    return typeof r == "string" ? parseFloat(r) : r;
  },
  Wn = function (r) {
    return typeof r == "number" || ee.test(r);
  };
function zg(r, e, t, a, i, s) {
  var n, o, l, c;
  i
    ? ((r.opacity = ye(
        0,
        (n = t.opacity) !== null && n !== void 0 ? n : 1,
        Hg(a)
      )),
      (r.opacityExit = ye(
        (o = e.opacity) !== null && o !== void 0 ? o : 1,
        0,
        Xg(a)
      )))
    : s &&
      (r.opacity = ye(
        (l = e.opacity) !== null && l !== void 0 ? l : 1,
        (c = t.opacity) !== null && c !== void 0 ? c : 1,
        a
      ));
  for (var h = 0; h < Dg; h++) {
    var d = "border".concat(ec[h], "Radius"),
      u = Vn(e, d),
      f = Vn(t, d);
    if (!(u === void 0 && f === void 0)) {
      u || (u = 0), f || (f = 0);
      var g = u === 0 || f === 0 || Wn(u) === Wn(f);
      g
        ? ((r[d] = Math.max(ye(Yn(u), Yn(f), a), 0)),
          (it.test(f) || it.test(u)) && (r[d] += "%"))
        : (r[d] = f);
    }
  }
  (e.rotate || t.rotate) && (r.rotate = ye(e.rotate || 0, t.rotate || 0, a));
}
function Vn(r, e) {
  var t;
  return (t = r[e]) !== null && t !== void 0 ? t : r.borderRadius;
}
var Hg = tc(0, 0.5, Ss),
  Xg = tc(0.5, 0.95, As);
function tc(r, e, t) {
  return function (a) {
    return a < r ? 0 : a > e ? 1 : t(Ea(r, e, a));
  };
}
function Gn(r, e) {
  (r.min = e.min), (r.max = e.max);
}
function $e(r, e) {
  Gn(r.x, e.x), Gn(r.y, e.y);
}
function Un(r, e, t, a, i) {
  return (
    (r -= e), (r = Pi(r, 1 / t, a)), i !== void 0 && (r = Pi(r, 1 / i, a)), r
  );
}
function Bg(r, e, t, a, i, s, n) {
  if (
    (e === void 0 && (e = 0),
    t === void 0 && (t = 1),
    a === void 0 && (a = 0.5),
    s === void 0 && (s = r),
    n === void 0 && (n = r),
    it.test(e))
  ) {
    e = parseFloat(e);
    var o = ye(n.min, n.max, e / 100);
    e = o - n.min;
  }
  if (typeof e == "number") {
    var l = ye(s.min, s.max, a);
    r === s && (l -= e),
      (r.min = Un(r.min, e, t, l, i)),
      (r.max = Un(r.max, e, t, l, i));
  }
}
function $n(r, e, t, a, i) {
  var s = Ae(t, 3),
    n = s[0],
    o = s[1],
    l = s[2];
  Bg(r, e[n], e[o], e[l], e.scale, a, i);
}
var Yg = ["x", "scaleX", "originX"],
  Wg = ["y", "scaleY", "originY"];
function qn(r, e, t, a) {
  $n(r.x, e, Yg, t == null ? void 0 : t.x, a == null ? void 0 : a.x),
    $n(r.y, e, Wg, t == null ? void 0 : t.y, a == null ? void 0 : a.y);
}
function Zn(r) {
  return r.translate === 0 && r.scale === 1;
}
function ac(r) {
  return Zn(r.x) && Zn(r.y);
}
function ic(r, e) {
  return (
    r.x.min === e.x.min &&
    r.x.max === e.x.max &&
    r.y.min === e.y.min &&
    r.y.max === e.y.max
  );
}
var Vg = (function () {
    function r() {
      this.members = [];
    }
    return (
      (r.prototype.add = function (e) {
        Is(this.members, e), e.scheduleRender();
      }),
      (r.prototype.remove = function (e) {
        if (
          (Rs(this.members, e),
          e === this.prevLead && (this.prevLead = void 0),
          e === this.lead)
        ) {
          var t = this.members[this.members.length - 1];
          t && this.promote(t);
        }
      }),
      (r.prototype.relegate = function (e) {
        var t = this.members.findIndex(function (n) {
          return e === n;
        });
        if (t === 0) return !1;
        for (var a, i = t; i >= 0; i--) {
          var s = this.members[i];
          if (s.isPresent !== !1) {
            a = s;
            break;
          }
        }
        return a ? (this.promote(a), !0) : !1;
      }),
      (r.prototype.promote = function (e, t) {
        var a,
          i = this.lead;
        if (e !== i && ((this.prevLead = i), (this.lead = e), e.show(), i)) {
          i.instance && i.scheduleRender(),
            e.scheduleRender(),
            (e.resumeFrom = i),
            t && (e.resumeFrom.preserveOpacity = !0),
            i.snapshot &&
              ((e.snapshot = i.snapshot),
              (e.snapshot.latestValues = i.animationValues || i.latestValues),
              (e.snapshot.isShared = !0)),
            !((a = e.root) === null || a === void 0) &&
              a.isUpdating &&
              (e.isLayoutDirty = !0);
          var s = e.options.crossfade;
          s === !1 && i.hide();
        }
      }),
      (r.prototype.exitAnimationComplete = function () {
        this.members.forEach(function (e) {
          var t, a, i, s, n;
          (a = (t = e.options).onExitComplete) === null ||
            a === void 0 ||
            a.call(t),
            (n =
              (i = e.resumingFrom) === null || i === void 0
                ? void 0
                : (s = i.options).onExitComplete) === null ||
              n === void 0 ||
              n.call(s);
        });
      }),
      (r.prototype.scheduleRender = function () {
        this.members.forEach(function (e) {
          e.instance && e.scheduleRender(!1);
        });
      }),
      (r.prototype.removeLeadSnapshot = function () {
        this.lead && this.lead.snapshot && (this.lead.snapshot = void 0);
      }),
      r
    );
  })(),
  Gg = "translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)";
function Kn(r, e, t) {
  var a = r.x.translate / e.x,
    i = r.y.translate / e.y,
    s = "translate3d(".concat(a, "px, ").concat(i, "px, 0) ");
  if (((s += "scale(".concat(1 / e.x, ", ").concat(1 / e.y, ") ")), t)) {
    var n = t.rotate,
      o = t.rotateX,
      l = t.rotateY;
    n && (s += "rotate(".concat(n, "deg) ")),
      o && (s += "rotateX(".concat(o, "deg) ")),
      l && (s += "rotateY(".concat(l, "deg) "));
  }
  var c = r.x.scale * e.x,
    h = r.y.scale * e.y;
  return (s += "scale(".concat(c, ", ").concat(h, ")")), s === Gg ? "none" : s;
}
var Ug = function (r, e) {
    return r.depth - e.depth;
  },
  $g = (function () {
    function r() {
      (this.children = []), (this.isDirty = !1);
    }
    return (
      (r.prototype.add = function (e) {
        Is(this.children, e), (this.isDirty = !0);
      }),
      (r.prototype.remove = function (e) {
        Rs(this.children, e), (this.isDirty = !0);
      }),
      (r.prototype.forEach = function (e) {
        this.isDirty && this.children.sort(Ug),
          (this.isDirty = !1),
          this.children.forEach(e);
      }),
      r
    );
  })(),
  Qn = 1e3;
function rc(r) {
  var e = r.attachResizeListener,
    t = r.defaultParent,
    a = r.measureScroll,
    i = r.checkIsScrollRoot,
    s = r.resetTransform;
  return (function () {
    function n(o, l, c) {
      var h = this;
      l === void 0 && (l = {}),
        c === void 0 && (c = t == null ? void 0 : t()),
        (this.children = new Set()),
        (this.options = {}),
        (this.isTreeAnimating = !1),
        (this.isAnimationBlocked = !1),
        (this.isLayoutDirty = !1),
        (this.updateManuallyBlocked = !1),
        (this.updateBlockedByResize = !1),
        (this.isUpdating = !1),
        (this.isSVG = !1),
        (this.needsReset = !1),
        (this.shouldResetTransform = !1),
        (this.treeScale = { x: 1, y: 1 }),
        (this.eventHandlers = new Map()),
        (this.potentialNodes = new Map()),
        (this.checkUpdateFailed = function () {
          h.isUpdating && ((h.isUpdating = !1), h.clearAllSnapshots());
        }),
        (this.updateProjection = function () {
          h.nodes.forEach(ep), h.nodes.forEach(tp);
        }),
        (this.hasProjected = !1),
        (this.isVisible = !0),
        (this.animationProgress = 0),
        (this.sharedNodes = new Map()),
        (this.id = o),
        (this.latestValues = l),
        (this.root = c ? c.root || c : this),
        (this.path = c ? Je(Je([], Ae(c.path), !1), [c], !1) : []),
        (this.parent = c),
        (this.depth = c ? c.depth + 1 : 0),
        o && this.root.registerPotentialNode(o, this);
      for (var d = 0; d < this.path.length; d++)
        this.path[d].shouldResetTransform = !0;
      this.root === this && (this.nodes = new $g());
    }
    return (
      (n.prototype.addEventListener = function (o, l) {
        return (
          this.eventHandlers.has(o) || this.eventHandlers.set(o, new wa()),
          this.eventHandlers.get(o).add(l)
        );
      }),
      (n.prototype.notifyListeners = function (o) {
        for (var l = [], c = 1; c < arguments.length; c++)
          l[c - 1] = arguments[c];
        var h = this.eventHandlers.get(o);
        h == null || h.notify.apply(h, Je([], Ae(l), !1));
      }),
      (n.prototype.hasListeners = function (o) {
        return this.eventHandlers.has(o);
      }),
      (n.prototype.registerPotentialNode = function (o, l) {
        this.potentialNodes.set(o, l);
      }),
      (n.prototype.mount = function (o, l) {
        var c = this,
          h;
        if ((l === void 0 && (l = !1), !this.instance)) {
          (this.isSVG = o instanceof SVGElement && o.tagName !== "svg"),
            (this.instance = o);
          var d = this.options,
            u = d.layoutId,
            f = d.layout,
            g = d.visualElement;
          if (
            (g && !g.getInstance() && g.mount(o),
            this.root.nodes.add(this),
            (h = this.parent) === null || h === void 0 || h.children.add(this),
            this.id && this.root.potentialNodes.delete(this.id),
            l && (f || u) && (this.isLayoutDirty = !0),
            e)
          ) {
            var p,
              m = function () {
                return (c.root.updateBlockedByResize = !1);
              };
            e(o, function () {
              (c.root.updateBlockedByResize = !0),
                clearTimeout(p),
                (p = window.setTimeout(m, 250)),
                va.hasAnimatedSinceResize &&
                  ((va.hasAnimatedSinceResize = !1), c.nodes.forEach(Jg));
            });
          }
          u && this.root.registerSharedNode(u, this),
            this.options.animate !== !1 &&
              g &&
              (u || f) &&
              this.addEventListener("didUpdate", function (x) {
                var v,
                  b,
                  k,
                  y,
                  C,
                  A = x.delta,
                  S = x.hasLayoutChanged,
                  T = x.hasRelativeTargetChanged,
                  E = x.layout;
                if (c.isTreeAnimationBlocked()) {
                  (c.target = void 0), (c.relativeTarget = void 0);
                  return;
                }
                var L =
                    (b =
                      (v = c.options.transition) !== null && v !== void 0
                        ? v
                        : g.getDefaultTransition()) !== null && b !== void 0
                      ? b
                      : np,
                  I = g.getProps(),
                  M = I.onLayoutAnimationStart,
                  O = I.onLayoutAnimationComplete,
                  N = !c.targetLayout || !ic(c.targetLayout, E) || T,
                  F = !S && T;
                if (
                  (!((k = c.resumeFrom) === null || k === void 0) &&
                    k.instance) ||
                  F ||
                  (S && (N || !c.currentAnimation))
                ) {
                  c.resumeFrom &&
                    ((c.resumingFrom = c.resumeFrom),
                    (c.resumingFrom.resumingFrom = void 0)),
                    c.setAnimationOrigin(A, F);
                  var D = W(W({}, Ms(L, "layout")), {
                    onPlay: M,
                    onComplete: O,
                  });
                  g.shouldReduceMotion && ((D.delay = 0), (D.type = !1)),
                    c.startAnimation(D);
                } else !S && c.animationProgress === 0 && c.finishAnimation(), c.isLead() && ((C = (y = c.options).onExitComplete) === null || C === void 0 || C.call(y));
                c.targetLayout = E;
              });
        }
      }),
      (n.prototype.unmount = function () {
        var o, l;
        this.options.layoutId && this.willUpdate(),
          this.root.nodes.remove(this),
          (o = this.getStack()) === null || o === void 0 || o.remove(this),
          (l = this.parent) === null || l === void 0 || l.children.delete(this),
          (this.instance = void 0),
          ea.preRender(this.updateProjection);
      }),
      (n.prototype.blockUpdate = function () {
        this.updateManuallyBlocked = !0;
      }),
      (n.prototype.unblockUpdate = function () {
        this.updateManuallyBlocked = !1;
      }),
      (n.prototype.isUpdateBlocked = function () {
        return this.updateManuallyBlocked || this.updateBlockedByResize;
      }),
      (n.prototype.isTreeAnimationBlocked = function () {
        var o;
        return (
          this.isAnimationBlocked ||
          ((o = this.parent) === null || o === void 0
            ? void 0
            : o.isTreeAnimationBlocked()) ||
          !1
        );
      }),
      (n.prototype.startUpdate = function () {
        var o;
        this.isUpdateBlocked() ||
          ((this.isUpdating = !0),
          (o = this.nodes) === null || o === void 0 || o.forEach(ap));
      }),
      (n.prototype.willUpdate = function (o) {
        var l, c, h;
        if ((o === void 0 && (o = !0), this.root.isUpdateBlocked())) {
          (c = (l = this.options).onExitComplete) === null ||
            c === void 0 ||
            c.call(l);
          return;
        }
        if (
          (!this.root.isUpdating && this.root.startUpdate(),
          !this.isLayoutDirty)
        ) {
          this.isLayoutDirty = !0;
          for (var d = 0; d < this.path.length; d++) {
            var u = this.path[d];
            (u.shouldResetTransform = !0), u.updateScroll();
          }
          var f = this.options,
            g = f.layoutId,
            p = f.layout;
          if (!(g === void 0 && !p)) {
            var m =
              (h = this.options.visualElement) === null || h === void 0
                ? void 0
                : h.getProps().transformTemplate;
            (this.prevTransformTemplateValue =
              m == null ? void 0 : m(this.latestValues, "")),
              this.updateSnapshot(),
              o && this.notifyListeners("willUpdate");
          }
        }
      }),
      (n.prototype.didUpdate = function () {
        var o = this.isUpdateBlocked();
        if (o) {
          this.unblockUpdate(),
            this.clearAllSnapshots(),
            this.nodes.forEach(Jn);
          return;
        }
        this.isUpdating &&
          ((this.isUpdating = !1),
          this.potentialNodes.size &&
            (this.potentialNodes.forEach(op), this.potentialNodes.clear()),
          this.nodes.forEach(Qg),
          this.nodes.forEach(qg),
          this.nodes.forEach(Zg),
          this.clearAllSnapshots(),
          Zi.update(),
          Zi.preRender(),
          Zi.render());
      }),
      (n.prototype.clearAllSnapshots = function () {
        this.nodes.forEach(Kg), this.sharedNodes.forEach(ip);
      }),
      (n.prototype.scheduleUpdateProjection = function () {
        et.preRender(this.updateProjection, !1, !0);
      }),
      (n.prototype.scheduleCheckAfterUnmount = function () {
        var o = this;
        et.postRender(function () {
          o.isLayoutDirty ? o.root.didUpdate() : o.root.checkUpdateFailed();
        });
      }),
      (n.prototype.updateSnapshot = function () {
        if (!(this.snapshot || !this.instance)) {
          var o = this.measure(),
            l = this.removeTransform(this.removeElementScroll(o));
          io(l), (this.snapshot = { measured: o, layout: l, latestValues: {} });
        }
      }),
      (n.prototype.updateLayout = function () {
        var o;
        if (
          this.instance &&
          (this.updateScroll(),
          !(
            !(this.options.alwaysMeasureLayout && this.isLead()) &&
            !this.isLayoutDirty
          ))
        ) {
          if (this.resumeFrom && !this.resumeFrom.instance)
            for (var l = 0; l < this.path.length; l++) {
              var c = this.path[l];
              c.updateScroll();
            }
          var h = this.measure();
          io(h);
          var d = this.layout;
          (this.layout = { measured: h, actual: this.removeElementScroll(h) }),
            (this.layoutCorrected = _e()),
            (this.isLayoutDirty = !1),
            (this.projectionDelta = void 0),
            this.notifyListeners("measure", this.layout.actual),
            (o = this.options.visualElement) === null ||
              o === void 0 ||
              o.notifyLayoutMeasure(
                this.layout.actual,
                d == null ? void 0 : d.actual
              );
        }
      }),
      (n.prototype.updateScroll = function () {
        this.options.layoutScroll &&
          this.instance &&
          ((this.isScrollRoot = i(this.instance)),
          (this.scroll = a(this.instance)));
      }),
      (n.prototype.resetTransform = function () {
        var o;
        if (s) {
          var l = this.isLayoutDirty || this.shouldResetTransform,
            c = this.projectionDelta && !ac(this.projectionDelta),
            h =
              (o = this.options.visualElement) === null || o === void 0
                ? void 0
                : o.getProps().transformTemplate,
            d = h == null ? void 0 : h(this.latestValues, ""),
            u = d !== this.prevTransformTemplateValue;
          l &&
            (c || xt(this.latestValues) || u) &&
            (s(this.instance, d),
            (this.shouldResetTransform = !1),
            this.scheduleRender());
        }
      }),
      (n.prototype.measure = function () {
        var o = this.options.visualElement;
        if (!o) return _e();
        var l = o.measureViewportBox(),
          c = this.root.scroll;
        return c && (vt(l.x, c.x), vt(l.y, c.y)), l;
      }),
      (n.prototype.removeElementScroll = function (o) {
        var l = _e();
        $e(l, o);
        for (var c = 0; c < this.path.length; c++) {
          var h = this.path[c],
            d = h.scroll,
            u = h.options,
            f = h.isScrollRoot;
          if (h !== this.root && d && u.layoutScroll) {
            if (f) {
              $e(l, o);
              var g = this.root.scroll;
              g && (vt(l.x, -g.x), vt(l.y, -g.y));
            }
            vt(l.x, d.x), vt(l.y, d.y);
          }
        }
        return l;
      }),
      (n.prototype.applyTransform = function (o, l) {
        l === void 0 && (l = !1);
        var c = _e();
        $e(c, o);
        for (var h = 0; h < this.path.length; h++) {
          var d = this.path[h];
          !l &&
            d.options.layoutScroll &&
            d.scroll &&
            d !== d.root &&
            qt(c, { x: -d.scroll.x, y: -d.scroll.y }),
            xt(d.latestValues) && qt(c, d.latestValues);
        }
        return xt(this.latestValues) && qt(c, this.latestValues), c;
      }),
      (n.prototype.removeTransform = function (o) {
        var l,
          c = _e();
        $e(c, o);
        for (var h = 0; h < this.path.length; h++) {
          var d = this.path[h];
          if (d.instance && xt(d.latestValues)) {
            Vl(d.latestValues) && d.updateSnapshot();
            var u = _e(),
              f = d.measure();
            $e(u, f),
              qn(
                c,
                d.latestValues,
                (l = d.snapshot) === null || l === void 0 ? void 0 : l.layout,
                u
              );
          }
        }
        return xt(this.latestValues) && qn(c, this.latestValues), c;
      }),
      (n.prototype.setTargetDelta = function (o) {
        (this.targetDelta = o), this.root.scheduleUpdateProjection();
      }),
      (n.prototype.setOptions = function (o) {
        var l;
        this.options = W(W(W({}, this.options), o), {
          crossfade: (l = o.crossfade) !== null && l !== void 0 ? l : !0,
        });
      }),
      (n.prototype.clearMeasurements = function () {
        (this.scroll = void 0),
          (this.layout = void 0),
          (this.snapshot = void 0),
          (this.prevTransformTemplateValue = void 0),
          (this.targetDelta = void 0),
          (this.target = void 0),
          (this.isLayoutDirty = !1);
      }),
      (n.prototype.resolveTargetDelta = function () {
        var o,
          l = this.options,
          c = l.layout,
          h = l.layoutId;
        !this.layout ||
          !(c || h) ||
          (!this.targetDelta &&
            !this.relativeTarget &&
            ((this.relativeParent = this.getClosestProjectingParent()),
            this.relativeParent &&
              this.relativeParent.layout &&
              ((this.relativeTarget = _e()),
              (this.relativeTargetOrigin = _e()),
              Aa(
                this.relativeTargetOrigin,
                this.layout.actual,
                this.relativeParent.layout.actual
              ),
              $e(this.relativeTarget, this.relativeTargetOrigin))),
          !(!this.relativeTarget && !this.targetDelta) &&
            (this.target ||
              ((this.target = _e()), (this.targetWithTransforms = _e())),
            this.relativeTarget &&
            this.relativeTargetOrigin &&
            !((o = this.relativeParent) === null || o === void 0) &&
            o.target
              ? qf(this.target, this.relativeTarget, this.relativeParent.target)
              : this.targetDelta
              ? (this.resumingFrom
                  ? (this.target = this.applyTransform(this.layout.actual))
                  : $e(this.target, this.layout.actual),
                Gl(this.target, this.targetDelta))
              : $e(this.target, this.layout.actual),
            this.attemptToResolveRelativeTarget &&
              ((this.attemptToResolveRelativeTarget = !1),
              (this.relativeParent = this.getClosestProjectingParent()),
              this.relativeParent &&
                !!this.relativeParent.resumingFrom == !!this.resumingFrom &&
                !this.relativeParent.options.layoutScroll &&
                this.relativeParent.target &&
                ((this.relativeTarget = _e()),
                (this.relativeTargetOrigin = _e()),
                Aa(
                  this.relativeTargetOrigin,
                  this.target,
                  this.relativeParent.target
                ),
                $e(this.relativeTarget, this.relativeTargetOrigin)))));
      }),
      (n.prototype.getClosestProjectingParent = function () {
        if (!(!this.parent || xt(this.parent.latestValues)))
          return (this.parent.relativeTarget || this.parent.targetDelta) &&
            this.parent.layout
            ? this.parent
            : this.parent.getClosestProjectingParent();
      }),
      (n.prototype.calcProjection = function () {
        var o,
          l = this.options,
          c = l.layout,
          h = l.layoutId;
        if (
          ((this.isTreeAnimating = !!(
            (!((o = this.parent) === null || o === void 0) &&
              o.isTreeAnimating) ||
            this.currentAnimation ||
            this.pendingAnimation
          )),
          this.isTreeAnimating ||
            (this.targetDelta = this.relativeTarget = void 0),
          !(!this.layout || !(c || h)))
        ) {
          var d = this.getLead();
          $e(this.layoutCorrected, this.layout.actual),
            rg(
              this.layoutCorrected,
              this.treeScale,
              this.path,
              !!this.resumingFrom || this !== d
            );
          var u = d.target;
          if (u) {
            this.projectionDelta ||
              ((this.projectionDelta = Ca()),
              (this.projectionDeltaWithTransform = Ca()));
            var f = this.treeScale.x,
              g = this.treeScale.y,
              p = this.projectionTransform;
            ka(
              this.projectionDelta,
              this.layoutCorrected,
              u,
              this.latestValues
            ),
              (this.projectionTransform = Kn(
                this.projectionDelta,
                this.treeScale
              )),
              (this.projectionTransform !== p ||
                this.treeScale.x !== f ||
                this.treeScale.y !== g) &&
                ((this.hasProjected = !0),
                this.scheduleRender(),
                this.notifyListeners("projectionUpdate", u));
          }
        }
      }),
      (n.prototype.hide = function () {
        this.isVisible = !1;
      }),
      (n.prototype.show = function () {
        this.isVisible = !0;
      }),
      (n.prototype.scheduleRender = function (o) {
        var l, c, h;
        o === void 0 && (o = !0),
          (c = (l = this.options).scheduleRender) === null ||
            c === void 0 ||
            c.call(l),
          o &&
            ((h = this.getStack()) === null ||
              h === void 0 ||
              h.scheduleRender()),
          this.resumingFrom &&
            !this.resumingFrom.instance &&
            (this.resumingFrom = void 0);
      }),
      (n.prototype.setAnimationOrigin = function (o, l) {
        var c = this,
          h;
        l === void 0 && (l = !1);
        var d = this.snapshot,
          u = (d == null ? void 0 : d.latestValues) || {},
          f = W({}, this.latestValues),
          g = Ca();
        (this.relativeTarget = this.relativeTargetOrigin = void 0),
          (this.attemptToResolveRelativeTarget = !l);
        var p = _e(),
          m = d == null ? void 0 : d.isShared,
          x =
            (((h = this.getStack()) === null || h === void 0
              ? void 0
              : h.members.length) || 0) <= 1,
          v = !!(
            m &&
            !x &&
            this.options.crossfade === !0 &&
            !this.path.some(sp)
          );
        (this.animationProgress = 0),
          (this.mixTargetDelta = function (b) {
            var k,
              y = b / 1e3;
            eo(g.x, o.x, y),
              eo(g.y, o.y, y),
              c.setTargetDelta(g),
              c.relativeTarget &&
                c.relativeTargetOrigin &&
                c.layout &&
                !((k = c.relativeParent) === null || k === void 0) &&
                k.layout &&
                (Aa(p, c.layout.actual, c.relativeParent.layout.actual),
                rp(c.relativeTarget, c.relativeTargetOrigin, p, y)),
              m && ((c.animationValues = f), zg(f, u, c.latestValues, y, v, x)),
              c.root.scheduleUpdateProjection(),
              c.scheduleRender(),
              (c.animationProgress = y);
          }),
          this.mixTargetDelta(0);
      }),
      (n.prototype.startAnimation = function (o) {
        var l = this,
          c,
          h;
        this.notifyListeners("animationStart"),
          (c = this.currentAnimation) === null || c === void 0 || c.stop(),
          this.resumingFrom &&
            ((h = this.resumingFrom.currentAnimation) === null ||
              h === void 0 ||
              h.stop()),
          this.pendingAnimation &&
            (ea.update(this.pendingAnimation),
            (this.pendingAnimation = void 0)),
          (this.pendingAnimation = et.update(function () {
            (va.hasAnimatedSinceResize = !0),
              (l.currentAnimation = Fg(
                0,
                Qn,
                W(W({}, o), {
                  onUpdate: function (d) {
                    var u;
                    l.mixTargetDelta(d),
                      (u = o.onUpdate) === null || u === void 0 || u.call(o, d);
                  },
                  onComplete: function () {
                    var d;
                    (d = o.onComplete) === null || d === void 0 || d.call(o),
                      l.completeAnimation();
                  },
                })
              )),
              l.resumingFrom &&
                (l.resumingFrom.currentAnimation = l.currentAnimation),
              (l.pendingAnimation = void 0);
          }));
      }),
      (n.prototype.completeAnimation = function () {
        var o;
        this.resumingFrom &&
          ((this.resumingFrom.currentAnimation = void 0),
          (this.resumingFrom.preserveOpacity = void 0)),
          (o = this.getStack()) === null ||
            o === void 0 ||
            o.exitAnimationComplete(),
          (this.resumingFrom =
            this.currentAnimation =
            this.animationValues =
              void 0),
          this.notifyListeners("animationComplete");
      }),
      (n.prototype.finishAnimation = function () {
        var o;
        this.currentAnimation &&
          ((o = this.mixTargetDelta) === null ||
            o === void 0 ||
            o.call(this, Qn),
          this.currentAnimation.stop()),
          this.completeAnimation();
      }),
      (n.prototype.applyTransformsToTarget = function () {
        var o = this.getLead(),
          l = o.targetWithTransforms,
          c = o.target,
          h = o.layout,
          d = o.latestValues;
        !l ||
          !c ||
          !h ||
          ($e(l, c),
          qt(l, d),
          ka(this.projectionDeltaWithTransform, this.layoutCorrected, l, d));
      }),
      (n.prototype.registerSharedNode = function (o, l) {
        var c, h, d;
        this.sharedNodes.has(o) || this.sharedNodes.set(o, new Vg());
        var u = this.sharedNodes.get(o);
        u.add(l),
          l.promote({
            transition:
              (c = l.options.initialPromotionConfig) === null || c === void 0
                ? void 0
                : c.transition,
            preserveFollowOpacity:
              (d =
                (h = l.options.initialPromotionConfig) === null || h === void 0
                  ? void 0
                  : h.shouldPreserveFollowOpacity) === null || d === void 0
                ? void 0
                : d.call(h, l),
          });
      }),
      (n.prototype.isLead = function () {
        var o = this.getStack();
        return o ? o.lead === this : !0;
      }),
      (n.prototype.getLead = function () {
        var o,
          l = this.options.layoutId;
        return l
          ? ((o = this.getStack()) === null || o === void 0
              ? void 0
              : o.lead) || this
          : this;
      }),
      (n.prototype.getPrevLead = function () {
        var o,
          l = this.options.layoutId;
        return l
          ? (o = this.getStack()) === null || o === void 0
            ? void 0
            : o.prevLead
          : void 0;
      }),
      (n.prototype.getStack = function () {
        var o = this.options.layoutId;
        if (o) return this.root.sharedNodes.get(o);
      }),
      (n.prototype.promote = function (o) {
        var l = o === void 0 ? {} : o,
          c = l.needsReset,
          h = l.transition,
          d = l.preserveFollowOpacity,
          u = this.getStack();
        u && u.promote(this, d),
          c && ((this.projectionDelta = void 0), (this.needsReset = !0)),
          h && this.setOptions({ transition: h });
      }),
      (n.prototype.relegate = function () {
        var o = this.getStack();
        return o ? o.relegate(this) : !1;
      }),
      (n.prototype.resetRotation = function () {
        var o = this.options.visualElement;
        if (o) {
          for (var l = !1, c = {}, h = 0; h < Cr.length; h++) {
            var d = Cr[h],
              u = "rotate" + d;
            o.getStaticValue(u) &&
              ((l = !0), (c[u] = o.getStaticValue(u)), o.setStaticValue(u, 0));
          }
          if (l) {
            o == null || o.syncRender();
            for (var u in c) o.setStaticValue(u, c[u]);
            o.scheduleRender();
          }
        }
      }),
      (n.prototype.getProjectionStyles = function (o) {
        var l, c, h, d, u, f;
        o === void 0 && (o = {});
        var g = {};
        if (!this.instance || this.isSVG) return g;
        if (this.isVisible) g.visibility = "";
        else return { visibility: "hidden" };
        var p =
          (l = this.options.visualElement) === null || l === void 0
            ? void 0
            : l.getProps().transformTemplate;
        if (this.needsReset)
          return (
            (this.needsReset = !1),
            (g.opacity = ""),
            (g.pointerEvents = li(o.pointerEvents) || ""),
            (g.transform = p ? p(this.latestValues, "") : "none"),
            g
          );
        var m = this.getLead();
        if (!this.projectionDelta || !this.layout || !m.target) {
          var x = {};
          return (
            this.options.layoutId &&
              ((x.opacity =
                (c = this.latestValues.opacity) !== null && c !== void 0
                  ? c
                  : 1),
              (x.pointerEvents = li(o.pointerEvents) || "")),
            this.hasProjected &&
              !xt(this.latestValues) &&
              ((x.transform = p ? p({}, "") : "none"),
              (this.hasProjected = !1)),
            x
          );
        }
        var v = m.animationValues || m.latestValues;
        this.applyTransformsToTarget(),
          (g.transform = Kn(
            this.projectionDeltaWithTransform,
            this.treeScale,
            v
          )),
          p && (g.transform = p(v, g.transform));
        var b = this.projectionDelta,
          k = b.x,
          y = b.y;
        (g.transformOrigin = ""
          .concat(k.origin * 100, "% ")
          .concat(y.origin * 100, "% 0")),
          m.animationValues
            ? (g.opacity =
                m === this
                  ? (d =
                      (h = v.opacity) !== null && h !== void 0
                        ? h
                        : this.latestValues.opacity) !== null && d !== void 0
                    ? d
                    : 1
                  : this.preserveOpacity
                  ? this.latestValues.opacity
                  : v.opacityExit)
            : (g.opacity =
                m === this
                  ? (u = v.opacity) !== null && u !== void 0
                    ? u
                    : ""
                  : (f = v.opacityExit) !== null && f !== void 0
                  ? f
                  : 0);
        for (var C in bi)
          if (v[C] !== void 0) {
            var A = bi[C],
              S = A.correct,
              T = A.applyTo,
              E = S(v[C], m);
            if (T) for (var L = T.length, I = 0; I < L; I++) g[T[I]] = E;
            else g[C] = E;
          }
        return (
          this.options.layoutId &&
            (g.pointerEvents = m === this ? li(o.pointerEvents) || "" : "none"),
          g
        );
      }),
      (n.prototype.clearSnapshot = function () {
        this.resumeFrom = this.snapshot = void 0;
      }),
      (n.prototype.resetTree = function () {
        this.root.nodes.forEach(function (o) {
          var l;
          return (l = o.currentAnimation) === null || l === void 0
            ? void 0
            : l.stop();
        }),
          this.root.nodes.forEach(Jn),
          this.root.sharedNodes.clear();
      }),
      n
    );
  })();
}
function qg(r) {
  r.updateLayout();
}
function Zg(r) {
  var e,
    t,
    a,
    i,
    s =
      (t =
        (e = r.resumeFrom) === null || e === void 0 ? void 0 : e.snapshot) !==
        null && t !== void 0
        ? t
        : r.snapshot;
  if (r.isLead() && r.layout && s && r.hasListeners("didUpdate")) {
    var n = r.layout,
      o = n.actual,
      l = n.measured;
    r.options.animationType === "size"
      ? at(function (v) {
          var b = s.isShared ? s.measured[v] : s.layout[v],
            k = dt(b);
          (b.min = o[v].min), (b.max = b.min + k);
        })
      : r.options.animationType === "position" &&
        at(function (v) {
          var b = s.isShared ? s.measured[v] : s.layout[v],
            k = dt(o[v]);
          b.max = b.min + k;
        });
    var c = Ca();
    ka(c, o, s.layout);
    var h = Ca();
    s.isShared
      ? ka(h, r.applyTransform(l, !0), s.measured)
      : ka(h, o, s.layout);
    var d = !ac(c),
      u = !1;
    if (
      !r.resumeFrom &&
      ((r.relativeParent = r.getClosestProjectingParent()),
      r.relativeParent && !r.relativeParent.resumeFrom)
    ) {
      var f = r.relativeParent,
        g = f.snapshot,
        p = f.layout;
      if (g && p) {
        var m = _e();
        Aa(m, s.layout, g.layout);
        var x = _e();
        Aa(x, o, p.actual), ic(m, x) || (u = !0);
      }
    }
    r.notifyListeners("didUpdate", {
      layout: o,
      snapshot: s,
      delta: h,
      layoutDelta: c,
      hasLayoutChanged: d,
      hasRelativeTargetChanged: u,
    });
  } else
    r.isLead() &&
      ((i = (a = r.options).onExitComplete) === null ||
        i === void 0 ||
        i.call(a));
  r.options.transition = void 0;
}
function Kg(r) {
  r.clearSnapshot();
}
function Jn(r) {
  r.clearMeasurements();
}
function Qg(r) {
  var e = r.options.visualElement;
  e != null &&
    e.getProps().onBeforeLayoutMeasure &&
    e.notifyBeforeLayoutMeasure(),
    r.resetTransform();
}
function Jg(r) {
  r.finishAnimation(), (r.targetDelta = r.relativeTarget = r.target = void 0);
}
function ep(r) {
  r.resolveTargetDelta();
}
function tp(r) {
  r.calcProjection();
}
function ap(r) {
  r.resetRotation();
}
function ip(r) {
  r.removeLeadSnapshot();
}
function eo(r, e, t) {
  (r.translate = ye(e.translate, 0, t)),
    (r.scale = ye(e.scale, 1, t)),
    (r.origin = e.origin),
    (r.originPoint = e.originPoint);
}
function to(r, e, t, a) {
  (r.min = ye(e.min, t.min, a)), (r.max = ye(e.max, t.max, a));
}
function rp(r, e, t, a) {
  to(r.x, e.x, t.x, a), to(r.y, e.y, t.y, a);
}
function sp(r) {
  return r.animationValues && r.animationValues.opacityExit !== void 0;
}
var np = { duration: 0.45, ease: [0.4, 0, 0.1, 1] };
function op(r, e) {
  for (var t = r.root, a = r.path.length - 1; a >= 0; a--)
    if (r.path[a].instance) {
      t = r.path[a];
      break;
    }
  var i = t && t !== r.root ? t.instance : document,
    s = i.querySelector('[data-projection-id="'.concat(e, '"]'));
  s && r.mount(s, !0);
}
function ao(r) {
  (r.min = Math.round(r.min)), (r.max = Math.round(r.max));
}
function io(r) {
  ao(r.x), ao(r.y);
}
var lp = rc({
    attachResizeListener: function (r, e) {
      return Fi(r, "resize", e);
    },
    measureScroll: function () {
      return {
        x: document.documentElement.scrollLeft || document.body.scrollLeft,
        y: document.documentElement.scrollTop || document.body.scrollTop,
      };
    },
    checkIsScrollRoot: function () {
      return !0;
    },
  }),
  ar = { current: void 0 },
  cp = rc({
    measureScroll: function (r) {
      return { x: r.scrollLeft, y: r.scrollTop };
    },
    defaultParent: function () {
      if (!ar.current) {
        var r = new lp(0, {});
        r.mount(window), r.setOptions({ layoutScroll: !0 }), (ar.current = r);
      }
      return ar.current;
    },
    resetTransform: function (r, e) {
      r.style.transform = e ?? "none";
    },
    checkIsScrollRoot: function (r) {
      return window.getComputedStyle(r).position === "fixed";
    },
  }),
  hp = W(W(W(W({}, Gf), hf), fg), jg),
  dp = td(function (r, e) {
    return Hd(r, e, hp, Ig, cp);
  });
function sc() {
  var r = P.useRef(!1);
  return (
    vi(function () {
      return (
        (r.current = !0),
        function () {
          r.current = !1;
        }
      );
    }, []),
    r
  );
}
function up() {
  var r = sc(),
    e = Ae(P.useState(0), 2),
    t = e[0],
    a = e[1],
    i = P.useCallback(
      function () {
        r.current && a(t + 1);
      },
      [t]
    ),
    s = P.useCallback(
      function () {
        return et.postRender(i);
      },
      [i]
    );
  return [s, t];
}
var ir = function (r) {
  var e = r.children,
    t = r.initial,
    a = r.isPresent,
    i = r.onExitComplete,
    s = r.custom,
    n = r.presenceAffectsLayout,
    o = Xa(fp),
    l = jl(),
    c = P.useMemo(
      function () {
        return {
          id: l,
          initial: t,
          isPresent: a,
          custom: s,
          onExitComplete: function (h) {
            var d, u;
            o.set(h, !0);
            try {
              for (
                var f = dh(o.values()), g = f.next();
                !g.done;
                g = f.next()
              ) {
                var p = g.value;
                if (!p) return;
              }
            } catch (m) {
              d = { error: m };
            } finally {
              try {
                g && !g.done && (u = f.return) && u.call(f);
              } finally {
                if (d) throw d.error;
              }
            }
            i == null || i();
          },
          register: function (h) {
            return (
              o.set(h, !1),
              function () {
                return o.delete(h);
              }
            );
          },
        };
      },
      n ? void 0 : [a]
    );
  return (
    P.useMemo(
      function () {
        o.forEach(function (h, d) {
          return o.set(d, !1);
        });
      },
      [a]
    ),
    P.useEffect(
      function () {
        !a && !o.size && (i == null || i());
      },
      [a]
    ),
    P.createElement(Ha.Provider, { value: c }, e)
  );
};
function fp() {
  return new Map();
}
var Ut = function (r) {
  return r.key || "";
};
function gp(r, e) {
  r.forEach(function (t) {
    var a = Ut(t);
    e.set(a, t);
  });
}
function pp(r) {
  var e = [];
  return (
    P.Children.forEach(r, function (t) {
      P.isValidElement(t) && e.push(t);
    }),
    e
  );
}
var mp = function (r) {
  var e = r.children,
    t = r.custom,
    a = r.initial,
    i = a === void 0 ? !0 : a,
    s = r.onExitComplete,
    n = r.exitBeforeEnter,
    o = r.presenceAffectsLayout,
    l = o === void 0 ? !0 : o,
    c = Ae(up(), 1),
    h = c[0],
    d = P.useContext(ds).forceRender;
  d && (h = d);
  var u = sc(),
    f = pp(e),
    g = f,
    p = new Set(),
    m = P.useRef(g),
    x = P.useRef(new Map()).current,
    v = P.useRef(!0);
  if (
    (vi(function () {
      (v.current = !1), gp(f, x), (m.current = g);
    }),
    ys(function () {
      (v.current = !0), x.clear(), p.clear();
    }),
    v.current)
  )
    return P.createElement(
      P.Fragment,
      null,
      g.map(function (S) {
        return P.createElement(
          ir,
          {
            key: Ut(S),
            isPresent: !0,
            initial: i ? void 0 : !1,
            presenceAffectsLayout: l,
          },
          S
        );
      })
    );
  g = Je([], Ae(g), !1);
  for (
    var b = m.current.map(Ut), k = f.map(Ut), y = b.length, C = 0;
    C < y;
    C++
  ) {
    var A = b[C];
    k.indexOf(A) === -1 && p.add(A);
  }
  return (
    n && p.size && (g = []),
    p.forEach(function (S) {
      if (k.indexOf(S) === -1) {
        var T = x.get(S);
        if (T) {
          var E = b.indexOf(S),
            L = function () {
              x.delete(S), p.delete(S);
              var I = m.current.findIndex(function (M) {
                return M.key === S;
              });
              if ((m.current.splice(I, 1), !p.size)) {
                if (((m.current = f), u.current === !1)) return;
                h(), s && s();
              }
            };
          g.splice(
            E,
            0,
            P.createElement(
              ir,
              {
                key: Ut(T),
                isPresent: !1,
                onExitComplete: L,
                custom: t,
                presenceAffectsLayout: l,
              },
              T
            )
          );
        }
      }
    }),
    (g = g.map(function (S) {
      var T = S.key;
      return p.has(T)
        ? S
        : P.createElement(
            ir,
            { key: Ut(S), isPresent: !0, presenceAffectsLayout: l },
            S
          );
    })),
    cs !== "production" &&
      n &&
      g.length > 1 &&
      console.warn(
        "You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour."
      ),
    P.createElement(
      P.Fragment,
      null,
      p.size
        ? g
        : g.map(function (S) {
            return P.cloneElement(S);
          })
    )
  );
};
function nc({ routes: r, isOpen: e }) {
  const [t, a] = P.useState(null),
    i = (s) => {
      a(t === s ? null : s);
    };
  return w.jsx("div", {
    className: `fixed md:relative inset-y-0 left-0 z-50 transition-transform duration-300 ${
      e ? "translate-x-0" : "-translate-x-full"
    } md:translate-x-0`,
    children: w.jsxs(R.Card, {
      className:
        "h-[100vh] w-72 border border-blue-100 bg-gradient-to-br from-gray-800 to-gray-900",
      style: {
        background:
          "linear-gradient(to bottom right, #2d3748, #1a202c), #2d3748",
      },
      children: [
        w.jsx("div", {
          className: "mb-4 flex items-center gap-4 p-4",
          children: w.jsx(R.Typography, {
            variant: "h5",
            color: "white",
            children: "Stanley",
          }),
        }),
        w.jsx(R.List, {
          children: r.map(({ layout: s, pages: n }) =>
            s === "dashboard"
              ? n.map(({ name: o, path: l, icon: c, subPages: h }) =>
                  w.jsxs(
                    "div",
                    {
                      children: [
                        w.jsxs(Ks, {
                          to: h ? "#" : l,
                          className: ({ isActive: d }) =>
                            `flex items-center px-4 py-2 rounded-lg transition-colors ${
                              d && !h
                                ? "bg-blue-500 text-white"
                                : "text-white hover:bg-gray-700"
                            }`,
                          onClick: (d) => {
                            h && (d.preventDefault(), i(o));
                          },
                          children: [
                            w.jsx(R.ListItemPrefix, {
                              className: "mr-2",
                              children: c,
                            }),
                            w.jsx(R.Typography, {
                              color: "blue-gray",
                              className: "mr-auto font-normal",
                              children: o,
                            }),
                            h &&
                              (t === o
                                ? w.jsx(Ch, { className: "w-4 h-4" })
                                : w.jsx(kh, { className: "w-4 h-4" })),
                          ],
                        }),
                        w.jsx(mp, {
                          children:
                            h &&
                            t === o &&
                            w.jsx(dp.div, {
                              initial: { height: 0, opacity: 0 },
                              animate: { height: "auto", opacity: 1 },
                              exit: { height: 0, opacity: 0 },
                              transition: { duration: 0.3, ease: "easeInOut" },
                              className: "ml-6 overflow-hidden mt-2",
                              children: h.map(({ name: d, path: u }) =>
                                w.jsxs(
                                  Ks,
                                  {
                                    to: u,
                                    className: ({ isActive: f }) =>
                                      `flex items-center px-4 py-2 rounded-lg transition-colors ${
                                        f
                                          ? "bg-blue-400 text-white"
                                          : "text-white hover:bg-gray-700"
                                      }`,
                                    children: [
                                      w.jsxs(R.ListItemPrefix, {
                                        className: "mr-2",
                                        children: [
                                          d === "Users" &&
                                            w.jsx(Qs, { className: "w-4 h-4" }),
                                          d === "Professional" &&
                                            w.jsx(Qs, { className: "w-4 h-4" }),
                                          d === "Client" &&
                                            w.jsx(Mh, { className: "w-4 h-4" }),
                                          d === "Agency" &&
                                            w.jsx(yh, { className: "w-4 h-4" }),
                                        ],
                                      }),
                                      w.jsx(R.Typography, {
                                        color: "blue-gray",
                                        className: "mr-auto font-normal",
                                        children: d,
                                      }),
                                    ],
                                  },
                                  u
                                )
                              ),
                            }),
                        }),
                      ],
                    },
                    l
                  )
                )
              : null
          ),
        }),
      ],
    }),
  });
}
nc.propTypes = {
  routes: ie.arrayOf(
    ie.shape({
      layout: ie.string.isRequired,
      pages: ie.arrayOf(
        ie.shape({
          name: ie.string.isRequired,
          path: ie.string.isRequired,
          icon: ie.node.isRequired,
          subPages: ie.array,
        })
      ).isRequired,
    })
  ).isRequired,
  isOpen: ie.bool.isRequired,
};
function xp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      fillRule: "evenodd",
      d: "M3 6.75A.75.75 0 0 1 3.75 6h16.5a.75.75 0 0 1 0 1.5H3.75A.75.75 0 0 1 3 6.75ZM3 12a.75.75 0 0 1 .75-.75h16.5a.75.75 0 0 1 0 1.5H3.75A.75.75 0 0 1 3 12Zm0 5.25a.75.75 0 0 1 .75-.75h16.5a.75.75 0 0 1 0 1.5H3.75a.75.75 0 0 1-.75-.75Z",
      clipRule: "evenodd",
    })
  );
}
const vp = P.forwardRef(xp);
function bp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      fillRule: "evenodd",
      d: "M11.078 2.25c-.917 0-1.699.663-1.85 1.567L9.05 4.889c-.02.12-.115.26-.297.348a7.493 7.493 0 0 0-.986.57c-.166.115-.334.126-.45.083L6.3 5.508a1.875 1.875 0 0 0-2.282.819l-.922 1.597a1.875 1.875 0 0 0 .432 2.385l.84.692c.095.078.17.229.154.43a7.598 7.598 0 0 0 0 1.139c.015.2-.059.352-.153.43l-.841.692a1.875 1.875 0 0 0-.432 2.385l.922 1.597a1.875 1.875 0 0 0 2.282.818l1.019-.382c.115-.043.283-.031.45.082.312.214.641.405.985.57.182.088.277.228.297.35l.178 1.071c.151.904.933 1.567 1.85 1.567h1.844c.916 0 1.699-.663 1.85-1.567l.178-1.072c.02-.12.114-.26.297-.349.344-.165.673-.356.985-.57.167-.114.335-.125.45-.082l1.02.382a1.875 1.875 0 0 0 2.28-.819l.923-1.597a1.875 1.875 0 0 0-.432-2.385l-.84-.692c-.095-.078-.17-.229-.154-.43a7.614 7.614 0 0 0 0-1.139c-.016-.2.059-.352.153-.43l.84-.692c.708-.582.891-1.59.433-2.385l-.922-1.597a1.875 1.875 0 0 0-2.282-.818l-1.02.382c-.114.043-.282.031-.449-.083a7.49 7.49 0 0 0-.985-.57c-.183-.087-.277-.227-.297-.348l-.179-1.072a1.875 1.875 0 0 0-1.85-1.567h-1.843ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z",
      clipRule: "evenodd",
    })
  );
}
const yp = P.forwardRef(bp);
function wp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      d: "M11.47 3.841a.75.75 0 0 1 1.06 0l8.69 8.69a.75.75 0 1 0 1.06-1.061l-8.689-8.69a2.25 2.25 0 0 0-3.182 0l-8.69 8.69a.75.75 0 1 0 1.061 1.06l8.69-8.689Z",
    }),
    P.createElement("path", {
      d: "m12 5.432 8.159 8.159c.03.03.06.058.091.086v6.198c0 1.035-.84 1.875-1.875 1.875H15a.75.75 0 0 1-.75-.75v-4.5a.75.75 0 0 0-.75-.75h-3a.75.75 0 0 0-.75.75V21a.75.75 0 0 1-.75.75H5.625a1.875 1.875 0 0 1-1.875-1.875v-6.198a2.29 2.29 0 0 0 .091-.086L12 5.432Z",
    })
  );
}
const kp = P.forwardRef(wp);
function Ap({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      d: "M21.731 2.269a2.625 2.625 0 0 0-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 0 0 0-3.712ZM19.513 8.199l-3.712-3.712-12.15 12.15a5.25 5.25 0 0 0-1.32 2.214l-.8 2.685a.75.75 0 0 0 .933.933l2.685-.8a5.25 5.25 0 0 0 2.214-1.32L19.513 8.2Z",
    })
  );
}
const Cp = P.forwardRef(Ap);
function Sp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      fillRule: "evenodd",
      d: "M1.5 6a2.25 2.25 0 0 1 2.25-2.25h16.5A2.25 2.25 0 0 1 22.5 6v12a2.25 2.25 0 0 1-2.25 2.25H3.75A2.25 2.25 0 0 1 1.5 18V6ZM3 16.06V18c0 .414.336.75.75.75h16.5A.75.75 0 0 0 21 18v-1.94l-2.69-2.689a1.5 1.5 0 0 0-2.12 0l-.88.879.97.97a.75.75 0 1 1-1.06 1.06l-5.16-5.159a1.5 1.5 0 0 0-2.12 0L3 16.061Zm10.125-7.81a1.125 1.125 0 1 1 2.25 0 1.125 1.125 0 0 1-2.25 0Z",
      clipRule: "evenodd",
    })
  );
}
const na = P.forwardRef(Sp);
function Tp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      fillRule: "evenodd",
      d: "M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm11.378-3.917c-.89-.777-2.366-.777-3.255 0a.75.75 0 0 1-.988-1.129c1.454-1.272 3.776-1.272 5.23 0 1.513 1.324 1.513 3.518 0 4.842a3.75 3.75 0 0 1-.837.552c-.676.328-1.028.774-1.028 1.152v.75a.75.75 0 0 1-1.5 0v-.75c0-1.279 1.06-2.107 1.875-2.502.182-.088.351-.199.503-.331.83-.727.83-1.857 0-2.584ZM12 18a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Z",
      clipRule: "evenodd",
    })
  );
}
const ro = P.forwardRef(Tp);
function Pp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      d: "M13.5 4.06c0-1.336-1.616-2.005-2.56-1.06l-4.5 4.5H4.508c-1.141 0-2.318.664-2.66 1.905A9.76 9.76 0 0 0 1.5 12c0 .898.121 1.768.35 2.595.341 1.24 1.518 1.905 2.659 1.905h1.93l4.5 4.5c.945.945 2.561.276 2.561-1.06V4.06ZM18.584 5.106a.75.75 0 0 1 1.06 0c3.808 3.807 3.808 9.98 0 13.788a.75.75 0 0 1-1.06-1.06 8.25 8.25 0 0 0 0-11.668.75.75 0 0 1 0-1.06Z",
    }),
    P.createElement("path", {
      d: "M15.932 7.757a.75.75 0 0 1 1.061 0 6 6 0 0 1 0 8.486.75.75 0 0 1-1.06-1.061 4.5 4.5 0 0 0 0-6.364.75.75 0 0 1 0-1.06Z",
    })
  );
}
const Os = P.forwardRef(Pp);
function Lp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      fillRule: "evenodd",
      d: "M16.5 4.478v.227a48.816 48.816 0 0 1 3.878.512.75.75 0 1 1-.256 1.478l-.209-.035-1.005 13.07a3 3 0 0 1-2.991 2.77H8.084a3 3 0 0 1-2.991-2.77L4.087 6.66l-.209.035a.75.75 0 0 1-.256-1.478A48.567 48.567 0 0 1 7.5 4.705v-.227c0-1.564 1.213-2.9 2.816-2.951a52.662 52.662 0 0 1 3.369 0c1.603.051 2.815 1.387 2.815 2.951Zm-6.136-1.452a51.196 51.196 0 0 1 3.273 0C14.39 3.05 15 3.684 15 4.478v.113a49.488 49.488 0 0 0-6 0v-.113c0-.794.609-1.428 1.364-1.452Zm-.355 5.945a.75.75 0 1 0-1.5.058l.347 9a.75.75 0 1 0 1.499-.058l-.346-9Zm5.48.058a.75.75 0 1 0-1.498-.058l-.347 9a.75.75 0 0 0 1.5.058l.345-9Z",
      clipRule: "evenodd",
    })
  );
}
const Yt = P.forwardRef(Lp);
function Mp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      fillRule: "evenodd",
      d: "M18.685 19.097A9.723 9.723 0 0 0 21.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 0 0 3.065 7.097A9.716 9.716 0 0 0 12 21.75a9.716 9.716 0 0 0 6.685-2.653Zm-12.54-1.285A7.486 7.486 0 0 1 12 15a7.486 7.486 0 0 1 5.855 2.812A8.224 8.224 0 0 1 12 20.25a8.224 8.224 0 0 1-5.855-2.438ZM15.75 9a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z",
      clipRule: "evenodd",
    })
  );
}
const so = P.forwardRef(Mp);
function Ep({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      fillRule: "evenodd",
      d: "M7.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM3.751 20.105a8.25 8.25 0 0 1 16.498 0 .75.75 0 0 1-.437.695A18.683 18.683 0 0 1 12 22.5c-2.786 0-5.433-.608-7.812-1.7a.75.75 0 0 1-.437-.695Z",
      clipRule: "evenodd",
    })
  );
}
const Ip = P.forwardRef(Ep);
function Rp({ title: r, titleId: e, ...t }, a) {
  return P.createElement(
    "svg",
    Object.assign(
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        "aria-hidden": "true",
        "data-slot": "icon",
        ref: a,
        "aria-labelledby": e,
      },
      t
    ),
    r ? P.createElement("title", { id: e }, r) : null,
    P.createElement("path", {
      d: "M4.5 6.375a4.125 4.125 0 1 1 8.25 0 4.125 4.125 0 0 1-8.25 0ZM14.25 8.625a3.375 3.375 0 1 1 6.75 0 3.375 3.375 0 0 1-6.75 0ZM1.5 19.125a7.125 7.125 0 0 1 14.25 0v.003l-.001.119a.75.75 0 0 1-.363.63 13.067 13.067 0 0 1-6.761 1.873c-2.472 0-4.786-.684-6.76-1.873a.75.75 0 0 1-.364-.63l-.001-.122ZM17.25 19.128l-.001.144a2.25 2.25 0 0 1-.233.96 10.088 10.088 0 0 0 5.06-1.01.75.75 0 0 0 .42-.643 4.875 4.875 0 0 0-6.957-4.611 8.586 8.586 0 0 1 1.71 5.157v.003Z",
    })
  );
}
const _p = P.forwardRef(Rp);
function Xi({ color: r, icon: e, title: t, value: a, footer: i }) {
  return w.jsxs(R.Card, {
    className: "border border-blue-gray-100 shadow-sm",
    children: [
      w.jsx(R.CardHeader, {
        variant: "gradient",
        color: r,
        floated: !1,
        shadow: !1,
        className: "absolute grid h-12 w-12 place-items-center",
        children: e,
      }),
      w.jsxs(R.CardBody, {
        className: "p-4 text-right",
        children: [
          w.jsx(R.Typography, {
            variant: "small",
            className: "font-normal text-blue-gray-600",
            children: t,
          }),
          w.jsx(R.Typography, {
            variant: "h4",
            color: "blue-gray",
            children: a,
          }),
        ],
      }),
      i &&
        w.jsx(R.CardFooter, {
          className: "border-t border-blue-gray-50 p-4",
          children: i,
        }),
    ],
  });
}
Xi.defaultProps = { color: "blue", footer: null };
Xi.propTypes = {
  color: ie.oneOf([
    "white",
    "blue-gray",
    "gray",
    "brown",
    "deep-orange",
    "orange",
    "amber",
    "yellow",
    "lime",
    "light-green",
    "green",
    "teal",
    "cyan",
    "light-blue",
    "blue",
    "indigo",
    "deep-purple",
    "purple",
    "pink",
    "red",
  ]),
  icon: ie.node.isRequired,
  title: ie.node.isRequired,
  value: ie.node.isRequired,
  footer: ie.node,
};
Xi.displayName = "/src/widgets/cards/statistics-card.jsx";
ie.string.isRequired, ie.node, ie.object;
ie.string.isRequired, ie.string.isRequired, ie.node.isRequired, ie.node;
var rr = {};
/*!
 * ApexCharts v4.4.0
 * (c) 2018-2025 ApexCharts
 * Released under the MIT License.
 */ function Hr(r, e) {
  (e == null || e > r.length) && (e = r.length);
  for (var t = 0, a = Array(e); t < e; t++) a[t] = r[t];
  return a;
}
function oc(r) {
  if (r === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    );
  return r;
}
function U(r, e) {
  if (!(r instanceof e))
    throw new TypeError("Cannot call a class as a function");
}
function no(r, e) {
  for (var t = 0; t < e.length; t++) {
    var a = e[t];
    (a.enumerable = a.enumerable || !1),
      (a.configurable = !0),
      "value" in a && (a.writable = !0),
      Object.defineProperty(r, hc(a.key), a);
  }
}
function $(r, e, t) {
  return (
    e && no(r.prototype, e),
    t && no(r, t),
    Object.defineProperty(r, "prototype", { writable: !1 }),
    r
  );
}
function xa(r, e) {
  var t = (typeof Symbol < "u" && r[Symbol.iterator]) || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = Ns(r)) || e) {
      t && (r = t);
      var a = 0,
        i = function () {};
      return {
        s: i,
        n: function () {
          return a >= r.length ? { done: !0 } : { done: !1, value: r[a++] };
        },
        e: function (l) {
          throw l;
        },
        f: i,
      };
    }
    throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  var s,
    n = !0,
    o = !1;
  return {
    s: function () {
      t = t.call(r);
    },
    n: function () {
      var l = t.next();
      return (n = l.done), l;
    },
    e: function (l) {
      (o = !0), (s = l);
    },
    f: function () {
      try {
        n || t.return == null || t.return();
      } finally {
        if (o) throw s;
      }
    },
  };
}
function Ga(r) {
  var e = lc();
  return function () {
    var t,
      a = Mi(r);
    if (e) {
      var i = Mi(this).constructor;
      t = Reflect.construct(a, arguments, i);
    } else t = a.apply(this, arguments);
    return (function (s, n) {
      if (n && (typeof n == "object" || typeof n == "function")) return n;
      if (n !== void 0)
        throw new TypeError(
          "Derived constructors may only return object or undefined"
        );
      return oc(s);
    })(this, t);
  };
}
function Li(r, e, t) {
  return (
    (e = hc(e)) in r
      ? Object.defineProperty(r, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0,
        })
      : (r[e] = t),
    r
  );
}
function Mi(r) {
  return (
    (Mi = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function (e) {
          return e.__proto__ || Object.getPrototypeOf(e);
        }),
    Mi(r)
  );
}
function Ua(r, e) {
  if (typeof e != "function" && e !== null)
    throw new TypeError("Super expression must either be null or a function");
  (r.prototype = Object.create(e && e.prototype, {
    constructor: { value: r, writable: !0, configurable: !0 },
  })),
    Object.defineProperty(r, "prototype", { writable: !1 }),
    e && Xr(r, e);
}
function lc() {
  try {
    var r = !Boolean.prototype.valueOf.call(
      Reflect.construct(Boolean, [], function () {})
    );
  } catch {}
  return (lc = function () {
    return !!r;
  })();
}
function oo(r, e) {
  var t = Object.keys(r);
  if (Object.getOwnPropertySymbols) {
    var a = Object.getOwnPropertySymbols(r);
    e &&
      (a = a.filter(function (i) {
        return Object.getOwnPropertyDescriptor(r, i).enumerable;
      })),
      t.push.apply(t, a);
  }
  return t;
}
function Y(r) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2
      ? oo(Object(t), !0).forEach(function (a) {
          Li(r, a, t[a]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t))
      : oo(Object(t)).forEach(function (a) {
          Object.defineProperty(r, a, Object.getOwnPropertyDescriptor(t, a));
        });
  }
  return r;
}
function Xr(r, e) {
  return (
    (Xr = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function (t, a) {
          return (t.__proto__ = a), t;
        }),
    Xr(r, e)
  );
}
function cc(r, e) {
  return (
    (function (t) {
      if (Array.isArray(t)) return t;
    })(r) ||
    (function (t, a) {
      var i =
        t == null
          ? null
          : (typeof Symbol < "u" && t[Symbol.iterator]) || t["@@iterator"];
      if (i != null) {
        var s,
          n,
          o,
          l,
          c = [],
          h = !0,
          d = !1;
        try {
          if (((o = (i = i.call(t)).next), a === 0)) {
            if (Object(i) !== i) return;
            h = !1;
          } else
            for (
              ;
              !(h = (s = o.call(i)).done) && (c.push(s.value), c.length !== a);
              h = !0
            );
        } catch (u) {
          (d = !0), (n = u);
        } finally {
          try {
            if (!h && i.return != null && ((l = i.return()), Object(l) !== l))
              return;
          } finally {
            if (d) throw n;
          }
        }
        return c;
      }
    })(r, e) ||
    Ns(r, e) ||
    (function () {
      throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    })()
  );
}
function Pe(r) {
  return (
    (function (e) {
      if (Array.isArray(e)) return Hr(e);
    })(r) ||
    (function (e) {
      if (
        (typeof Symbol < "u" && e[Symbol.iterator] != null) ||
        e["@@iterator"] != null
      )
        return Array.from(e);
    })(r) ||
    Ns(r) ||
    (function () {
      throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    })()
  );
}
function hc(r) {
  var e = (function (t, a) {
    if (typeof t != "object" || !t) return t;
    var i = t[Symbol.toPrimitive];
    if (i !== void 0) {
      var s = i.call(t, a);
      if (typeof s != "object") return s;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (a === "string" ? String : Number)(t);
  })(r, "string");
  return typeof e == "symbol" ? e : e + "";
}
function aa(r) {
  return (
    (aa =
      typeof Symbol == "function" && typeof Symbol.iterator == "symbol"
        ? function (e) {
            return typeof e;
          }
        : function (e) {
            return e &&
              typeof Symbol == "function" &&
              e.constructor === Symbol &&
              e !== Symbol.prototype
              ? "symbol"
              : typeof e;
          }),
    aa(r)
  );
}
function Ns(r, e) {
  if (r) {
    if (typeof r == "string") return Hr(r, e);
    var t = {}.toString.call(r).slice(8, -1);
    return (
      t === "Object" && r.constructor && (t = r.constructor.name),
      t === "Map" || t === "Set"
        ? Array.from(r)
        : t === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
        ? Hr(r, e)
        : void 0
    );
  }
}
var _ = (function () {
    function r() {
      U(this, r);
    }
    return (
      $(
        r,
        [
          {
            key: "shadeRGBColor",
            value: function (e, t) {
              var a = t.split(","),
                i = e < 0 ? 0 : 255,
                s = e < 0 ? -1 * e : e,
                n = parseInt(a[0].slice(4), 10),
                o = parseInt(a[1], 10),
                l = parseInt(a[2], 10);
              return (
                "rgb(" +
                (Math.round((i - n) * s) + n) +
                "," +
                (Math.round((i - o) * s) + o) +
                "," +
                (Math.round((i - l) * s) + l) +
                ")"
              );
            },
          },
          {
            key: "shadeHexColor",
            value: function (e, t) {
              var a = parseInt(t.slice(1), 16),
                i = e < 0 ? 0 : 255,
                s = e < 0 ? -1 * e : e,
                n = a >> 16,
                o = (a >> 8) & 255,
                l = 255 & a;
              return (
                "#" +
                (
                  16777216 +
                  65536 * (Math.round((i - n) * s) + n) +
                  256 * (Math.round((i - o) * s) + o) +
                  (Math.round((i - l) * s) + l)
                )
                  .toString(16)
                  .slice(1)
              );
            },
          },
          {
            key: "shadeColor",
            value: function (e, t) {
              return r.isColorHex(t)
                ? this.shadeHexColor(e, t)
                : this.shadeRGBColor(e, t);
            },
          },
        ],
        [
          {
            key: "bind",
            value: function (e, t) {
              return function () {
                return e.apply(t, arguments);
              };
            },
          },
          {
            key: "isObject",
            value: function (e) {
              return e && aa(e) === "object" && !Array.isArray(e) && e != null;
            },
          },
          {
            key: "is",
            value: function (e, t) {
              return Object.prototype.toString.call(t) === "[object " + e + "]";
            },
          },
          {
            key: "listToArray",
            value: function (e) {
              var t,
                a = [];
              for (t = 0; t < e.length; t++) a[t] = e[t];
              return a;
            },
          },
          {
            key: "extend",
            value: function (e, t) {
              var a = this;
              typeof Object.assign != "function" &&
                (Object.assign = function (s) {
                  if (s == null)
                    throw new TypeError(
                      "Cannot convert undefined or null to object"
                    );
                  for (var n = Object(s), o = 1; o < arguments.length; o++) {
                    var l = arguments[o];
                    if (l != null)
                      for (var c in l) l.hasOwnProperty(c) && (n[c] = l[c]);
                  }
                  return n;
                });
              var i = Object.assign({}, e);
              return (
                this.isObject(e) &&
                  this.isObject(t) &&
                  Object.keys(t).forEach(function (s) {
                    a.isObject(t[s]) && s in e
                      ? (i[s] = a.extend(e[s], t[s]))
                      : Object.assign(i, Li({}, s, t[s]));
                  }),
                i
              );
            },
          },
          {
            key: "extendArray",
            value: function (e, t) {
              var a = [];
              return (
                e.map(function (i) {
                  a.push(r.extend(t, i));
                }),
                (e = a)
              );
            },
          },
          {
            key: "monthMod",
            value: function (e) {
              return e % 12;
            },
          },
          {
            key: "clone",
            value: function (e) {
              var t,
                a =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : new WeakMap();
              if (e === null || aa(e) !== "object") return e;
              if (a.has(e)) return a.get(e);
              if (Array.isArray(e)) {
                (t = []), a.set(e, t);
                for (var i = 0; i < e.length; i++) t[i] = this.clone(e[i], a);
              } else if (e instanceof Date) t = new Date(e.getTime());
              else
                for (var s in ((t = {}), a.set(e, t), e))
                  e.hasOwnProperty(s) && (t[s] = this.clone(e[s], a));
              return t;
            },
          },
          {
            key: "log10",
            value: function (e) {
              return Math.log(e) / Math.LN10;
            },
          },
          {
            key: "roundToBase10",
            value: function (e) {
              return Math.pow(10, Math.floor(Math.log10(e)));
            },
          },
          {
            key: "roundToBase",
            value: function (e, t) {
              return Math.pow(t, Math.floor(Math.log(e) / Math.log(t)));
            },
          },
          {
            key: "parseNumber",
            value: function (e) {
              return e === null ? e : parseFloat(e);
            },
          },
          {
            key: "stripNumber",
            value: function (e) {
              var t =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : 2;
              return Number.isInteger(e) ? e : parseFloat(e.toPrecision(t));
            },
          },
          {
            key: "randomId",
            value: function () {
              return (Math.random() + 1).toString(36).substring(4);
            },
          },
          {
            key: "noExponents",
            value: function (e) {
              return e.toString().includes("e") ? Math.round(e) : e;
            },
          },
          {
            key: "elementExists",
            value: function (e) {
              return !(!e || !e.isConnected);
            },
          },
          {
            key: "getDimensions",
            value: function (e) {
              var t = getComputedStyle(e, null),
                a = e.clientHeight,
                i = e.clientWidth;
              return (
                (a -= parseFloat(t.paddingTop) + parseFloat(t.paddingBottom)),
                [
                  (i -= parseFloat(t.paddingLeft) + parseFloat(t.paddingRight)),
                  a,
                ]
              );
            },
          },
          {
            key: "getBoundingClientRect",
            value: function (e) {
              var t = e.getBoundingClientRect();
              return {
                top: t.top,
                right: t.right,
                bottom: t.bottom,
                left: t.left,
                width: e.clientWidth,
                height: e.clientHeight,
                x: t.left,
                y: t.top,
              };
            },
          },
          {
            key: "getLargestStringFromArr",
            value: function (e) {
              return e.reduce(function (t, a) {
                return (
                  Array.isArray(a) &&
                    (a = a.reduce(function (i, s) {
                      return i.length > s.length ? i : s;
                    })),
                  t.length > a.length ? t : a
                );
              }, 0);
            },
          },
          {
            key: "hexToRgba",
            value: function () {
              var e =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : "#999999",
                t =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : 0.6;
              e.substring(0, 1) !== "#" && (e = "#999999");
              var a = e.replace("#", "");
              a = a.match(new RegExp("(.{" + a.length / 3 + "})", "g"));
              for (var i = 0; i < a.length; i++)
                a[i] = parseInt(a[i].length === 1 ? a[i] + a[i] : a[i], 16);
              return t !== void 0 && a.push(t), "rgba(" + a.join(",") + ")";
            },
          },
          {
            key: "getOpacityFromRGBA",
            value: function (e) {
              return parseFloat(e.replace(/^.*,(.+)\)/, "$1"));
            },
          },
          {
            key: "rgb2hex",
            value: function (e) {
              return (e = e.match(
                /^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i
              )) && e.length === 4
                ? "#" +
                    ("0" + parseInt(e[1], 10).toString(16)).slice(-2) +
                    ("0" + parseInt(e[2], 10).toString(16)).slice(-2) +
                    ("0" + parseInt(e[3], 10).toString(16)).slice(-2)
                : "";
            },
          },
          {
            key: "isColorHex",
            value: function (e) {
              return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(
                e
              );
            },
          },
          {
            key: "getPolygonPos",
            value: function (e, t) {
              for (var a = [], i = (2 * Math.PI) / t, s = 0; s < t; s++) {
                var n = {};
                (n.x = e * Math.sin(s * i)),
                  (n.y = -e * Math.cos(s * i)),
                  a.push(n);
              }
              return a;
            },
          },
          {
            key: "polarToCartesian",
            value: function (e, t, a, i) {
              var s = ((i - 90) * Math.PI) / 180;
              return { x: e + a * Math.cos(s), y: t + a * Math.sin(s) };
            },
          },
          {
            key: "escapeString",
            value: function (e) {
              var t =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : "x",
                a = e.toString().slice();
              return (a = a.replace(
                /[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi,
                t
              ));
            },
          },
          {
            key: "negToZero",
            value: function (e) {
              return e < 0 ? 0 : e;
            },
          },
          {
            key: "moveIndexInArray",
            value: function (e, t, a) {
              if (a >= e.length)
                for (var i = a - e.length + 1; i--; ) e.push(void 0);
              return e.splice(a, 0, e.splice(t, 1)[0]), e;
            },
          },
          {
            key: "extractNumber",
            value: function (e) {
              return parseFloat(e.replace(/[^\d.]*/g, ""));
            },
          },
          {
            key: "findAncestor",
            value: function (e, t) {
              for (; (e = e.parentElement) && !e.classList.contains(t); );
              return e;
            },
          },
          {
            key: "setELstyles",
            value: function (e, t) {
              for (var a in t) t.hasOwnProperty(a) && (e.style.key = t[a]);
            },
          },
          {
            key: "preciseAddition",
            value: function (e, t) {
              var a = (String(e).split(".")[1] || "").length,
                i = (String(t).split(".")[1] || "").length,
                s = Math.pow(10, Math.max(a, i));
              return (Math.round(e * s) + Math.round(t * s)) / s;
            },
          },
          {
            key: "isNumber",
            value: function (e) {
              return (
                !isNaN(e) &&
                parseFloat(Number(e)) === e &&
                !isNaN(parseInt(e, 10))
              );
            },
          },
          {
            key: "isFloat",
            value: function (e) {
              return Number(e) === e && e % 1 != 0;
            },
          },
          {
            key: "isMsEdge",
            value: function () {
              var e = window.navigator.userAgent,
                t = e.indexOf("Edge/");
              return (
                t > 0 && parseInt(e.substring(t + 5, e.indexOf(".", t)), 10)
              );
            },
          },
          {
            key: "getGCD",
            value: function (e, t) {
              var a =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : 7,
                i = Math.pow(10, a - Math.floor(Math.log10(Math.max(e, t))));
              for (
                e = Math.round(Math.abs(e) * i),
                  t = Math.round(Math.abs(t) * i);
                t;

              ) {
                var s = t;
                (t = e % t), (e = s);
              }
              return e / i;
            },
          },
          {
            key: "getPrimeFactors",
            value: function (e) {
              for (var t = [], a = 2; e >= 2; )
                e % a == 0 ? (t.push(a), (e /= a)) : a++;
              return t;
            },
          },
          {
            key: "mod",
            value: function (e, t) {
              var a =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : 7,
                i = Math.pow(10, a - Math.floor(Math.log10(Math.max(e, t))));
              return (
                ((e = Math.round(Math.abs(e) * i)) %
                  (t = Math.round(Math.abs(t) * i))) /
                i
              );
            },
          },
        ]
      ),
      r
    );
  })(),
  oa = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "animateLine",
          value: function (e, t, a, i) {
            e.attr(t).animate(i).attr(a);
          },
        },
        {
          key: "animateMarker",
          value: function (e, t, a, i) {
            e.attr({ opacity: 0 })
              .animate(t)
              .attr({ opacity: 1 })
              .after(function () {
                i();
              });
          },
        },
        {
          key: "animateRect",
          value: function (e, t, a, i, s) {
            e.attr(t)
              .animate(i)
              .attr(a)
              .after(function () {
                return s();
              });
          },
        },
        {
          key: "animatePathsGradually",
          value: function (e) {
            var t = e.el,
              a = e.realIndex,
              i = e.j,
              s = e.fill,
              n = e.pathFrom,
              o = e.pathTo,
              l = e.speed,
              c = e.delay,
              h = this.w,
              d = 0;
            h.config.chart.animations.animateGradually.enabled &&
              (d = h.config.chart.animations.animateGradually.delay),
              h.config.chart.animations.dynamicAnimation.enabled &&
                h.globals.dataChanged &&
                h.config.chart.type !== "bar" &&
                (d = 0),
              this.morphSVG(
                t,
                a,
                i,
                h.config.chart.type !== "line" || h.globals.comboCharts
                  ? s
                  : "stroke",
                n,
                o,
                l,
                c * d
              );
          },
        },
        {
          key: "showDelayedElements",
          value: function () {
            this.w.globals.delayedElements.forEach(function (e) {
              var t = e.el;
              t.classList.remove("apexcharts-element-hidden"),
                t.classList.add("apexcharts-hidden-element-shown");
            });
          },
        },
        {
          key: "animationCompleted",
          value: function (e) {
            var t = this.w;
            t.globals.animationEnded ||
              ((t.globals.animationEnded = !0),
              this.showDelayedElements(),
              typeof t.config.chart.events.animationEnd == "function" &&
                t.config.chart.events.animationEnd(this.ctx, { el: e, w: t }));
          },
        },
        {
          key: "morphSVG",
          value: function (e, t, a, i, s, n, o, l) {
            var c = this,
              h = this.w;
            s || (s = e.attr("pathFrom")), n || (n = e.attr("pathTo"));
            var d = function (u) {
              return (
                h.config.chart.type === "radar" && (o = 1),
                "M 0 ".concat(h.globals.gridHeight)
              );
            };
            (!s || s.indexOf("undefined") > -1 || s.indexOf("NaN") > -1) &&
              (s = d()),
              (!n.trim() ||
                n.indexOf("undefined") > -1 ||
                n.indexOf("NaN") > -1) &&
                (n = d()),
              h.globals.shouldAnimate || (o = 1),
              e
                .plot(s)
                .animate(1, l)
                .plot(s)
                .animate(o, l)
                .plot(n)
                .after(function () {
                  _.isNumber(a)
                    ? a ===
                        h.globals.series[h.globals.maxValsInArrayIndex].length -
                          2 &&
                      h.globals.shouldAnimate &&
                      c.animationCompleted(e)
                    : i !== "none" &&
                      h.globals.shouldAnimate &&
                      ((!h.globals.comboCharts &&
                        t === h.globals.series.length - 1) ||
                        h.globals.comboCharts) &&
                      c.animationCompleted(e),
                    c.showDelayedElements();
                });
          },
        },
      ]),
      r
    );
  })();
const Br = {},
  dc = [];
function ae(r, e) {
  if (Array.isArray(r)) for (const t of r) ae(t, e);
  else if (typeof r != "object")
    uc(Object.getOwnPropertyNames(e)), (Br[r] = Object.assign(Br[r] || {}, e));
  else for (const t in r) ae(t, r[t]);
}
function De(r) {
  return Br[r] || {};
}
function uc(r) {
  dc.push(...r);
}
function js(r, e) {
  let t;
  const a = r.length,
    i = [];
  for (t = 0; t < a; t++) i.push(e(r[t]));
  return i;
}
function sr(r) {
  return ((r % 360) * Math.PI) / 180;
}
function la(r) {
  return r.charAt(0).toUpperCase() + r.slice(1);
}
function ca(r, e, t, a) {
  return (
    (e != null && t != null) ||
      ((a = a || r.bbox()),
      e == null
        ? (e = (a.width / a.height) * t)
        : t == null && (t = (a.height / a.width) * e)),
    { width: e, height: t }
  );
}
function Yr(r, e) {
  const t = r.origin;
  let a = r.ox != null ? r.ox : r.originX != null ? r.originX : "center",
    i = r.oy != null ? r.oy : r.originY != null ? r.originY : "center";
  t != null &&
    ([a, i] = Array.isArray(t)
      ? t
      : typeof t == "object"
      ? [t.x, t.y]
      : [t, t]);
  const s = typeof a == "string",
    n = typeof i == "string";
  if (s || n) {
    const { height: o, width: l, x: c, y: h } = e.bbox();
    s && (a = a.includes("left") ? c : a.includes("right") ? c + l : c + l / 2),
      n &&
        (i = i.includes("top") ? h : i.includes("bottom") ? h + o : h + o / 2);
  }
  return [a, i];
}
const Op = new Set(["desc", "metadata", "title"]),
  Wr = (r) => Op.has(r.nodeName),
  fc = (r, e, t = {}) => {
    const a = { ...e };
    for (const i in a) a[i].valueOf() === t[i] && delete a[i];
    Object.keys(a).length
      ? r.node.setAttribute("data-svgjs", JSON.stringify(a))
      : (r.node.removeAttribute("data-svgjs"),
        r.node.removeAttribute("svgjs:data"));
  },
  Fs = "http://www.w3.org/2000/svg",
  nr = "http://www.w3.org/2000/xmlns/",
  ha = "http://www.w3.org/1999/xlink",
  oe = {
    window: typeof window > "u" ? null : window,
    document: typeof document > "u" ? null : document,
  };
function $a() {
  return oe.window;
}
let Ds = class {};
const Ft = {},
  zs = "___SYMBOL___ROOT___";
function Ra(r, e = Fs) {
  return oe.document.createElementNS(e, r);
}
function je(r, e = !1) {
  if (r instanceof Ds) return r;
  if (typeof r == "object") return or(r);
  if (r == null) return new Ft[zs]();
  if (typeof r == "string" && r.charAt(0) !== "<")
    return or(oe.document.querySelector(r));
  const t = e ? oe.document.createElement("div") : Ra("svg");
  return (
    (t.innerHTML = r), (r = or(t.firstChild)), t.removeChild(t.firstChild), r
  );
}
function me(r, e) {
  return e &&
    (e instanceof oe.window.Node ||
      (e.ownerDocument && e instanceof e.ownerDocument.defaultView.Node))
    ? e
    : Ra(r);
}
function Ye(r) {
  if (!r) return null;
  if (r.instance instanceof Ds) return r.instance;
  if (r.nodeName === "#document-fragment") return new Ft.Fragment(r);
  let e = la(r.nodeName || "Dom");
  return (
    e === "LinearGradient" || e === "RadialGradient"
      ? (e = "Gradient")
      : Ft[e] || (e = "Dom"),
    new Ft[e](r)
  );
}
let or = Ye;
function le(r, e = r.name, t = !1) {
  return (
    (Ft[e] = r),
    t && (Ft[zs] = r),
    uc(Object.getOwnPropertyNames(r.prototype)),
    r
  );
}
let Np = 1e3;
function gc(r) {
  return "Svgjs" + la(r) + Np++;
}
function pc(r) {
  for (let e = r.children.length - 1; e >= 0; e--) pc(r.children[e]);
  return r.id && (r.id = gc(r.nodeName)), r;
}
function K(r, e) {
  let t, a;
  for (a = (r = Array.isArray(r) ? r : [r]).length - 1; a >= 0; a--)
    for (t in e) r[a].prototype[t] = e[t];
}
function pe(r) {
  return function (...e) {
    const t = e[e.length - 1];
    return !t || t.constructor !== Object || t instanceof Array
      ? r.apply(this, e)
      : r.apply(this, e.slice(0, -1)).attr(t);
  };
}
ae("Dom", {
  siblings: function () {
    return this.parent().children();
  },
  position: function () {
    return this.parent().index(this);
  },
  next: function () {
    return this.siblings()[this.position() + 1];
  },
  prev: function () {
    return this.siblings()[this.position() - 1];
  },
  forward: function () {
    const r = this.position();
    return this.parent().add(this.remove(), r + 1), this;
  },
  backward: function () {
    const r = this.position();
    return this.parent().add(this.remove(), r ? r - 1 : 0), this;
  },
  front: function () {
    return this.parent().add(this.remove()), this;
  },
  back: function () {
    return this.parent().add(this.remove(), 0), this;
  },
  before: function (r) {
    (r = je(r)).remove();
    const e = this.position();
    return this.parent().add(r, e), this;
  },
  after: function (r) {
    (r = je(r)).remove();
    const e = this.position();
    return this.parent().add(r, e + 1), this;
  },
  insertBefore: function (r) {
    return (r = je(r)).before(this), this;
  },
  insertAfter: function (r) {
    return (r = je(r)).after(this), this;
  },
});
const mc = /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
  jp = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
  Fp = /rgb\((\d+),(\d+),(\d+)\)/,
  Dp = /(#[a-z_][a-z0-9\-_]*)/i,
  zp = /\)\s*,?\s*/,
  Hp = /\s/g,
  lo = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i,
  co = /^rgb\(/,
  ho = /^(\s+)?$/,
  uo = /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
  Xp = /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
  ft = /[\s,]+/,
  Hs = /[MLHVCSQTAZ]/i;
function Bp(r) {
  const e = Math.round(r),
    t = Math.max(0, Math.min(255, e)).toString(16);
  return t.length === 1 ? "0" + t : t;
}
function Vt(r, e) {
  for (let t = e.length; t--; ) if (r[e[t]] == null) return !1;
  return !0;
}
function lr(r, e, t) {
  return (
    t < 0 && (t += 1),
    t > 1 && (t -= 1),
    t < 1 / 6
      ? r + 6 * (e - r) * t
      : t < 0.5
      ? e
      : t < 2 / 3
      ? r + (e - r) * (2 / 3 - t) * 6
      : r
  );
}
ae("Dom", {
  classes: function () {
    const r = this.attr("class");
    return r == null ? [] : r.trim().split(ft);
  },
  hasClass: function (r) {
    return this.classes().indexOf(r) !== -1;
  },
  addClass: function (r) {
    if (!this.hasClass(r)) {
      const e = this.classes();
      e.push(r), this.attr("class", e.join(" "));
    }
    return this;
  },
  removeClass: function (r) {
    return (
      this.hasClass(r) &&
        this.attr(
          "class",
          this.classes()
            .filter(function (e) {
              return e !== r;
            })
            .join(" ")
        ),
      this
    );
  },
  toggleClass: function (r) {
    return this.hasClass(r) ? this.removeClass(r) : this.addClass(r);
  },
}),
  ae("Dom", {
    css: function (r, e) {
      const t = {};
      if (arguments.length === 0)
        return (
          this.node.style.cssText
            .split(/\s*;\s*/)
            .filter(function (a) {
              return !!a.length;
            })
            .forEach(function (a) {
              const i = a.split(/\s*:\s*/);
              t[i[0]] = i[1];
            }),
          t
        );
      if (arguments.length < 2) {
        if (Array.isArray(r)) {
          for (const a of r) {
            const i = a;
            t[a] = this.node.style.getPropertyValue(i);
          }
          return t;
        }
        if (typeof r == "string") return this.node.style.getPropertyValue(r);
        if (typeof r == "object")
          for (const a in r)
            this.node.style.setProperty(
              a,
              r[a] == null || ho.test(r[a]) ? "" : r[a]
            );
      }
      return (
        arguments.length === 2 &&
          this.node.style.setProperty(r, e == null || ho.test(e) ? "" : e),
        this
      );
    },
    show: function () {
      return this.css("display", "");
    },
    hide: function () {
      return this.css("display", "none");
    },
    visible: function () {
      return this.css("display") !== "none";
    },
  }),
  ae("Dom", {
    data: function (r, e, t) {
      if (r == null)
        return this.data(
          js(
            (function (a, i) {
              let s;
              const n = a.length,
                o = [];
              for (s = 0; s < n; s++) i(a[s]) && o.push(a[s]);
              return o;
            })(this.node.attributes, (a) => a.nodeName.indexOf("data-") === 0),
            (a) => a.nodeName.slice(5)
          )
        );
      if (r instanceof Array) {
        const a = {};
        for (const i of r) a[i] = this.data(i);
        return a;
      }
      if (typeof r == "object") for (e in r) this.data(e, r[e]);
      else if (arguments.length < 2)
        try {
          return JSON.parse(this.attr("data-" + r));
        } catch {
          return this.attr("data-" + r);
        }
      else
        this.attr(
          "data-" + r,
          e === null
            ? null
            : t === !0 || typeof e == "string" || typeof e == "number"
            ? e
            : JSON.stringify(e)
        );
      return this;
    },
  }),
  ae("Dom", {
    remember: function (r, e) {
      if (typeof arguments[0] == "object")
        for (const t in r) this.remember(t, r[t]);
      else {
        if (arguments.length === 1) return this.memory()[r];
        this.memory()[r] = e;
      }
      return this;
    },
    forget: function () {
      if (arguments.length === 0) this._memory = {};
      else
        for (let r = arguments.length - 1; r >= 0; r--)
          delete this.memory()[arguments[r]];
      return this;
    },
    memory: function () {
      return (this._memory = this._memory || {});
    },
  });
let rt = class Se {
    constructor(...e) {
      this.init(...e);
    }
    static isColor(e) {
      return e && (e instanceof Se || this.isRgb(e) || this.test(e));
    }
    static isRgb(e) {
      return (
        e &&
        typeof e.r == "number" &&
        typeof e.g == "number" &&
        typeof e.b == "number"
      );
    }
    static random(e = "vibrant", t) {
      const { random: a, round: i, sin: s, PI: n } = Math;
      if (e === "vibrant") {
        const o = 24 * a() + 57,
          l = 38 * a() + 45,
          c = 360 * a();
        return new Se(o, l, c, "lch");
      }
      if (e === "sine") {
        const o = i(80 * s((2 * n * (t = t ?? a())) / 0.5 + 0.01) + 150),
          l = i(50 * s((2 * n * t) / 0.5 + 4.6) + 200),
          c = i(100 * s((2 * n * t) / 0.5 + 2.3) + 150);
        return new Se(o, l, c);
      }
      if (e === "pastel") {
        const o = 8 * a() + 86,
          l = 17 * a() + 9,
          c = 360 * a();
        return new Se(o, l, c, "lch");
      }
      if (e === "dark") {
        const o = 10 + 10 * a(),
          l = 50 * a() + 86,
          c = 360 * a();
        return new Se(o, l, c, "lch");
      }
      if (e === "rgb") {
        const o = 255 * a(),
          l = 255 * a(),
          c = 255 * a();
        return new Se(o, l, c);
      }
      if (e === "lab") {
        const o = 100 * a(),
          l = 256 * a() - 128,
          c = 256 * a() - 128;
        return new Se(o, l, c, "lab");
      }
      if (e === "grey") {
        const o = 255 * a();
        return new Se(o, o, o);
      }
      throw new Error("Unsupported random color mode");
    }
    static test(e) {
      return typeof e == "string" && (lo.test(e) || co.test(e));
    }
    cmyk() {
      const { _a: e, _b: t, _c: a } = this.rgb(),
        [i, s, n] = [e, t, a].map((l) => l / 255),
        o = Math.min(1 - i, 1 - s, 1 - n);
      return o === 1
        ? new Se(0, 0, 0, 1, "cmyk")
        : new Se(
            (1 - i - o) / (1 - o),
            (1 - s - o) / (1 - o),
            (1 - n - o) / (1 - o),
            o,
            "cmyk"
          );
    }
    hsl() {
      const { _a: e, _b: t, _c: a } = this.rgb(),
        [i, s, n] = [e, t, a].map((u) => u / 255),
        o = Math.max(i, s, n),
        l = Math.min(i, s, n),
        c = (o + l) / 2,
        h = o === l,
        d = o - l;
      return new Se(
        360 *
          (h
            ? 0
            : o === i
            ? ((s - n) / d + (s < n ? 6 : 0)) / 6
            : o === s
            ? ((n - i) / d + 2) / 6
            : o === n
            ? ((i - s) / d + 4) / 6
            : 0),
        100 * (h ? 0 : c > 0.5 ? d / (2 - o - l) : d / (o + l)),
        100 * c,
        "hsl"
      );
    }
    init(e = 0, t = 0, a = 0, i = 0, s = "rgb") {
      if (((e = e || 0), this.space))
        for (const d in this.space) delete this[this.space[d]];
      if (typeof e == "number")
        (s = typeof i == "string" ? i : s),
          (i = typeof i == "string" ? 0 : i),
          Object.assign(this, { _a: e, _b: t, _c: a, _d: i, space: s });
      else if (e instanceof Array)
        (this.space = t || (typeof e[3] == "string" ? e[3] : e[4]) || "rgb"),
          Object.assign(this, { _a: e[0], _b: e[1], _c: e[2], _d: e[3] || 0 });
      else if (e instanceof Object) {
        const d = (function (u, f) {
          const g = Vt(u, "rgb")
            ? { _a: u.r, _b: u.g, _c: u.b, _d: 0, space: "rgb" }
            : Vt(u, "xyz")
            ? { _a: u.x, _b: u.y, _c: u.z, _d: 0, space: "xyz" }
            : Vt(u, "hsl")
            ? { _a: u.h, _b: u.s, _c: u.l, _d: 0, space: "hsl" }
            : Vt(u, "lab")
            ? { _a: u.l, _b: u.a, _c: u.b, _d: 0, space: "lab" }
            : Vt(u, "lch")
            ? { _a: u.l, _b: u.c, _c: u.h, _d: 0, space: "lch" }
            : Vt(u, "cmyk")
            ? { _a: u.c, _b: u.m, _c: u.y, _d: u.k, space: "cmyk" }
            : { _a: 0, _b: 0, _c: 0, space: "rgb" };
          return (g.space = f || g.space), g;
        })(e, t);
        Object.assign(this, d);
      } else if (typeof e == "string")
        if (co.test(e)) {
          const d = e.replace(Hp, ""),
            [u, f, g] = Fp.exec(d)
              .slice(1, 4)
              .map((p) => parseInt(p));
          Object.assign(this, { _a: u, _b: f, _c: g, _d: 0, space: "rgb" });
        } else {
          if (!lo.test(e))
            throw Error("Unsupported string format, can't construct Color");
          {
            const d = (p) => parseInt(p, 16),
              [, u, f, g] = jp
                .exec(
                  (function (p) {
                    return p.length === 4
                      ? [
                          "#",
                          p.substring(1, 2),
                          p.substring(1, 2),
                          p.substring(2, 3),
                          p.substring(2, 3),
                          p.substring(3, 4),
                          p.substring(3, 4),
                        ].join("")
                      : p;
                  })(e)
                )
                .map(d);
            Object.assign(this, { _a: u, _b: f, _c: g, _d: 0, space: "rgb" });
          }
        }
      const { _a: n, _b: o, _c: l, _d: c } = this,
        h =
          this.space === "rgb"
            ? { r: n, g: o, b: l }
            : this.space === "xyz"
            ? { x: n, y: o, z: l }
            : this.space === "hsl"
            ? { h: n, s: o, l }
            : this.space === "lab"
            ? { l: n, a: o, b: l }
            : this.space === "lch"
            ? { l: n, c: o, h: l }
            : this.space === "cmyk"
            ? { c: n, m: o, y: l, k: c }
            : {};
      Object.assign(this, h);
    }
    lab() {
      const { x: e, y: t, z: a } = this.xyz();
      return new Se(116 * t - 16, 500 * (e - t), 200 * (t - a), "lab");
    }
    lch() {
      const { l: e, a: t, b: a } = this.lab(),
        i = Math.sqrt(t ** 2 + a ** 2);
      let s = (180 * Math.atan2(a, t)) / Math.PI;
      return s < 0 && ((s *= -1), (s = 360 - s)), new Se(e, i, s, "lch");
    }
    rgb() {
      if (this.space === "rgb") return this;
      if ((e = this.space) === "lab" || e === "xyz" || e === "lch") {
        let { x: t, y: a, z: i } = this;
        if (this.space === "lab" || this.space === "lch") {
          let { l: f, a: g, b: p } = this;
          if (this.space === "lch") {
            const { c: C, h: A } = this,
              S = Math.PI / 180;
            (g = C * Math.cos(S * A)), (p = C * Math.sin(S * A));
          }
          const m = (f + 16) / 116,
            x = g / 500 + m,
            v = m - p / 200,
            b = 16 / 116,
            k = 0.008856,
            y = 7.787;
          (t = 0.95047 * (x ** 3 > k ? x ** 3 : (x - b) / y)),
            (a = 1 * (m ** 3 > k ? m ** 3 : (m - b) / y)),
            (i = 1.08883 * (v ** 3 > k ? v ** 3 : (v - b) / y));
        }
        const s = 3.2406 * t + -1.5372 * a + -0.4986 * i,
          n = -0.9689 * t + 1.8758 * a + 0.0415 * i,
          o = 0.0557 * t + -0.204 * a + 1.057 * i,
          l = Math.pow,
          c = 0.0031308,
          h = s > c ? 1.055 * l(s, 1 / 2.4) - 0.055 : 12.92 * s,
          d = n > c ? 1.055 * l(n, 1 / 2.4) - 0.055 : 12.92 * n,
          u = o > c ? 1.055 * l(o, 1 / 2.4) - 0.055 : 12.92 * o;
        return new Se(255 * h, 255 * d, 255 * u);
      }
      if (this.space === "hsl") {
        let { h: t, s: a, l: i } = this;
        if (((t /= 360), (a /= 100), (i /= 100), a === 0))
          return (i *= 255), new Se(i, i, i);
        const s = i < 0.5 ? i * (1 + a) : i + a - i * a,
          n = 2 * i - s,
          o = 255 * lr(n, s, t + 1 / 3),
          l = 255 * lr(n, s, t),
          c = 255 * lr(n, s, t - 1 / 3);
        return new Se(o, l, c);
      }
      if (this.space === "cmyk") {
        const { c: t, m: a, y: i, k: s } = this,
          n = 255 * (1 - Math.min(1, t * (1 - s) + s)),
          o = 255 * (1 - Math.min(1, a * (1 - s) + s)),
          l = 255 * (1 - Math.min(1, i * (1 - s) + s));
        return new Se(n, o, l);
      }
      return this;
      var e;
    }
    toArray() {
      const { _a: e, _b: t, _c: a, _d: i, space: s } = this;
      return [e, t, a, i, s];
    }
    toHex() {
      const [e, t, a] = this._clamped().map(Bp);
      return `#${e}${t}${a}`;
    }
    toRgb() {
      const [e, t, a] = this._clamped();
      return `rgb(${e},${t},${a})`;
    }
    toString() {
      return this.toHex();
    }
    xyz() {
      const { _a: e, _b: t, _c: a } = this.rgb(),
        [i, s, n] = [e, t, a].map((m) => m / 255),
        o = i > 0.04045 ? Math.pow((i + 0.055) / 1.055, 2.4) : i / 12.92,
        l = s > 0.04045 ? Math.pow((s + 0.055) / 1.055, 2.4) : s / 12.92,
        c = n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92,
        h = (0.4124 * o + 0.3576 * l + 0.1805 * c) / 0.95047,
        d = (0.2126 * o + 0.7152 * l + 0.0722 * c) / 1,
        u = (0.0193 * o + 0.1192 * l + 0.9505 * c) / 1.08883,
        f = h > 0.008856 ? Math.pow(h, 1 / 3) : 7.787 * h + 16 / 116,
        g = d > 0.008856 ? Math.pow(d, 1 / 3) : 7.787 * d + 16 / 116,
        p = u > 0.008856 ? Math.pow(u, 1 / 3) : 7.787 * u + 16 / 116;
      return new Se(f, g, p, "xyz");
    }
    _clamped() {
      const { _a: e, _b: t, _c: a } = this.rgb(),
        { max: i, min: s, round: n } = Math;
      return [e, t, a].map((o) => i(0, s(n(o), 255)));
    }
  },
  ue = class xc {
    constructor(...e) {
      this.init(...e);
    }
    clone() {
      return new xc(this);
    }
    init(e, t) {
      const s = Array.isArray(e)
        ? { x: e[0], y: e[1] }
        : typeof e == "object"
        ? { x: e.x, y: e.y }
        : { x: e, y: t };
      return (
        (this.x = s.x == null ? 0 : s.x), (this.y = s.y == null ? 0 : s.y), this
      );
    }
    toArray() {
      return [this.x, this.y];
    }
    transform(e) {
      return this.clone().transformO(e);
    }
    transformO(e) {
      re.isMatrixLike(e) || (e = new re(e));
      const { x: t, y: a } = this;
      return (
        (this.x = e.a * t + e.c * a + e.e),
        (this.y = e.b * t + e.d * a + e.f),
        this
      );
    }
  };
function Gt(r, e, t) {
  return Math.abs(e - r) < 1e-6;
}
let re = class Te {
  constructor(...e) {
    this.init(...e);
  }
  static formatTransforms(e) {
    const t = e.flip === "both" || e.flip === !0,
      a = e.flip && (t || e.flip === "x") ? -1 : 1,
      i = e.flip && (t || e.flip === "y") ? -1 : 1,
      s =
        e.skew && e.skew.length
          ? e.skew[0]
          : isFinite(e.skew)
          ? e.skew
          : isFinite(e.skewX)
          ? e.skewX
          : 0,
      n =
        e.skew && e.skew.length
          ? e.skew[1]
          : isFinite(e.skew)
          ? e.skew
          : isFinite(e.skewY)
          ? e.skewY
          : 0,
      o =
        e.scale && e.scale.length
          ? e.scale[0] * a
          : isFinite(e.scale)
          ? e.scale * a
          : isFinite(e.scaleX)
          ? e.scaleX * a
          : a,
      l =
        e.scale && e.scale.length
          ? e.scale[1] * i
          : isFinite(e.scale)
          ? e.scale * i
          : isFinite(e.scaleY)
          ? e.scaleY * i
          : i,
      c = e.shear || 0,
      h = e.rotate || e.theta || 0,
      d = new ue(e.origin || e.around || e.ox || e.originX, e.oy || e.originY),
      u = d.x,
      f = d.y,
      g = new ue(
        e.position || e.px || e.positionX || NaN,
        e.py || e.positionY || NaN
      ),
      p = g.x,
      m = g.y,
      x = new ue(e.translate || e.tx || e.translateX, e.ty || e.translateY),
      v = x.x,
      b = x.y,
      k = new ue(e.relative || e.rx || e.relativeX, e.ry || e.relativeY);
    return {
      scaleX: o,
      scaleY: l,
      skewX: s,
      skewY: n,
      shear: c,
      theta: h,
      rx: k.x,
      ry: k.y,
      tx: v,
      ty: b,
      ox: u,
      oy: f,
      px: p,
      py: m,
    };
  }
  static fromArray(e) {
    return { a: e[0], b: e[1], c: e[2], d: e[3], e: e[4], f: e[5] };
  }
  static isMatrixLike(e) {
    return (
      e.a != null ||
      e.b != null ||
      e.c != null ||
      e.d != null ||
      e.e != null ||
      e.f != null
    );
  }
  static matrixMultiply(e, t, a) {
    const i = e.a * t.a + e.c * t.b,
      s = e.b * t.a + e.d * t.b,
      n = e.a * t.c + e.c * t.d,
      o = e.b * t.c + e.d * t.d,
      l = e.e + e.a * t.e + e.c * t.f,
      c = e.f + e.b * t.e + e.d * t.f;
    return (a.a = i), (a.b = s), (a.c = n), (a.d = o), (a.e = l), (a.f = c), a;
  }
  around(e, t, a) {
    return this.clone().aroundO(e, t, a);
  }
  aroundO(e, t, a) {
    const i = e || 0,
      s = t || 0;
    return this.translateO(-i, -s).lmultiplyO(a).translateO(i, s);
  }
  clone() {
    return new Te(this);
  }
  decompose(e = 0, t = 0) {
    const a = this.a,
      i = this.b,
      s = this.c,
      n = this.d,
      o = this.e,
      l = this.f,
      c = a * n - i * s,
      h = c > 0 ? 1 : -1,
      d = h * Math.sqrt(a * a + i * i),
      u = Math.atan2(h * i, h * a),
      f = (180 / Math.PI) * u,
      g = Math.cos(u),
      p = Math.sin(u),
      m = (a * s + i * n) / c,
      x = (s * d) / (m * a - i) || (n * d) / (m * i + a);
    return {
      scaleX: d,
      scaleY: x,
      shear: m,
      rotate: f,
      translateX: o - e + e * g * d + t * (m * g * d - p * x),
      translateY: l - t + e * p * d + t * (m * p * d + g * x),
      originX: e,
      originY: t,
      a: this.a,
      b: this.b,
      c: this.c,
      d: this.d,
      e: this.e,
      f: this.f,
    };
  }
  equals(e) {
    if (e === this) return !0;
    const t = new Te(e);
    return (
      Gt(this.a, t.a) &&
      Gt(this.b, t.b) &&
      Gt(this.c, t.c) &&
      Gt(this.d, t.d) &&
      Gt(this.e, t.e) &&
      Gt(this.f, t.f)
    );
  }
  flip(e, t) {
    return this.clone().flipO(e, t);
  }
  flipO(e, t) {
    return e === "x"
      ? this.scaleO(-1, 1, t, 0)
      : e === "y"
      ? this.scaleO(1, -1, 0, t)
      : this.scaleO(-1, -1, e, t || e);
  }
  init(e) {
    const t = Te.fromArray([1, 0, 0, 1, 0, 0]);
    return (
      (e =
        e instanceof Ie
          ? e.matrixify()
          : typeof e == "string"
          ? Te.fromArray(e.split(ft).map(parseFloat))
          : Array.isArray(e)
          ? Te.fromArray(e)
          : typeof e == "object" && Te.isMatrixLike(e)
          ? e
          : typeof e == "object"
          ? new Te().transform(e)
          : arguments.length === 6
          ? Te.fromArray([].slice.call(arguments))
          : t),
      (this.a = e.a != null ? e.a : t.a),
      (this.b = e.b != null ? e.b : t.b),
      (this.c = e.c != null ? e.c : t.c),
      (this.d = e.d != null ? e.d : t.d),
      (this.e = e.e != null ? e.e : t.e),
      (this.f = e.f != null ? e.f : t.f),
      this
    );
  }
  inverse() {
    return this.clone().inverseO();
  }
  inverseO() {
    const e = this.a,
      t = this.b,
      a = this.c,
      i = this.d,
      s = this.e,
      n = this.f,
      o = e * i - t * a;
    if (!o) throw new Error("Cannot invert " + this);
    const l = i / o,
      c = -t / o,
      h = -a / o,
      d = e / o,
      u = -(l * s + h * n),
      f = -(c * s + d * n);
    return (
      (this.a = l),
      (this.b = c),
      (this.c = h),
      (this.d = d),
      (this.e = u),
      (this.f = f),
      this
    );
  }
  lmultiply(e) {
    return this.clone().lmultiplyO(e);
  }
  lmultiplyO(e) {
    const t = e instanceof Te ? e : new Te(e);
    return Te.matrixMultiply(t, this, this);
  }
  multiply(e) {
    return this.clone().multiplyO(e);
  }
  multiplyO(e) {
    const t = e instanceof Te ? e : new Te(e);
    return Te.matrixMultiply(this, t, this);
  }
  rotate(e, t, a) {
    return this.clone().rotateO(e, t, a);
  }
  rotateO(e, t = 0, a = 0) {
    e = sr(e);
    const i = Math.cos(e),
      s = Math.sin(e),
      { a: n, b: o, c: l, d: c, e: h, f: d } = this;
    return (
      (this.a = n * i - o * s),
      (this.b = o * i + n * s),
      (this.c = l * i - c * s),
      (this.d = c * i + l * s),
      (this.e = h * i - d * s + a * s - t * i + t),
      (this.f = d * i + h * s - t * s - a * i + a),
      this
    );
  }
  scale() {
    return this.clone().scaleO(...arguments);
  }
  scaleO(e, t = e, a = 0, i = 0) {
    arguments.length === 3 && ((i = a), (a = t), (t = e));
    const { a: s, b: n, c: o, d: l, e: c, f: h } = this;
    return (
      (this.a = s * e),
      (this.b = n * t),
      (this.c = o * e),
      (this.d = l * t),
      (this.e = c * e - a * e + a),
      (this.f = h * t - i * t + i),
      this
    );
  }
  shear(e, t, a) {
    return this.clone().shearO(e, t, a);
  }
  shearO(e, t = 0, a = 0) {
    const { a: i, b: s, c: n, d: o, e: l, f: c } = this;
    return (
      (this.a = i + s * e),
      (this.c = n + o * e),
      (this.e = l + c * e - a * e),
      this
    );
  }
  skew() {
    return this.clone().skewO(...arguments);
  }
  skewO(e, t = e, a = 0, i = 0) {
    arguments.length === 3 && ((i = a), (a = t), (t = e)),
      (e = sr(e)),
      (t = sr(t));
    const s = Math.tan(e),
      n = Math.tan(t),
      { a: o, b: l, c, d: h, e: d, f: u } = this;
    return (
      (this.a = o + l * s),
      (this.b = l + o * n),
      (this.c = c + h * s),
      (this.d = h + c * n),
      (this.e = d + u * s - i * s),
      (this.f = u + d * n - a * n),
      this
    );
  }
  skewX(e, t, a) {
    return this.skew(e, 0, t, a);
  }
  skewY(e, t, a) {
    return this.skew(0, e, t, a);
  }
  toArray() {
    return [this.a, this.b, this.c, this.d, this.e, this.f];
  }
  toString() {
    return (
      "matrix(" +
      this.a +
      "," +
      this.b +
      "," +
      this.c +
      "," +
      this.d +
      "," +
      this.e +
      "," +
      this.f +
      ")"
    );
  }
  transform(e) {
    if (Te.isMatrixLike(e)) return new Te(e).multiplyO(this);
    const t = Te.formatTransforms(e),
      { x: a, y: i } = new ue(t.ox, t.oy).transform(this),
      s = new Te()
        .translateO(t.rx, t.ry)
        .lmultiplyO(this)
        .translateO(-a, -i)
        .scaleO(t.scaleX, t.scaleY)
        .skewO(t.skewX, t.skewY)
        .shearO(t.shear)
        .rotateO(t.theta)
        .translateO(a, i);
    if (isFinite(t.px) || isFinite(t.py)) {
      const n = new ue(a, i).transform(s),
        o = isFinite(t.px) ? t.px - n.x : 0,
        l = isFinite(t.py) ? t.py - n.y : 0;
      s.translateO(o, l);
    }
    return s.translateO(t.tx, t.ty), s;
  }
  translate(e, t) {
    return this.clone().translateO(e, t);
  }
  translateO(e, t) {
    return (this.e += e || 0), (this.f += t || 0), this;
  }
  valueOf() {
    return { a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f };
  }
};
function bt() {
  if (!bt.nodes) {
    const r = je().size(2, 0);
    (r.node.style.cssText = [
      "opacity: 0",
      "position: absolute",
      "left: -100%",
      "top: -100%",
      "overflow: hidden",
    ].join(";")),
      r.attr("focusable", "false"),
      r.attr("aria-hidden", "true");
    const e = r.path().node;
    bt.nodes = { svg: r, path: e };
  }
  if (!bt.nodes.svg.node.parentNode) {
    const r = oe.document.body || oe.document.documentElement;
    bt.nodes.svg.addTo(r);
  }
  return bt.nodes;
}
function vc(r) {
  return !(r.width || r.height || r.x || r.y);
}
le(re, "Matrix");
class we {
  constructor(...e) {
    this.init(...e);
  }
  addOffset() {
    return (
      (this.x += oe.window.pageXOffset),
      (this.y += oe.window.pageYOffset),
      new we(this)
    );
  }
  init(e) {
    return (
      (e =
        typeof e == "string"
          ? e.split(ft).map(parseFloat)
          : Array.isArray(e)
          ? e
          : typeof e == "object"
          ? [
              e.left != null ? e.left : e.x,
              e.top != null ? e.top : e.y,
              e.width,
              e.height,
            ]
          : arguments.length === 4
          ? [].slice.call(arguments)
          : [0, 0, 0, 0]),
      (this.x = e[0] || 0),
      (this.y = e[1] || 0),
      (this.width = this.w = e[2] || 0),
      (this.height = this.h = e[3] || 0),
      (this.x2 = this.x + this.w),
      (this.y2 = this.y + this.h),
      (this.cx = this.x + this.w / 2),
      (this.cy = this.y + this.h / 2),
      this
    );
  }
  isNulled() {
    return vc(this);
  }
  merge(e) {
    const t = Math.min(this.x, e.x),
      a = Math.min(this.y, e.y),
      i = Math.max(this.x + this.width, e.x + e.width) - t,
      s = Math.max(this.y + this.height, e.y + e.height) - a;
    return new we(t, a, i, s);
  }
  toArray() {
    return [this.x, this.y, this.width, this.height];
  }
  toString() {
    return this.x + " " + this.y + " " + this.width + " " + this.height;
  }
  transform(e) {
    e instanceof re || (e = new re(e));
    let t = 1 / 0,
      a = -1 / 0,
      i = 1 / 0,
      s = -1 / 0;
    return (
      [
        new ue(this.x, this.y),
        new ue(this.x2, this.y),
        new ue(this.x, this.y2),
        new ue(this.x2, this.y2),
      ].forEach(function (n) {
        (n = n.transform(e)),
          (t = Math.min(t, n.x)),
          (a = Math.max(a, n.x)),
          (i = Math.min(i, n.y)),
          (s = Math.max(s, n.y));
      }),
      new we(t, i, a - t, s - i)
    );
  }
}
function fo(r, e, t) {
  let a;
  try {
    if (
      ((a = e(r.node)),
      vc(a) &&
        (i = r.node) !== oe.document &&
        !(
          oe.document.documentElement.contains ||
          function (s) {
            for (; s.parentNode; ) s = s.parentNode;
            return s === oe.document;
          }
        ).call(oe.document.documentElement, i))
    )
      throw new Error("Element not in the dom");
  } catch {
    a = t(r);
  }
  var i;
  return a;
}
ae({
  viewbox: {
    viewbox(r, e, t, a) {
      return r == null
        ? new we(this.attr("viewBox"))
        : this.attr("viewBox", new we(r, e, t, a));
    },
    zoom(r, e) {
      let { width: t, height: a } = this.attr(["width", "height"]);
      if (
        (((t || a) && typeof t != "string" && typeof a != "string") ||
          ((t = this.node.clientWidth), (a = this.node.clientHeight)),
        !t || !a)
      )
        throw new Error(
          "Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element"
        );
      const i = this.viewbox(),
        s = t / i.width,
        n = a / i.height,
        o = Math.min(s, n);
      if (r == null) return o;
      let l = o / r;
      l === 1 / 0 && (l = Number.MAX_SAFE_INTEGER / 100),
        (e = e || new ue(t / 2 / s + i.x, a / 2 / n + i.y));
      const c = new we(i).transform(new re({ scale: l, origin: e }));
      return this.viewbox(c);
    },
  },
}),
  le(we, "Box");
let zt = class extends Array {
  constructor(e = [], ...t) {
    if ((super(e, ...t), typeof e == "number")) return this;
    (this.length = 0), this.push(...e);
  }
};
K([zt], {
  each(r, ...e) {
    return typeof r == "function"
      ? this.map((t, a, i) => r.call(t, t, a, i))
      : this.map((t) => t[r](...e));
  },
  toArray() {
    return Array.prototype.concat.apply([], this);
  },
});
const Yp = ["toArray", "constructor", "each"];
function Wt(r, e) {
  return new zt(
    js((e || oe.document).querySelectorAll(r), function (t) {
      return Ye(t);
    })
  );
}
zt.extend = function (r) {
  (r = r.reduce(
    (e, t) => (
      Yp.includes(t) ||
        t[0] === "_" ||
        (t in Array.prototype && (e["$" + t] = Array.prototype[t]),
        (e[t] = function (...a) {
          return this.each(t, ...a);
        })),
      e
    ),
    {}
  )),
    K([zt], r);
};
let Wp = 0;
const bc = {};
function yc(r) {
  let e = r.getEventHolder();
  return e === oe.window && (e = bc), e.events || (e.events = {}), e.events;
}
function Xs(r) {
  return r.getEventTarget();
}
function lt(r, e, t, a, i) {
  const s = t.bind(a || r),
    n = je(r),
    o = yc(n),
    l = Xs(n);
  (e = Array.isArray(e) ? e : e.split(ft)),
    t._svgjsListenerId || (t._svgjsListenerId = ++Wp),
    e.forEach(function (c) {
      const h = c.split(".")[0],
        d = c.split(".")[1] || "*";
      (o[h] = o[h] || {}),
        (o[h][d] = o[h][d] || {}),
        (o[h][d][t._svgjsListenerId] = s),
        l.addEventListener(h, s, i || !1);
    });
}
function We(r, e, t, a) {
  const i = je(r),
    s = yc(i),
    n = Xs(i);
  (typeof t != "function" || (t = t._svgjsListenerId)) &&
    (e = Array.isArray(e) ? e : (e || "").split(ft)).forEach(function (o) {
      const l = o && o.split(".")[0],
        c = o && o.split(".")[1];
      let h, d;
      if (t)
        s[l] &&
          s[l][c || "*"] &&
          (n.removeEventListener(l, s[l][c || "*"][t], a || !1),
          delete s[l][c || "*"][t]);
      else if (l && c) {
        if (s[l] && s[l][c]) {
          for (d in s[l][c]) We(n, [l, c].join("."), d);
          delete s[l][c];
        }
      } else if (c)
        for (o in s) for (h in s[o]) c === h && We(n, [o, c].join("."));
      else if (l) {
        if (s[l]) {
          for (h in s[l]) We(n, [l, h].join("."));
          delete s[l];
        }
      } else {
        for (o in s) We(n, o);
        (function (u) {
          let f = u.getEventHolder();
          f === oe.window && (f = bc), f.events && (f.events = {});
        })(i);
      }
    });
}
class qa extends Ds {
  addEventListener() {}
  dispatch(e, t, a) {
    return (function (i, s, n, o) {
      const l = Xs(i);
      return (
        s instanceof oe.window.Event ||
          (s = new oe.window.CustomEvent(s, {
            detail: n,
            cancelable: !0,
            ...o,
          })),
        l.dispatchEvent(s),
        s
      );
    })(this, e, t, a);
  }
  dispatchEvent(e) {
    const t = this.getEventHolder().events;
    if (!t) return !0;
    const a = t[e.type];
    for (const i in a) for (const s in a[i]) a[i][s](e);
    return !e.defaultPrevented;
  }
  fire(e, t, a) {
    return this.dispatch(e, t, a), this;
  }
  getEventHolder() {
    return this;
  }
  getEventTarget() {
    return this;
  }
  off(e, t, a) {
    return We(this, e, t, a), this;
  }
  on(e, t, a, i) {
    return lt(this, e, t, a, i), this;
  }
  removeEventListener() {}
}
function go() {}
le(qa, "EventTarget");
const cr = 400,
  Vp = ">",
  Gp = 0,
  Up = {
    "fill-opacity": 1,
    "stroke-opacity": 1,
    "stroke-width": 0,
    "stroke-linejoin": "miter",
    "stroke-linecap": "butt",
    fill: "#000000",
    stroke: "#000000",
    opacity: 1,
    x: 0,
    y: 0,
    cx: 0,
    cy: 0,
    width: 0,
    height: 0,
    r: 0,
    rx: 0,
    ry: 0,
    offset: 0,
    "stop-opacity": 1,
    "stop-color": "#000000",
    "text-anchor": "start",
  };
class Ht extends Array {
  constructor(...e) {
    super(...e), this.init(...e);
  }
  clone() {
    return new this.constructor(this);
  }
  init(e) {
    return (
      typeof e == "number" || ((this.length = 0), this.push(...this.parse(e))),
      this
    );
  }
  parse(e = []) {
    return e instanceof Array ? e : e.trim().split(ft).map(parseFloat);
  }
  toArray() {
    return Array.prototype.concat.apply([], this);
  }
  toSet() {
    return new Set(this);
  }
  toString() {
    return this.join(" ");
  }
  valueOf() {
    const e = [];
    return e.push(...this), e;
  }
}
let ce = class qe {
  constructor(...e) {
    this.init(...e);
  }
  convert(e) {
    return new qe(this.value, e);
  }
  divide(e) {
    return (e = new qe(e)), new qe(this / e, this.unit || e.unit);
  }
  init(e, t) {
    return (
      (t = Array.isArray(e) ? e[1] : t),
      (e = Array.isArray(e) ? e[0] : e),
      (this.value = 0),
      (this.unit = t || ""),
      typeof e == "number"
        ? (this.value = isNaN(e) ? 0 : isFinite(e) ? e : e < 0 ? -34e37 : 34e37)
        : typeof e == "string"
        ? (t = e.match(mc)) &&
          ((this.value = parseFloat(t[1])),
          t[5] === "%"
            ? (this.value /= 100)
            : t[5] === "s" && (this.value *= 1e3),
          (this.unit = t[5]))
        : e instanceof qe && ((this.value = e.valueOf()), (this.unit = e.unit)),
      this
    );
  }
  minus(e) {
    return (e = new qe(e)), new qe(this - e, this.unit || e.unit);
  }
  plus(e) {
    return (e = new qe(e)), new qe(this + e, this.unit || e.unit);
  }
  times(e) {
    return (e = new qe(e)), new qe(this * e, this.unit || e.unit);
  }
  toArray() {
    return [this.value, this.unit];
  }
  toJSON() {
    return this.toString();
  }
  toString() {
    return (
      (this.unit === "%"
        ? ~~(1e8 * this.value) / 1e6
        : this.unit === "s"
        ? this.value / 1e3
        : this.value) + this.unit
    );
  }
  valueOf() {
    return this.value;
  }
};
const $p = new Set([
    "fill",
    "stroke",
    "color",
    "bgcolor",
    "stop-color",
    "flood-color",
    "lighting-color",
  ]),
  wc = [];
class At extends qa {
  constructor(e, t) {
    super(),
      (this.node = e),
      (this.type = e.nodeName),
      t && e !== t && this.attr(t);
  }
  add(e, t) {
    return (
      (e = je(e)).removeNamespace &&
        this.node instanceof oe.window.SVGElement &&
        e.removeNamespace(),
      t == null
        ? this.node.appendChild(e.node)
        : e.node !== this.node.childNodes[t] &&
          this.node.insertBefore(e.node, this.node.childNodes[t]),
      this
    );
  }
  addTo(e, t) {
    return je(e).put(this, t);
  }
  children() {
    return new zt(
      js(this.node.children, function (e) {
        return Ye(e);
      })
    );
  }
  clear() {
    for (; this.node.hasChildNodes(); )
      this.node.removeChild(this.node.lastChild);
    return this;
  }
  clone(e = !0, t = !0) {
    this.writeDataToDom();
    let a = this.node.cloneNode(e);
    return t && (a = pc(a)), new this.constructor(a);
  }
  each(e, t) {
    const a = this.children();
    let i, s;
    for (i = 0, s = a.length; i < s; i++)
      e.apply(a[i], [i, a]), t && a[i].each(e, t);
    return this;
  }
  element(e, t) {
    return this.put(new At(Ra(e), t));
  }
  first() {
    return Ye(this.node.firstChild);
  }
  get(e) {
    return Ye(this.node.childNodes[e]);
  }
  getEventHolder() {
    return this.node;
  }
  getEventTarget() {
    return this.node;
  }
  has(e) {
    return this.index(e) >= 0;
  }
  html(e, t) {
    return this.xml(e, t, "http://www.w3.org/1999/xhtml");
  }
  id(e) {
    return (
      e !== void 0 || this.node.id || (this.node.id = gc(this.type)),
      this.attr("id", e)
    );
  }
  index(e) {
    return [].slice.call(this.node.childNodes).indexOf(e.node);
  }
  last() {
    return Ye(this.node.lastChild);
  }
  matches(e) {
    const t = this.node,
      a =
        t.matches ||
        t.matchesSelector ||
        t.msMatchesSelector ||
        t.mozMatchesSelector ||
        t.webkitMatchesSelector ||
        t.oMatchesSelector ||
        null;
    return a && a.call(t, e);
  }
  parent(e) {
    let t = this;
    if (!t.node.parentNode) return null;
    if (((t = Ye(t.node.parentNode)), !e)) return t;
    do if (typeof e == "string" ? t.matches(e) : t instanceof e) return t;
    while ((t = Ye(t.node.parentNode)));
    return t;
  }
  put(e, t) {
    return (e = je(e)), this.add(e, t), e;
  }
  putIn(e, t) {
    return je(e).add(this, t);
  }
  remove() {
    return this.parent() && this.parent().removeElement(this), this;
  }
  removeElement(e) {
    return this.node.removeChild(e.node), this;
  }
  replace(e) {
    return (
      (e = je(e)),
      this.node.parentNode &&
        this.node.parentNode.replaceChild(e.node, this.node),
      e
    );
  }
  round(e = 2, t = null) {
    const a = 10 ** e,
      i = this.attr(t);
    for (const s in i)
      typeof i[s] == "number" && (i[s] = Math.round(i[s] * a) / a);
    return this.attr(i), this;
  }
  svg(e, t) {
    return this.xml(e, t, Fs);
  }
  toString() {
    return this.id();
  }
  words(e) {
    return (this.node.textContent = e), this;
  }
  wrap(e) {
    const t = this.parent();
    if (!t) return this.addTo(e);
    const a = t.index(this);
    return t.put(e, a).put(this);
  }
  writeDataToDom() {
    return (
      this.each(function () {
        this.writeDataToDom();
      }),
      this
    );
  }
  xml(e, t, a) {
    if (
      (typeof e == "boolean" && ((a = t), (t = e), (e = null)),
      e == null || typeof e == "function")
    ) {
      (t = t == null || t), this.writeDataToDom();
      let o = this;
      if (e != null) {
        if (((o = Ye(o.node.cloneNode(!0))), t)) {
          const l = e(o);
          if (((o = l || o), l === !1)) return "";
        }
        o.each(function () {
          const l = e(this),
            c = l || this;
          l === !1 ? this.remove() : l && this !== c && this.replace(c);
        }, !0);
      }
      return t ? o.node.outerHTML : o.node.innerHTML;
    }
    t = t != null && t;
    const i = Ra("wrapper", a),
      s = oe.document.createDocumentFragment();
    i.innerHTML = e;
    for (let o = i.children.length; o--; ) s.appendChild(i.firstElementChild);
    const n = this.parent();
    return t ? this.replace(s) && n : this.add(s);
  }
}
K(At, {
  attr: function (r, e, t) {
    if (r == null) {
      (r = {}), (e = this.node.attributes);
      for (const a of e)
        r[a.nodeName] = uo.test(a.nodeValue)
          ? parseFloat(a.nodeValue)
          : a.nodeValue;
      return r;
    }
    if (r instanceof Array)
      return r.reduce((a, i) => ((a[i] = this.attr(i)), a), {});
    if (typeof r == "object" && r.constructor === Object)
      for (e in r) this.attr(e, r[e]);
    else if (e === null) this.node.removeAttribute(r);
    else {
      if (e == null)
        return (e = this.node.getAttribute(r)) == null
          ? Up[r]
          : uo.test(e)
          ? parseFloat(e)
          : e;
      typeof (e = wc.reduce((a, i) => i(r, a, this), e)) == "number"
        ? (e = new ce(e))
        : $p.has(r) && rt.isColor(e)
        ? (e = new rt(e))
        : e.constructor === Array && (e = new Ht(e)),
        r === "leading"
          ? this.leading && this.leading(e)
          : typeof t == "string"
          ? this.node.setAttributeNS(t, r, e.toString())
          : this.node.setAttribute(r, e.toString()),
        !this.rebuild || (r !== "font-size" && r !== "x") || this.rebuild();
    }
    return this;
  },
  find: function (r) {
    return Wt(r, this.node);
  },
  findOne: function (r) {
    return Ye(this.node.querySelector(r));
  },
}),
  le(At, "Dom");
let Ie = class extends At {
  constructor(e, t) {
    super(e, t),
      (this.dom = {}),
      (this.node.instance = this),
      (e.hasAttribute("data-svgjs") || e.hasAttribute("svgjs:data")) &&
        this.setData(
          JSON.parse(e.getAttribute("data-svgjs")) ??
            JSON.parse(e.getAttribute("svgjs:data")) ??
            {}
        );
  }
  center(e, t) {
    return this.cx(e).cy(t);
  }
  cx(e) {
    return e == null
      ? this.x() + this.width() / 2
      : this.x(e - this.width() / 2);
  }
  cy(e) {
    return e == null
      ? this.y() + this.height() / 2
      : this.y(e - this.height() / 2);
  }
  defs() {
    const e = this.root();
    return e && e.defs();
  }
  dmove(e, t) {
    return this.dx(e).dy(t);
  }
  dx(e = 0) {
    return this.x(new ce(e).plus(this.x()));
  }
  dy(e = 0) {
    return this.y(new ce(e).plus(this.y()));
  }
  getEventHolder() {
    return this;
  }
  height(e) {
    return this.attr("height", e);
  }
  move(e, t) {
    return this.x(e).y(t);
  }
  parents(e = this.root()) {
    const t = typeof e == "string";
    t || (e = je(e));
    const a = new zt();
    let i = this;
    for (
      ;
      (i = i.parent()) &&
      i.node !== oe.document &&
      i.nodeName !== "#document-fragment" &&
      (a.push(i), t || i.node !== e.node) &&
      (!t || !i.matches(e));

    )
      if (i.node === this.root().node) return null;
    return a;
  }
  reference(e) {
    if (!(e = this.attr(e))) return null;
    const t = (e + "").match(Dp);
    return t ? je(t[1]) : null;
  }
  root() {
    const e = this.parent(
      (function (t) {
        return Ft[t];
      })(zs)
    );
    return e && e.root();
  }
  setData(e) {
    return (this.dom = e), this;
  }
  size(e, t) {
    const a = ca(this, e, t);
    return this.width(new ce(a.width)).height(new ce(a.height));
  }
  width(e) {
    return this.attr("width", e);
  }
  writeDataToDom() {
    return fc(this, this.dom), super.writeDataToDom();
  }
  x(e) {
    return this.attr("x", e);
  }
  y(e) {
    return this.attr("y", e);
  }
};
K(Ie, {
  bbox: function () {
    const r = fo(
      this,
      (e) => e.getBBox(),
      (e) => {
        try {
          const t = e.clone().addTo(bt().svg).show(),
            a = t.node.getBBox();
          return t.remove(), a;
        } catch (t) {
          throw new Error(
            `Getting bbox of element "${
              e.node.nodeName
            }" is not possible: ${t.toString()}`
          );
        }
      }
    );
    return new we(r);
  },
  rbox: function (r) {
    const e = fo(
        this,
        (a) => a.getBoundingClientRect(),
        (a) => {
          throw new Error(
            `Getting rbox of element "${a.node.nodeName}" is not possible`
          );
        }
      ),
      t = new we(e);
    return r ? t.transform(r.screenCTM().inverseO()) : t.addOffset();
  },
  inside: function (r, e) {
    const t = this.bbox();
    return r > t.x && e > t.y && r < t.x + t.width && e < t.y + t.height;
  },
  point: function (r, e) {
    return new ue(r, e).transformO(this.screenCTM().inverseO());
  },
  ctm: function () {
    return new re(this.node.getCTM());
  },
  screenCTM: function () {
    try {
      if (typeof this.isRoot == "function" && !this.isRoot()) {
        const r = this.rect(1, 1),
          e = r.node.getScreenCTM();
        return r.remove(), new re(e);
      }
      return new re(this.node.getScreenCTM());
    } catch {
      return (
        console.warn(
          `Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`
        ),
        new re()
      );
    }
  },
}),
  le(Ie, "Element");
const ma = {
  stroke: [
    "color",
    "width",
    "opacity",
    "linecap",
    "linejoin",
    "miterlimit",
    "dasharray",
    "dashoffset",
  ],
  fill: ["color", "opacity", "rule"],
  prefix: function (r, e) {
    return e === "color" ? r : r + "-" + e;
  },
};
["fill", "stroke"].forEach(function (r) {
  const e = {};
  let t;
  (e[r] = function (a) {
    if (a === void 0) return this.attr(r);
    if (
      typeof a == "string" ||
      a instanceof rt ||
      rt.isRgb(a) ||
      a instanceof Ie
    )
      this.attr(r, a);
    else
      for (t = ma[r].length - 1; t >= 0; t--)
        a[ma[r][t]] != null && this.attr(ma.prefix(r, ma[r][t]), a[ma[r][t]]);
    return this;
  }),
    ae(["Element", "Runner"], e);
}),
  ae(["Element", "Runner"], {
    matrix: function (r, e, t, a, i, s) {
      return r == null
        ? new re(this)
        : this.attr("transform", new re(r, e, t, a, i, s));
    },
    rotate: function (r, e, t) {
      return this.transform({ rotate: r, ox: e, oy: t }, !0);
    },
    skew: function (r, e, t, a) {
      return arguments.length === 1 || arguments.length === 3
        ? this.transform({ skew: r, ox: e, oy: t }, !0)
        : this.transform({ skew: [r, e], ox: t, oy: a }, !0);
    },
    shear: function (r, e, t) {
      return this.transform({ shear: r, ox: e, oy: t }, !0);
    },
    scale: function (r, e, t, a) {
      return arguments.length === 1 || arguments.length === 3
        ? this.transform({ scale: r, ox: e, oy: t }, !0)
        : this.transform({ scale: [r, e], ox: t, oy: a }, !0);
    },
    translate: function (r, e) {
      return this.transform({ translate: [r, e] }, !0);
    },
    relative: function (r, e) {
      return this.transform({ relative: [r, e] }, !0);
    },
    flip: function (r = "both", e = "center") {
      return (
        "xybothtrue".indexOf(r) === -1 && ((e = r), (r = "both")),
        this.transform({ flip: r, origin: e }, !0)
      );
    },
    opacity: function (r) {
      return this.attr("opacity", r);
    },
  }),
  ae("radius", {
    radius: function (r, e = r) {
      return (this._element || this).type === "radialGradient"
        ? this.attr("r", new ce(r))
        : this.rx(r).ry(e);
    },
  }),
  ae("Path", {
    length: function () {
      return this.node.getTotalLength();
    },
    pointAt: function (r) {
      return new ue(this.node.getPointAtLength(r));
    },
  }),
  ae(["Element", "Runner"], {
    font: function (r, e) {
      if (typeof r == "object") {
        for (e in r) this.font(e, r[e]);
        return this;
      }
      return r === "leading"
        ? this.leading(e)
        : r === "anchor"
        ? this.attr("text-anchor", e)
        : r === "size" ||
          r === "family" ||
          r === "weight" ||
          r === "stretch" ||
          r === "variant" ||
          r === "style"
        ? this.attr("font-" + r, e)
        : this.attr(r, e);
    },
  });
ae(
  "Element",
  [
    "click",
    "dblclick",
    "mousedown",
    "mouseup",
    "mouseover",
    "mouseout",
    "mousemove",
    "mouseenter",
    "mouseleave",
    "touchstart",
    "touchmove",
    "touchleave",
    "touchend",
    "touchcancel",
    "contextmenu",
    "wheel",
    "pointerdown",
    "pointermove",
    "pointerup",
    "pointerleave",
    "pointercancel",
  ].reduce(function (r, e) {
    return (
      (r[e] = function (t) {
        return t === null ? this.off(e) : this.on(e, t), this;
      }),
      r
    );
  }, {})
),
  ae("Element", {
    untransform: function () {
      return this.attr("transform", null);
    },
    matrixify: function () {
      return (this.attr("transform") || "")
        .split(zp)
        .slice(0, -1)
        .map(function (e) {
          const t = e.trim().split("(");
          return [
            t[0],
            t[1].split(ft).map(function (a) {
              return parseFloat(a);
            }),
          ];
        })
        .reverse()
        .reduce(function (e, t) {
          return t[0] === "matrix"
            ? e.lmultiply(re.fromArray(t[1]))
            : e[t[0]].apply(e, t[1]);
        }, new re());
    },
    toParent: function (r, e) {
      if (this === r) return this;
      if (Wr(this.node)) return this.addTo(r, e);
      const t = this.screenCTM(),
        a = r.screenCTM().inverse();
      return this.addTo(r, e).untransform().transform(a.multiply(t)), this;
    },
    toRoot: function (r) {
      return this.toParent(this.root(), r);
    },
    transform: function (r, e) {
      if (r == null || typeof r == "string") {
        const a = new re(this).decompose();
        return r == null ? a : a[r];
      }
      re.isMatrixLike(r) || (r = { ...r, origin: Yr(r, this) });
      const t = new re(e === !0 ? this : e || !1).transform(r);
      return this.attr("transform", t);
    },
  });
let He = class kc extends Ie {
  flatten() {
    return (
      this.each(function () {
        if (this instanceof kc) return this.flatten().ungroup();
      }),
      this
    );
  }
  ungroup(e = this.parent(), t = e.index(this)) {
    return (
      (t = t === -1 ? e.children().length : t),
      this.each(function (a, i) {
        return i[i.length - a - 1].toParent(e, t);
      }),
      this.remove()
    );
  }
};
le(He, "Container");
class Bi extends He {
  constructor(e, t = e) {
    super(me("defs", e), t);
  }
  flatten() {
    return this;
  }
  ungroup() {
    return this;
  }
}
le(Bi, "Defs");
let Xe = class extends Ie {};
function Bs(r) {
  return this.attr("rx", r);
}
function Ys(r) {
  return this.attr("ry", r);
}
function Ac(r) {
  return r == null ? this.cx() - this.rx() : this.cx(r + this.rx());
}
function Cc(r) {
  return r == null ? this.cy() - this.ry() : this.cy(r + this.ry());
}
function Sc(r) {
  return this.attr("cx", r);
}
function Tc(r) {
  return this.attr("cy", r);
}
function Pc(r) {
  return r == null ? 2 * this.rx() : this.rx(new ce(r).divide(2));
}
function Lc(r) {
  return r == null ? 2 * this.ry() : this.ry(new ce(r).divide(2));
}
le(Xe, "Shape");
var qp = Object.freeze({
  __proto__: null,
  cx: Sc,
  cy: Tc,
  height: Lc,
  rx: Bs,
  ry: Ys,
  width: Pc,
  x: Ac,
  y: Cc,
});
class di extends Xe {
  constructor(e, t = e) {
    super(me("ellipse", e), t);
  }
  size(e, t) {
    const a = ca(this, e, t);
    return this.rx(new ce(a.width).divide(2)).ry(new ce(a.height).divide(2));
  }
}
K(di, qp),
  ae("Container", {
    ellipse: pe(function (r = 0, e = r) {
      return this.put(new di()).size(r, e).move(0, 0);
    }),
  }),
  le(di, "Ellipse");
class Mc extends At {
  constructor(e = oe.document.createDocumentFragment()) {
    super(e);
  }
  xml(e, t, a) {
    if (
      (typeof e == "boolean" && ((a = t), (t = e), (e = null)),
      e == null || typeof e == "function")
    ) {
      const i = new At(Ra("wrapper", a));
      return i.add(this.node.cloneNode(!0)), i.xml(!1, a);
    }
    return super.xml(e, !1, a);
  }
}
function Ec(r, e) {
  return (this._element || this).type === "radialGradient"
    ? this.attr({ fx: new ce(r), fy: new ce(e) })
    : this.attr({ x1: new ce(r), y1: new ce(e) });
}
function Ic(r, e) {
  return (this._element || this).type === "radialGradient"
    ? this.attr({ cx: new ce(r), cy: new ce(e) })
    : this.attr({ x2: new ce(r), y2: new ce(e) });
}
le(Mc, "Fragment");
var Zp = Object.freeze({ __proto__: null, from: Ec, to: Ic });
class Sa extends He {
  constructor(e, t) {
    super(me(e + "Gradient", typeof e == "string" ? null : e), t);
  }
  attr(e, t, a) {
    return e === "transform" && (e = "gradientTransform"), super.attr(e, t, a);
  }
  bbox() {
    return new we();
  }
  targets() {
    return Wt("svg [fill*=" + this.id() + "]");
  }
  toString() {
    return this.url();
  }
  update(e) {
    return this.clear(), typeof e == "function" && e.call(this, this), this;
  }
  url() {
    return "url(#" + this.id() + ")";
  }
}
K(Sa, Zp),
  ae({
    Container: {
      gradient(...r) {
        return this.defs().gradient(...r);
      },
    },
    Defs: {
      gradient: pe(function (r, e) {
        return this.put(new Sa(r)).update(e);
      }),
    },
  }),
  le(Sa, "Gradient");
class _a extends He {
  constructor(e, t = e) {
    super(me("pattern", e), t);
  }
  attr(e, t, a) {
    return e === "transform" && (e = "patternTransform"), super.attr(e, t, a);
  }
  bbox() {
    return new we();
  }
  targets() {
    return Wt("svg [fill*=" + this.id() + "]");
  }
  toString() {
    return this.url();
  }
  update(e) {
    return this.clear(), typeof e == "function" && e.call(this, this), this;
  }
  url() {
    return "url(#" + this.id() + ")";
  }
}
ae({
  Container: {
    pattern(...r) {
      return this.defs().pattern(...r);
    },
  },
  Defs: {
    pattern: pe(function (r, e, t) {
      return this.put(new _a()).update(t).attr({
        x: 0,
        y: 0,
        width: r,
        height: e,
        patternUnits: "userSpaceOnUse",
      });
    }),
  },
}),
  le(_a, "Pattern");
let ui = class extends Xe {
  constructor(r, e = r) {
    super(me("image", r), e);
  }
  load(r, e) {
    if (!r) return this;
    const t = new oe.window.Image();
    return (
      lt(
        t,
        "load",
        function (a) {
          const i = this.parent(_a);
          this.width() === 0 &&
            this.height() === 0 &&
            this.size(t.width, t.height),
            i instanceof _a &&
              i.width() === 0 &&
              i.height() === 0 &&
              i.size(this.width(), this.height()),
            typeof e == "function" && e.call(this, a);
        },
        this
      ),
      lt(t, "load error", function () {
        We(t);
      }),
      this.attr("href", (t.src = r), ha)
    );
  }
};
var po;
(po = function (r, e, t) {
  return (
    (r !== "fill" && r !== "stroke") ||
      (Xp.test(e) && (e = t.root().defs().image(e))),
    e instanceof ui &&
      (e = t
        .root()
        .defs()
        .pattern(0, 0, (a) => {
          a.add(e);
        })),
    e
  );
}),
  wc.push(po),
  ae({
    Container: {
      image: pe(function (r, e) {
        return this.put(new ui()).size(0, 0).load(r, e);
      }),
    },
  }),
  le(ui, "Image");
class Ct extends Ht {
  bbox() {
    let e = -1 / 0,
      t = -1 / 0,
      a = 1 / 0,
      i = 1 / 0;
    return (
      this.forEach(function (s) {
        (e = Math.max(s[0], e)),
          (t = Math.max(s[1], t)),
          (a = Math.min(s[0], a)),
          (i = Math.min(s[1], i));
      }),
      new we(a, i, e - a, t - i)
    );
  }
  move(e, t) {
    const a = this.bbox();
    if (((e -= a.x), (t -= a.y), !isNaN(e) && !isNaN(t)))
      for (let i = this.length - 1; i >= 0; i--)
        this[i] = [this[i][0] + e, this[i][1] + t];
    return this;
  }
  parse(e = [0, 0]) {
    const t = [];
    (e =
      e instanceof Array
        ? Array.prototype.concat.apply([], e)
        : e.trim().split(ft).map(parseFloat)).length %
      2 !=
      0 && e.pop();
    for (let a = 0, i = e.length; a < i; a += 2) t.push([e[a], e[a + 1]]);
    return t;
  }
  size(e, t) {
    let a;
    const i = this.bbox();
    for (a = this.length - 1; a >= 0; a--)
      i.width && (this[a][0] = ((this[a][0] - i.x) * e) / i.width + i.x),
        i.height && (this[a][1] = ((this[a][1] - i.y) * t) / i.height + i.y);
    return this;
  }
  toLine() {
    return { x1: this[0][0], y1: this[0][1], x2: this[1][0], y2: this[1][1] };
  }
  toString() {
    const e = [];
    for (let t = 0, a = this.length; t < a; t++) e.push(this[t].join(","));
    return e.join(" ");
  }
  transform(e) {
    return this.clone().transformO(e);
  }
  transformO(e) {
    re.isMatrixLike(e) || (e = new re(e));
    for (let t = this.length; t--; ) {
      const [a, i] = this[t];
      (this[t][0] = e.a * a + e.c * i + e.e),
        (this[t][1] = e.b * a + e.d * i + e.f);
    }
    return this;
  }
}
const Kp = Ct;
var Ws = Object.freeze({
  __proto__: null,
  MorphArray: Kp,
  height: function (r) {
    const e = this.bbox();
    return r == null ? e.height : this.size(e.width, r);
  },
  width: function (r) {
    const e = this.bbox();
    return r == null ? e.width : this.size(r, e.height);
  },
  x: function (r) {
    return r == null ? this.bbox().x : this.move(r, this.bbox().y);
  },
  y: function (r) {
    return r == null ? this.bbox().y : this.move(this.bbox().x, r);
  },
});
let Ot = class extends Xe {
  constructor(r, e = r) {
    super(me("line", r), e);
  }
  array() {
    return new Ct([
      [this.attr("x1"), this.attr("y1")],
      [this.attr("x2"), this.attr("y2")],
    ]);
  }
  move(r, e) {
    return this.attr(this.array().move(r, e).toLine());
  }
  plot(r, e, t, a) {
    return r == null
      ? this.array()
      : ((r =
          e !== void 0 ? { x1: r, y1: e, x2: t, y2: a } : new Ct(r).toLine()),
        this.attr(r));
  }
  size(r, e) {
    const t = ca(this, r, e);
    return this.attr(this.array().size(t.width, t.height).toLine());
  }
};
K(Ot, Ws),
  ae({
    Container: {
      line: pe(function (...r) {
        return Ot.prototype.plot.apply(
          this.put(new Ot()),
          r[0] != null ? r : [0, 0, 0, 0]
        );
      }),
    },
  }),
  le(Ot, "Line");
let fi = class extends He {
  constructor(r, e = r) {
    super(me("marker", r), e);
  }
  height(r) {
    return this.attr("markerHeight", r);
  }
  orient(r) {
    return this.attr("orient", r);
  }
  ref(r, e) {
    return this.attr("refX", r).attr("refY", e);
  }
  toString() {
    return "url(#" + this.id() + ")";
  }
  update(r) {
    return this.clear(), typeof r == "function" && r.call(this, this), this;
  }
  width(r) {
    return this.attr("markerWidth", r);
  }
};
function Zt(r, e) {
  return function (t) {
    return t == null ? this[r] : ((this[r] = t), e && e.call(this), this);
  };
}
ae({
  Container: {
    marker(...r) {
      return this.defs().marker(...r);
    },
  },
  Defs: {
    marker: pe(function (r, e, t) {
      return this.put(new fi())
        .size(r, e)
        .ref(r / 2, e / 2)
        .viewbox(0, 0, r, e)
        .attr("orient", "auto")
        .update(t);
    }),
  },
  marker: {
    marker(r, e, t, a) {
      let i = ["marker"];
      return (
        r !== "all" && i.push(r),
        (i = i.join("-")),
        (r =
          arguments[1] instanceof fi
            ? arguments[1]
            : this.defs().marker(e, t, a)),
        this.attr(i, r)
      );
    },
  },
}),
  le(fi, "Marker");
const Qp = {
  "-": function (r) {
    return r;
  },
  "<>": function (r) {
    return -Math.cos(r * Math.PI) / 2 + 0.5;
  },
  ">": function (r) {
    return Math.sin((r * Math.PI) / 2);
  },
  "<": function (r) {
    return 1 - Math.cos((r * Math.PI) / 2);
  },
  bezier: function (r, e, t, a) {
    return function (i) {
      return i < 0
        ? r > 0
          ? (e / r) * i
          : t > 0
          ? (a / t) * i
          : 0
        : i > 1
        ? t < 1
          ? ((1 - a) / (1 - t)) * i + (a - t) / (1 - t)
          : r < 1
          ? ((1 - e) / (1 - r)) * i + (e - r) / (1 - r)
          : 1
        : 3 * i * (1 - i) ** 2 * e + 3 * i ** 2 * (1 - i) * a + i ** 3;
    };
  },
  steps: function (r, e = "end") {
    e = e.split("-").reverse()[0];
    let t = r;
    return (
      e === "none" ? --t : e === "both" && ++t,
      (a, i = !1) => {
        let s = Math.floor(a * r);
        const n = (a * s) % 1 == 0;
        return (
          (e !== "start" && e !== "both") || ++s,
          i && n && --s,
          a >= 0 && s < 0 && (s = 0),
          a <= 1 && s > t && (s = t),
          s / t
        );
      }
    );
  },
};
class Vs {
  done() {
    return !1;
  }
}
class Vr extends Vs {
  constructor(e = Vp) {
    super(), (this.ease = Qp[e] || e);
  }
  step(e, t, a) {
    return typeof e != "number" ? (a < 1 ? e : t) : e + (t - e) * this.ease(a);
  }
}
class Ei extends Vs {
  constructor(e) {
    super(), (this.stepper = e);
  }
  done(e) {
    return e.done;
  }
  step(e, t, a, i) {
    return this.stepper(e, t, a, i);
  }
}
function mo() {
  const r = (this._duration || 500) / 1e3,
    e = this._overshoot || 0,
    t = Math.PI,
    a = Math.log(e / 100 + 1e-10),
    i = -a / Math.sqrt(t * t + a * a),
    s = 3.9 / (i * r);
  (this.d = 2 * i * s), (this.k = s * s);
}
K(
  class extends Ei {
    constructor(r = 500, e = 0) {
      super(), this.duration(r).overshoot(e);
    }
    step(r, e, t, a) {
      if (typeof r == "string") return r;
      if (((a.done = t === 1 / 0), t === 1 / 0)) return e;
      if (t === 0) return r;
      t > 100 && (t = 16), (t /= 1e3);
      const i = a.velocity || 0,
        s = -this.d * i - this.k * (r - e),
        n = r + i * t + (s * t * t) / 2;
      return (
        (a.velocity = i + s * t),
        (a.done = Math.abs(e - n) + Math.abs(i) < 0.002),
        a.done ? e : n
      );
    }
  },
  { duration: Zt("_duration", mo), overshoot: Zt("_overshoot", mo) }
);
K(
  class extends Ei {
    constructor(r = 0.1, e = 0.01, t = 0, a = 1e3) {
      super(), this.p(r).i(e).d(t).windup(a);
    }
    step(r, e, t, a) {
      if (typeof r == "string") return r;
      if (((a.done = t === 1 / 0), t === 1 / 0)) return e;
      if (t === 0) return r;
      const i = e - r;
      let s = (a.integral || 0) + i * t;
      const n = (i - (a.error || 0)) / t,
        o = this._windup;
      return (
        o !== !1 && (s = Math.max(-o, Math.min(s, o))),
        (a.error = i),
        (a.integral = s),
        (a.done = Math.abs(i) < 0.001),
        a.done ? e : r + (this.P * i + this.I * s + this.D * n)
      );
    }
  },
  { windup: Zt("_windup"), p: Zt("P"), i: Zt("I"), d: Zt("D") }
);
const Jp = { M: 2, L: 2, H: 1, V: 1, C: 6, S: 4, Q: 4, T: 2, A: 7, Z: 0 },
  Gr = {
    M: function (r, e, t) {
      return (e.x = t.x = r[0]), (e.y = t.y = r[1]), ["M", e.x, e.y];
    },
    L: function (r, e) {
      return (e.x = r[0]), (e.y = r[1]), ["L", r[0], r[1]];
    },
    H: function (r, e) {
      return (e.x = r[0]), ["H", r[0]];
    },
    V: function (r, e) {
      return (e.y = r[0]), ["V", r[0]];
    },
    C: function (r, e) {
      return (
        (e.x = r[4]), (e.y = r[5]), ["C", r[0], r[1], r[2], r[3], r[4], r[5]]
      );
    },
    S: function (r, e) {
      return (e.x = r[2]), (e.y = r[3]), ["S", r[0], r[1], r[2], r[3]];
    },
    Q: function (r, e) {
      return (e.x = r[2]), (e.y = r[3]), ["Q", r[0], r[1], r[2], r[3]];
    },
    T: function (r, e) {
      return (e.x = r[0]), (e.y = r[1]), ["T", r[0], r[1]];
    },
    Z: function (r, e, t) {
      return (e.x = t.x), (e.y = t.y), ["Z"];
    },
    A: function (r, e) {
      return (
        (e.x = r[5]),
        (e.y = r[6]),
        ["A", r[0], r[1], r[2], r[3], r[4], r[5], r[6]]
      );
    },
  },
  hr = "mlhvqtcsaz".split("");
for (let r = 0, e = hr.length; r < e; ++r)
  Gr[hr[r]] = (function (t) {
    return function (a, i, s) {
      if (t === "H") a[0] = a[0] + i.x;
      else if (t === "V") a[0] = a[0] + i.y;
      else if (t === "A") (a[5] = a[5] + i.x), (a[6] = a[6] + i.y);
      else
        for (let n = 0, o = a.length; n < o; ++n)
          a[n] = a[n] + (n % 2 ? i.y : i.x);
      return Gr[t](a, i, s);
    };
  })(hr[r].toUpperCase());
function Ur(r) {
  return (
    r.segment.length && r.segment.length - 1 === Jp[r.segment[0].toUpperCase()]
  );
}
function em(r, e) {
  r.inNumber && Et(r, !1);
  const t = Hs.test(e);
  if (t) r.segment = [e];
  else {
    const a = r.lastCommand,
      i = a.toLowerCase(),
      s = a === i;
    r.segment = [i === "m" ? (s ? "l" : "L") : a];
  }
  return (r.inSegment = !0), (r.lastCommand = r.segment[0]), t;
}
function Et(r, e) {
  if (!r.inNumber) throw new Error("Parser Error");
  r.number && r.segment.push(parseFloat(r.number)),
    (r.inNumber = e),
    (r.number = ""),
    (r.pointSeen = !1),
    (r.hasExponent = !1),
    Ur(r) && $r(r);
}
function $r(r) {
  (r.inSegment = !1),
    r.absolute &&
      (r.segment = (function (e) {
        const t = e.segment[0];
        return Gr[t](e.segment.slice(1), e.p, e.p0);
      })(r)),
    r.segments.push(r.segment);
}
function tm(r) {
  if (!r.segment.length) return !1;
  const e = r.segment[0].toUpperCase() === "A",
    t = r.segment.length;
  return e && (t === 4 || t === 5);
}
function am(r) {
  return r.lastToken.toUpperCase() === "E";
}
const im = new Set([
  " ",
  ",",
  "	",
  `
`,
  "\r",
  "\f",
]);
class Ke extends Ht {
  bbox() {
    return (
      bt().path.setAttribute("d", this.toString()),
      new we(bt.nodes.path.getBBox())
    );
  }
  move(e, t) {
    const a = this.bbox();
    if (((e -= a.x), (t -= a.y), !isNaN(e) && !isNaN(t)))
      for (let i, s = this.length - 1; s >= 0; s--)
        (i = this[s][0]),
          i === "M" || i === "L" || i === "T"
            ? ((this[s][1] += e), (this[s][2] += t))
            : i === "H"
            ? (this[s][1] += e)
            : i === "V"
            ? (this[s][1] += t)
            : i === "C" || i === "S" || i === "Q"
            ? ((this[s][1] += e),
              (this[s][2] += t),
              (this[s][3] += e),
              (this[s][4] += t),
              i === "C" && ((this[s][5] += e), (this[s][6] += t)))
            : i === "A" && ((this[s][6] += e), (this[s][7] += t));
    return this;
  }
  parse(e = "M0 0") {
    return (
      Array.isArray(e) && (e = Array.prototype.concat.apply([], e).toString()),
      (function (t, a = !0) {
        let i = 0,
          s = "";
        const n = {
          segment: [],
          inNumber: !1,
          number: "",
          lastToken: "",
          inSegment: !1,
          segments: [],
          pointSeen: !1,
          hasExponent: !1,
          absolute: a,
          p0: new ue(),
          p: new ue(),
        };
        for (; (n.lastToken = s), (s = t.charAt(i++)); )
          if (n.inSegment || !em(n, s))
            if (s !== ".")
              if (isNaN(parseInt(s)))
                if (im.has(s)) n.inNumber && Et(n, !1);
                else if (s !== "-" && s !== "+")
                  if (s.toUpperCase() !== "E") {
                    if (Hs.test(s)) {
                      if (n.inNumber) Et(n, !1);
                      else {
                        if (!Ur(n)) throw new Error("parser Error");
                        $r(n);
                      }
                      --i;
                    }
                  } else (n.number += s), (n.hasExponent = !0);
                else {
                  if (n.inNumber && !am(n)) {
                    Et(n, !1), --i;
                    continue;
                  }
                  (n.number += s), (n.inNumber = !0);
                }
              else {
                if (n.number === "0" || tm(n)) {
                  (n.inNumber = !0), (n.number = s), Et(n, !0);
                  continue;
                }
                (n.inNumber = !0), (n.number += s);
              }
            else {
              if (n.pointSeen || n.hasExponent) {
                Et(n, !1), --i;
                continue;
              }
              (n.inNumber = !0), (n.pointSeen = !0), (n.number += s);
            }
        return (
          n.inNumber && Et(n, !1), n.inSegment && Ur(n) && $r(n), n.segments
        );
      })(e)
    );
  }
  size(e, t) {
    const a = this.bbox();
    let i, s;
    for (
      a.width = a.width === 0 ? 1 : a.width,
        a.height = a.height === 0 ? 1 : a.height,
        i = this.length - 1;
      i >= 0;
      i--
    )
      (s = this[i][0]),
        s === "M" || s === "L" || s === "T"
          ? ((this[i][1] = ((this[i][1] - a.x) * e) / a.width + a.x),
            (this[i][2] = ((this[i][2] - a.y) * t) / a.height + a.y))
          : s === "H"
          ? (this[i][1] = ((this[i][1] - a.x) * e) / a.width + a.x)
          : s === "V"
          ? (this[i][1] = ((this[i][1] - a.y) * t) / a.height + a.y)
          : s === "C" || s === "S" || s === "Q"
          ? ((this[i][1] = ((this[i][1] - a.x) * e) / a.width + a.x),
            (this[i][2] = ((this[i][2] - a.y) * t) / a.height + a.y),
            (this[i][3] = ((this[i][3] - a.x) * e) / a.width + a.x),
            (this[i][4] = ((this[i][4] - a.y) * t) / a.height + a.y),
            s === "C" &&
              ((this[i][5] = ((this[i][5] - a.x) * e) / a.width + a.x),
              (this[i][6] = ((this[i][6] - a.y) * t) / a.height + a.y)))
          : s === "A" &&
            ((this[i][1] = (this[i][1] * e) / a.width),
            (this[i][2] = (this[i][2] * t) / a.height),
            (this[i][6] = ((this[i][6] - a.x) * e) / a.width + a.x),
            (this[i][7] = ((this[i][7] - a.y) * t) / a.height + a.y));
    return this;
  }
  toString() {
    return (function (e) {
      let t = "";
      for (let a = 0, i = e.length; a < i; a++)
        (t += e[a][0]),
          e[a][1] != null &&
            ((t += e[a][1]),
            e[a][2] != null &&
              ((t += " "),
              (t += e[a][2]),
              e[a][3] != null &&
                ((t += " "),
                (t += e[a][3]),
                (t += " "),
                (t += e[a][4]),
                e[a][5] != null &&
                  ((t += " "),
                  (t += e[a][5]),
                  (t += " "),
                  (t += e[a][6]),
                  e[a][7] != null && ((t += " "), (t += e[a][7]))))));
      return t + " ";
    })(this);
  }
}
const Rc = (r) => {
  const e = typeof r;
  return e === "number"
    ? ce
    : e === "string"
    ? rt.isColor(r)
      ? rt
      : ft.test(r)
      ? Hs.test(r)
        ? Ke
        : Ht
      : mc.test(r)
      ? ce
      : qr
    : Zr.indexOf(r.constructor) > -1
    ? r.constructor
    : Array.isArray(r)
    ? Ht
    : e === "object"
    ? Oa
    : qr;
};
class It {
  constructor(e) {
    (this._stepper = e || new Vr("-")),
      (this._from = null),
      (this._to = null),
      (this._type = null),
      (this._context = null),
      (this._morphObj = null);
  }
  at(e) {
    return this._morphObj.morph(
      this._from,
      this._to,
      e,
      this._stepper,
      this._context
    );
  }
  done() {
    return this._context.map(this._stepper.done).reduce(function (e, t) {
      return e && t;
    }, !0);
  }
  from(e) {
    return e == null ? this._from : ((this._from = this._set(e)), this);
  }
  stepper(e) {
    return e == null ? this._stepper : ((this._stepper = e), this);
  }
  to(e) {
    return e == null ? this._to : ((this._to = this._set(e)), this);
  }
  type(e) {
    return e == null ? this._type : ((this._type = e), this);
  }
  _set(e) {
    this._type || this.type(Rc(e));
    let t = new this._type(e);
    return (
      this._type === rt &&
        (t = this._to ? t[this._to[4]]() : this._from ? t[this._from[4]]() : t),
      this._type === Oa &&
        (t = this._to
          ? t.align(this._to)
          : this._from
          ? t.align(this._from)
          : t),
      (t = t.toConsumable()),
      (this._morphObj = this._morphObj || new this._type()),
      (this._context =
        this._context ||
        Array.apply(null, Array(t.length))
          .map(Object)
          .map(function (a) {
            return (a.done = !0), a;
          })),
      t
    );
  }
}
class qr {
  constructor(...e) {
    this.init(...e);
  }
  init(e) {
    return (e = Array.isArray(e) ? e[0] : e), (this.value = e), this;
  }
  toArray() {
    return [this.value];
  }
  valueOf() {
    return this.value;
  }
}
class Za {
  constructor(...e) {
    this.init(...e);
  }
  init(e) {
    return (
      Array.isArray(e) &&
        (e = {
          scaleX: e[0],
          scaleY: e[1],
          shear: e[2],
          rotate: e[3],
          translateX: e[4],
          translateY: e[5],
          originX: e[6],
          originY: e[7],
        }),
      Object.assign(this, Za.defaults, e),
      this
    );
  }
  toArray() {
    const e = this;
    return [
      e.scaleX,
      e.scaleY,
      e.shear,
      e.rotate,
      e.translateX,
      e.translateY,
      e.originX,
      e.originY,
    ];
  }
}
Za.defaults = {
  scaleX: 1,
  scaleY: 1,
  shear: 0,
  rotate: 0,
  translateX: 0,
  translateY: 0,
  originX: 0,
  originY: 0,
};
const rm = (r, e) => (r[0] < e[0] ? -1 : r[0] > e[0] ? 1 : 0);
class Oa {
  constructor(...e) {
    this.init(...e);
  }
  align(e) {
    const t = this.values;
    for (let a = 0, i = t.length; a < i; ++a) {
      if (t[a + 1] === e[a + 1]) {
        if (t[a + 1] === rt && e[a + 7] !== t[a + 7]) {
          const o = e[a + 7],
            l = new rt(this.values.splice(a + 3, 5))[o]().toArray();
          this.values.splice(a + 3, 0, ...l);
        }
        a += t[a + 2] + 2;
        continue;
      }
      if (!e[a + 1]) return this;
      const s = new e[a + 1]().toArray(),
        n = t[a + 2] + 3;
      t.splice(a, n, e[a], e[a + 1], e[a + 2], ...s), (a += t[a + 2] + 2);
    }
    return this;
  }
  init(e) {
    if (((this.values = []), Array.isArray(e)))
      return void (this.values = e.slice());
    e = e || {};
    const t = [];
    for (const a in e) {
      const i = Rc(e[a]),
        s = new i(e[a]).toArray();
      t.push([a, i, s.length, ...s]);
    }
    return (
      t.sort(rm), (this.values = t.reduce((a, i) => a.concat(i), [])), this
    );
  }
  toArray() {
    return this.values;
  }
  valueOf() {
    const e = {},
      t = this.values;
    for (; t.length; ) {
      const a = t.shift(),
        i = t.shift(),
        s = t.shift(),
        n = t.splice(0, s);
      e[a] = new i(n);
    }
    return e;
  }
}
const Zr = [qr, Za, Oa];
class Jt extends Xe {
  constructor(e, t = e) {
    super(me("path", e), t);
  }
  array() {
    return this._array || (this._array = new Ke(this.attr("d")));
  }
  clear() {
    return delete this._array, this;
  }
  height(e) {
    return e == null ? this.bbox().height : this.size(this.bbox().width, e);
  }
  move(e, t) {
    return this.attr("d", this.array().move(e, t));
  }
  plot(e) {
    return e == null
      ? this.array()
      : this.clear().attr(
          "d",
          typeof e == "string" ? e : (this._array = new Ke(e))
        );
  }
  size(e, t) {
    const a = ca(this, e, t);
    return this.attr("d", this.array().size(a.width, a.height));
  }
  width(e) {
    return e == null ? this.bbox().width : this.size(e, this.bbox().height);
  }
  x(e) {
    return e == null ? this.bbox().x : this.move(e, this.bbox().y);
  }
  y(e) {
    return e == null ? this.bbox().y : this.move(this.bbox().x, e);
  }
}
(Jt.prototype.MorphArray = Ke),
  ae({
    Container: {
      path: pe(function (r) {
        return this.put(new Jt()).plot(r || new Ke());
      }),
    },
  }),
  le(Jt, "Path");
var _c = Object.freeze({
  __proto__: null,
  array: function () {
    return this._array || (this._array = new Ct(this.attr("points")));
  },
  clear: function () {
    return delete this._array, this;
  },
  move: function (r, e) {
    return this.attr("points", this.array().move(r, e));
  },
  plot: function (r) {
    return r == null
      ? this.array()
      : this.clear().attr(
          "points",
          typeof r == "string" ? r : (this._array = new Ct(r))
        );
  },
  size: function (r, e) {
    const t = ca(this, r, e);
    return this.attr("points", this.array().size(t.width, t.height));
  },
});
class Nt extends Xe {
  constructor(e, t = e) {
    super(me("polygon", e), t);
  }
}
ae({
  Container: {
    polygon: pe(function (r) {
      return this.put(new Nt()).plot(r || new Ct());
    }),
  },
}),
  K(Nt, Ws),
  K(Nt, _c),
  le(Nt, "Polygon");
class jt extends Xe {
  constructor(e, t = e) {
    super(me("polyline", e), t);
  }
}
ae({
  Container: {
    polyline: pe(function (r) {
      return this.put(new jt()).plot(r || new Ct());
    }),
  },
}),
  K(jt, Ws),
  K(jt, _c),
  le(jt, "Polyline");
class gi extends Xe {
  constructor(e, t = e) {
    super(me("rect", e), t);
  }
}
K(gi, { rx: Bs, ry: Ys }),
  ae({
    Container: {
      rect: pe(function (r, e) {
        return this.put(new gi()).size(r, e);
      }),
    },
  }),
  le(gi, "Rect");
class dr {
  constructor() {
    (this._first = null), (this._last = null);
  }
  first() {
    return this._first && this._first.value;
  }
  last() {
    return this._last && this._last.value;
  }
  push(e) {
    const t = e.next !== void 0 ? e : { value: e, next: null, prev: null };
    return (
      this._last
        ? ((t.prev = this._last), (this._last.next = t), (this._last = t))
        : ((this._last = t), (this._first = t)),
      t
    );
  }
  remove(e) {
    e.prev && (e.prev.next = e.next),
      e.next && (e.next.prev = e.prev),
      e === this._last && (this._last = e.prev),
      e === this._first && (this._first = e.next),
      (e.prev = null),
      (e.next = null);
  }
  shift() {
    const e = this._first;
    return e
      ? ((this._first = e.next),
        this._first && (this._first.prev = null),
        (this._last = this._first ? this._last : null),
        e.value)
      : null;
  }
}
const de = {
    nextDraw: null,
    frames: new dr(),
    timeouts: new dr(),
    immediates: new dr(),
    timer: () => oe.window.performance || oe.window.Date,
    transforms: [],
    frame(r) {
      const e = de.frames.push({ run: r });
      return (
        de.nextDraw === null &&
          (de.nextDraw = oe.window.requestAnimationFrame(de._draw)),
        e
      );
    },
    timeout(r, e) {
      e = e || 0;
      const t = de.timer().now() + e,
        a = de.timeouts.push({ run: r, time: t });
      return (
        de.nextDraw === null &&
          (de.nextDraw = oe.window.requestAnimationFrame(de._draw)),
        a
      );
    },
    immediate(r) {
      const e = de.immediates.push(r);
      return (
        de.nextDraw === null &&
          (de.nextDraw = oe.window.requestAnimationFrame(de._draw)),
        e
      );
    },
    cancelFrame(r) {
      r != null && de.frames.remove(r);
    },
    clearTimeout(r) {
      r != null && de.timeouts.remove(r);
    },
    cancelImmediate(r) {
      r != null && de.immediates.remove(r);
    },
    _draw(r) {
      let e = null;
      const t = de.timeouts.last();
      for (
        ;
        (e = de.timeouts.shift()) &&
        (r >= e.time ? e.run() : de.timeouts.push(e), e !== t);

      );
      let a = null;
      const i = de.frames.last();
      for (; a !== i && (a = de.frames.shift()); ) a.run(r);
      let s = null;
      for (; (s = de.immediates.shift()); ) s();
      de.nextDraw =
        de.timeouts.first() || de.frames.first()
          ? oe.window.requestAnimationFrame(de._draw)
          : null;
    },
  },
  sm = function (r) {
    const e = r.start,
      t = r.runner.duration();
    return { start: e, duration: t, end: e + t, runner: r.runner };
  },
  nm = function () {
    const r = oe.window;
    return (r.performance || r.Date).now();
  };
class Oc extends qa {
  constructor(e = nm) {
    super(), (this._timeSource = e), this.terminate();
  }
  active() {
    return !!this._nextFrame;
  }
  finish() {
    return this.time(this.getEndTimeOfTimeline() + 1), this.pause();
  }
  getEndTime() {
    const e = this.getLastRunnerInfo(),
      t = e ? e.runner.duration() : 0;
    return (e ? e.start : this._time) + t;
  }
  getEndTimeOfTimeline() {
    const e = this._runners.map((t) => t.start + t.runner.duration());
    return Math.max(0, ...e);
  }
  getLastRunnerInfo() {
    return this.getRunnerInfoById(this._lastRunnerId);
  }
  getRunnerInfoById(e) {
    return this._runners[this._runnerIds.indexOf(e)] || null;
  }
  pause() {
    return (this._paused = !0), this._continue();
  }
  persist(e) {
    return e == null ? this._persist : ((this._persist = e), this);
  }
  play() {
    return (this._paused = !1), this.updateTime()._continue();
  }
  reverse(e) {
    const t = this.speed();
    if (e == null) return this.speed(-t);
    const a = Math.abs(t);
    return this.speed(e ? -a : a);
  }
  schedule(e, t, a) {
    if (e == null) return this._runners.map(sm);
    let i = 0;
    const s = this.getEndTime();
    if (((t = t || 0), a == null || a === "last" || a === "after")) i = s;
    else if (a === "absolute" || a === "start") (i = t), (t = 0);
    else if (a === "now") i = this._time;
    else if (a === "relative") {
      const l = this.getRunnerInfoById(e.id);
      l && ((i = l.start + t), (t = 0));
    } else {
      if (a !== "with-last")
        throw new Error('Invalid value for the "when" parameter');
      {
        const l = this.getLastRunnerInfo();
        i = l ? l.start : this._time;
      }
    }
    e.unschedule(), e.timeline(this);
    const n = e.persist(),
      o = { persist: n === null ? this._persist : n, start: i + t, runner: e };
    return (
      (this._lastRunnerId = e.id),
      this._runners.push(o),
      this._runners.sort((l, c) => l.start - c.start),
      (this._runnerIds = this._runners.map((l) => l.runner.id)),
      this.updateTime()._continue(),
      this
    );
  }
  seek(e) {
    return this.time(this._time + e);
  }
  source(e) {
    return e == null ? this._timeSource : ((this._timeSource = e), this);
  }
  speed(e) {
    return e == null ? this._speed : ((this._speed = e), this);
  }
  stop() {
    return this.time(0), this.pause();
  }
  time(e) {
    return e == null ? this._time : ((this._time = e), this._continue(!0));
  }
  unschedule(e) {
    const t = this._runnerIds.indexOf(e.id);
    return (
      t < 0 ||
        (this._runners.splice(t, 1),
        this._runnerIds.splice(t, 1),
        e.timeline(null)),
      this
    );
  }
  updateTime() {
    return this.active() || (this._lastSourceTime = this._timeSource()), this;
  }
  _continue(e = !1) {
    return (
      de.cancelFrame(this._nextFrame),
      (this._nextFrame = null),
      e
        ? this._stepImmediate()
        : (this._paused || (this._nextFrame = de.frame(this._step)), this)
    );
  }
  _stepFn(e = !1) {
    const t = this._timeSource();
    let a = t - this._lastSourceTime;
    e && (a = 0);
    const i = this._speed * a + (this._time - this._lastStepTime);
    (this._lastSourceTime = t),
      e || ((this._time += i), (this._time = this._time < 0 ? 0 : this._time)),
      (this._lastStepTime = this._time),
      this.fire("time", this._time);
    for (let n = this._runners.length; n--; ) {
      const o = this._runners[n],
        l = o.runner;
      this._time - o.start <= 0 && l.reset();
    }
    let s = !1;
    for (let n = 0, o = this._runners.length; n < o; n++) {
      const l = this._runners[n],
        c = l.runner;
      let h = i;
      const d = this._time - l.start;
      if (d <= 0) {
        s = !0;
        continue;
      }
      d < h && (h = d),
        c.active() &&
          (c.step(h).done
            ? l.persist !== !0 &&
              c.duration() - c.time() + this._time + l.persist < this._time &&
              (c.unschedule(), --n, --o)
            : (s = !0));
    }
    return (
      (s && !(this._speed < 0 && this._time === 0)) ||
      (this._runnerIds.length && this._speed < 0 && this._time > 0)
        ? this._continue()
        : (this.pause(), this.fire("finished")),
      this
    );
  }
  terminate() {
    (this._startTime = 0),
      (this._speed = 1),
      (this._persist = 0),
      (this._nextFrame = null),
      (this._paused = !0),
      (this._runners = []),
      (this._runnerIds = []),
      (this._lastRunnerId = -1),
      (this._time = 0),
      (this._lastSourceTime = 0),
      (this._lastStepTime = 0),
      (this._step = this._stepFn.bind(this, !1)),
      (this._stepImmediate = this._stepFn.bind(this, !0));
  }
}
ae({
  Element: {
    timeline: function (r) {
      return r == null
        ? ((this._timeline = this._timeline || new Oc()), this._timeline)
        : ((this._timeline = r), this);
    },
  },
});
class ze extends qa {
  constructor(e) {
    super(),
      (this.id = ze.id++),
      (e = typeof (e = e ?? cr) == "function" ? new Ei(e) : e),
      (this._element = null),
      (this._timeline = null),
      (this.done = !1),
      (this._queue = []),
      (this._duration = typeof e == "number" && e),
      (this._isDeclarative = e instanceof Ei),
      (this._stepper = this._isDeclarative ? e : new Vr()),
      (this._history = {}),
      (this.enabled = !0),
      (this._time = 0),
      (this._lastTime = 0),
      (this._reseted = !0),
      (this.transforms = new re()),
      (this.transformId = 1),
      (this._haveReversed = !1),
      (this._reverse = !1),
      (this._loopsDone = 0),
      (this._swing = !1),
      (this._wait = 0),
      (this._times = 1),
      (this._frameId = null),
      (this._persist = !!this._isDeclarative || null);
  }
  static sanitise(e, t, a) {
    let i = 1,
      s = !1,
      n = 0;
    return (
      (t = t ?? Gp),
      (a = a || "last"),
      typeof (e = e ?? cr) != "object" ||
        e instanceof Vs ||
        ((t = e.delay ?? t),
        (a = e.when ?? a),
        (s = e.swing || s),
        (i = e.times ?? i),
        (n = e.wait ?? n),
        (e = e.duration ?? cr)),
      { duration: e, delay: t, swing: s, times: i, wait: n, when: a }
    );
  }
  active(e) {
    return e == null ? this.enabled : ((this.enabled = e), this);
  }
  addTransform(e) {
    return this.transforms.lmultiplyO(e), this;
  }
  after(e) {
    return this.on("finished", e);
  }
  animate(e, t, a) {
    const i = ze.sanitise(e, t, a),
      s = new ze(i.duration);
    return (
      this._timeline && s.timeline(this._timeline),
      this._element && s.element(this._element),
      s.loop(i).schedule(i.delay, i.when)
    );
  }
  clearTransform() {
    return (this.transforms = new re()), this;
  }
  clearTransformsFromQueue() {
    (this.done &&
      this._timeline &&
      this._timeline._runnerIds.includes(this.id)) ||
      (this._queue = this._queue.filter((e) => !e.isTransform));
  }
  delay(e) {
    return this.animate(0, e);
  }
  duration() {
    return this._times * (this._wait + this._duration) - this._wait;
  }
  during(e) {
    return this.queue(null, e);
  }
  ease(e) {
    return (this._stepper = new Vr(e)), this;
  }
  element(e) {
    return e == null
      ? this._element
      : ((this._element = e), e._prepareRunner(), this);
  }
  finish() {
    return this.step(1 / 0);
  }
  loop(e, t, a) {
    return (
      typeof e == "object" && ((t = e.swing), (a = e.wait), (e = e.times)),
      (this._times = e || 1 / 0),
      (this._swing = t || !1),
      (this._wait = a || 0),
      this._times === !0 && (this._times = 1 / 0),
      this
    );
  }
  loops(e) {
    const t = this._duration + this._wait;
    if (e == null) {
      const s = Math.floor(this._time / t),
        n = (this._time - s * t) / this._duration;
      return Math.min(s + n, this._times);
    }
    const a = e % 1,
      i = t * Math.floor(e) + this._duration * a;
    return this.time(i);
  }
  persist(e) {
    return e == null ? this._persist : ((this._persist = e), this);
  }
  position(e) {
    const t = this._time,
      a = this._duration,
      i = this._wait,
      s = this._times,
      n = this._swing,
      o = this._reverse;
    let l;
    if (e == null) {
      const d = function (f) {
          const g = n * Math.floor((f % (2 * (i + a))) / (i + a)),
            p = (g && !o) || (!g && o),
            m = (Math.pow(-1, p) * (f % (i + a))) / a + p;
          return Math.max(Math.min(m, 1), 0);
        },
        u = s * (i + a) - i;
      return (
        (l =
          t <= 0
            ? Math.round(d(1e-5))
            : t < u
            ? d(t)
            : Math.round(d(u - 1e-5))),
        l
      );
    }
    const c = Math.floor(this.loops()),
      h = n && c % 2 == 0;
    return (l = c + ((h && !o) || (o && h) ? e : 1 - e)), this.loops(l);
  }
  progress(e) {
    return e == null
      ? Math.min(1, this._time / this.duration())
      : this.time(e * this.duration());
  }
  queue(e, t, a, i) {
    return (
      this._queue.push({
        initialiser: e || go,
        runner: t || go,
        retarget: a,
        isTransform: i,
        initialised: !1,
        finished: !1,
      }),
      this.timeline() && this.timeline()._continue(),
      this
    );
  }
  reset() {
    return this._reseted || (this.time(0), (this._reseted = !0)), this;
  }
  reverse(e) {
    return (this._reverse = e ?? !this._reverse), this;
  }
  schedule(e, t, a) {
    if ((e instanceof Oc || ((a = t), (t = e), (e = this.timeline())), !e))
      throw Error("Runner cannot be scheduled without timeline");
    return e.schedule(this, t, a), this;
  }
  step(e) {
    if (!this.enabled) return this;
    (e = e ?? 16), (this._time += e);
    const t = this.position(),
      a = this._lastPosition !== t && this._time >= 0;
    this._lastPosition = t;
    const i = this.duration(),
      s = this._lastTime <= 0 && this._time > 0,
      n = this._lastTime < i && this._time >= i;
    (this._lastTime = this._time), s && this.fire("start", this);
    const o = this._isDeclarative;
    (this.done = !o && !n && this._time >= i), (this._reseted = !1);
    let l = !1;
    return (
      (a || o) &&
        (this._initialise(a),
        (this.transforms = new re()),
        (l = this._run(o ? e : t)),
        this.fire("step", this)),
      (this.done = this.done || (l && o)),
      n && this.fire("finished", this),
      this
    );
  }
  time(e) {
    if (e == null) return this._time;
    const t = e - this._time;
    return this.step(t), this;
  }
  timeline(e) {
    return e === void 0 ? this._timeline : ((this._timeline = e), this);
  }
  unschedule() {
    const e = this.timeline();
    return e && e.unschedule(this), this;
  }
  _initialise(e) {
    if (e || this._isDeclarative)
      for (let t = 0, a = this._queue.length; t < a; ++t) {
        const i = this._queue[t],
          s = this._isDeclarative || (!i.initialised && e);
        (e = !i.finished),
          s && e && (i.initialiser.call(this), (i.initialised = !0));
      }
  }
  _rememberMorpher(e, t) {
    if (
      ((this._history[e] = {
        morpher: t,
        caller: this._queue[this._queue.length - 1],
      }),
      this._isDeclarative)
    ) {
      const a = this.timeline();
      a && a.play();
    }
  }
  _run(e) {
    let t = !0;
    for (let a = 0, i = this._queue.length; a < i; ++a) {
      const s = this._queue[a],
        n = s.runner.call(this, e);
      (s.finished = s.finished || n === !0), (t = t && s.finished);
    }
    return t;
  }
  _tryRetarget(e, t, a) {
    if (this._history[e]) {
      if (!this._history[e].caller.initialised) {
        const s = this._queue.indexOf(this._history[e].caller);
        return this._queue.splice(s, 1), !1;
      }
      this._history[e].caller.retarget
        ? this._history[e].caller.retarget.call(this, t, a)
        : this._history[e].morpher.to(t),
        (this._history[e].caller.finished = !1);
      const i = this.timeline();
      return i && i.play(), !0;
    }
    return !1;
  }
}
ze.id = 0;
class Ii {
  constructor(e = new re(), t = -1, a = !0) {
    (this.transforms = e), (this.id = t), (this.done = a);
  }
  clearTransformsFromQueue() {}
}
K([ze, Ii], {
  mergeWith(r) {
    return new Ii(r.transforms.lmultiply(this.transforms), r.id);
  },
});
const Nc = (r, e) => r.lmultiplyO(e),
  jc = (r) => r.transforms;
function om() {
  const r = this._transformationRunners.runners.map(jc).reduce(Nc, new re());
  this.transform(r),
    this._transformationRunners.merge(),
    this._transformationRunners.length() === 1 && (this._frameId = null);
}
class lm {
  constructor() {
    (this.runners = []), (this.ids = []);
  }
  add(e) {
    if (this.runners.includes(e)) return;
    const t = e.id + 1;
    return this.runners.push(e), this.ids.push(t), this;
  }
  clearBefore(e) {
    const t = this.ids.indexOf(e + 1) || 1;
    return (
      this.ids.splice(0, t, 0),
      this.runners
        .splice(0, t, new Ii())
        .forEach((a) => a.clearTransformsFromQueue()),
      this
    );
  }
  edit(e, t) {
    const a = this.ids.indexOf(e + 1);
    return this.ids.splice(a, 1, e + 1), this.runners.splice(a, 1, t), this;
  }
  getByID(e) {
    return this.runners[this.ids.indexOf(e + 1)];
  }
  length() {
    return this.ids.length;
  }
  merge() {
    let e = null;
    for (let t = 0; t < this.runners.length; ++t) {
      const a = this.runners[t];
      if (
        e &&
        a.done &&
        e.done &&
        (!a._timeline || !a._timeline._runnerIds.includes(a.id)) &&
        (!e._timeline || !e._timeline._runnerIds.includes(e.id))
      ) {
        this.remove(a.id);
        const i = a.mergeWith(e);
        this.edit(e.id, i), (e = i), --t;
      } else e = a;
    }
    return this;
  }
  remove(e) {
    const t = this.ids.indexOf(e + 1);
    return this.ids.splice(t, 1), this.runners.splice(t, 1), this;
  }
}
ae({
  Element: {
    animate(r, e, t) {
      const a = ze.sanitise(r, e, t),
        i = this.timeline();
      return new ze(a.duration)
        .loop(a)
        .element(this)
        .timeline(i.play())
        .schedule(a.delay, a.when);
    },
    delay(r, e) {
      return this.animate(0, r, e);
    },
    _clearTransformRunnersBefore(r) {
      this._transformationRunners.clearBefore(r.id);
    },
    _currentTransform(r) {
      return this._transformationRunners.runners
        .filter((e) => e.id <= r.id)
        .map(jc)
        .reduce(Nc, new re());
    },
    _addRunner(r) {
      this._transformationRunners.add(r),
        de.cancelImmediate(this._frameId),
        (this._frameId = de.immediate(om.bind(this)));
    },
    _prepareRunner() {
      this._frameId == null &&
        (this._transformationRunners = new lm().add(new Ii(new re(this))));
    },
  },
});
K(ze, {
  attr(r, e) {
    return this.styleAttr("attr", r, e);
  },
  css(r, e) {
    return this.styleAttr("css", r, e);
  },
  styleAttr(r, e, t) {
    if (typeof e == "string") return this.styleAttr(r, { [e]: t });
    let a = e;
    if (this._tryRetarget(r, a)) return this;
    let i = new It(this._stepper).to(a),
      s = Object.keys(a);
    return (
      this.queue(
        function () {
          i = i.from(this.element()[r](s));
        },
        function (n) {
          return this.element()[r](i.at(n).valueOf()), i.done();
        },
        function (n) {
          const o = Object.keys(n),
            l = ((c = s), o.filter((d) => !c.includes(d)));
          var c;
          if (l.length) {
            const d = this.element()[r](l),
              u = new Oa(i.from()).valueOf();
            Object.assign(u, d), i.from(u);
          }
          const h = new Oa(i.to()).valueOf();
          Object.assign(h, n), i.to(h), (s = o), (a = n);
        }
      ),
      this._rememberMorpher(r, i),
      this
    );
  },
  zoom(r, e) {
    if (this._tryRetarget("zoom", r, e)) return this;
    let t = new It(this._stepper).to(new ce(r));
    return (
      this.queue(
        function () {
          t = t.from(this.element().zoom());
        },
        function (a) {
          return this.element().zoom(t.at(a), e), t.done();
        },
        function (a, i) {
          (e = i), t.to(a);
        }
      ),
      this._rememberMorpher("zoom", t),
      this
    );
  },
  transform(r, e, t) {
    if (
      ((e = r.relative || e),
      this._isDeclarative && !e && this._tryRetarget("transform", r))
    )
      return this;
    const a = re.isMatrixLike(r);
    t = r.affine != null ? r.affine : t ?? !a;
    const i = new It(this._stepper).type(t ? Za : re);
    let s, n, o, l, c;
    return (
      this.queue(
        function () {
          (n = n || this.element()),
            (s = s || Yr(r, n)),
            (c = new re(e ? void 0 : n)),
            n._addRunner(this),
            e || n._clearTransformRunnersBefore(this);
        },
        function (h) {
          e || this.clearTransform();
          const { x: d, y: u } = new ue(s).transform(n._currentTransform(this));
          let f = new re({ ...r, origin: [d, u] }),
            g = this._isDeclarative && o ? o : c;
          if (t) {
            (f = f.decompose(d, u)), (g = g.decompose(d, u));
            const m = f.rotate,
              x = g.rotate,
              v = [m - 360, m, m + 360],
              b = v.map((C) => Math.abs(C - x)),
              k = Math.min(...b),
              y = b.indexOf(k);
            f.rotate = v[y];
          }
          e &&
            (a || (f.rotate = r.rotate || 0),
            this._isDeclarative && l && (g.rotate = l)),
            i.from(g),
            i.to(f);
          const p = i.at(h);
          return (
            (l = p.rotate),
            (o = new re(p)),
            this.addTransform(o),
            n._addRunner(this),
            i.done()
          );
        },
        function (h) {
          (h.origin || "center").toString() !==
            (r.origin || "center").toString() && (s = Yr(h, n)),
            (r = { ...h, origin: s });
        },
        !0
      ),
      this._isDeclarative && this._rememberMorpher("transform", i),
      this
    );
  },
  x(r) {
    return this._queueNumber("x", r);
  },
  y(r) {
    return this._queueNumber("y", r);
  },
  ax(r) {
    return this._queueNumber("ax", r);
  },
  ay(r) {
    return this._queueNumber("ay", r);
  },
  dx(r = 0) {
    return this._queueNumberDelta("x", r);
  },
  dy(r = 0) {
    return this._queueNumberDelta("y", r);
  },
  dmove(r, e) {
    return this.dx(r).dy(e);
  },
  _queueNumberDelta(r, e) {
    if (((e = new ce(e)), this._tryRetarget(r, e))) return this;
    const t = new It(this._stepper).to(e);
    let a = null;
    return (
      this.queue(
        function () {
          (a = this.element()[r]()), t.from(a), t.to(a + e);
        },
        function (i) {
          return this.element()[r](t.at(i)), t.done();
        },
        function (i) {
          t.to(a + new ce(i));
        }
      ),
      this._rememberMorpher(r, t),
      this
    );
  },
  _queueObject(r, e) {
    if (this._tryRetarget(r, e)) return this;
    const t = new It(this._stepper).to(e);
    return (
      this.queue(
        function () {
          t.from(this.element()[r]());
        },
        function (a) {
          return this.element()[r](t.at(a)), t.done();
        }
      ),
      this._rememberMorpher(r, t),
      this
    );
  },
  _queueNumber(r, e) {
    return this._queueObject(r, new ce(e));
  },
  cx(r) {
    return this._queueNumber("cx", r);
  },
  cy(r) {
    return this._queueNumber("cy", r);
  },
  move(r, e) {
    return this.x(r).y(e);
  },
  amove(r, e) {
    return this.ax(r).ay(e);
  },
  center(r, e) {
    return this.cx(r).cy(e);
  },
  size(r, e) {
    let t;
    return (
      (r && e) || (t = this._element.bbox()),
      r || (r = (t.width / t.height) * e),
      e || (e = (t.height / t.width) * r),
      this.width(r).height(e)
    );
  },
  width(r) {
    return this._queueNumber("width", r);
  },
  height(r) {
    return this._queueNumber("height", r);
  },
  plot(r, e, t, a) {
    if (arguments.length === 4) return this.plot([r, e, t, a]);
    if (this._tryRetarget("plot", r)) return this;
    const i = new It(this._stepper).type(this._element.MorphArray).to(r);
    return (
      this.queue(
        function () {
          i.from(this._element.array());
        },
        function (s) {
          return this._element.plot(i.at(s)), i.done();
        }
      ),
      this._rememberMorpher("plot", i),
      this
    );
  },
  leading(r) {
    return this._queueNumber("leading", r);
  },
  viewbox(r, e, t, a) {
    return this._queueObject("viewbox", new we(r, e, t, a));
  },
  update(r) {
    return typeof r != "object"
      ? this.update({
          offset: arguments[0],
          color: arguments[1],
          opacity: arguments[2],
        })
      : (r.opacity != null && this.attr("stop-opacity", r.opacity),
        r.color != null && this.attr("stop-color", r.color),
        r.offset != null && this.attr("offset", r.offset),
        this);
  },
}),
  K(ze, { rx: Bs, ry: Ys, from: Ec, to: Ic }),
  le(ze, "Runner");
class Kr extends He {
  constructor(e, t = e) {
    super(me("svg", e), t), this.namespace();
  }
  defs() {
    return this.isRoot()
      ? Ye(this.node.querySelector("defs")) || this.put(new Bi())
      : this.root().defs();
  }
  isRoot() {
    return (
      !this.node.parentNode ||
      (!(this.node.parentNode instanceof oe.window.SVGElement) &&
        this.node.parentNode.nodeName !== "#document-fragment")
    );
  }
  namespace() {
    return this.isRoot()
      ? this.attr({ xmlns: Fs, version: "1.1" }).attr("xmlns:xlink", ha, nr)
      : this.root().namespace();
  }
  removeNamespace() {
    return this.attr({ xmlns: null, version: null })
      .attr("xmlns:xlink", null, nr)
      .attr("xmlns:svgjs", null, nr);
  }
  root() {
    return this.isRoot() ? this : super.root();
  }
}
ae({
  Container: {
    nested: pe(function () {
      return this.put(new Kr());
    }),
  },
}),
  le(Kr, "Svg", !0);
let Qr = class extends He {
  constructor(r, e = r) {
    super(me("symbol", r), e);
  }
};
ae({
  Container: {
    symbol: pe(function () {
      return this.put(new Qr());
    }),
  },
}),
  le(Qr, "Symbol");
var Fc = Object.freeze({
  __proto__: null,
  amove: function (r, e) {
    return this.ax(r).ay(e);
  },
  ax: function (r) {
    return this.attr("x", r);
  },
  ay: function (r) {
    return this.attr("y", r);
  },
  build: function (r) {
    return (this._build = !!r), this;
  },
  center: function (r, e, t = this.bbox()) {
    return this.cx(r, t).cy(e, t);
  },
  cx: function (r, e = this.bbox()) {
    return r == null ? e.cx : this.attr("x", this.attr("x") + r - e.cx);
  },
  cy: function (r, e = this.bbox()) {
    return r == null ? e.cy : this.attr("y", this.attr("y") + r - e.cy);
  },
  length: function () {
    return this.node.getComputedTextLength();
  },
  move: function (r, e, t = this.bbox()) {
    return this.x(r, t).y(e, t);
  },
  plain: function (r) {
    return (
      this._build === !1 && this.clear(),
      this.node.appendChild(oe.document.createTextNode(r)),
      this
    );
  },
  x: function (r, e = this.bbox()) {
    return r == null ? e.x : this.attr("x", this.attr("x") + r - e.x);
  },
  y: function (r, e = this.bbox()) {
    return r == null ? e.y : this.attr("y", this.attr("y") + r - e.y);
  },
});
class Qe extends Xe {
  constructor(e, t = e) {
    super(me("text", e), t),
      (this.dom.leading = this.dom.leading ?? new ce(1.3)),
      (this._rebuild = !0),
      (this._build = !1);
  }
  leading(e) {
    return e == null
      ? this.dom.leading
      : ((this.dom.leading = new ce(e)), this.rebuild());
  }
  rebuild(e) {
    if ((typeof e == "boolean" && (this._rebuild = e), this._rebuild)) {
      const t = this;
      let a = 0;
      const i = this.dom.leading;
      this.each(function (s) {
        if (Wr(this.node)) return;
        const n = oe.window
            .getComputedStyle(this.node)
            .getPropertyValue("font-size"),
          o = i * new ce(n);
        this.dom.newLined &&
          (this.attr("x", t.attr("x")),
          this.text() ===
          `
`
            ? (a += o)
            : (this.attr("dy", s ? o + a : 0), (a = 0)));
      }),
        this.fire("rebuild");
    }
    return this;
  }
  setData(e) {
    return (this.dom = e), (this.dom.leading = new ce(e.leading || 1.3)), this;
  }
  writeDataToDom() {
    return fc(this, this.dom, { leading: 1.3 }), this;
  }
  text(e) {
    if (e === void 0) {
      const t = this.node.childNodes;
      let a = 0;
      e = "";
      for (let i = 0, s = t.length; i < s; ++i)
        t[i].nodeName === "textPath" || Wr(t[i])
          ? i === 0 && (a = i + 1)
          : (i !== a &&
              t[i].nodeType !== 3 &&
              Ye(t[i]).dom.newLined === !0 &&
              (e += `
`),
            (e += t[i].textContent));
      return e;
    }
    if ((this.clear().build(!0), typeof e == "function")) e.call(this, this);
    else
      for (
        let t = 0,
          a = (e = (e + "").split(`
`)).length;
        t < a;
        t++
      )
        this.newLine(e[t]);
    return this.build(!1).rebuild();
  }
}
K(Qe, Fc),
  ae({
    Container: {
      text: pe(function (r = "") {
        return this.put(new Qe()).text(r);
      }),
      plain: pe(function (r = "") {
        return this.put(new Qe()).plain(r);
      }),
    },
  }),
  le(Qe, "Text");
class pi extends Xe {
  constructor(e, t = e) {
    super(me("tspan", e), t), (this._build = !1);
  }
  dx(e) {
    return this.attr("dx", e);
  }
  dy(e) {
    return this.attr("dy", e);
  }
  newLine() {
    this.dom.newLined = !0;
    const e = this.parent();
    if (!(e instanceof Qe)) return this;
    const t = e.index(this),
      a = oe.window.getComputedStyle(this.node).getPropertyValue("font-size"),
      i = e.dom.leading * new ce(a);
    return this.dy(t ? i : 0).attr("x", e.x());
  }
  text(e) {
    return e == null
      ? this.node.textContent +
          (this.dom.newLined
            ? `
`
            : "")
      : (typeof e == "function"
          ? (this.clear().build(!0), e.call(this, this), this.build(!1))
          : this.plain(e),
        this);
  }
}
K(pi, Fc),
  ae({
    Tspan: {
      tspan: pe(function (r = "") {
        const e = new pi();
        return this._build || this.clear(), this.put(e).text(r);
      }),
    },
    Text: {
      newLine: function (r = "") {
        return this.tspan(r).newLine();
      },
    },
  }),
  le(pi, "Tspan");
class ur extends Xe {
  constructor(e, t = e) {
    super(me("circle", e), t);
  }
  radius(e) {
    return this.attr("r", e);
  }
  rx(e) {
    return this.attr("r", e);
  }
  ry(e) {
    return this.rx(e);
  }
  size(e) {
    return this.radius(new ce(e).divide(2));
  }
}
K(ur, { x: Ac, y: Cc, cx: Sc, cy: Tc, width: Pc, height: Lc }),
  ae({
    Container: {
      circle: pe(function (r = 0) {
        return this.put(new ur()).size(r).move(0, 0);
      }),
    },
  }),
  le(ur, "Circle");
class fr extends He {
  constructor(e, t = e) {
    super(me("clipPath", e), t);
  }
  remove() {
    return (
      this.targets().forEach(function (e) {
        e.unclip();
      }),
      super.remove()
    );
  }
  targets() {
    return Wt("svg [clip-path*=" + this.id() + "]");
  }
}
ae({
  Container: {
    clip: pe(function () {
      return this.defs().put(new fr());
    }),
  },
  Element: {
    clipper() {
      return this.reference("clip-path");
    },
    clipWith(r) {
      const e = r instanceof fr ? r : this.parent().clip().add(r);
      return this.attr("clip-path", "url(#" + e.id() + ")");
    },
    unclip() {
      return this.attr("clip-path", null);
    },
  },
}),
  le(fr, "ClipPath");
class xo extends Ie {
  constructor(e, t = e) {
    super(me("foreignObject", e), t);
  }
}
ae({
  Container: {
    foreignObject: pe(function (r, e) {
      return this.put(new xo()).size(r, e);
    }),
  },
}),
  le(xo, "ForeignObject");
var Dc = Object.freeze({
  __proto__: null,
  dmove: function (r, e) {
    return (
      this.children().forEach((t) => {
        let a;
        try {
          a =
            t.node instanceof $a().SVGSVGElement
              ? new we(t.attr(["x", "y", "width", "height"]))
              : t.bbox();
        } catch {
          return;
        }
        const i = new re(t),
          s = i.translate(r, e).transform(i.inverse()),
          n = new ue(a.x, a.y).transform(s);
        t.move(n.x, n.y);
      }),
      this
    );
  },
  dx: function (r) {
    return this.dmove(r, 0);
  },
  dy: function (r) {
    return this.dmove(0, r);
  },
  height: function (r, e = this.bbox()) {
    return r == null ? e.height : this.size(e.width, r, e);
  },
  move: function (r = 0, e = 0, t = this.bbox()) {
    const a = r - t.x,
      i = e - t.y;
    return this.dmove(a, i);
  },
  size: function (r, e, t = this.bbox()) {
    const a = ca(this, r, e, t),
      i = a.width / t.width,
      s = a.height / t.height;
    return (
      this.children().forEach((n) => {
        const o = new ue(t).transform(new re(n).inverse());
        n.scale(i, s, o.x, o.y);
      }),
      this
    );
  },
  width: function (r, e = this.bbox()) {
    return r == null ? e.width : this.size(r, e.height, e);
  },
  x: function (r, e = this.bbox()) {
    return r == null ? e.x : this.move(r, e.y, e);
  },
  y: function (r, e = this.bbox()) {
    return r == null ? e.y : this.move(e.x, r, e);
  },
});
class kt extends He {
  constructor(e, t = e) {
    super(me("g", e), t);
  }
}
K(kt, Dc),
  ae({
    Container: {
      group: pe(function () {
        return this.put(new kt());
      }),
    },
  }),
  le(kt, "G");
class ni extends He {
  constructor(e, t = e) {
    super(me("a", e), t);
  }
  target(e) {
    return this.attr("target", e);
  }
  to(e) {
    return this.attr("href", e, ha);
  }
}
K(ni, Dc),
  ae({
    Container: {
      link: pe(function (r) {
        return this.put(new ni()).to(r);
      }),
    },
    Element: {
      unlink() {
        const r = this.linker();
        if (!r) return this;
        const e = r.parent();
        if (!e) return this.remove();
        const t = e.index(r);
        return e.add(this, t), r.remove(), this;
      },
      linkTo(r) {
        let e = this.linker();
        return (
          e || ((e = new ni()), this.wrap(e)),
          typeof r == "function" ? r.call(e, e) : e.to(r),
          this
        );
      },
      linker() {
        const r = this.parent();
        return r && r.node.nodeName.toLowerCase() === "a" ? r : null;
      },
    },
  }),
  le(ni, "A");
class gr extends He {
  constructor(e, t = e) {
    super(me("mask", e), t);
  }
  remove() {
    return (
      this.targets().forEach(function (e) {
        e.unmask();
      }),
      super.remove()
    );
  }
  targets() {
    return Wt("svg [mask*=" + this.id() + "]");
  }
}
ae({
  Container: {
    mask: pe(function () {
      return this.defs().put(new gr());
    }),
  },
  Element: {
    masker() {
      return this.reference("mask");
    },
    maskWith(r) {
      const e = r instanceof gr ? r : this.parent().mask().add(r);
      return this.attr("mask", "url(#" + e.id() + ")");
    },
    unmask() {
      return this.attr("mask", null);
    },
  },
}),
  le(gr, "Mask");
class vo extends Ie {
  constructor(e, t = e) {
    super(me("stop", e), t);
  }
  update(e) {
    return (
      (typeof e == "number" || e instanceof ce) &&
        (e = {
          offset: arguments[0],
          color: arguments[1],
          opacity: arguments[2],
        }),
      e.opacity != null && this.attr("stop-opacity", e.opacity),
      e.color != null && this.attr("stop-color", e.color),
      e.offset != null && this.attr("offset", new ce(e.offset)),
      this
    );
  }
}
ae({
  Gradient: {
    stop: function (r, e, t) {
      return this.put(new vo()).update(r, e, t);
    },
  },
}),
  le(vo, "Stop");
class pr extends Ie {
  constructor(e, t = e) {
    super(me("style", e), t);
  }
  addText(e = "") {
    return (this.node.textContent += e), this;
  }
  font(e, t, a = {}) {
    return this.rule("@font-face", { fontFamily: e, src: t, ...a });
  }
  rule(e, t) {
    return this.addText(
      (function (a, i) {
        if (!a) return "";
        if (!i) return a;
        let s = a + "{";
        for (const n in i)
          s +=
            n.replace(/([A-Z])/g, function (o, l) {
              return "-" + l.toLowerCase();
            }) +
            ":" +
            i[n] +
            ";";
        return (s += "}"), s;
      })(e, t)
    );
  }
}
ae("Dom", {
  style(r, e) {
    return this.put(new pr()).rule(r, e);
  },
  fontface(r, e, t) {
    return this.put(new pr()).font(r, e, t);
  },
}),
  le(pr, "Style");
class mr extends Qe {
  constructor(e, t = e) {
    super(me("textPath", e), t);
  }
  array() {
    const e = this.track();
    return e ? e.array() : null;
  }
  plot(e) {
    const t = this.track();
    let a = null;
    return t && (a = t.plot(e)), e == null ? a : this;
  }
  track() {
    return this.reference("href");
  }
}
ae({
  Container: {
    textPath: pe(function (r, e) {
      return r instanceof Qe || (r = this.text(r)), r.path(e);
    }),
  },
  Text: {
    path: pe(function (r, e = !0) {
      const t = new mr();
      let a;
      if (
        (r instanceof Jt || (r = this.defs().path(r)),
        t.attr("href", "#" + r, ha),
        e)
      )
        for (; (a = this.node.firstChild); ) t.node.appendChild(a);
      return this.put(t);
    }),
    textPath() {
      return this.findOne("textPath");
    },
  },
  Path: {
    text: pe(function (r) {
      return (
        r instanceof Qe || (r = new Qe().addTo(this.parent()).text(r)),
        r.path(this)
      );
    }),
    targets() {
      return Wt("svg textPath").filter((r) =>
        (r.attr("href") || "").includes(this.id())
      );
    },
  },
}),
  (mr.prototype.MorphArray = Ke),
  le(mr, "TextPath");
class bo extends Xe {
  constructor(e, t = e) {
    super(me("use", e), t);
  }
  use(e, t) {
    return this.attr("href", (t || "") + "#" + e, ha);
  }
}
ae({
  Container: {
    use: pe(function (r, e) {
      return this.put(new bo()).use(r, e);
    }),
  },
}),
  le(bo, "Use");
const cm = je;
K([Kr, Qr, ui, _a, fi], De("viewbox")),
  K([Ot, jt, Nt, Jt], De("marker")),
  K(Qe, De("Text")),
  K(Jt, De("Path")),
  K(Bi, De("Defs")),
  K([Qe, pi], De("Tspan")),
  K([gi, di, Sa, ze], De("radius")),
  K(qa, De("EventTarget")),
  K(At, De("Dom")),
  K(Ie, De("Element")),
  K(Xe, De("Shape")),
  K([He, Mc], De("Container")),
  K(Sa, De("Gradient")),
  K(ze, De("Runner")),
  zt.extend([...new Set(dc)]),
  (function (r = []) {
    Zr.push(...[].concat(r));
  })([ce, rt, we, re, Ht, Ct, Ke, ue]),
  K(Zr, {
    to(r) {
      return new It().type(this.constructor).from(this.toArray()).to(r);
    },
    fromArray(r) {
      return this.init(r), this;
    },
    toConsumable() {
      return this.toArray();
    },
    morph(r, e, t, a, i) {
      return this.fromArray(
        r.map(function (s, n) {
          return a.step(s, e[n], t, i[n], i);
        })
      );
    },
  });
class ve extends Ie {
  constructor(e) {
    super(me("filter", e), e),
      (this.$source = "SourceGraphic"),
      (this.$sourceAlpha = "SourceAlpha"),
      (this.$background = "BackgroundImage"),
      (this.$backgroundAlpha = "BackgroundAlpha"),
      (this.$fill = "FillPaint"),
      (this.$stroke = "StrokePaint"),
      (this.$autoSetIn = !0);
  }
  put(e, t) {
    return (
      !(e = super.put(e, t)).attr("in") &&
        this.$autoSetIn &&
        e.attr("in", this.$source),
      e.attr("result") || e.attr("result", e.id()),
      e
    );
  }
  remove() {
    return this.targets().each("unfilter"), super.remove();
  }
  targets() {
    return Wt('svg [filter*="' + this.id() + '"]');
  }
  toString() {
    return "url(#" + this.id() + ")";
  }
}
class Gs extends Ie {
  constructor(e, t) {
    super(e, t), this.result(this.id());
  }
  in(e) {
    if (e == null) {
      const t = this.attr("in");
      return (this.parent() && this.parent().find(`[result="${t}"]`)[0]) || t;
    }
    return this.attr("in", e);
  }
  result(e) {
    return this.attr("result", e);
  }
  toString() {
    return this.result();
  }
}
const Be = (r) =>
    function (...e) {
      for (let t = r.length; t--; ) e[t] != null && this.attr(r[t], e[t]);
    },
  hm = {
    blend: Be(["in", "in2", "mode"]),
    colorMatrix: Be(["type", "values"]),
    composite: Be(["in", "in2", "operator"]),
    convolveMatrix: function (r) {
      (r = new Ht(r).toString()),
        this.attr({ order: Math.sqrt(r.split(" ").length), kernelMatrix: r });
    },
    diffuseLighting: Be([
      "surfaceScale",
      "lightingColor",
      "diffuseConstant",
      "kernelUnitLength",
    ]),
    displacementMap: Be([
      "in",
      "in2",
      "scale",
      "xChannelSelector",
      "yChannelSelector",
    ]),
    dropShadow: Be(["in", "dx", "dy", "stdDeviation"]),
    flood: Be(["flood-color", "flood-opacity"]),
    gaussianBlur: function (r = 0, e = r) {
      this.attr("stdDeviation", r + " " + e);
    },
    image: function (r) {
      this.attr("href", r, ha);
    },
    morphology: Be(["operator", "radius"]),
    offset: Be(["dx", "dy"]),
    specularLighting: Be([
      "surfaceScale",
      "lightingColor",
      "diffuseConstant",
      "specularExponent",
      "kernelUnitLength",
    ]),
    tile: Be([]),
    turbulence: Be([
      "baseFrequency",
      "numOctaves",
      "seed",
      "stitchTiles",
      "type",
    ]),
  };
[
  "blend",
  "colorMatrix",
  "componentTransfer",
  "composite",
  "convolveMatrix",
  "diffuseLighting",
  "displacementMap",
  "dropShadow",
  "flood",
  "gaussianBlur",
  "image",
  "merge",
  "morphology",
  "offset",
  "specularLighting",
  "tile",
  "turbulence",
].forEach((r) => {
  const e = la(r),
    t = hm[r];
  (ve[e + "Effect"] = class extends Gs {
    constructor(a) {
      super(me("fe" + e, a), a);
    }
    update(a) {
      return t.apply(this, a), this;
    }
  }),
    (ve.prototype[r] = pe(function (a, ...i) {
      const s = new ve[e + "Effect"]();
      return a == null
        ? this.put(s)
        : (typeof a == "function" ? a.call(s, s) : i.unshift(a),
          this.put(s).update(i));
    }));
}),
  K(ve, {
    merge(r) {
      const e = this.put(new ve.MergeEffect());
      return typeof r == "function"
        ? (r.call(e, e), e)
        : ((r instanceof Array ? r : [...arguments]).forEach((t) => {
            t instanceof ve.MergeNode ? e.put(t) : e.mergeNode(t);
          }),
          e);
    },
    componentTransfer(r = {}) {
      const e = this.put(new ve.ComponentTransferEffect());
      if (typeof r == "function") return r.call(e, e), e;
      r.r || r.g || r.b || r.a || (r = { r, g: r, b: r, a: r });
      for (const t in r) e.add(new ve["Func" + t.toUpperCase()](r[t]));
      return e;
    },
  });
[
  "distantLight",
  "pointLight",
  "spotLight",
  "mergeNode",
  "FuncR",
  "FuncG",
  "FuncB",
  "FuncA",
].forEach((r) => {
  const e = la(r);
  ve[e] = class extends Gs {
    constructor(t) {
      super(me("fe" + e, t), t);
    }
  };
});
["funcR", "funcG", "funcB", "funcA"].forEach(function (r) {
  const e = ve[la(r)],
    t = pe(function () {
      return this.put(new e());
    });
  ve.ComponentTransferEffect.prototype[r] = t;
});
["distantLight", "pointLight", "spotLight"].forEach((r) => {
  const e = ve[la(r)],
    t = pe(function () {
      return this.put(new e());
    });
  (ve.DiffuseLightingEffect.prototype[r] = t),
    (ve.SpecularLightingEffect.prototype[r] = t);
}),
  K(ve.MergeEffect, {
    mergeNode(r) {
      return this.put(new ve.MergeNode()).attr("in", r);
    },
  }),
  K(Bi, {
    filter: function (r) {
      const e = this.put(new ve());
      return typeof r == "function" && r.call(e, e), e;
    },
  }),
  K(He, {
    filter: function (r) {
      return this.defs().filter(r);
    },
  }),
  K(Ie, {
    filterWith: function (r) {
      const e = r instanceof ve ? r : this.defs().filter(r);
      return this.attr("filter", e);
    },
    unfilter: function (r) {
      return this.attr("filter", null);
    },
    filterer() {
      return this.reference("filter");
    },
  });
const dm = {
  blend: function (r, e) {
    return this.parent() && this.parent().blend(this, r, e);
  },
  colorMatrix: function (r, e) {
    return this.parent() && this.parent().colorMatrix(r, e).in(this);
  },
  componentTransfer: function (r) {
    return this.parent() && this.parent().componentTransfer(r).in(this);
  },
  composite: function (r, e) {
    return this.parent() && this.parent().composite(this, r, e);
  },
  convolveMatrix: function (r) {
    return this.parent() && this.parent().convolveMatrix(r).in(this);
  },
  diffuseLighting: function (r, e, t, a) {
    return this.parent() && this.parent().diffuseLighting(r, t, a).in(this);
  },
  displacementMap: function (r, e, t, a) {
    return this.parent() && this.parent().displacementMap(this, r, e, t, a);
  },
  dropShadow: function (r, e, t) {
    return this.parent() && this.parent().dropShadow(this, r, e, t).in(this);
  },
  flood: function (r, e) {
    return this.parent() && this.parent().flood(r, e);
  },
  gaussianBlur: function (r, e) {
    return this.parent() && this.parent().gaussianBlur(r, e).in(this);
  },
  image: function (r) {
    return this.parent() && this.parent().image(r);
  },
  merge: function (r) {
    return (
      (r = r instanceof Array ? r : [...r]),
      this.parent() && this.parent().merge(this, ...r)
    );
  },
  morphology: function (r, e) {
    return this.parent() && this.parent().morphology(r, e).in(this);
  },
  offset: function (r, e) {
    return this.parent() && this.parent().offset(r, e).in(this);
  },
  specularLighting: function (r, e, t, a, i) {
    return this.parent() && this.parent().specularLighting(r, t, a, i).in(this);
  },
  tile: function () {
    return this.parent() && this.parent().tile().in(this);
  },
  turbulence: function (r, e, t, a, i) {
    return this.parent() && this.parent().turbulence(r, e, t, a, i).in(this);
  },
};
K(Gs, dm),
  K(ve.MergeEffect, {
    in: function (r) {
      return (
        r instanceof ve.MergeNode
          ? this.add(r, 0)
          : this.add(new ve.MergeNode().in(r), 0),
        this
      );
    },
  }),
  K([ve.CompositeEffect, ve.BlendEffect, ve.DisplacementMapEffect], {
    in2: function (r) {
      if (r == null) {
        const e = this.attr("in2");
        return (this.parent() && this.parent().find(`[result="${e}"]`)[0]) || e;
      }
      return this.attr("in2", r);
    },
  }),
  (ve.filter = {
    sepiatone: [
      0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111,
      0, 0, 0, 0, 0, 1, 0,
    ],
  });
var Ee = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "getDefaultFilter",
          value: function (e, t) {
            var a = this.w;
            e.unfilter(!0),
              new ve().size("120%", "180%", "-5%", "-40%"),
              a.config.chart.dropShadow.enabled &&
                this.dropShadow(e, a.config.chart.dropShadow, t);
          },
        },
        {
          key: "applyFilter",
          value: function (e, t, a) {
            var i,
              s = this,
              n = this.w;
            if ((e.unfilter(!0), a !== "none")) {
              var o,
                l,
                c = n.config.chart.dropShadow,
                h = a === "lighten" ? 2 : 0.3;
              e.filterWith(function (d) {
                d.colorMatrix({
                  type: "matrix",
                  values: `
          `
                    .concat(
                      h,
                      ` 0 0 0 0
          0 `
                    )
                    .concat(
                      h,
                      ` 0 0 0
          0 0 `
                    )
                    .concat(
                      h,
                      ` 0 0
          0 0 0 1 0
        `
                    ),
                  in: "SourceGraphic",
                  result: "brightness",
                }),
                  c.enabled && s.addShadow(d, t, c, "brightness");
              }),
                !c.noUserSpaceOnUse &&
                  ((o = e.filterer()) === null ||
                    o === void 0 ||
                    (l = o.node) === null ||
                    l === void 0 ||
                    l.setAttribute("filterUnits", "userSpaceOnUse")),
                this._scaleFilterSize(
                  (i = e.filterer()) === null || i === void 0 ? void 0 : i.node
                );
            } else this.getDefaultFilter(e, t);
          },
        },
        {
          key: "addShadow",
          value: function (e, t, a, i) {
            var s,
              n = this.w,
              o = a.blur,
              l = a.top,
              c = a.left,
              h = a.color,
              d = a.opacity;
            if (
              ((h = Array.isArray(h) ? h[t] : h),
              ((s = n.config.chart.dropShadow.enabledOnSeries) === null ||
              s === void 0
                ? void 0
                : s.length) > 0 &&
                n.config.chart.dropShadow.enabledOnSeries.indexOf(t) === -1)
            )
              return e;
            e.offset({ in: i, dx: c, dy: l, result: "offset" }),
              e.gaussianBlur({ in: "offset", stdDeviation: o, result: "blur" }),
              e.flood({
                "flood-color": h,
                "flood-opacity": d,
                result: "flood",
              }),
              e.composite({
                in: "flood",
                in2: "blur",
                operator: "in",
                result: "shadow",
              }),
              e.merge(["shadow", i]);
          },
        },
        {
          key: "dropShadow",
          value: function (e, t) {
            var a,
              i,
              s,
              n,
              o,
              l = this,
              c =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : 0,
              h = this.w;
            return (
              e.unfilter(!0),
              (_.isMsEdge() && h.config.chart.type === "radialBar") ||
              (((a = h.config.chart.dropShadow.enabledOnSeries) === null ||
              a === void 0
                ? void 0
                : a.length) > 0 &&
                ((s = h.config.chart.dropShadow.enabledOnSeries) === null ||
                s === void 0
                  ? void 0
                  : s.indexOf(c)) === -1)
                ? e
                : (e.filterWith(function (d) {
                    l.addShadow(d, c, t, "SourceGraphic");
                  }),
                  t.noUserSpaceOnUse ||
                    (n = e.filterer()) === null ||
                    n === void 0 ||
                    (o = n.node) === null ||
                    o === void 0 ||
                    o.setAttribute("filterUnits", "userSpaceOnUse"),
                  this._scaleFilterSize(
                    (i = e.filterer()) === null || i === void 0
                      ? void 0
                      : i.node
                  ),
                  e)
            );
          },
        },
        {
          key: "setSelectionFilter",
          value: function (e, t, a) {
            var i = this.w;
            if (
              i.globals.selectedDataPoints[t] !== void 0 &&
              i.globals.selectedDataPoints[t].indexOf(a) > -1
            ) {
              e.node.setAttribute("selected", !0);
              var s = i.config.states.active.filter;
              s !== "none" && this.applyFilter(e, t, s.type);
            }
          },
        },
        {
          key: "_scaleFilterSize",
          value: function (e) {
            e &&
              (function (t) {
                for (var a in t) t.hasOwnProperty(a) && e.setAttribute(a, t[a]);
              })({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
          },
        },
      ]),
      r
    );
  })(),
  H = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(
        r,
        [
          {
            key: "roundPathCorners",
            value: function (e, t) {
              function a(S, T, E) {
                var L = T.x - S.x,
                  I = T.y - S.y,
                  M = Math.sqrt(L * L + I * I);
                return i(S, T, Math.min(1, E / M));
              }
              function i(S, T, E) {
                return { x: S.x + (T.x - S.x) * E, y: S.y + (T.y - S.y) * E };
              }
              function s(S, T) {
                S.length > 2 &&
                  ((S[S.length - 2] = T.x), (S[S.length - 1] = T.y));
              }
              function n(S) {
                return {
                  x: parseFloat(S[S.length - 2]),
                  y: parseFloat(S[S.length - 1]),
                };
              }
              e.indexOf("NaN") > -1 && (e = "");
              var o = e
                  .split(/[,\s]/)
                  .reduce(function (S, T) {
                    var E = T.match("([a-zA-Z])(.+)");
                    return E ? (S.push(E[1]), S.push(E[2])) : S.push(T), S;
                  }, [])
                  .reduce(function (S, T) {
                    return (
                      parseFloat(T) == T && S.length
                        ? S[S.length - 1].push(T)
                        : S.push([T]),
                      S
                    );
                  }, []),
                l = [];
              if (o.length > 1) {
                var c = n(o[0]),
                  h = null;
                o[o.length - 1][0] == "Z" &&
                  o[0].length > 2 &&
                  ((h = ["L", c.x, c.y]), (o[o.length - 1] = h)),
                  l.push(o[0]);
                for (var d = 1; d < o.length; d++) {
                  var u = l[l.length - 1],
                    f = o[d],
                    g = f == h ? o[1] : o[d + 1];
                  if (
                    g &&
                    u &&
                    u.length > 2 &&
                    f[0] == "L" &&
                    g.length > 2 &&
                    g[0] == "L"
                  ) {
                    var p,
                      m,
                      x = n(u),
                      v = n(f),
                      b = n(g);
                    (p = a(v, x, t)),
                      (m = a(v, b, t)),
                      s(f, p),
                      (f.origPoint = v),
                      l.push(f);
                    var k = i(p, v, 0.5),
                      y = i(v, m, 0.5),
                      C = ["C", k.x, k.y, y.x, y.y, m.x, m.y];
                    (C.origPoint = v), l.push(C);
                  } else l.push(f);
                }
                if (h) {
                  var A = n(l[l.length - 1]);
                  l.push(["Z"]), s(l[0], A);
                }
              } else l = o;
              return l.reduce(function (S, T) {
                return S + T.join(" ") + " ";
              }, "");
            },
          },
          {
            key: "drawLine",
            value: function (e, t, a, i) {
              var s =
                  arguments.length > 4 && arguments[4] !== void 0
                    ? arguments[4]
                    : "#a8a8a8",
                n =
                  arguments.length > 5 && arguments[5] !== void 0
                    ? arguments[5]
                    : 0,
                o =
                  arguments.length > 6 && arguments[6] !== void 0
                    ? arguments[6]
                    : null,
                l =
                  arguments.length > 7 && arguments[7] !== void 0
                    ? arguments[7]
                    : "butt";
              return this.w.globals.dom.Paper.line().attr({
                x1: e,
                y1: t,
                x2: a,
                y2: i,
                stroke: s,
                "stroke-dasharray": n,
                "stroke-width": o,
                "stroke-linecap": l,
              });
            },
          },
          {
            key: "drawRect",
            value: function () {
              var e =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : 0,
                t =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : 0,
                a =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : 0,
                i =
                  arguments.length > 3 && arguments[3] !== void 0
                    ? arguments[3]
                    : 0,
                s =
                  arguments.length > 4 && arguments[4] !== void 0
                    ? arguments[4]
                    : 0,
                n =
                  arguments.length > 5 && arguments[5] !== void 0
                    ? arguments[5]
                    : "#fefefe",
                o =
                  arguments.length > 6 && arguments[6] !== void 0
                    ? arguments[6]
                    : 1,
                l =
                  arguments.length > 7 && arguments[7] !== void 0
                    ? arguments[7]
                    : null,
                c =
                  arguments.length > 8 && arguments[8] !== void 0
                    ? arguments[8]
                    : null,
                h =
                  arguments.length > 9 && arguments[9] !== void 0
                    ? arguments[9]
                    : 0,
                d = this.w.globals.dom.Paper.rect();
              return (
                d.attr({
                  x: e,
                  y: t,
                  width: a > 0 ? a : 0,
                  height: i > 0 ? i : 0,
                  rx: s,
                  ry: s,
                  opacity: o,
                  "stroke-width": l !== null ? l : 0,
                  stroke: c !== null ? c : "none",
                  "stroke-dasharray": h,
                }),
                d.node.setAttribute("fill", n),
                d
              );
            },
          },
          {
            key: "drawPolygon",
            value: function (e) {
              var t =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : "#e1e1e1",
                a =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : 1,
                i =
                  arguments.length > 3 && arguments[3] !== void 0
                    ? arguments[3]
                    : "none";
              return this.w.globals.dom.Paper.polygon(e).attr({
                fill: i,
                stroke: t,
                "stroke-width": a,
              });
            },
          },
          {
            key: "drawCircle",
            value: function (e) {
              var t =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : null;
              e < 0 && (e = 0);
              var a = this.w.globals.dom.Paper.circle(2 * e);
              return t !== null && a.attr(t), a;
            },
          },
          {
            key: "drawPath",
            value: function (e) {
              var t = e.d,
                a = t === void 0 ? "" : t,
                i = e.stroke,
                s = i === void 0 ? "#a8a8a8" : i,
                n = e.strokeWidth,
                o = n === void 0 ? 1 : n,
                l = e.fill,
                c = e.fillOpacity,
                h = c === void 0 ? 1 : c,
                d = e.strokeOpacity,
                u = d === void 0 ? 1 : d,
                f = e.classes,
                g = e.strokeLinecap,
                p = g === void 0 ? null : g,
                m = e.strokeDashArray,
                x = m === void 0 ? 0 : m,
                v = this.w;
              return (
                p === null && (p = v.config.stroke.lineCap),
                (a.indexOf("undefined") > -1 || a.indexOf("NaN") > -1) &&
                  (a = "M 0 ".concat(v.globals.gridHeight)),
                v.globals.dom.Paper.path(a).attr({
                  fill: l,
                  "fill-opacity": h,
                  stroke: s,
                  "stroke-opacity": u,
                  "stroke-linecap": p,
                  "stroke-width": o,
                  "stroke-dasharray": x,
                  class: f,
                })
              );
            },
          },
          {
            key: "group",
            value: function () {
              var e =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : null,
                t = this.w.globals.dom.Paper.group();
              return e !== null && t.attr(e), t;
            },
          },
          {
            key: "move",
            value: function (e, t) {
              var a = ["M", e, t].join(" ");
              return a;
            },
          },
          {
            key: "line",
            value: function (e, t) {
              var a =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : null,
                i = null;
              return (
                a === null
                  ? (i = [" L", e, t].join(" "))
                  : a === "H"
                  ? (i = [" H", e].join(" "))
                  : a === "V" && (i = [" V", t].join(" ")),
                i
              );
            },
          },
          {
            key: "curve",
            value: function (e, t, a, i, s, n) {
              var o = ["C", e, t, a, i, s, n].join(" ");
              return o;
            },
          },
          {
            key: "quadraticCurve",
            value: function (e, t, a, i) {
              return ["Q", e, t, a, i].join(" ");
            },
          },
          {
            key: "arc",
            value: function (e, t, a, i, s, n, o) {
              var l = "A";
              arguments.length > 7 &&
                arguments[7] !== void 0 &&
                arguments[7] &&
                (l = "a");
              var c = [l, e, t, a, i, s, n, o].join(" ");
              return c;
            },
          },
          {
            key: "renderPaths",
            value: function (e) {
              var t,
                a = e.j,
                i = e.realIndex,
                s = e.pathFrom,
                n = e.pathTo,
                o = e.stroke,
                l = e.strokeWidth,
                c = e.strokeLinecap,
                h = e.fill,
                d = e.animationDelay,
                u = e.initialSpeed,
                f = e.dataChangeSpeed,
                g = e.className,
                p = e.chartType,
                m = e.shouldClipToGrid,
                x = m === void 0 || m,
                v = e.bindEventsOnPaths,
                b = v === void 0 || v,
                k = e.drawShadow,
                y = k === void 0 || k,
                C = this.w,
                A = new Ee(this.ctx),
                S = new oa(this.ctx),
                T = this.w.config.chart.animations.enabled,
                E =
                  T && this.w.config.chart.animations.dynamicAnimation.enabled,
                L = !!(
                  (T && !C.globals.resized) ||
                  (E && C.globals.dataChanged && C.globals.shouldAnimate)
                );
              L ? (t = s) : ((t = n), (C.globals.animationEnded = !0));
              var I = C.config.stroke.dashArray,
                M = 0;
              M = Array.isArray(I) ? I[i] : C.config.stroke.dashArray;
              var O = this.drawPath({
                d: t,
                stroke: o,
                strokeWidth: l,
                fill: h,
                fillOpacity: 1,
                classes: g,
                strokeLinecap: c,
                strokeDashArray: M,
              });
              O.attr("index", i),
                x &&
                  ((p === "bar" && !C.globals.isHorizontal) ||
                  C.globals.comboCharts
                    ? O.attr({
                        "clip-path": "url(#gridRectBarMask".concat(
                          C.globals.cuid,
                          ")"
                        ),
                      })
                    : O.attr({
                        "clip-path": "url(#gridRectMask".concat(
                          C.globals.cuid,
                          ")"
                        ),
                      })),
                C.config.chart.dropShadow.enabled &&
                  y &&
                  A.dropShadow(O, C.config.chart.dropShadow, i),
                b &&
                  (O.node.addEventListener(
                    "mouseenter",
                    this.pathMouseEnter.bind(this, O)
                  ),
                  O.node.addEventListener(
                    "mouseleave",
                    this.pathMouseLeave.bind(this, O)
                  ),
                  O.node.addEventListener(
                    "mousedown",
                    this.pathMouseDown.bind(this, O)
                  )),
                O.attr({ pathTo: n, pathFrom: s });
              var N = {
                el: O,
                j: a,
                realIndex: i,
                pathFrom: s,
                pathTo: n,
                fill: h,
                strokeWidth: l,
                delay: d,
              };
              return (
                !T || C.globals.resized || C.globals.dataChanged
                  ? (!C.globals.resized && C.globals.dataChanged) ||
                    S.showDelayedElements()
                  : S.animatePathsGradually(Y(Y({}, N), {}, { speed: u })),
                C.globals.dataChanged &&
                  E &&
                  L &&
                  S.animatePathsGradually(Y(Y({}, N), {}, { speed: f })),
                O
              );
            },
          },
          {
            key: "drawPattern",
            value: function (e, t, a) {
              var i =
                  arguments.length > 3 && arguments[3] !== void 0
                    ? arguments[3]
                    : "#a8a8a8",
                s =
                  arguments.length > 4 && arguments[4] !== void 0
                    ? arguments[4]
                    : 0;
              return this.w.globals.dom.Paper.pattern(t, a, function (n) {
                e === "horizontalLines"
                  ? n.line(0, 0, a, 0).stroke({ color: i, width: s + 1 })
                  : e === "verticalLines"
                  ? n.line(0, 0, 0, t).stroke({ color: i, width: s + 1 })
                  : e === "slantedLines"
                  ? n.line(0, 0, t, a).stroke({ color: i, width: s })
                  : e === "squares"
                  ? n.rect(t, a).fill("none").stroke({ color: i, width: s })
                  : e === "circles" &&
                    n.circle(t).fill("none").stroke({ color: i, width: s });
              });
            },
          },
          {
            key: "drawGradient",
            value: function (e, t, a, i, s) {
              var n,
                o =
                  arguments.length > 5 && arguments[5] !== void 0
                    ? arguments[5]
                    : null,
                l =
                  arguments.length > 6 && arguments[6] !== void 0
                    ? arguments[6]
                    : null,
                c =
                  arguments.length > 7 && arguments[7] !== void 0
                    ? arguments[7]
                    : [],
                h =
                  arguments.length > 8 && arguments[8] !== void 0
                    ? arguments[8]
                    : 0,
                d = this.w;
              t.length < 9 && t.indexOf("#") === 0 && (t = _.hexToRgba(t, i)),
                a.length < 9 && a.indexOf("#") === 0 && (a = _.hexToRgba(a, s));
              var u = 0,
                f = 1,
                g = 1,
                p = null;
              l !== null &&
                ((u = l[0] !== void 0 ? l[0] / 100 : 0),
                (f = l[1] !== void 0 ? l[1] / 100 : 1),
                (g = l[2] !== void 0 ? l[2] / 100 : 1),
                (p = l[3] !== void 0 ? l[3] / 100 : null));
              var m = !(
                d.config.chart.type !== "donut" &&
                d.config.chart.type !== "pie" &&
                d.config.chart.type !== "polarArea" &&
                d.config.chart.type !== "bubble"
              );
              if (
                ((n =
                  c && c.length !== 0
                    ? d.globals.dom.Paper.gradient(
                        m ? "radial" : "linear",
                        function (b) {
                          (Array.isArray(c[h]) ? c[h] : c).forEach(function (
                            k
                          ) {
                            b.stop(k.offset / 100, k.color, k.opacity);
                          });
                        }
                      )
                    : d.globals.dom.Paper.gradient(
                        m ? "radial" : "linear",
                        function (b) {
                          b.stop(u, t, i),
                            b.stop(f, a, s),
                            b.stop(g, a, s),
                            p !== null && b.stop(p, t, i);
                        }
                      )),
                m)
              ) {
                var x = d.globals.gridWidth / 2,
                  v = d.globals.gridHeight / 2;
                d.config.chart.type !== "bubble"
                  ? n.attr({
                      gradientUnits: "userSpaceOnUse",
                      cx: x,
                      cy: v,
                      r: o,
                    })
                  : n.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
              } else
                e === "vertical"
                  ? n.from(0, 0).to(0, 1)
                  : e === "diagonal"
                  ? n.from(0, 0).to(1, 1)
                  : e === "horizontal"
                  ? n.from(0, 1).to(1, 1)
                  : e === "diagonal2" && n.from(1, 0).to(0, 1);
              return n;
            },
          },
          {
            key: "getTextBasedOnMaxWidth",
            value: function (e) {
              var t = e.text,
                a = e.maxWidth,
                i = e.fontSize,
                s = e.fontFamily,
                n = this.getTextRects(t, i, s),
                o = n.width / t.length,
                l = Math.floor(a / o);
              return a < n.width ? t.slice(0, l - 3) + "..." : t;
            },
          },
          {
            key: "drawText",
            value: function (e) {
              var t = this,
                a = e.x,
                i = e.y,
                s = e.text,
                n = e.textAnchor,
                o = e.fontSize,
                l = e.fontFamily,
                c = e.fontWeight,
                h = e.foreColor,
                d = e.opacity,
                u = e.maxWidth,
                f = e.cssClass,
                g = f === void 0 ? "" : f,
                p = e.isPlainText,
                m = p === void 0 || p,
                x = e.dominantBaseline,
                v = x === void 0 ? "auto" : x,
                b = this.w;
              s === void 0 && (s = "");
              var k = s;
              n || (n = "start"),
                (h && h.length) || (h = b.config.chart.foreColor),
                (l = l || b.config.chart.fontFamily),
                (c = c || "regular");
              var y,
                C = { maxWidth: u, fontSize: (o = o || "11px"), fontFamily: l };
              return (
                Array.isArray(s)
                  ? (y = b.globals.dom.Paper.text(function (A) {
                      for (var S = 0; S < s.length; S++)
                        (k = s[S]),
                          u &&
                            (k = t.getTextBasedOnMaxWidth(
                              Y({ text: s[S] }, C)
                            )),
                          S === 0 ? A.tspan(k) : A.tspan(k).newLine();
                    }))
                  : (u && (k = this.getTextBasedOnMaxWidth(Y({ text: s }, C))),
                    (y = m
                      ? b.globals.dom.Paper.plain(s)
                      : b.globals.dom.Paper.text(function (A) {
                          return A.tspan(k);
                        }))),
                y.attr({
                  x: a,
                  y: i,
                  "text-anchor": n,
                  "dominant-baseline": v,
                  "font-size": o,
                  "font-family": l,
                  "font-weight": c,
                  fill: h,
                  class: "apexcharts-text " + g,
                }),
                (y.node.style.fontFamily = l),
                (y.node.style.opacity = d),
                y
              );
            },
          },
          {
            key: "getMarkerPath",
            value: function (e, t, a, i) {
              var s = "";
              switch (a) {
                case "cross":
                  s = "M "
                    .concat(e - (i /= 1.4), " ")
                    .concat(t - i, " L ")
                    .concat(e + i, " ")
                    .concat(t + i, "  M ")
                    .concat(e - i, " ")
                    .concat(t + i, " L ")
                    .concat(e + i, " ")
                    .concat(t - i);
                  break;
                case "plus":
                  s = "M "
                    .concat(e - (i /= 1.12), " ")
                    .concat(t, " L ")
                    .concat(e + i, " ")
                    .concat(t, "  M ")
                    .concat(e, " ")
                    .concat(t - i, " L ")
                    .concat(e, " ")
                    .concat(t + i);
                  break;
                case "star":
                case "sparkle":
                  var n = 5;
                  (i *= 1.15), a === "sparkle" && ((i /= 1.1), (n = 4));
                  for (var o = Math.PI / n, l = 0; l <= 2 * n; l++) {
                    var c = l * o,
                      h = l % 2 == 0 ? i : i / 2;
                    s +=
                      (l === 0 ? "M" : "L") +
                      (e + h * Math.sin(c)) +
                      "," +
                      (t - h * Math.cos(c));
                  }
                  s += "Z";
                  break;
                case "triangle":
                  s = "M "
                    .concat(e, " ")
                    .concat(
                      t - i,
                      ` 
             L `
                    )
                    .concat(e + i, " ")
                    .concat(
                      t + i,
                      ` 
             L `
                    )
                    .concat(e - i, " ")
                    .concat(
                      t + i,
                      ` 
             Z`
                    );
                  break;
                case "square":
                case "rect":
                  s = "M "
                    .concat(e - (i /= 1.125), " ")
                    .concat(
                      t - i,
                      ` 
           L `
                    )
                    .concat(e + i, " ")
                    .concat(
                      t - i,
                      ` 
           L `
                    )
                    .concat(e + i, " ")
                    .concat(
                      t + i,
                      ` 
           L `
                    )
                    .concat(e - i, " ")
                    .concat(
                      t + i,
                      ` 
           Z`
                    );
                  break;
                case "diamond":
                  (i *= 1.05),
                    (s = "M "
                      .concat(e, " ")
                      .concat(
                        t - i,
                        ` 
             L `
                      )
                      .concat(e + i, " ")
                      .concat(
                        t,
                        ` 
             L `
                      )
                      .concat(e, " ")
                      .concat(
                        t + i,
                        ` 
             L `
                      )
                      .concat(e - i, " ")
                      .concat(
                        t,
                        ` 
            Z`
                      ));
                  break;
                case "line":
                  s = "M "
                    .concat(e - (i /= 1.1), " ")
                    .concat(
                      t,
                      ` 
           L `
                    )
                    .concat(e + i, " ")
                    .concat(t);
                  break;
                default:
                  (i *= 2),
                    (s = "M "
                      .concat(e, ", ")
                      .concat(
                        t,
                        ` 
           m -`
                      )
                      .concat(
                        i / 2,
                        `, 0 
           a `
                      )
                      .concat(i / 2, ",")
                      .concat(i / 2, " 0 1,0 ")
                      .concat(
                        i,
                        `,0 
           a `
                      )
                      .concat(i / 2, ",")
                      .concat(i / 2, " 0 1,0 -")
                      .concat(i, ",0"));
              }
              return s;
            },
          },
          {
            key: "drawMarkerShape",
            value: function (e, t, a, i, s) {
              var n = this.drawPath({
                d: this.getMarkerPath(e, t, a, i, s),
                stroke: s.pointStrokeColor,
                strokeDashArray: s.pointStrokeDashArray,
                strokeWidth: s.pointStrokeWidth,
                fill: s.pointFillColor,
                fillOpacity: s.pointFillOpacity,
                strokeOpacity: s.pointStrokeOpacity,
              });
              return (
                n.attr({
                  cx: e,
                  cy: t,
                  shape: s.shape,
                  class: s.class ? s.class : "",
                }),
                n
              );
            },
          },
          {
            key: "drawMarker",
            value: function (e, t, a) {
              e = e || 0;
              var i = a.pSize || 0;
              return (
                _.isNumber(t) || ((i = 0), (t = 0)),
                this.drawMarkerShape(
                  e,
                  t,
                  a == null ? void 0 : a.shape,
                  i,
                  Y(
                    Y({}, a),
                    a.shape === "line" ||
                      a.shape === "plus" ||
                      a.shape === "cross"
                      ? {
                          pointStrokeColor: a.pointFillColor,
                          pointStrokeOpacity: a.pointFillOpacity,
                        }
                      : {}
                  )
                )
              );
            },
          },
          {
            key: "pathMouseEnter",
            value: function (e, t) {
              var a = this.w,
                i = new Ee(this.ctx),
                s = parseInt(e.node.getAttribute("index"), 10),
                n = parseInt(e.node.getAttribute("j"), 10);
              if (
                (typeof a.config.chart.events.dataPointMouseEnter ==
                  "function" &&
                  a.config.chart.events.dataPointMouseEnter(t, this.ctx, {
                    seriesIndex: s,
                    dataPointIndex: n,
                    w: a,
                  }),
                this.ctx.events.fireEvent("dataPointMouseEnter", [
                  t,
                  this.ctx,
                  { seriesIndex: s, dataPointIndex: n, w: a },
                ]),
                (a.config.states.active.filter.type === "none" ||
                  e.node.getAttribute("selected") !== "true") &&
                  a.config.states.hover.filter.type !== "none" &&
                  !a.globals.isTouchDevice)
              ) {
                var o = a.config.states.hover.filter;
                i.applyFilter(e, s, o.type);
              }
            },
          },
          {
            key: "pathMouseLeave",
            value: function (e, t) {
              var a = this.w,
                i = new Ee(this.ctx),
                s = parseInt(e.node.getAttribute("index"), 10),
                n = parseInt(e.node.getAttribute("j"), 10);
              typeof a.config.chart.events.dataPointMouseLeave == "function" &&
                a.config.chart.events.dataPointMouseLeave(t, this.ctx, {
                  seriesIndex: s,
                  dataPointIndex: n,
                  w: a,
                }),
                this.ctx.events.fireEvent("dataPointMouseLeave", [
                  t,
                  this.ctx,
                  { seriesIndex: s, dataPointIndex: n, w: a },
                ]),
                (a.config.states.active.filter.type !== "none" &&
                  e.node.getAttribute("selected") === "true") ||
                  (a.config.states.hover.filter.type !== "none" &&
                    i.getDefaultFilter(e, s));
            },
          },
          {
            key: "pathMouseDown",
            value: function (e, t) {
              var a = this.w,
                i = new Ee(this.ctx),
                s = parseInt(e.node.getAttribute("index"), 10),
                n = parseInt(e.node.getAttribute("j"), 10),
                o = "false";
              if (e.node.getAttribute("selected") === "true") {
                if (
                  (e.node.setAttribute("selected", "false"),
                  a.globals.selectedDataPoints[s].indexOf(n) > -1)
                ) {
                  var l = a.globals.selectedDataPoints[s].indexOf(n);
                  a.globals.selectedDataPoints[s].splice(l, 1);
                }
              } else {
                if (
                  !a.config.states.active.allowMultipleDataPointsSelection &&
                  a.globals.selectedDataPoints.length > 0
                ) {
                  a.globals.selectedDataPoints = [];
                  var c = a.globals.dom.Paper.find(
                      ".apexcharts-series path:not(.apexcharts-decoration-element)"
                    ),
                    h = a.globals.dom.Paper.find(
                      ".apexcharts-series circle:not(.apexcharts-decoration-element), .apexcharts-series rect:not(.apexcharts-decoration-element)"
                    ),
                    d = function (g) {
                      Array.prototype.forEach.call(g, function (p) {
                        p.node.setAttribute("selected", "false"),
                          i.getDefaultFilter(p, s);
                      });
                    };
                  d(c), d(h);
                }
                e.node.setAttribute("selected", "true"),
                  (o = "true"),
                  a.globals.selectedDataPoints[s] === void 0 &&
                    (a.globals.selectedDataPoints[s] = []),
                  a.globals.selectedDataPoints[s].push(n);
              }
              if (o === "true") {
                var u = a.config.states.active.filter;
                if (u !== "none") i.applyFilter(e, s, u.type);
                else if (
                  a.config.states.hover.filter !== "none" &&
                  !a.globals.isTouchDevice
                ) {
                  var f = a.config.states.hover.filter;
                  i.applyFilter(e, s, f.type);
                }
              } else
                a.config.states.active.filter.type !== "none" &&
                  (a.config.states.hover.filter.type === "none" ||
                  a.globals.isTouchDevice
                    ? i.getDefaultFilter(e, s)
                    : ((f = a.config.states.hover.filter),
                      i.applyFilter(e, s, f.type)));
              typeof a.config.chart.events.dataPointSelection == "function" &&
                a.config.chart.events.dataPointSelection(t, this.ctx, {
                  selectedDataPoints: a.globals.selectedDataPoints,
                  seriesIndex: s,
                  dataPointIndex: n,
                  w: a,
                }),
                t &&
                  this.ctx.events.fireEvent("dataPointSelection", [
                    t,
                    this.ctx,
                    {
                      selectedDataPoints: a.globals.selectedDataPoints,
                      seriesIndex: s,
                      dataPointIndex: n,
                      w: a,
                    },
                  ]);
            },
          },
          {
            key: "rotateAroundCenter",
            value: function (e) {
              var t = {};
              return (
                e && typeof e.getBBox == "function" && (t = e.getBBox()),
                { x: t.x + t.width / 2, y: t.y + t.height / 2 }
              );
            },
          },
          {
            key: "getTextRects",
            value: function (e, t, a, i) {
              var s =
                  !(arguments.length > 4 && arguments[4] !== void 0) ||
                  arguments[4],
                n = this.w,
                o = this.drawText({
                  x: -200,
                  y: -200,
                  text: e,
                  textAnchor: "start",
                  fontSize: t,
                  fontFamily: a,
                  foreColor: "#fff",
                  opacity: 0,
                });
              i && o.attr("transform", i), n.globals.dom.Paper.add(o);
              var l = o.bbox();
              return (
                s || (l = o.node.getBoundingClientRect()),
                o.remove(),
                { width: l.width, height: l.height }
              );
            },
          },
          {
            key: "placeTextWithEllipsis",
            value: function (e, t, a) {
              if (
                typeof e.getComputedTextLength == "function" &&
                ((e.textContent = t),
                t.length > 0 && e.getComputedTextLength() >= a / 1.1)
              ) {
                for (var i = t.length - 3; i > 0; i -= 3)
                  if (e.getSubStringLength(0, i) <= a / 1.1)
                    return void (e.textContent = t.substring(0, i) + "...");
                e.textContent = ".";
              }
            },
          },
        ],
        [
          {
            key: "setAttrs",
            value: function (e, t) {
              for (var a in t) t.hasOwnProperty(a) && e.setAttribute(a, t[a]);
            },
          },
        ]
      ),
      r
    );
  })(),
  ke = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(
        r,
        [
          {
            key: "getStackedSeriesTotals",
            value: function () {
              var e =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : [],
                t = this.w,
                a = [];
              if (t.globals.series.length === 0) return a;
              for (
                var i = 0;
                i < t.globals.series[t.globals.maxValsInArrayIndex].length;
                i++
              ) {
                for (var s = 0, n = 0; n < t.globals.series.length; n++)
                  t.globals.series[n][i] !== void 0 &&
                    e.indexOf(n) === -1 &&
                    (s += t.globals.series[n][i]);
                a.push(s);
              }
              return a;
            },
          },
          {
            key: "getSeriesTotalByIndex",
            value: function () {
              var e =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : null;
              return e === null
                ? this.w.config.series.reduce(function (t, a) {
                    return t + a;
                  }, 0)
                : this.w.globals.series[e].reduce(function (t, a) {
                    return t + a;
                  }, 0);
            },
          },
          {
            key: "getStackedSeriesTotalsByGroups",
            value: function () {
              var e = this,
                t = this.w,
                a = [];
              return (
                t.globals.seriesGroups.forEach(function (i) {
                  var s = [];
                  t.config.series.forEach(function (o, l) {
                    i.indexOf(t.globals.seriesNames[l]) > -1 && s.push(l);
                  });
                  var n = t.globals.series
                    .map(function (o, l) {
                      return s.indexOf(l) === -1 ? l : -1;
                    })
                    .filter(function (o) {
                      return o !== -1;
                    });
                  a.push(e.getStackedSeriesTotals(n));
                }),
                a
              );
            },
          },
          {
            key: "setSeriesYAxisMappings",
            value: function () {
              var e = this.w.globals,
                t = this.w.config,
                a = [],
                i = [],
                s = [],
                n =
                  e.series.length > t.yaxis.length ||
                  t.yaxis.some(function (d) {
                    return Array.isArray(d.seriesName);
                  });
              t.series.forEach(function (d, u) {
                s.push(u), i.push(null);
              }),
                t.yaxis.forEach(function (d, u) {
                  a[u] = [];
                });
              var o = [];
              t.yaxis.forEach(function (d, u) {
                var f = !1;
                if (d.seriesName) {
                  var g = [];
                  Array.isArray(d.seriesName)
                    ? (g = d.seriesName)
                    : g.push(d.seriesName),
                    g.forEach(function (p) {
                      t.series.forEach(function (m, x) {
                        if (m.name === p) {
                          var v = x;
                          u === x || n
                            ? !n || s.indexOf(x) > -1
                              ? a[u].push([u, x])
                              : console.warn(
                                  "Series '" +
                                    m.name +
                                    "' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes."
                                )
                            : (a[x].push([x, u]), (v = u)),
                            (f = !0),
                            (v = s.indexOf(v)) !== -1 && s.splice(v, 1);
                        }
                      });
                    });
                }
                f || o.push(u);
              }),
                (a = a.map(function (d, u) {
                  var f = [];
                  return (
                    d.forEach(function (g) {
                      (i[g[1]] = g[0]), f.push(g[1]);
                    }),
                    f
                  );
                }));
              for (
                var l = t.yaxis.length - 1, c = 0;
                c < o.length && ((l = o[c]), (a[l] = []), s);
                c++
              ) {
                var h = s[0];
                s.shift(), a[l].push(h), (i[h] = l);
              }
              s.forEach(function (d) {
                a[l].push(d), (i[d] = l);
              }),
                (e.seriesYAxisMap = a.map(function (d) {
                  return d;
                })),
                (e.seriesYAxisReverseMap = i.map(function (d) {
                  return d;
                })),
                e.seriesYAxisMap.forEach(function (d, u) {
                  d.forEach(function (f) {
                    t.series[f] &&
                      t.series[f].group === void 0 &&
                      (t.series[f].group = "apexcharts-axis-".concat(
                        u.toString()
                      ));
                  });
                });
            },
          },
          {
            key: "isSeriesNull",
            value: function () {
              var e =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : null;
              return (
                (e === null
                  ? this.w.config.series.filter(function (t) {
                      return t !== null;
                    })
                  : this.w.config.series[e].data.filter(function (t) {
                      return t !== null;
                    })
                ).length === 0
              );
            },
          },
          {
            key: "seriesHaveSameValues",
            value: function (e) {
              return this.w.globals.series[e].every(function (t, a, i) {
                return t === i[0];
              });
            },
          },
          {
            key: "getCategoryLabels",
            value: function (e) {
              var t = this.w,
                a = e.slice();
              return (
                t.config.xaxis.convertedCatToNumeric &&
                  (a = e.map(function (i, s) {
                    return t.config.xaxis.labels.formatter(
                      i - t.globals.minX + 1
                    );
                  })),
                a
              );
            },
          },
          {
            key: "getLargestSeries",
            value: function () {
              var e = this.w;
              e.globals.maxValsInArrayIndex = e.globals.series
                .map(function (t) {
                  return t.length;
                })
                .indexOf(
                  Math.max.apply(
                    Math,
                    e.globals.series.map(function (t) {
                      return t.length;
                    })
                  )
                );
            },
          },
          {
            key: "getLargestMarkerSize",
            value: function () {
              var e = this.w,
                t = 0;
              return (
                e.globals.markers.size.forEach(function (a) {
                  t = Math.max(t, a);
                }),
                e.config.markers.discrete &&
                  e.config.markers.discrete.length &&
                  e.config.markers.discrete.forEach(function (a) {
                    t = Math.max(t, a.size);
                  }),
                t > 0 &&
                  (e.config.markers.hover.size > 0
                    ? (t = e.config.markers.hover.size)
                    : (t += e.config.markers.hover.sizeOffset)),
                (e.globals.markers.largestSize = t),
                t
              );
            },
          },
          {
            key: "getSeriesTotals",
            value: function () {
              var e = this.w;
              e.globals.seriesTotals = e.globals.series.map(function (t, a) {
                var i = 0;
                if (Array.isArray(t))
                  for (var s = 0; s < t.length; s++) i += t[s];
                else i += t;
                return i;
              });
            },
          },
          {
            key: "getSeriesTotalsXRange",
            value: function (e, t) {
              var a = this.w;
              return a.globals.series.map(function (i, s) {
                for (var n = 0, o = 0; o < i.length; o++)
                  a.globals.seriesX[s][o] > e &&
                    a.globals.seriesX[s][o] < t &&
                    (n += i[o]);
                return n;
              });
            },
          },
          {
            key: "getPercentSeries",
            value: function () {
              var e = this.w;
              e.globals.seriesPercent = e.globals.series.map(function (t, a) {
                var i = [];
                if (Array.isArray(t))
                  for (var s = 0; s < t.length; s++) {
                    var n = e.globals.stackedSeriesTotals[s],
                      o = 0;
                    n && (o = (100 * t[s]) / n), i.push(o);
                  }
                else {
                  var l =
                    (100 * t) /
                    e.globals.seriesTotals.reduce(function (c, h) {
                      return c + h;
                    }, 0);
                  i.push(l);
                }
                return i;
              });
            },
          },
          {
            key: "getCalculatedRatios",
            value: function () {
              var e,
                t,
                a,
                i = this,
                s = this.w,
                n = s.globals,
                o = [],
                l = 0,
                c = [],
                h = 0.1,
                d = 0;
              if (((n.yRange = []), n.isMultipleYAxis))
                for (var u = 0; u < n.minYArr.length; u++)
                  n.yRange.push(Math.abs(n.minYArr[u] - n.maxYArr[u])),
                    c.push(0);
              else n.yRange.push(Math.abs(n.minY - n.maxY));
              (n.xRange = Math.abs(n.maxX - n.minX)),
                (n.zRange = Math.abs(n.maxZ - n.minZ));
              for (var f = 0; f < n.yRange.length; f++)
                o.push(n.yRange[f] / n.gridHeight);
              if (
                ((t = n.xRange / n.gridWidth),
                (e = n.yRange / n.gridWidth),
                (a = n.xRange / n.gridHeight),
                (l = (n.zRange / n.gridHeight) * 16) || (l = 1),
                n.minY !== Number.MIN_VALUE &&
                  Math.abs(n.minY) !== 0 &&
                  (n.hasNegs = !0),
                s.globals.seriesYAxisReverseMap.length > 0)
              ) {
                var g = function (m, x) {
                  var v = s.config.yaxis[s.globals.seriesYAxisReverseMap[x]],
                    b = m < 0 ? -1 : 1;
                  return (
                    (m = Math.abs(m)),
                    v.logarithmic && (m = i.getBaseLog(v.logBase, m)),
                    (-b * m) / o[x]
                  );
                };
                if (n.isMultipleYAxis) {
                  c = [];
                  for (var p = 0; p < o.length; p++) c.push(g(n.minYArr[p], p));
                } else
                  (c = []).push(g(n.minY, 0)),
                    n.minY !== Number.MIN_VALUE &&
                      Math.abs(n.minY) !== 0 &&
                      ((h = -n.minY / e), (d = n.minX / t));
              } else (c = []).push(0), (h = 0), (d = 0);
              return {
                yRatio: o,
                invertedYRatio: e,
                zRatio: l,
                xRatio: t,
                invertedXRatio: a,
                baseLineInvertedY: h,
                baseLineY: c,
                baseLineX: d,
              };
            },
          },
          {
            key: "getLogSeries",
            value: function (e) {
              var t = this,
                a = this.w;
              return (
                (a.globals.seriesLog = e.map(function (i, s) {
                  var n = a.globals.seriesYAxisReverseMap[s];
                  return a.config.yaxis[n] && a.config.yaxis[n].logarithmic
                    ? i.map(function (o) {
                        return o === null
                          ? null
                          : t.getLogVal(a.config.yaxis[n].logBase, o, s);
                      })
                    : i;
                })),
                a.globals.invalidLogScale ? e : a.globals.seriesLog
              );
            },
          },
          {
            key: "getLogValAtSeriesIndex",
            value: function (e, t) {
              if (e === null) return null;
              var a = this.w,
                i = a.globals.seriesYAxisReverseMap[t];
              return a.config.yaxis[i] && a.config.yaxis[i].logarithmic
                ? this.getLogVal(a.config.yaxis[i].logBase, e, t)
                : e;
            },
          },
          {
            key: "getBaseLog",
            value: function (e, t) {
              return Math.log(t) / Math.log(e);
            },
          },
          {
            key: "getLogVal",
            value: function (e, t, a) {
              if (t <= 0) return 0;
              var i = this.w,
                s =
                  i.globals.minYArr[a] === 0
                    ? -1
                    : this.getBaseLog(e, i.globals.minYArr[a]),
                n =
                  (i.globals.maxYArr[a] === 0
                    ? 0
                    : this.getBaseLog(e, i.globals.maxYArr[a])) - s;
              return t < 1 ? t / n : (this.getBaseLog(e, t) - s) / n;
            },
          },
          {
            key: "getLogYRatios",
            value: function (e) {
              var t = this,
                a = this.w,
                i = this.w.globals;
              return (
                (i.yLogRatio = e.slice()),
                (i.logYRange = i.yRange.map(function (s, n) {
                  var o = a.globals.seriesYAxisReverseMap[n];
                  if (a.config.yaxis[o] && t.w.config.yaxis[o].logarithmic) {
                    var l,
                      c = -Number.MAX_VALUE,
                      h = Number.MIN_VALUE;
                    return (
                      i.seriesLog.forEach(function (d, u) {
                        d.forEach(function (f) {
                          a.config.yaxis[u] &&
                            a.config.yaxis[u].logarithmic &&
                            ((c = Math.max(f, c)), (h = Math.min(f, h)));
                        });
                      }),
                      (l = Math.pow(
                        i.yRange[n],
                        Math.abs(h - c) / i.yRange[n]
                      )),
                      (i.yLogRatio[n] = l / i.gridHeight),
                      l
                    );
                  }
                })),
                i.invalidLogScale ? e.slice() : i.yLogRatio
              );
            },
          },
          {
            key: "drawSeriesByGroup",
            value: function (e, t, a, i) {
              var s = this.w,
                n = [];
              return (
                e.series.length > 0 &&
                  t.forEach(function (o) {
                    var l = [],
                      c = [];
                    e.i.forEach(function (h, d) {
                      s.config.series[h].group === o &&
                        (l.push(e.series[d]), c.push(h));
                    }),
                      l.length > 0 && n.push(i.draw(l, a, c));
                  }),
                n
              );
            },
          },
        ],
        [
          {
            key: "checkComboSeries",
            value: function (e, t) {
              var a = !1,
                i = 0,
                s = 0;
              return (
                t === void 0 && (t = "line"),
                e.length &&
                  e[0].type !== void 0 &&
                  e.forEach(function (n) {
                    (n.type !== "bar" &&
                      n.type !== "column" &&
                      n.type !== "candlestick" &&
                      n.type !== "boxPlot") ||
                      i++,
                      n.type !== void 0 && n.type !== t && s++;
                  }),
                s > 0 && (a = !0),
                { comboBarCount: i, comboCharts: a }
              );
            },
          },
          {
            key: "extendArrayProps",
            value: function (e, t, a) {
              var i, s, n, o, l, c;
              return (
                (i = t) !== null &&
                  i !== void 0 &&
                  i.yaxis &&
                  (t = e.extendYAxis(t, a)),
                (s = t) !== null &&
                  s !== void 0 &&
                  s.annotations &&
                  (t.annotations.yaxis && (t = e.extendYAxisAnnotations(t)),
                  (n = t) !== null &&
                    n !== void 0 &&
                    (o = n.annotations) !== null &&
                    o !== void 0 &&
                    o.xaxis &&
                    (t = e.extendXAxisAnnotations(t)),
                  (l = t) !== null &&
                    l !== void 0 &&
                    (c = l.annotations) !== null &&
                    c !== void 0 &&
                    c.points &&
                    (t = e.extendPointAnnotations(t))),
                t
              );
            },
          },
        ]
      ),
      r
    );
  })(),
  Yi = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.annoCtx = e);
    }
    return (
      $(r, [
        {
          key: "setOrientations",
          value: function (e) {
            var t =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : null,
              a = this.w;
            if (e.label.orientation === "vertical") {
              var i = t !== null ? t : 0,
                s = a.globals.dom.baseEl.querySelector(
                  ".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(
                    i,
                    "']"
                  )
                );
              if (s !== null) {
                var n = s.getBoundingClientRect();
                s.setAttribute(
                  "x",
                  parseFloat(s.getAttribute("x")) - n.height + 4
                );
                var o = e.label.position === "top" ? n.width : -n.width;
                s.setAttribute("y", parseFloat(s.getAttribute("y")) + o);
                var l = this.annoCtx.graphics.rotateAroundCenter(s),
                  c = l.x,
                  h = l.y;
                s.setAttribute(
                  "transform",
                  "rotate(-90 ".concat(c, " ").concat(h, ")")
                );
              }
            }
          },
        },
        {
          key: "addBackgroundToAnno",
          value: function (e, t) {
            var a = this.w;
            if (!e || !t.label.text || !String(t.label.text).trim())
              return null;
            var i = a.globals.dom.baseEl
                .querySelector(".apexcharts-grid")
                .getBoundingClientRect(),
              s = e.getBoundingClientRect(),
              n = t.label.style.padding,
              o = n.left,
              l = n.right,
              c = n.top,
              h = n.bottom;
            if (t.label.orientation === "vertical") {
              var d = [o, l, c, h];
              (c = d[0]), (h = d[1]), (o = d[2]), (l = d[3]);
            }
            var u = s.left - i.left - o,
              f = s.top - i.top - c,
              g = this.annoCtx.graphics.drawRect(
                u - a.globals.barPadForNumericAxis,
                f,
                s.width + o + l,
                s.height + c + h,
                t.label.borderRadius,
                t.label.style.background,
                1,
                t.label.borderWidth,
                t.label.borderColor,
                0
              );
            return t.id && g.node.classList.add(t.id), g;
          },
        },
        {
          key: "annotationsBackground",
          value: function () {
            var e = this,
              t = this.w,
              a = function (i, s, n) {
                var o = t.globals.dom.baseEl.querySelector(
                  ".apexcharts-"
                    .concat(n, "-annotations .apexcharts-")
                    .concat(n, "-annotation-label[rel='")
                    .concat(s, "']")
                );
                if (o) {
                  var l = o.parentNode,
                    c = e.addBackgroundToAnno(o, i);
                  c &&
                    (l.insertBefore(c.node, o),
                    i.label.mouseEnter &&
                      c.node.addEventListener(
                        "mouseenter",
                        i.label.mouseEnter.bind(e, i)
                      ),
                    i.label.mouseLeave &&
                      c.node.addEventListener(
                        "mouseleave",
                        i.label.mouseLeave.bind(e, i)
                      ),
                    i.label.click &&
                      c.node.addEventListener(
                        "click",
                        i.label.click.bind(e, i)
                      ));
                }
              };
            t.config.annotations.xaxis.forEach(function (i, s) {
              return a(i, s, "xaxis");
            }),
              t.config.annotations.yaxis.forEach(function (i, s) {
                return a(i, s, "yaxis");
              }),
              t.config.annotations.points.forEach(function (i, s) {
                return a(i, s, "point");
              });
          },
        },
        {
          key: "getY1Y2",
          value: function (e, t) {
            var a,
              i = this.w,
              s = e === "y1" ? t.y : t.y2,
              n = !1;
            if (this.annoCtx.invertAxis) {
              var o = i.config.xaxis.convertedCatToNumeric
                  ? i.globals.categoryLabels
                  : i.globals.labels,
                l = o.indexOf(s),
                c = i.globals.dom.baseEl.querySelector(
                  ".apexcharts-yaxis-texts-g text:nth-child(".concat(l + 1, ")")
                );
              (a = c
                ? parseFloat(c.getAttribute("y"))
                : (i.globals.gridHeight / o.length - 1) * (l + 1) -
                  i.globals.barHeight),
                t.seriesIndex !== void 0 &&
                  i.globals.barHeight &&
                  (a -=
                    (i.globals.barHeight / 2) * (i.globals.series.length - 1) -
                    i.globals.barHeight * t.seriesIndex);
            } else {
              var h,
                d = i.globals.seriesYAxisMap[t.yAxisIndex][0],
                u = i.config.yaxis[t.yAxisIndex].logarithmic
                  ? new ke(this.annoCtx.ctx).getLogVal(
                      i.config.yaxis[t.yAxisIndex].logBase,
                      s,
                      d
                    ) / i.globals.yLogRatio[d]
                  : (s - i.globals.minYArr[d]) /
                    (i.globals.yRange[d] / i.globals.gridHeight);
              (a =
                i.globals.gridHeight -
                Math.min(Math.max(u, 0), i.globals.gridHeight)),
                (n = u > i.globals.gridHeight || u < 0),
                !t.marker || (t.y !== void 0 && t.y !== null) || (a = 0),
                (h = i.config.yaxis[t.yAxisIndex]) !== null &&
                  h !== void 0 &&
                  h.reversed &&
                  (a = u);
            }
            return (
              typeof s == "string" && s.includes("px") && (a = parseFloat(s)),
              { yP: a, clipped: n }
            );
          },
        },
        {
          key: "getX1X2",
          value: function (e, t) {
            var a = this.w,
              i = e === "x1" ? t.x : t.x2,
              s = this.annoCtx.invertAxis ? a.globals.minY : a.globals.minX,
              n = this.annoCtx.invertAxis ? a.globals.maxY : a.globals.maxX,
              o = this.annoCtx.invertAxis
                ? a.globals.yRange[0]
                : a.globals.xRange,
              l = !1,
              c = this.annoCtx.inversedReversedAxis
                ? (n - i) / (o / a.globals.gridWidth)
                : (i - s) / (o / a.globals.gridWidth);
            return (
              (a.config.xaxis.type !== "category" &&
                !a.config.xaxis.convertedCatToNumeric) ||
                this.annoCtx.invertAxis ||
                a.globals.dataFormatXNumeric ||
                a.config.chart.sparkline.enabled ||
                (c = this.getStringX(i)),
              typeof i == "string" && i.includes("px") && (c = parseFloat(i)),
              i == null && t.marker && (c = a.globals.gridWidth),
              t.seriesIndex !== void 0 &&
                a.globals.barWidth &&
                !this.annoCtx.invertAxis &&
                (c -=
                  (a.globals.barWidth / 2) * (a.globals.series.length - 1) -
                  a.globals.barWidth * t.seriesIndex),
              c > a.globals.gridWidth
                ? ((c = a.globals.gridWidth), (l = !0))
                : c < 0 && ((c = 0), (l = !0)),
              { x: c, clipped: l }
            );
          },
        },
        {
          key: "getStringX",
          value: function (e) {
            var t = this.w,
              a = e;
            t.config.xaxis.convertedCatToNumeric &&
              t.globals.categoryLabels.length &&
              (e = t.globals.categoryLabels.indexOf(e) + 1);
            var i = t.globals.labels
                .map(function (n) {
                  return Array.isArray(n) ? n.join(" ") : n;
                })
                .indexOf(e),
              s = t.globals.dom.baseEl.querySelector(
                ".apexcharts-xaxis-texts-g text:nth-child(".concat(i + 1, ")")
              );
            return s && (a = parseFloat(s.getAttribute("x"))), a;
          },
        },
      ]),
      r
    );
  })(),
  um = (function () {
    function r(e) {
      U(this, r),
        (this.w = e.w),
        (this.annoCtx = e),
        (this.invertAxis = this.annoCtx.invertAxis),
        (this.helpers = new Yi(this.annoCtx));
    }
    return (
      $(r, [
        {
          key: "addXaxisAnnotation",
          value: function (e, t, a) {
            var i,
              s = this.w,
              n = this.helpers.getX1X2("x1", e),
              o = n.x,
              l = n.clipped,
              c = !0,
              h = e.label.text,
              d = e.strokeDashArray;
            if (_.isNumber(o)) {
              if (e.x2 === null || e.x2 === void 0) {
                if (!l) {
                  var u = this.annoCtx.graphics.drawLine(
                    o + e.offsetX,
                    0 + e.offsetY,
                    o + e.offsetX,
                    s.globals.gridHeight + e.offsetY,
                    e.borderColor,
                    d,
                    e.borderWidth
                  );
                  t.appendChild(u.node), e.id && u.node.classList.add(e.id);
                }
              } else {
                var f = this.helpers.getX1X2("x2", e);
                if (((i = f.x), (c = f.clipped), i < o)) {
                  var g = o;
                  (o = i), (i = g);
                }
                var p = this.annoCtx.graphics.drawRect(
                  o + e.offsetX,
                  0 + e.offsetY,
                  i - o,
                  s.globals.gridHeight + e.offsetY,
                  0,
                  e.fillColor,
                  e.opacity,
                  1,
                  e.borderColor,
                  d
                );
                p.node.classList.add("apexcharts-annotation-rect"),
                  p.attr(
                    "clip-path",
                    "url(#gridRectMask".concat(s.globals.cuid, ")")
                  ),
                  t.appendChild(p.node),
                  e.id && p.node.classList.add(e.id);
              }
              if (!l || !c) {
                var m = this.annoCtx.graphics.getTextRects(
                    h,
                    parseFloat(e.label.style.fontSize)
                  ),
                  x =
                    e.label.position === "top"
                      ? 4
                      : e.label.position === "center"
                      ? s.globals.gridHeight / 2 +
                        (e.label.orientation === "vertical" ? m.width / 2 : 0)
                      : s.globals.gridHeight,
                  v = this.annoCtx.graphics.drawText({
                    x: o + e.label.offsetX,
                    y:
                      x +
                      e.label.offsetY -
                      (e.label.orientation === "vertical"
                        ? e.label.position === "top"
                          ? m.width / 2 - 12
                          : -m.width / 2
                        : 0),
                    text: h,
                    textAnchor: e.label.textAnchor,
                    fontSize: e.label.style.fontSize,
                    fontFamily: e.label.style.fontFamily,
                    fontWeight: e.label.style.fontWeight,
                    foreColor: e.label.style.color,
                    cssClass: "apexcharts-xaxis-annotation-label "
                      .concat(e.label.style.cssClass, " ")
                      .concat(e.id ? e.id : ""),
                  });
                v.attr({ rel: a }),
                  t.appendChild(v.node),
                  this.annoCtx.helpers.setOrientations(e, a);
              }
            }
          },
        },
        {
          key: "drawXAxisAnnotations",
          value: function () {
            var e = this,
              t = this.w,
              a = this.annoCtx.graphics.group({
                class: "apexcharts-xaxis-annotations",
              });
            return (
              t.config.annotations.xaxis.map(function (i, s) {
                e.addXaxisAnnotation(i, a.node, s);
              }),
              a
            );
          },
        },
      ]),
      r
    );
  })(),
  Me = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.months31 = [1, 3, 5, 7, 8, 10, 12]),
        (this.months30 = [2, 4, 6, 9, 11]),
        (this.daysCntOfYear = [
          0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,
        ]);
    }
    return (
      $(r, [
        {
          key: "isValidDate",
          value: function (e) {
            return typeof e != "number" && !isNaN(this.parseDate(e));
          },
        },
        {
          key: "getTimeStamp",
          value: function (e) {
            return Date.parse(e)
              ? this.w.config.xaxis.labels.datetimeUTC
                ? new Date(new Date(e).toISOString().substr(0, 25)).getTime()
                : new Date(e).getTime()
              : e;
          },
        },
        {
          key: "getDate",
          value: function (e) {
            return this.w.config.xaxis.labels.datetimeUTC
              ? new Date(new Date(e).toUTCString())
              : new Date(e);
          },
        },
        {
          key: "parseDate",
          value: function (e) {
            var t = Date.parse(e);
            if (!isNaN(t)) return this.getTimeStamp(e);
            var a = Date.parse(e.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
            return (a = this.getTimeStamp(a));
          },
        },
        {
          key: "parseDateWithTimezone",
          value: function (e) {
            return Date.parse(e.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
          },
        },
        {
          key: "formatDate",
          value: function (e, t) {
            var a = this.w.globals.locale,
              i = this.w.config.xaxis.labels.datetimeUTC,
              s = ["\0"].concat(Pe(a.months)),
              n = [""].concat(Pe(a.shortMonths)),
              o = [""].concat(Pe(a.days)),
              l = [""].concat(Pe(a.shortDays));
            function c(S, T) {
              var E = S + "";
              for (T = T || 2; E.length < T; ) E = "0" + E;
              return E;
            }
            var h = i ? e.getUTCFullYear() : e.getFullYear();
            t = (t = (t = t.replace(/(^|[^\\])yyyy+/g, "$1" + h)).replace(
              /(^|[^\\])yy/g,
              "$1" + h.toString().substr(2, 2)
            )).replace(/(^|[^\\])y/g, "$1" + h);
            var d = (i ? e.getUTCMonth() : e.getMonth()) + 1;
            t = (t = (t = (t = t.replace(
              /(^|[^\\])MMMM+/g,
              "$1" + s[0]
            )).replace(/(^|[^\\])MMM/g, "$1" + n[0])).replace(
              /(^|[^\\])MM/g,
              "$1" + c(d)
            )).replace(/(^|[^\\])M/g, "$1" + d);
            var u = i ? e.getUTCDate() : e.getDate();
            t = (t = (t = (t = t.replace(
              /(^|[^\\])dddd+/g,
              "$1" + o[0]
            )).replace(/(^|[^\\])ddd/g, "$1" + l[0])).replace(
              /(^|[^\\])dd/g,
              "$1" + c(u)
            )).replace(/(^|[^\\])d/g, "$1" + u);
            var f = i ? e.getUTCHours() : e.getHours(),
              g = f > 12 ? f - 12 : f === 0 ? 12 : f;
            t = (t = (t = (t = t.replace(/(^|[^\\])HH+/g, "$1" + c(f))).replace(
              /(^|[^\\])H/g,
              "$1" + f
            )).replace(/(^|[^\\])hh+/g, "$1" + c(g))).replace(
              /(^|[^\\])h/g,
              "$1" + g
            );
            var p = i ? e.getUTCMinutes() : e.getMinutes();
            t = (t = t.replace(/(^|[^\\])mm+/g, "$1" + c(p))).replace(
              /(^|[^\\])m/g,
              "$1" + p
            );
            var m = i ? e.getUTCSeconds() : e.getSeconds();
            t = (t = t.replace(/(^|[^\\])ss+/g, "$1" + c(m))).replace(
              /(^|[^\\])s/g,
              "$1" + m
            );
            var x = i ? e.getUTCMilliseconds() : e.getMilliseconds();
            (t = t.replace(/(^|[^\\])fff+/g, "$1" + c(x, 3))),
              (x = Math.round(x / 10)),
              (t = t.replace(/(^|[^\\])ff/g, "$1" + c(x))),
              (x = Math.round(x / 10));
            var v = f < 12 ? "AM" : "PM";
            t = (t = (t = t.replace(/(^|[^\\])f/g, "$1" + x)).replace(
              /(^|[^\\])TT+/g,
              "$1" + v
            )).replace(/(^|[^\\])T/g, "$1" + v.charAt(0));
            var b = v.toLowerCase();
            t = (t = t.replace(/(^|[^\\])tt+/g, "$1" + b)).replace(
              /(^|[^\\])t/g,
              "$1" + b.charAt(0)
            );
            var k = -e.getTimezoneOffset(),
              y = i || !k ? "Z" : k > 0 ? "+" : "-";
            if (!i) {
              var C = (k = Math.abs(k)) % 60;
              y += c(Math.floor(k / 60)) + ":" + c(C);
            }
            t = t.replace(/(^|[^\\])K/g, "$1" + y);
            var A = (i ? e.getUTCDay() : e.getDay()) + 1;
            return (t = (t = (t = (t = (t = t.replace(
              new RegExp(o[0], "g"),
              o[A]
            )).replace(new RegExp(l[0], "g"), l[A])).replace(
              new RegExp(s[0], "g"),
              s[d]
            )).replace(new RegExp(n[0], "g"), n[d])).replace(/\\(.)/g, "$1"));
          },
        },
        {
          key: "getTimeUnitsfromTimestamp",
          value: function (e, t, a) {
            var i = this.w;
            i.config.xaxis.min !== void 0 && (e = i.config.xaxis.min),
              i.config.xaxis.max !== void 0 && (t = i.config.xaxis.max);
            var s = this.getDate(e),
              n = this.getDate(t),
              o = this.formatDate(s, "yyyy MM dd HH mm ss fff").split(" "),
              l = this.formatDate(n, "yyyy MM dd HH mm ss fff").split(" ");
            return {
              minMillisecond: parseInt(o[6], 10),
              maxMillisecond: parseInt(l[6], 10),
              minSecond: parseInt(o[5], 10),
              maxSecond: parseInt(l[5], 10),
              minMinute: parseInt(o[4], 10),
              maxMinute: parseInt(l[4], 10),
              minHour: parseInt(o[3], 10),
              maxHour: parseInt(l[3], 10),
              minDate: parseInt(o[2], 10),
              maxDate: parseInt(l[2], 10),
              minMonth: parseInt(o[1], 10) - 1,
              maxMonth: parseInt(l[1], 10) - 1,
              minYear: parseInt(o[0], 10),
              maxYear: parseInt(l[0], 10),
            };
          },
        },
        {
          key: "isLeapYear",
          value: function (e) {
            return (e % 4 == 0 && e % 100 != 0) || e % 400 == 0;
          },
        },
        {
          key: "calculcateLastDaysOfMonth",
          value: function (e, t, a) {
            return this.determineDaysOfMonths(e, t) - a;
          },
        },
        {
          key: "determineDaysOfYear",
          value: function (e) {
            var t = 365;
            return this.isLeapYear(e) && (t = 366), t;
          },
        },
        {
          key: "determineRemainingDaysOfYear",
          value: function (e, t, a) {
            var i = this.daysCntOfYear[t] + a;
            return t > 1 && this.isLeapYear() && i++, i;
          },
        },
        {
          key: "determineDaysOfMonths",
          value: function (e, t) {
            var a = 30;
            switch (((e = _.monthMod(e)), !0)) {
              case this.months30.indexOf(e) > -1:
                e === 2 && (a = this.isLeapYear(t) ? 29 : 28);
                break;
              case this.months31.indexOf(e) > -1:
              default:
                a = 31;
            }
            return a;
          },
        },
      ]),
      r
    );
  })(),
  Ka = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.tooltipKeyFormat = "dd MMM");
    }
    return (
      $(r, [
        {
          key: "xLabelFormat",
          value: function (e, t, a, i) {
            var s = this.w;
            if (
              s.config.xaxis.type === "datetime" &&
              s.config.xaxis.labels.formatter === void 0 &&
              s.config.tooltip.x.formatter === void 0
            ) {
              var n = new Me(this.ctx);
              return n.formatDate(n.getDate(t), s.config.tooltip.x.format);
            }
            return e(t, a, i);
          },
        },
        {
          key: "defaultGeneralFormatter",
          value: function (e) {
            return Array.isArray(e)
              ? e.map(function (t) {
                  return t;
                })
              : e;
          },
        },
        {
          key: "defaultYFormatter",
          value: function (e, t, a) {
            var i = this.w;
            if (_.isNumber(e))
              if (i.globals.yValueDecimal !== 0)
                e = e.toFixed(
                  t.decimalsInFloat !== void 0
                    ? t.decimalsInFloat
                    : i.globals.yValueDecimal
                );
              else {
                var s = e.toFixed(0);
                e = e == s ? s : e.toFixed(1);
              }
            return e;
          },
        },
        {
          key: "setLabelFormatters",
          value: function () {
            var e = this,
              t = this.w;
            return (
              (t.globals.xaxisTooltipFormatter = function (a) {
                return e.defaultGeneralFormatter(a);
              }),
              (t.globals.ttKeyFormatter = function (a) {
                return e.defaultGeneralFormatter(a);
              }),
              (t.globals.ttZFormatter = function (a) {
                return a;
              }),
              (t.globals.legendFormatter = function (a) {
                return e.defaultGeneralFormatter(a);
              }),
              t.config.xaxis.labels.formatter !== void 0
                ? (t.globals.xLabelFormatter = t.config.xaxis.labels.formatter)
                : (t.globals.xLabelFormatter = function (a) {
                    if (_.isNumber(a)) {
                      if (
                        !t.config.xaxis.convertedCatToNumeric &&
                        t.config.xaxis.type === "numeric"
                      ) {
                        if (_.isNumber(t.config.xaxis.decimalsInFloat))
                          return a.toFixed(t.config.xaxis.decimalsInFloat);
                        var i = t.globals.maxX - t.globals.minX;
                        return i > 0 && i < 100 ? a.toFixed(1) : a.toFixed(0);
                      }
                      return t.globals.isBarHorizontal &&
                        t.globals.maxY - t.globals.minYArr < 4
                        ? a.toFixed(1)
                        : a.toFixed(0);
                    }
                    return a;
                  }),
              typeof t.config.tooltip.x.formatter == "function"
                ? (t.globals.ttKeyFormatter = t.config.tooltip.x.formatter)
                : (t.globals.ttKeyFormatter = t.globals.xLabelFormatter),
              typeof t.config.xaxis.tooltip.formatter == "function" &&
                (t.globals.xaxisTooltipFormatter =
                  t.config.xaxis.tooltip.formatter),
              (Array.isArray(t.config.tooltip.y) ||
                t.config.tooltip.y.formatter !== void 0) &&
                (t.globals.ttVal = t.config.tooltip.y),
              t.config.tooltip.z.formatter !== void 0 &&
                (t.globals.ttZFormatter = t.config.tooltip.z.formatter),
              t.config.legend.formatter !== void 0 &&
                (t.globals.legendFormatter = t.config.legend.formatter),
              t.config.yaxis.forEach(function (a, i) {
                a.labels.formatter !== void 0
                  ? (t.globals.yLabelFormatters[i] = a.labels.formatter)
                  : (t.globals.yLabelFormatters[i] = function (s) {
                      return t.globals.xyCharts
                        ? Array.isArray(s)
                          ? s.map(function (n) {
                              return e.defaultYFormatter(n, a, i);
                            })
                          : e.defaultYFormatter(s, a, i)
                        : s;
                    });
              }),
              t.globals
            );
          },
        },
        {
          key: "heatmapLabelFormatters",
          value: function () {
            var e = this.w;
            if (e.config.chart.type === "heatmap") {
              e.globals.yAxisScale[0].result = e.globals.seriesNames.slice();
              var t = e.globals.seriesNames.reduce(function (a, i) {
                return a.length > i.length ? a : i;
              }, 0);
              (e.globals.yAxisScale[0].niceMax = t),
                (e.globals.yAxisScale[0].niceMin = t);
            }
          },
        },
      ]),
      r
    );
  })(),
  St = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "getLabel",
          value: function (e, t, a, i) {
            var s =
                arguments.length > 4 && arguments[4] !== void 0
                  ? arguments[4]
                  : [],
              n =
                arguments.length > 5 && arguments[5] !== void 0
                  ? arguments[5]
                  : "12px",
              o =
                !(arguments.length > 6 && arguments[6] !== void 0) ||
                arguments[6],
              l = this.w,
              c = e[i] === void 0 ? "" : e[i],
              h = c,
              d = l.globals.xLabelFormatter,
              u = l.config.xaxis.labels.formatter,
              f = !1,
              g = new Ka(this.ctx),
              p = c;
            o &&
              ((h = g.xLabelFormat(d, c, p, {
                i,
                dateFormatter: new Me(this.ctx).formatDate,
                w: l,
              })),
              u !== void 0 &&
                (h = u(c, e[i], {
                  i,
                  dateFormatter: new Me(this.ctx).formatDate,
                  w: l,
                })));
            var m, x;
            t.length > 0
              ? ((m = t[i].unit),
                (x = null),
                t.forEach(function (y) {
                  y.unit === "month"
                    ? (x = "year")
                    : y.unit === "day"
                    ? (x = "month")
                    : y.unit === "hour"
                    ? (x = "day")
                    : y.unit === "minute" && (x = "hour");
                }),
                (f = x === m),
                (a = t[i].position),
                (h = t[i].value))
              : l.config.xaxis.type === "datetime" && u === void 0 && (h = ""),
              h === void 0 && (h = ""),
              (h = Array.isArray(h) ? h : h.toString());
            var v = new H(this.ctx),
              b = {};
            b =
              l.globals.rotateXLabels && o
                ? v.getTextRects(
                    h,
                    parseInt(n, 10),
                    null,
                    "rotate(".concat(l.config.xaxis.labels.rotate, " 0 0)"),
                    !1
                  )
                : v.getTextRects(h, parseInt(n, 10));
            var k = !l.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
            return (
              !Array.isArray(h) &&
                (String(h) === "NaN" || (s.indexOf(h) >= 0 && k)) &&
                (h = ""),
              { x: a, text: h, textRect: b, isBold: f }
            );
          },
        },
        {
          key: "checkLabelBasedOnTickamount",
          value: function (e, t, a) {
            var i = this.w,
              s = i.config.xaxis.tickAmount;
            return (
              s === "dataPoints" && (s = Math.round(i.globals.gridWidth / 120)),
              s > a || e % Math.round(a / (s + 1)) == 0 || (t.text = ""),
              t
            );
          },
        },
        {
          key: "checkForOverflowingLabels",
          value: function (e, t, a, i, s) {
            var n = this.w;
            if (
              (e === 0 && n.globals.skipFirstTimelinelabel && (t.text = ""),
              e === a - 1 && n.globals.skipLastTimelinelabel && (t.text = ""),
              n.config.xaxis.labels.hideOverlappingLabels && i.length > 0)
            ) {
              var o = s[s.length - 1];
              t.x <
                o.textRect.width /
                  (n.globals.rotateXLabels
                    ? Math.abs(n.config.xaxis.labels.rotate) / 12
                    : 1.01) +
                  o.x && (t.text = "");
            }
            return t;
          },
        },
        {
          key: "checkForReversedLabels",
          value: function (e, t) {
            var a = this.w;
            return (
              a.config.yaxis[e] && a.config.yaxis[e].reversed && t.reverse(), t
            );
          },
        },
        {
          key: "yAxisAllSeriesCollapsed",
          value: function (e) {
            var t = this.w.globals;
            return !t.seriesYAxisMap[e].some(function (a) {
              return t.collapsedSeriesIndices.indexOf(a) === -1;
            });
          },
        },
        {
          key: "translateYAxisIndex",
          value: function (e) {
            var t = this.w,
              a = t.globals,
              i = t.config.yaxis;
            return a.series.length > i.length ||
              i.some(function (s) {
                return Array.isArray(s.seriesName);
              })
              ? e
              : a.seriesYAxisReverseMap[e];
          },
        },
        {
          key: "isYAxisHidden",
          value: function (e) {
            var t = this.w,
              a = t.config.yaxis[e];
            if (!a.show || this.yAxisAllSeriesCollapsed(e)) return !0;
            if (!a.showForNullSeries) {
              var i = t.globals.seriesYAxisMap[e],
                s = new ke(this.ctx);
              return i.every(function (n) {
                return s.isSeriesNull(n);
              });
            }
            return !1;
          },
        },
        {
          key: "getYAxisForeColor",
          value: function (e, t) {
            var a = this.w;
            return (
              Array.isArray(e) &&
                a.globals.yAxisScale[t] &&
                this.ctx.theme.pushExtraColors(
                  e,
                  a.globals.yAxisScale[t].result.length,
                  !1
                ),
              e
            );
          },
        },
        {
          key: "drawYAxisTicks",
          value: function (e, t, a, i, s, n, o) {
            var l = this.w,
              c = new H(this.ctx),
              h = l.globals.translateY + l.config.yaxis[s].labels.offsetY;
            if (
              (l.globals.isBarHorizontal
                ? (h = 0)
                : l.config.chart.type === "heatmap" && (h += n / 2),
              i.show && t > 0)
            ) {
              l.config.yaxis[s].opposite === !0 && (e += i.width);
              for (var d = t; d >= 0; d--) {
                var u = c.drawLine(
                  e + a.offsetX - i.width + i.offsetX,
                  h + i.offsetY,
                  e + a.offsetX + i.offsetX,
                  h + i.offsetY,
                  i.color
                );
                o.add(u), (h += n);
              }
            }
          },
        },
      ]),
      r
    );
  })(),
  fm = (function () {
    function r(e) {
      U(this, r),
        (this.w = e.w),
        (this.annoCtx = e),
        (this.helpers = new Yi(this.annoCtx)),
        (this.axesUtils = new St(this.annoCtx));
    }
    return (
      $(r, [
        {
          key: "addYaxisAnnotation",
          value: function (e, t, a) {
            var i,
              s = this.w,
              n = e.strokeDashArray,
              o = this.helpers.getY1Y2("y1", e),
              l = o.yP,
              c = o.clipped,
              h = !0,
              d = !1,
              u = e.label.text;
            if (e.y2 === null || e.y2 === void 0) {
              if (!c) {
                d = !0;
                var f = this.annoCtx.graphics.drawLine(
                  0 + e.offsetX,
                  l + e.offsetY,
                  this._getYAxisAnnotationWidth(e),
                  l + e.offsetY,
                  e.borderColor,
                  n,
                  e.borderWidth
                );
                t.appendChild(f.node), e.id && f.node.classList.add(e.id);
              }
            } else {
              if (
                ((i = (o = this.helpers.getY1Y2("y2", e)).yP),
                (h = o.clipped),
                i > l)
              ) {
                var g = l;
                (l = i), (i = g);
              }
              if (!c || !h) {
                d = !0;
                var p = this.annoCtx.graphics.drawRect(
                  0 + e.offsetX,
                  i + e.offsetY,
                  this._getYAxisAnnotationWidth(e),
                  l - i,
                  0,
                  e.fillColor,
                  e.opacity,
                  1,
                  e.borderColor,
                  n
                );
                p.node.classList.add("apexcharts-annotation-rect"),
                  p.attr(
                    "clip-path",
                    "url(#gridRectMask".concat(s.globals.cuid, ")")
                  ),
                  t.appendChild(p.node),
                  e.id && p.node.classList.add(e.id);
              }
            }
            if (d) {
              var m =
                  e.label.position === "right"
                    ? s.globals.gridWidth
                    : e.label.position === "center"
                    ? s.globals.gridWidth / 2
                    : 0,
                x = this.annoCtx.graphics.drawText({
                  x: m + e.label.offsetX,
                  y: (i ?? l) + e.label.offsetY - 3,
                  text: u,
                  textAnchor: e.label.textAnchor,
                  fontSize: e.label.style.fontSize,
                  fontFamily: e.label.style.fontFamily,
                  fontWeight: e.label.style.fontWeight,
                  foreColor: e.label.style.color,
                  cssClass: "apexcharts-yaxis-annotation-label "
                    .concat(e.label.style.cssClass, " ")
                    .concat(e.id ? e.id : ""),
                });
              x.attr({ rel: a }), t.appendChild(x.node);
            }
          },
        },
        {
          key: "_getYAxisAnnotationWidth",
          value: function (e) {
            var t = this.w;
            return (
              t.globals.gridWidth,
              (e.width.indexOf("%") > -1
                ? (t.globals.gridWidth * parseInt(e.width, 10)) / 100
                : parseInt(e.width, 10)) + e.offsetX
            );
          },
        },
        {
          key: "drawYAxisAnnotations",
          value: function () {
            var e = this,
              t = this.w,
              a = this.annoCtx.graphics.group({
                class: "apexcharts-yaxis-annotations",
              });
            return (
              t.config.annotations.yaxis.forEach(function (i, s) {
                (i.yAxisIndex = e.axesUtils.translateYAxisIndex(i.yAxisIndex)),
                  (e.axesUtils.isYAxisHidden(i.yAxisIndex) &&
                    e.axesUtils.yAxisAllSeriesCollapsed(i.yAxisIndex)) ||
                    e.addYaxisAnnotation(i, a.node, s);
              }),
              a
            );
          },
        },
      ]),
      r
    );
  })(),
  gm = (function () {
    function r(e) {
      U(this, r),
        (this.w = e.w),
        (this.annoCtx = e),
        (this.helpers = new Yi(this.annoCtx));
    }
    return (
      $(r, [
        {
          key: "addPointAnnotation",
          value: function (e, t, a) {
            if (
              !(
                this.w.globals.collapsedSeriesIndices.indexOf(e.seriesIndex) >
                -1
              )
            ) {
              var i = this.helpers.getX1X2("x1", e),
                s = i.x,
                n = i.clipped,
                o = (i = this.helpers.getY1Y2("y1", e)).yP,
                l = i.clipped;
              if (_.isNumber(s) && !l && !n) {
                var c = {
                    pSize: e.marker.size,
                    pointStrokeWidth: e.marker.strokeWidth,
                    pointFillColor: e.marker.fillColor,
                    pointStrokeColor: e.marker.strokeColor,
                    shape: e.marker.shape,
                    pRadius: e.marker.radius,
                    class: "apexcharts-point-annotation-marker "
                      .concat(e.marker.cssClass, " ")
                      .concat(e.id ? e.id : ""),
                  },
                  h = this.annoCtx.graphics.drawMarker(
                    s + e.marker.offsetX,
                    o + e.marker.offsetY,
                    c
                  );
                t.appendChild(h.node);
                var d = e.label.text ? e.label.text : "",
                  u = this.annoCtx.graphics.drawText({
                    x: s + e.label.offsetX,
                    y:
                      o +
                      e.label.offsetY -
                      e.marker.size -
                      parseFloat(e.label.style.fontSize) / 1.6,
                    text: d,
                    textAnchor: e.label.textAnchor,
                    fontSize: e.label.style.fontSize,
                    fontFamily: e.label.style.fontFamily,
                    fontWeight: e.label.style.fontWeight,
                    foreColor: e.label.style.color,
                    cssClass: "apexcharts-point-annotation-label "
                      .concat(e.label.style.cssClass, " ")
                      .concat(e.id ? e.id : ""),
                  });
                if (
                  (u.attr({ rel: a }), t.appendChild(u.node), e.customSVG.SVG)
                ) {
                  var f = this.annoCtx.graphics.group({
                    class:
                      "apexcharts-point-annotations-custom-svg " +
                      e.customSVG.cssClass,
                  });
                  f.attr({
                    transform: "translate("
                      .concat(s + e.customSVG.offsetX, ", ")
                      .concat(o + e.customSVG.offsetY, ")"),
                  }),
                    (f.node.innerHTML = e.customSVG.SVG),
                    t.appendChild(f.node);
                }
                if (e.image.path) {
                  var g = e.image.width ? e.image.width : 20,
                    p = e.image.height ? e.image.height : 20;
                  h = this.annoCtx.addImage({
                    x: s + e.image.offsetX - g / 2,
                    y: o + e.image.offsetY - p / 2,
                    width: g,
                    height: p,
                    path: e.image.path,
                    appendTo: ".apexcharts-point-annotations",
                  });
                }
                e.mouseEnter &&
                  h.node.addEventListener(
                    "mouseenter",
                    e.mouseEnter.bind(this, e)
                  ),
                  e.mouseLeave &&
                    h.node.addEventListener(
                      "mouseleave",
                      e.mouseLeave.bind(this, e)
                    ),
                  e.click &&
                    h.node.addEventListener("click", e.click.bind(this, e));
              }
            }
          },
        },
        {
          key: "drawPointAnnotations",
          value: function () {
            var e = this,
              t = this.w,
              a = this.annoCtx.graphics.group({
                class: "apexcharts-point-annotations",
              });
            return (
              t.config.annotations.points.map(function (i, s) {
                e.addPointAnnotation(i, a.node, s);
              }),
              a
            );
          },
        },
      ]),
      r
    );
  })(),
  zc = {
    name: "en",
    options: {
      months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ],
      shortMonths: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ],
      days: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
      ],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      toolbar: {
        exportToSVG: "Download SVG",
        exportToPNG: "Download PNG",
        exportToCSV: "Download CSV",
        menu: "Menu",
        selection: "Selection",
        selectionZoom: "Selection Zoom",
        zoomIn: "Zoom In",
        zoomOut: "Zoom Out",
        pan: "Panning",
        reset: "Reset Zoom",
      },
    },
  },
  Rt = (function () {
    function r() {
      U(this, r),
        (this.yAxis = {
          show: !0,
          showAlways: !1,
          showForNullSeries: !0,
          seriesName: void 0,
          opposite: !1,
          reversed: !1,
          logarithmic: !1,
          logBase: 10,
          tickAmount: void 0,
          stepSize: void 0,
          forceNiceScale: !1,
          max: void 0,
          min: void 0,
          floating: !1,
          decimalsInFloat: void 0,
          labels: {
            show: !0,
            showDuplicates: !1,
            minWidth: 0,
            maxWidth: 160,
            offsetX: 0,
            offsetY: 0,
            align: void 0,
            rotate: 0,
            padding: 20,
            style: {
              colors: [],
              fontSize: "11px",
              fontWeight: 400,
              fontFamily: void 0,
              cssClass: "",
            },
            formatter: void 0,
          },
          axisBorder: {
            show: !1,
            color: "#e0e0e0",
            width: 1,
            offsetX: 0,
            offsetY: 0,
          },
          axisTicks: {
            show: !1,
            color: "#e0e0e0",
            width: 6,
            offsetX: 0,
            offsetY: 0,
          },
          title: {
            text: void 0,
            rotate: -90,
            offsetY: 0,
            offsetX: 0,
            style: {
              color: void 0,
              fontSize: "11px",
              fontWeight: 900,
              fontFamily: void 0,
              cssClass: "",
            },
          },
          tooltip: { enabled: !1, offsetX: 0 },
          crosshairs: {
            show: !0,
            position: "front",
            stroke: { color: "#b6b6b6", width: 1, dashArray: 0 },
          },
        }),
        (this.pointAnnotation = {
          id: void 0,
          x: 0,
          y: null,
          yAxisIndex: 0,
          seriesIndex: void 0,
          mouseEnter: void 0,
          mouseLeave: void 0,
          click: void 0,
          marker: {
            size: 4,
            fillColor: "#fff",
            strokeWidth: 2,
            strokeColor: "#333",
            shape: "circle",
            offsetX: 0,
            offsetY: 0,
            cssClass: "",
          },
          label: {
            borderColor: "#c2c2c2",
            borderWidth: 1,
            borderRadius: 2,
            text: void 0,
            textAnchor: "middle",
            offsetX: 0,
            offsetY: 0,
            mouseEnter: void 0,
            mouseLeave: void 0,
            click: void 0,
            style: {
              background: "#fff",
              color: void 0,
              fontSize: "11px",
              fontFamily: void 0,
              fontWeight: 400,
              cssClass: "",
              padding: { left: 5, right: 5, top: 2, bottom: 2 },
            },
          },
          customSVG: { SVG: void 0, cssClass: void 0, offsetX: 0, offsetY: 0 },
          image: {
            path: void 0,
            width: 20,
            height: 20,
            offsetX: 0,
            offsetY: 0,
          },
        }),
        (this.yAxisAnnotation = {
          id: void 0,
          y: 0,
          y2: null,
          strokeDashArray: 1,
          fillColor: "#c2c2c2",
          borderColor: "#c2c2c2",
          borderWidth: 1,
          opacity: 0.3,
          offsetX: 0,
          offsetY: 0,
          width: "100%",
          yAxisIndex: 0,
          label: {
            borderColor: "#c2c2c2",
            borderWidth: 1,
            borderRadius: 2,
            text: void 0,
            textAnchor: "end",
            position: "right",
            offsetX: 0,
            offsetY: -3,
            mouseEnter: void 0,
            mouseLeave: void 0,
            click: void 0,
            style: {
              background: "#fff",
              color: void 0,
              fontSize: "11px",
              fontFamily: void 0,
              fontWeight: 400,
              cssClass: "",
              padding: { left: 5, right: 5, top: 2, bottom: 2 },
            },
          },
        }),
        (this.xAxisAnnotation = {
          id: void 0,
          x: 0,
          x2: null,
          strokeDashArray: 1,
          fillColor: "#c2c2c2",
          borderColor: "#c2c2c2",
          borderWidth: 1,
          opacity: 0.3,
          offsetX: 0,
          offsetY: 0,
          label: {
            borderColor: "#c2c2c2",
            borderWidth: 1,
            borderRadius: 2,
            text: void 0,
            textAnchor: "middle",
            orientation: "vertical",
            position: "top",
            offsetX: 0,
            offsetY: 0,
            mouseEnter: void 0,
            mouseLeave: void 0,
            click: void 0,
            style: {
              background: "#fff",
              color: void 0,
              fontSize: "11px",
              fontFamily: void 0,
              fontWeight: 400,
              cssClass: "",
              padding: { left: 5, right: 5, top: 2, bottom: 2 },
            },
          },
        }),
        (this.text = {
          x: 0,
          y: 0,
          text: "",
          textAnchor: "start",
          foreColor: void 0,
          fontSize: "13px",
          fontFamily: void 0,
          fontWeight: 400,
          appendTo: ".apexcharts-annotations",
          backgroundColor: "transparent",
          borderColor: "#c2c2c2",
          borderRadius: 0,
          borderWidth: 0,
          paddingLeft: 4,
          paddingRight: 4,
          paddingTop: 2,
          paddingBottom: 2,
        });
    }
    return (
      $(r, [
        {
          key: "init",
          value: function () {
            return {
              annotations: {
                yaxis: [this.yAxisAnnotation],
                xaxis: [this.xAxisAnnotation],
                points: [this.pointAnnotation],
                texts: [],
                images: [],
                shapes: [],
              },
              chart: {
                animations: {
                  enabled: !0,
                  speed: 800,
                  animateGradually: { delay: 150, enabled: !0 },
                  dynamicAnimation: { enabled: !0, speed: 350 },
                },
                background: "",
                locales: [zc],
                defaultLocale: "en",
                dropShadow: {
                  enabled: !1,
                  enabledOnSeries: void 0,
                  top: 2,
                  left: 2,
                  blur: 4,
                  color: "#000",
                  opacity: 0.7,
                },
                events: {
                  animationEnd: void 0,
                  beforeMount: void 0,
                  mounted: void 0,
                  updated: void 0,
                  click: void 0,
                  mouseMove: void 0,
                  mouseLeave: void 0,
                  xAxisLabelClick: void 0,
                  legendClick: void 0,
                  markerClick: void 0,
                  selection: void 0,
                  dataPointSelection: void 0,
                  dataPointMouseEnter: void 0,
                  dataPointMouseLeave: void 0,
                  beforeZoom: void 0,
                  beforeResetZoom: void 0,
                  zoomed: void 0,
                  scrolled: void 0,
                  brushScrolled: void 0,
                },
                foreColor: "#373d3f",
                fontFamily: "Helvetica, Arial, sans-serif",
                height: "auto",
                parentHeightOffset: 15,
                redrawOnParentResize: !0,
                redrawOnWindowResize: !0,
                id: void 0,
                group: void 0,
                nonce: void 0,
                offsetX: 0,
                offsetY: 0,
                selection: {
                  enabled: !1,
                  type: "x",
                  fill: { color: "#24292e", opacity: 0.1 },
                  stroke: {
                    width: 1,
                    color: "#24292e",
                    opacity: 0.4,
                    dashArray: 3,
                  },
                  xaxis: { min: void 0, max: void 0 },
                  yaxis: { min: void 0, max: void 0 },
                },
                sparkline: { enabled: !1 },
                brush: {
                  enabled: !1,
                  autoScaleYaxis: !0,
                  target: void 0,
                  targets: void 0,
                },
                stacked: !1,
                stackOnlyBar: !0,
                stackType: "normal",
                toolbar: {
                  show: !0,
                  offsetX: 0,
                  offsetY: 0,
                  tools: {
                    download: !0,
                    selection: !0,
                    zoom: !0,
                    zoomin: !0,
                    zoomout: !0,
                    pan: !0,
                    reset: !0,
                    customIcons: [],
                  },
                  export: {
                    csv: {
                      filename: void 0,
                      columnDelimiter: ",",
                      headerCategory: "category",
                      headerValue: "value",
                      categoryFormatter: void 0,
                      valueFormatter: void 0,
                    },
                    png: { filename: void 0 },
                    svg: { filename: void 0 },
                    scale: void 0,
                    width: void 0,
                  },
                  autoSelected: "zoom",
                },
                type: "line",
                width: "100%",
                zoom: {
                  enabled: !0,
                  type: "x",
                  autoScaleYaxis: !1,
                  allowMouseWheelZoom: !0,
                  zoomedArea: {
                    fill: { color: "#90CAF9", opacity: 0.4 },
                    stroke: { color: "#0D47A1", opacity: 0.4, width: 1 },
                  },
                },
              },
              plotOptions: {
                line: {
                  isSlopeChart: !1,
                  colors: {
                    threshold: 0,
                    colorAboveThreshold: void 0,
                    colorBelowThreshold: void 0,
                  },
                },
                area: { fillTo: "origin" },
                bar: {
                  horizontal: !1,
                  columnWidth: "70%",
                  barHeight: "70%",
                  distributed: !1,
                  borderRadius: 0,
                  borderRadiusApplication: "around",
                  borderRadiusWhenStacked: "last",
                  rangeBarOverlap: !0,
                  rangeBarGroupRows: !1,
                  hideZeroBarsWhenGrouped: !1,
                  isDumbbell: !1,
                  dumbbellColors: void 0,
                  isFunnel: !1,
                  isFunnel3d: !0,
                  colors: {
                    ranges: [],
                    backgroundBarColors: [],
                    backgroundBarOpacity: 1,
                    backgroundBarRadius: 0,
                  },
                  dataLabels: {
                    position: "top",
                    maxItems: 100,
                    hideOverflowingLabels: !0,
                    orientation: "horizontal",
                    total: {
                      enabled: !1,
                      formatter: void 0,
                      offsetX: 0,
                      offsetY: 0,
                      style: {
                        color: "#373d3f",
                        fontSize: "12px",
                        fontFamily: void 0,
                        fontWeight: 600,
                      },
                    },
                  },
                },
                bubble: {
                  zScaling: !0,
                  minBubbleRadius: void 0,
                  maxBubbleRadius: void 0,
                },
                candlestick: {
                  colors: { upward: "#00B746", downward: "#EF403C" },
                  wick: { useFillColor: !0 },
                },
                boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } },
                heatmap: {
                  radius: 2,
                  enableShades: !0,
                  shadeIntensity: 0.5,
                  reverseNegativeShade: !1,
                  distributed: !1,
                  useFillColorAsStroke: !1,
                  colorScale: {
                    inverse: !1,
                    ranges: [],
                    min: void 0,
                    max: void 0,
                  },
                },
                treemap: {
                  enableShades: !0,
                  shadeIntensity: 0.5,
                  distributed: !1,
                  reverseNegativeShade: !1,
                  useFillColorAsStroke: !1,
                  borderRadius: 4,
                  dataLabels: { format: "scale" },
                  colorScale: {
                    inverse: !1,
                    ranges: [],
                    min: void 0,
                    max: void 0,
                  },
                  seriesTitle: {
                    show: !0,
                    offsetY: 1,
                    offsetX: 1,
                    borderColor: "#000",
                    borderWidth: 1,
                    borderRadius: 2,
                    style: {
                      background: "rgba(0, 0, 0, 0.6)",
                      color: "#fff",
                      fontSize: "12px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      cssClass: "",
                      padding: { left: 6, right: 6, top: 2, bottom: 2 },
                    },
                  },
                },
                radialBar: {
                  inverseOrder: !1,
                  startAngle: 0,
                  endAngle: 360,
                  offsetX: 0,
                  offsetY: 0,
                  hollow: {
                    margin: 5,
                    size: "50%",
                    background: "transparent",
                    image: void 0,
                    imageWidth: 150,
                    imageHeight: 150,
                    imageOffsetX: 0,
                    imageOffsetY: 0,
                    imageClipped: !0,
                    position: "front",
                    dropShadow: {
                      enabled: !1,
                      top: 0,
                      left: 0,
                      blur: 3,
                      color: "#000",
                      opacity: 0.5,
                    },
                  },
                  track: {
                    show: !0,
                    startAngle: void 0,
                    endAngle: void 0,
                    background: "#f2f2f2",
                    strokeWidth: "97%",
                    opacity: 1,
                    margin: 5,
                    dropShadow: {
                      enabled: !1,
                      top: 0,
                      left: 0,
                      blur: 3,
                      color: "#000",
                      opacity: 0.5,
                    },
                  },
                  dataLabels: {
                    show: !0,
                    name: {
                      show: !0,
                      fontSize: "16px",
                      fontFamily: void 0,
                      fontWeight: 600,
                      color: void 0,
                      offsetY: 0,
                      formatter: function (e) {
                        return e;
                      },
                    },
                    value: {
                      show: !0,
                      fontSize: "14px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      color: void 0,
                      offsetY: 16,
                      formatter: function (e) {
                        return e + "%";
                      },
                    },
                    total: {
                      show: !1,
                      label: "Total",
                      fontSize: "16px",
                      fontWeight: 600,
                      fontFamily: void 0,
                      color: void 0,
                      formatter: function (e) {
                        return (
                          e.globals.seriesTotals.reduce(function (t, a) {
                            return t + a;
                          }, 0) /
                            e.globals.series.length +
                          "%"
                        );
                      },
                    },
                  },
                  barLabels: {
                    enabled: !1,
                    offsetX: 0,
                    offsetY: 0,
                    useSeriesColors: !0,
                    fontFamily: void 0,
                    fontWeight: 600,
                    fontSize: "16px",
                    formatter: function (e) {
                      return e;
                    },
                    onClick: void 0,
                  },
                },
                pie: {
                  customScale: 1,
                  offsetX: 0,
                  offsetY: 0,
                  startAngle: 0,
                  endAngle: 360,
                  expandOnClick: !0,
                  dataLabels: { offset: 0, minAngleToShowLabel: 10 },
                  donut: {
                    size: "65%",
                    background: "transparent",
                    labels: {
                      show: !1,
                      name: {
                        show: !0,
                        fontSize: "16px",
                        fontFamily: void 0,
                        fontWeight: 600,
                        color: void 0,
                        offsetY: -10,
                        formatter: function (e) {
                          return e;
                        },
                      },
                      value: {
                        show: !0,
                        fontSize: "20px",
                        fontFamily: void 0,
                        fontWeight: 400,
                        color: void 0,
                        offsetY: 10,
                        formatter: function (e) {
                          return e;
                        },
                      },
                      total: {
                        show: !1,
                        showAlways: !1,
                        label: "Total",
                        fontSize: "16px",
                        fontWeight: 400,
                        fontFamily: void 0,
                        color: void 0,
                        formatter: function (e) {
                          return e.globals.seriesTotals.reduce(function (t, a) {
                            return t + a;
                          }, 0);
                        },
                      },
                    },
                  },
                },
                polarArea: {
                  rings: { strokeWidth: 1, strokeColor: "#e8e8e8" },
                  spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" },
                },
                radar: {
                  size: void 0,
                  offsetX: 0,
                  offsetY: 0,
                  polygons: {
                    strokeWidth: 1,
                    strokeColors: "#e8e8e8",
                    connectorColors: "#e8e8e8",
                    fill: { colors: void 0 },
                  },
                },
              },
              colors: void 0,
              dataLabels: {
                enabled: !0,
                enabledOnSeries: void 0,
                formatter: function (e) {
                  return e !== null ? e : "";
                },
                textAnchor: "middle",
                distributed: !1,
                offsetX: 0,
                offsetY: 0,
                style: {
                  fontSize: "12px",
                  fontFamily: void 0,
                  fontWeight: 600,
                  colors: void 0,
                },
                background: {
                  enabled: !0,
                  foreColor: "#fff",
                  borderRadius: 2,
                  padding: 4,
                  opacity: 0.9,
                  borderWidth: 1,
                  borderColor: "#fff",
                  dropShadow: {
                    enabled: !1,
                    top: 1,
                    left: 1,
                    blur: 1,
                    color: "#000",
                    opacity: 0.8,
                  },
                },
                dropShadow: {
                  enabled: !1,
                  top: 1,
                  left: 1,
                  blur: 1,
                  color: "#000",
                  opacity: 0.8,
                },
              },
              fill: {
                type: "solid",
                colors: void 0,
                opacity: 0.85,
                gradient: {
                  shade: "dark",
                  type: "horizontal",
                  shadeIntensity: 0.5,
                  gradientToColors: void 0,
                  inverseColors: !0,
                  opacityFrom: 1,
                  opacityTo: 1,
                  stops: [0, 50, 100],
                  colorStops: [],
                },
                image: { src: [], width: void 0, height: void 0 },
                pattern: {
                  style: "squares",
                  width: 6,
                  height: 6,
                  strokeWidth: 2,
                },
              },
              forecastDataPoints: {
                count: 0,
                fillOpacity: 0.5,
                strokeWidth: void 0,
                dashArray: 4,
              },
              grid: {
                show: !0,
                borderColor: "#e0e0e0",
                strokeDashArray: 0,
                position: "back",
                xaxis: { lines: { show: !1 } },
                yaxis: { lines: { show: !0 } },
                row: { colors: void 0, opacity: 0.5 },
                column: { colors: void 0, opacity: 0.5 },
                padding: { top: 0, right: 10, bottom: 0, left: 12 },
              },
              labels: [],
              legend: {
                show: !0,
                showForSingleSeries: !1,
                showForNullSeries: !0,
                showForZeroSeries: !0,
                floating: !1,
                position: "bottom",
                horizontalAlign: "center",
                inverseOrder: !1,
                fontSize: "12px",
                fontFamily: void 0,
                fontWeight: 400,
                width: void 0,
                height: void 0,
                formatter: void 0,
                tooltipHoverFormatter: void 0,
                offsetX: -20,
                offsetY: 4,
                customLegendItems: [],
                clusterGroupedSeries: !0,
                clusterGroupedSeriesOrientation: "vertical",
                labels: { colors: void 0, useSeriesColors: !1 },
                markers: {
                  size: 7,
                  fillColors: void 0,
                  strokeWidth: 1,
                  shape: void 0,
                  offsetX: 0,
                  offsetY: 0,
                  customHTML: void 0,
                  onClick: void 0,
                },
                itemMargin: { horizontal: 5, vertical: 4 },
                onItemClick: { toggleDataSeries: !0 },
                onItemHover: { highlightDataSeries: !0 },
              },
              markers: {
                discrete: [],
                size: 0,
                colors: void 0,
                strokeColors: "#fff",
                strokeWidth: 2,
                strokeOpacity: 0.9,
                strokeDashArray: 0,
                fillOpacity: 1,
                shape: "circle",
                offsetX: 0,
                offsetY: 0,
                showNullDataPoints: !0,
                onClick: void 0,
                onDblClick: void 0,
                hover: { size: void 0, sizeOffset: 3 },
              },
              noData: {
                text: void 0,
                align: "center",
                verticalAlign: "middle",
                offsetX: 0,
                offsetY: 0,
                style: { color: void 0, fontSize: "14px", fontFamily: void 0 },
              },
              responsive: [],
              series: void 0,
              states: {
                hover: { filter: { type: "lighten" } },
                active: {
                  allowMultipleDataPointsSelection: !1,
                  filter: { type: "darken" },
                },
              },
              title: {
                text: void 0,
                align: "left",
                margin: 5,
                offsetX: 0,
                offsetY: 0,
                floating: !1,
                style: {
                  fontSize: "14px",
                  fontWeight: 900,
                  fontFamily: void 0,
                  color: void 0,
                },
              },
              subtitle: {
                text: void 0,
                align: "left",
                margin: 5,
                offsetX: 0,
                offsetY: 30,
                floating: !1,
                style: {
                  fontSize: "12px",
                  fontWeight: 400,
                  fontFamily: void 0,
                  color: void 0,
                },
              },
              stroke: {
                show: !0,
                curve: "smooth",
                lineCap: "butt",
                width: 2,
                colors: void 0,
                dashArray: 0,
                fill: {
                  type: "solid",
                  colors: void 0,
                  opacity: 0.85,
                  gradient: {
                    shade: "dark",
                    type: "horizontal",
                    shadeIntensity: 0.5,
                    gradientToColors: void 0,
                    inverseColors: !0,
                    opacityFrom: 1,
                    opacityTo: 1,
                    stops: [0, 50, 100],
                    colorStops: [],
                  },
                },
              },
              tooltip: {
                enabled: !0,
                enabledOnSeries: void 0,
                shared: !0,
                hideEmptySeries: !1,
                followCursor: !1,
                intersect: !1,
                inverseOrder: !1,
                custom: void 0,
                fillSeriesColor: !1,
                theme: "light",
                cssClass: "",
                style: { fontSize: "12px", fontFamily: void 0 },
                onDatasetHover: { highlightDataSeries: !1 },
                x: { show: !0, format: "dd MMM", formatter: void 0 },
                y: {
                  formatter: void 0,
                  title: {
                    formatter: function (e) {
                      return e ? e + ": " : "";
                    },
                  },
                },
                z: { formatter: void 0, title: "Size: " },
                marker: { show: !0, fillColors: void 0 },
                items: { display: "flex" },
                fixed: {
                  enabled: !1,
                  position: "topRight",
                  offsetX: 0,
                  offsetY: 0,
                },
              },
              xaxis: {
                type: "category",
                categories: [],
                convertedCatToNumeric: !1,
                offsetX: 0,
                offsetY: 0,
                overwriteCategories: void 0,
                labels: {
                  show: !0,
                  rotate: -45,
                  rotateAlways: !1,
                  hideOverlappingLabels: !0,
                  trim: !1,
                  minHeight: void 0,
                  maxHeight: 120,
                  showDuplicates: !0,
                  style: {
                    colors: [],
                    fontSize: "12px",
                    fontWeight: 400,
                    fontFamily: void 0,
                    cssClass: "",
                  },
                  offsetX: 0,
                  offsetY: 0,
                  format: void 0,
                  formatter: void 0,
                  datetimeUTC: !0,
                  datetimeFormatter: {
                    year: "yyyy",
                    month: "MMM 'yy",
                    day: "dd MMM",
                    hour: "HH:mm",
                    minute: "HH:mm:ss",
                    second: "HH:mm:ss",
                  },
                },
                group: {
                  groups: [],
                  style: {
                    colors: [],
                    fontSize: "12px",
                    fontWeight: 400,
                    fontFamily: void 0,
                    cssClass: "",
                  },
                },
                axisBorder: {
                  show: !0,
                  color: "#e0e0e0",
                  width: "100%",
                  height: 1,
                  offsetX: 0,
                  offsetY: 0,
                },
                axisTicks: {
                  show: !0,
                  color: "#e0e0e0",
                  height: 6,
                  offsetX: 0,
                  offsetY: 0,
                },
                stepSize: void 0,
                tickAmount: void 0,
                tickPlacement: "on",
                min: void 0,
                max: void 0,
                range: void 0,
                floating: !1,
                decimalsInFloat: void 0,
                position: "bottom",
                title: {
                  text: void 0,
                  offsetX: 0,
                  offsetY: 0,
                  style: {
                    color: void 0,
                    fontSize: "12px",
                    fontWeight: 900,
                    fontFamily: void 0,
                    cssClass: "",
                  },
                },
                crosshairs: {
                  show: !0,
                  width: 1,
                  position: "back",
                  opacity: 0.9,
                  stroke: { color: "#b6b6b6", width: 1, dashArray: 3 },
                  fill: {
                    type: "solid",
                    color: "#B1B9C4",
                    gradient: {
                      colorFrom: "#D8E3F0",
                      colorTo: "#BED1E6",
                      stops: [0, 100],
                      opacityFrom: 0.4,
                      opacityTo: 0.5,
                    },
                  },
                  dropShadow: {
                    enabled: !1,
                    left: 0,
                    top: 0,
                    blur: 1,
                    opacity: 0.8,
                  },
                },
                tooltip: {
                  enabled: !0,
                  offsetY: 0,
                  formatter: void 0,
                  style: { fontSize: "12px", fontFamily: void 0 },
                },
              },
              yaxis: this.yAxis,
              theme: {
                mode: "",
                palette: "palette1",
                monochrome: {
                  enabled: !1,
                  color: "#008FFB",
                  shadeTo: "light",
                  shadeIntensity: 0.65,
                },
              },
            };
          },
        },
      ]),
      r
    );
  })(),
  pm = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.graphics = new H(this.ctx)),
        this.w.globals.isBarHorizontal && (this.invertAxis = !0),
        (this.helpers = new Yi(this)),
        (this.xAxisAnnotations = new um(this)),
        (this.yAxisAnnotations = new fm(this)),
        (this.pointsAnnotations = new gm(this)),
        this.w.globals.isBarHorizontal &&
          this.w.config.yaxis[0].reversed &&
          (this.inversedReversedAxis = !0),
        (this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints);
    }
    return (
      $(r, [
        {
          key: "drawAxesAnnotations",
          value: function () {
            var e = this.w;
            if (e.globals.axisCharts && e.globals.dataPoints) {
              for (
                var t = this.yAxisAnnotations.drawYAxisAnnotations(),
                  a = this.xAxisAnnotations.drawXAxisAnnotations(),
                  i = this.pointsAnnotations.drawPointAnnotations(),
                  s = e.config.chart.animations.enabled,
                  n = [t, a, i],
                  o = [a.node, t.node, i.node],
                  l = 0;
                l < 3;
                l++
              )
                e.globals.dom.elGraphical.add(n[l]),
                  !s ||
                    e.globals.resized ||
                    e.globals.dataChanged ||
                    (e.config.chart.type !== "scatter" &&
                      e.config.chart.type !== "bubble" &&
                      e.globals.dataPoints > 1 &&
                      o[l].classList.add("apexcharts-element-hidden")),
                  e.globals.delayedElements.push({ el: o[l], index: 0 });
              this.helpers.annotationsBackground();
            }
          },
        },
        {
          key: "drawImageAnnos",
          value: function () {
            var e = this;
            this.w.config.annotations.images.map(function (t, a) {
              e.addImage(t, a);
            });
          },
        },
        {
          key: "drawTextAnnos",
          value: function () {
            var e = this;
            this.w.config.annotations.texts.map(function (t, a) {
              e.addText(t, a);
            });
          },
        },
        {
          key: "addXaxisAnnotation",
          value: function (e, t, a) {
            this.xAxisAnnotations.addXaxisAnnotation(e, t, a);
          },
        },
        {
          key: "addYaxisAnnotation",
          value: function (e, t, a) {
            this.yAxisAnnotations.addYaxisAnnotation(e, t, a);
          },
        },
        {
          key: "addPointAnnotation",
          value: function (e, t, a) {
            this.pointsAnnotations.addPointAnnotation(e, t, a);
          },
        },
        {
          key: "addText",
          value: function (e, t) {
            var a = e.x,
              i = e.y,
              s = e.text,
              n = e.textAnchor,
              o = e.foreColor,
              l = e.fontSize,
              c = e.fontFamily,
              h = e.fontWeight,
              d = e.cssClass,
              u = e.backgroundColor,
              f = e.borderWidth,
              g = e.strokeDashArray,
              p = e.borderRadius,
              m = e.borderColor,
              x = e.appendTo,
              v = x === void 0 ? ".apexcharts-svg" : x,
              b = e.paddingLeft,
              k = b === void 0 ? 4 : b,
              y = e.paddingRight,
              C = y === void 0 ? 4 : y,
              A = e.paddingBottom,
              S = A === void 0 ? 2 : A,
              T = e.paddingTop,
              E = T === void 0 ? 2 : T,
              L = this.w,
              I = this.graphics.drawText({
                x: a,
                y: i,
                text: s,
                textAnchor: n || "start",
                fontSize: l || "12px",
                fontWeight: h || "regular",
                fontFamily: c || L.config.chart.fontFamily,
                foreColor: o || L.config.chart.foreColor,
                cssClass: d,
              }),
              M = L.globals.dom.baseEl.querySelector(v);
            M && M.appendChild(I.node);
            var O = I.bbox();
            if (s) {
              var N = this.graphics.drawRect(
                O.x - k,
                O.y - E,
                O.width + k + C,
                O.height + S + E,
                p,
                u || "transparent",
                1,
                f,
                m,
                g
              );
              M.insertBefore(N.node, I.node);
            }
          },
        },
        {
          key: "addImage",
          value: function (e, t) {
            var a = this.w,
              i = e.path,
              s = e.x,
              n = s === void 0 ? 0 : s,
              o = e.y,
              l = o === void 0 ? 0 : o,
              c = e.width,
              h = c === void 0 ? 20 : c,
              d = e.height,
              u = d === void 0 ? 20 : d,
              f = e.appendTo,
              g = f === void 0 ? ".apexcharts-svg" : f,
              p = a.globals.dom.Paper.image(i);
            p.size(h, u).move(n, l);
            var m = a.globals.dom.baseEl.querySelector(g);
            return m && m.appendChild(p.node), p;
          },
        },
        {
          key: "addXaxisAnnotationExternal",
          value: function (e, t, a) {
            return (
              this.addAnnotationExternal({
                params: e,
                pushToMemory: t,
                context: a,
                type: "xaxis",
                contextMethod: a.addXaxisAnnotation,
              }),
              a
            );
          },
        },
        {
          key: "addYaxisAnnotationExternal",
          value: function (e, t, a) {
            return (
              this.addAnnotationExternal({
                params: e,
                pushToMemory: t,
                context: a,
                type: "yaxis",
                contextMethod: a.addYaxisAnnotation,
              }),
              a
            );
          },
        },
        {
          key: "addPointAnnotationExternal",
          value: function (e, t, a) {
            return (
              this.invertAxis === void 0 &&
                (this.invertAxis = a.w.globals.isBarHorizontal),
              this.addAnnotationExternal({
                params: e,
                pushToMemory: t,
                context: a,
                type: "point",
                contextMethod: a.addPointAnnotation,
              }),
              a
            );
          },
        },
        {
          key: "addAnnotationExternal",
          value: function (e) {
            var t = e.params,
              a = e.pushToMemory,
              i = e.context,
              s = e.type,
              n = e.contextMethod,
              o = i,
              l = o.w,
              c = l.globals.dom.baseEl.querySelector(
                ".apexcharts-".concat(s, "-annotations")
              ),
              h = c.childNodes.length + 1,
              d = new Rt(),
              u = Object.assign(
                {},
                s === "xaxis"
                  ? d.xAxisAnnotation
                  : s === "yaxis"
                  ? d.yAxisAnnotation
                  : d.pointAnnotation
              ),
              f = _.extend(u, t);
            switch (s) {
              case "xaxis":
                this.addXaxisAnnotation(f, c, h);
                break;
              case "yaxis":
                this.addYaxisAnnotation(f, c, h);
                break;
              case "point":
                this.addPointAnnotation(f, c, h);
            }
            var g = l.globals.dom.baseEl.querySelector(
                ".apexcharts-"
                  .concat(s, "-annotations .apexcharts-")
                  .concat(s, "-annotation-label[rel='")
                  .concat(h, "']")
              ),
              p = this.helpers.addBackgroundToAnno(g, f);
            return (
              p && c.insertBefore(p.node, g),
              a &&
                l.globals.memory.methodsToExec.push({
                  context: o,
                  id: f.id ? f.id : _.randomId(),
                  method: n,
                  label: "addAnnotation",
                  params: t,
                }),
              i
            );
          },
        },
        {
          key: "clearAnnotations",
          value: function (e) {
            for (
              var t = e.w,
                a = t.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations"
                ),
                i = t.globals.memory.methodsToExec.length - 1;
              i >= 0;
              i--
            )
              (t.globals.memory.methodsToExec[i].label !== "addText" &&
                t.globals.memory.methodsToExec[i].label !== "addAnnotation") ||
                t.globals.memory.methodsToExec.splice(i, 1);
            (a = _.listToArray(a)),
              Array.prototype.forEach.call(a, function (s) {
                for (; s.firstChild; ) s.removeChild(s.firstChild);
              });
          },
        },
        {
          key: "removeAnnotation",
          value: function (e, t) {
            var a = e.w,
              i = a.globals.dom.baseEl.querySelectorAll(".".concat(t));
            i &&
              (a.globals.memory.methodsToExec.map(function (s, n) {
                s.id === t && a.globals.memory.methodsToExec.splice(n, 1);
              }),
              Array.prototype.forEach.call(i, function (s) {
                s.parentElement.removeChild(s);
              }));
          },
        },
      ]),
      r
    );
  })(),
  xr = function (r) {
    var e,
      t = r.isTimeline,
      a = r.ctx,
      i = r.seriesIndex,
      s = r.dataPointIndex,
      n = r.y1,
      o = r.y2,
      l = r.w,
      c = l.globals.seriesRangeStart[i][s],
      h = l.globals.seriesRangeEnd[i][s],
      d = l.globals.labels[s],
      u = l.config.series[i].name ? l.config.series[i].name : "",
      f = l.globals.ttKeyFormatter,
      g = l.config.tooltip.y.title.formatter,
      p = { w: l, seriesIndex: i, dataPointIndex: s, start: c, end: h };
    typeof g == "function" && (u = g(u, p)),
      (e = l.config.series[i].data[s]) !== null &&
        e !== void 0 &&
        e.x &&
        (d = l.config.series[i].data[s].x),
      t ||
        (l.config.xaxis.type === "datetime" &&
          (d = new Ka(a).xLabelFormat(l.globals.ttKeyFormatter, d, d, {
            i: void 0,
            dateFormatter: new Me(a).formatDate,
            w: l,
          }))),
      typeof f == "function" && (d = f(d, p)),
      Number.isFinite(n) && Number.isFinite(o) && ((c = n), (h = o));
    var m = "",
      x = "",
      v = l.globals.colors[i];
    if (l.config.tooltip.x.formatter === void 0)
      if (l.config.xaxis.type === "datetime") {
        var b = new Me(a);
        (m = b.formatDate(b.getDate(c), l.config.tooltip.x.format)),
          (x = b.formatDate(b.getDate(h), l.config.tooltip.x.format));
      } else (m = c), (x = h);
    else
      (m = l.config.tooltip.x.formatter(c)),
        (x = l.config.tooltip.x.formatter(h));
    return {
      start: c,
      end: h,
      startVal: m,
      endVal: x,
      ylabel: d,
      color: v,
      seriesName: u,
    };
  },
  vr = function (r) {
    var e = r.color,
      t = r.seriesName,
      a = r.ylabel,
      i = r.start,
      s = r.end,
      n = r.seriesIndex,
      o = r.dataPointIndex,
      l = r.ctx.tooltip.tooltipLabels.getFormatters(n);
    (i = l.yLbFormatter(i)), (s = l.yLbFormatter(s));
    var c = l.yLbFormatter(r.w.globals.series[n][o]),
      h = `<span class="value start-value">
  `
        .concat(
          i,
          `
  </span> <span class="separator">-</span> <span class="value end-value">
  `
        )
        .concat(
          s,
          `
  </span>`
        );
    return (
      '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' +
      e +
      '">' +
      (t || "") +
      '</span></div><div> <span class="category">' +
      a +
      ": </span> " +
      (r.w.globals.comboCharts
        ? r.w.config.series[n].type === "rangeArea" ||
          r.w.config.series[n].type === "rangeBar"
          ? h
          : "<span>".concat(c, "</span>")
        : h) +
      " </div></div>"
    );
  },
  Na = (function () {
    function r(e) {
      U(this, r), (this.opts = e);
    }
    return (
      $(r, [
        {
          key: "hideYAxis",
          value: function () {
            (this.opts.yaxis[0].show = !1),
              (this.opts.yaxis[0].title.text = ""),
              (this.opts.yaxis[0].axisBorder.show = !1),
              (this.opts.yaxis[0].axisTicks.show = !1),
              (this.opts.yaxis[0].floating = !0);
          },
        },
        {
          key: "line",
          value: function () {
            return {
              dataLabels: { enabled: !1 },
              stroke: { width: 5, curve: "straight" },
              markers: { size: 0, hover: { sizeOffset: 6 } },
              xaxis: { crosshairs: { width: 1 } },
            };
          },
        },
        {
          key: "sparkline",
          value: function (e) {
            return (
              this.hideYAxis(),
              _.extend(e, {
                grid: {
                  show: !1,
                  padding: { left: 0, right: 0, top: 0, bottom: 0 },
                },
                legend: { show: !1 },
                xaxis: {
                  labels: { show: !1 },
                  tooltip: { enabled: !1 },
                  axisBorder: { show: !1 },
                  axisTicks: { show: !1 },
                },
                chart: { toolbar: { show: !1 }, zoom: { enabled: !1 } },
                dataLabels: { enabled: !1 },
              })
            );
          },
        },
        {
          key: "slope",
          value: function () {
            return (
              this.hideYAxis(),
              {
                chart: { toolbar: { show: !1 }, zoom: { enabled: !1 } },
                dataLabels: {
                  enabled: !0,
                  formatter: function (e, t) {
                    var a = t.w.config.series[t.seriesIndex].name;
                    return e !== null ? a + ": " + e : "";
                  },
                  background: { enabled: !1 },
                  offsetX: -5,
                },
                grid: {
                  xaxis: { lines: { show: !0 } },
                  yaxis: { lines: { show: !1 } },
                },
                xaxis: {
                  position: "top",
                  labels: { style: { fontSize: 14, fontWeight: 900 } },
                  tooltip: { enabled: !1 },
                  crosshairs: { show: !1 },
                },
                markers: { size: 8, hover: { sizeOffset: 1 } },
                legend: { show: !1 },
                tooltip: { shared: !1, intersect: !0, followCursor: !0 },
                stroke: { width: 5, curve: "straight" },
              }
            );
          },
        },
        {
          key: "bar",
          value: function () {
            return {
              chart: { stacked: !1 },
              plotOptions: { bar: { dataLabels: { position: "center" } } },
              dataLabels: {
                style: { colors: ["#fff"] },
                background: { enabled: !1 },
              },
              stroke: { width: 0, lineCap: "square" },
              fill: { opacity: 0.85 },
              legend: { markers: { shape: "square" } },
              tooltip: { shared: !1, intersect: !0 },
              xaxis: {
                tooltip: { enabled: !1 },
                tickPlacement: "between",
                crosshairs: {
                  width: "barWidth",
                  position: "back",
                  fill: { type: "gradient" },
                  dropShadow: { enabled: !1 },
                  stroke: { width: 0 },
                },
              },
            };
          },
        },
        {
          key: "funnel",
          value: function () {
            return (
              this.hideYAxis(),
              Y(
                Y({}, this.bar()),
                {},
                {
                  chart: {
                    animations: {
                      speed: 800,
                      animateGradually: { enabled: !1 },
                    },
                  },
                  plotOptions: {
                    bar: {
                      horizontal: !0,
                      borderRadiusApplication: "around",
                      borderRadius: 0,
                      dataLabels: { position: "center" },
                    },
                  },
                  grid: { show: !1, padding: { left: 0, right: 0 } },
                  xaxis: {
                    labels: { show: !1 },
                    tooltip: { enabled: !1 },
                    axisBorder: { show: !1 },
                    axisTicks: { show: !1 },
                  },
                }
              )
            );
          },
        },
        {
          key: "candlestick",
          value: function () {
            var e = this;
            return {
              stroke: { width: 1, colors: ["#333"] },
              fill: { opacity: 1 },
              dataLabels: { enabled: !1 },
              tooltip: {
                shared: !0,
                custom: function (t) {
                  var a = t.seriesIndex,
                    i = t.dataPointIndex,
                    s = t.w;
                  return e._getBoxTooltip(
                    s,
                    a,
                    i,
                    ["Open", "High", "", "Low", "Close"],
                    "candlestick"
                  );
                },
              },
              states: { active: { filter: { type: "none" } } },
              xaxis: { crosshairs: { width: 1 } },
            };
          },
        },
        {
          key: "boxPlot",
          value: function () {
            var e = this;
            return {
              chart: { animations: { dynamicAnimation: { enabled: !1 } } },
              stroke: { width: 1, colors: ["#24292e"] },
              dataLabels: { enabled: !1 },
              tooltip: {
                shared: !0,
                custom: function (t) {
                  var a = t.seriesIndex,
                    i = t.dataPointIndex,
                    s = t.w;
                  return e._getBoxTooltip(
                    s,
                    a,
                    i,
                    ["Minimum", "Q1", "Median", "Q3", "Maximum"],
                    "boxPlot"
                  );
                },
              },
              markers: { size: 7, strokeWidth: 1, strokeColors: "#111" },
              xaxis: { crosshairs: { width: 1 } },
            };
          },
        },
        {
          key: "rangeBar",
          value: function () {
            return {
              chart: { animations: { animateGradually: !1 } },
              stroke: { width: 0, lineCap: "square" },
              plotOptions: {
                bar: { borderRadius: 0, dataLabels: { position: "center" } },
              },
              dataLabels: {
                enabled: !1,
                formatter: function (e, t) {
                  t.ctx;
                  var a = t.seriesIndex,
                    i = t.dataPointIndex,
                    s = t.w,
                    n = function () {
                      var o = s.globals.seriesRangeStart[a][i];
                      return s.globals.seriesRangeEnd[a][i] - o;
                    };
                  return s.globals.comboCharts
                    ? s.config.series[a].type === "rangeBar" ||
                      s.config.series[a].type === "rangeArea"
                      ? n()
                      : e
                    : n();
                },
                background: { enabled: !1 },
                style: { colors: ["#fff"] },
              },
              markers: { size: 10 },
              tooltip: {
                shared: !1,
                followCursor: !0,
                custom: function (e) {
                  return e.w.config.plotOptions &&
                    e.w.config.plotOptions.bar &&
                    e.w.config.plotOptions.bar.horizontal
                    ? (function (t) {
                        var a = xr(Y(Y({}, t), {}, { isTimeline: !0 })),
                          i = a.color,
                          s = a.seriesName,
                          n = a.ylabel,
                          o = a.startVal,
                          l = a.endVal;
                        return vr(
                          Y(
                            Y({}, t),
                            {},
                            {
                              color: i,
                              seriesName: s,
                              ylabel: n,
                              start: o,
                              end: l,
                            }
                          )
                        );
                      })(e)
                    : (function (t) {
                        var a = xr(t),
                          i = a.color,
                          s = a.seriesName,
                          n = a.ylabel,
                          o = a.start,
                          l = a.end;
                        return vr(
                          Y(
                            Y({}, t),
                            {},
                            {
                              color: i,
                              seriesName: s,
                              ylabel: n,
                              start: o,
                              end: l,
                            }
                          )
                        );
                      })(e);
                },
              },
              xaxis: {
                tickPlacement: "between",
                tooltip: { enabled: !1 },
                crosshairs: { stroke: { width: 0 } },
              },
            };
          },
        },
        {
          key: "dumbbell",
          value: function (e) {
            var t, a;
            return (
              ((t = e.plotOptions.bar) !== null &&
                t !== void 0 &&
                t.barHeight) ||
                (e.plotOptions.bar.barHeight = 2),
              ((a = e.plotOptions.bar) !== null &&
                a !== void 0 &&
                a.columnWidth) ||
                (e.plotOptions.bar.columnWidth = 2),
              e
            );
          },
        },
        {
          key: "area",
          value: function () {
            return {
              stroke: {
                width: 4,
                fill: {
                  type: "solid",
                  gradient: {
                    inverseColors: !1,
                    shade: "light",
                    type: "vertical",
                    opacityFrom: 0.65,
                    opacityTo: 0.5,
                    stops: [0, 100, 100],
                  },
                },
              },
              fill: {
                type: "gradient",
                gradient: {
                  inverseColors: !1,
                  shade: "light",
                  type: "vertical",
                  opacityFrom: 0.65,
                  opacityTo: 0.5,
                  stops: [0, 100, 100],
                },
              },
              markers: { size: 0, hover: { sizeOffset: 6 } },
              tooltip: { followCursor: !1 },
            };
          },
        },
        {
          key: "rangeArea",
          value: function () {
            return {
              stroke: { curve: "straight", width: 0 },
              fill: { type: "solid", opacity: 0.6 },
              markers: { size: 0 },
              states: {
                hover: { filter: { type: "none" } },
                active: { filter: { type: "none" } },
              },
              tooltip: {
                intersect: !1,
                shared: !0,
                followCursor: !0,
                custom: function (e) {
                  return (function (t) {
                    var a = xr(t),
                      i = a.color,
                      s = a.seriesName,
                      n = a.ylabel,
                      o = a.start,
                      l = a.end;
                    return vr(
                      Y(
                        Y({}, t),
                        {},
                        { color: i, seriesName: s, ylabel: n, start: o, end: l }
                      )
                    );
                  })(e);
                },
              },
            };
          },
        },
        {
          key: "brush",
          value: function (e) {
            return _.extend(e, {
              chart: {
                toolbar: { autoSelected: "selection", show: !1 },
                zoom: { enabled: !1 },
              },
              dataLabels: { enabled: !1 },
              stroke: { width: 1 },
              tooltip: { enabled: !1 },
              xaxis: { tooltip: { enabled: !1 } },
            });
          },
        },
        {
          key: "stacked100",
          value: function (e) {
            (e.dataLabels = e.dataLabels || {}),
              (e.dataLabels.formatter = e.dataLabels.formatter || void 0);
            var t = e.dataLabels.formatter;
            return (
              e.yaxis.forEach(function (a, i) {
                (e.yaxis[i].min = 0), (e.yaxis[i].max = 100);
              }),
              e.chart.type === "bar" &&
                (e.dataLabels.formatter =
                  t ||
                  function (a) {
                    return typeof a == "number" && a ? a.toFixed(0) + "%" : a;
                  }),
              e
            );
          },
        },
        {
          key: "stackedBars",
          value: function () {
            var e = this.bar();
            return Y(
              Y({}, e),
              {},
              {
                plotOptions: Y(
                  Y({}, e.plotOptions),
                  {},
                  {
                    bar: Y(
                      Y({}, e.plotOptions.bar),
                      {},
                      {
                        borderRadiusApplication: "end",
                        borderRadiusWhenStacked: "last",
                      }
                    ),
                  }
                ),
              }
            );
          },
        },
        {
          key: "convertCatToNumeric",
          value: function (e) {
            return (e.xaxis.convertedCatToNumeric = !0), e;
          },
        },
        {
          key: "convertCatToNumericXaxis",
          value: function (e, t, a) {
            (e.xaxis.type = "numeric"),
              (e.xaxis.labels = e.xaxis.labels || {}),
              (e.xaxis.labels.formatter =
                e.xaxis.labels.formatter ||
                function (n) {
                  return _.isNumber(n) ? Math.floor(n) : n;
                });
            var i = e.xaxis.labels.formatter,
              s =
                e.xaxis.categories && e.xaxis.categories.length
                  ? e.xaxis.categories
                  : e.labels;
            return (
              a &&
                a.length &&
                (s = a.map(function (n) {
                  return Array.isArray(n) ? n : String(n);
                })),
              s &&
                s.length &&
                (e.xaxis.labels.formatter = function (n) {
                  return _.isNumber(n) ? i(s[Math.floor(n) - 1]) : i(n);
                }),
              (e.xaxis.categories = []),
              (e.labels = []),
              (e.xaxis.tickAmount = e.xaxis.tickAmount || "dataPoints"),
              e
            );
          },
        },
        {
          key: "bubble",
          value: function () {
            return {
              dataLabels: { style: { colors: ["#fff"] } },
              tooltip: { shared: !1, intersect: !0 },
              xaxis: { crosshairs: { width: 0 } },
              fill: {
                type: "solid",
                gradient: {
                  shade: "light",
                  inverse: !0,
                  shadeIntensity: 0.55,
                  opacityFrom: 0.4,
                  opacityTo: 0.8,
                },
              },
            };
          },
        },
        {
          key: "scatter",
          value: function () {
            return {
              dataLabels: { enabled: !1 },
              tooltip: { shared: !1, intersect: !0 },
              markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } },
            };
          },
        },
        {
          key: "heatmap",
          value: function () {
            return {
              chart: { stacked: !1 },
              fill: { opacity: 1 },
              dataLabels: { style: { colors: ["#fff"] } },
              stroke: { colors: ["#fff"] },
              tooltip: {
                followCursor: !0,
                marker: { show: !1 },
                x: { show: !1 },
              },
              legend: { position: "top", markers: { shape: "square" } },
              grid: { padding: { right: 20 } },
            };
          },
        },
        {
          key: "treemap",
          value: function () {
            return {
              chart: { zoom: { enabled: !1 } },
              dataLabels: {
                style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] },
              },
              stroke: { show: !0, width: 2, colors: ["#fff"] },
              legend: { show: !1 },
              fill: { opacity: 1, gradient: { stops: [0, 100] } },
              tooltip: { followCursor: !0, x: { show: !1 } },
              grid: { padding: { left: 0, right: 0 } },
              xaxis: { crosshairs: { show: !1 }, tooltip: { enabled: !1 } },
            };
          },
        },
        {
          key: "pie",
          value: function () {
            return {
              chart: { toolbar: { show: !1 } },
              plotOptions: { pie: { donut: { labels: { show: !1 } } } },
              dataLabels: {
                formatter: function (e) {
                  return e.toFixed(1) + "%";
                },
                style: { colors: ["#fff"] },
                background: { enabled: !1 },
                dropShadow: { enabled: !0 },
              },
              stroke: { colors: ["#fff"] },
              fill: {
                opacity: 1,
                gradient: { shade: "light", stops: [0, 100] },
              },
              tooltip: { theme: "dark", fillSeriesColor: !0 },
              legend: { position: "right" },
              grid: { padding: { left: 0, right: 0, top: 0, bottom: 0 } },
            };
          },
        },
        {
          key: "donut",
          value: function () {
            return {
              chart: { toolbar: { show: !1 } },
              dataLabels: {
                formatter: function (e) {
                  return e.toFixed(1) + "%";
                },
                style: { colors: ["#fff"] },
                background: { enabled: !1 },
                dropShadow: { enabled: !0 },
              },
              stroke: { colors: ["#fff"] },
              fill: {
                opacity: 1,
                gradient: {
                  shade: "light",
                  shadeIntensity: 0.35,
                  stops: [80, 100],
                  opacityFrom: 1,
                  opacityTo: 1,
                },
              },
              tooltip: { theme: "dark", fillSeriesColor: !0 },
              legend: { position: "right" },
              grid: { padding: { left: 0, right: 0, top: 0, bottom: 0 } },
            };
          },
        },
        {
          key: "polarArea",
          value: function () {
            return {
              chart: { toolbar: { show: !1 } },
              dataLabels: {
                formatter: function (e) {
                  return e.toFixed(1) + "%";
                },
                enabled: !1,
              },
              stroke: { show: !0, width: 2 },
              fill: { opacity: 0.7 },
              tooltip: { theme: "dark", fillSeriesColor: !0 },
              legend: { position: "right" },
              grid: { padding: { left: 0, right: 0, top: 0, bottom: 0 } },
            };
          },
        },
        {
          key: "radar",
          value: function () {
            return (
              (this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels
                .offsetY
                ? this.opts.yaxis[0].labels.offsetY
                : 6),
              {
                dataLabels: { enabled: !1, style: { fontSize: "11px" } },
                stroke: { width: 2 },
                markers: { size: 5, strokeWidth: 1, strokeOpacity: 1 },
                fill: { opacity: 0.2 },
                tooltip: { shared: !1, intersect: !0, followCursor: !0 },
                grid: {
                  show: !1,
                  padding: { left: 0, right: 0, top: 0, bottom: 0 },
                },
                xaxis: {
                  labels: {
                    formatter: function (e) {
                      return e;
                    },
                    style: { colors: ["#a8a8a8"], fontSize: "11px" },
                  },
                  tooltip: { enabled: !1 },
                  crosshairs: { show: !1 },
                },
              }
            );
          },
        },
        {
          key: "radialBar",
          value: function () {
            return {
              chart: {
                animations: { dynamicAnimation: { enabled: !0, speed: 800 } },
                toolbar: { show: !1 },
              },
              fill: {
                gradient: {
                  shade: "dark",
                  shadeIntensity: 0.4,
                  inverseColors: !1,
                  type: "diagonal2",
                  opacityFrom: 1,
                  opacityTo: 1,
                  stops: [70, 98, 100],
                },
              },
              legend: { show: !1, position: "right" },
              tooltip: { enabled: !1, fillSeriesColor: !0 },
              grid: { padding: { left: 0, right: 0, top: 0, bottom: 0 } },
            };
          },
        },
        {
          key: "_getBoxTooltip",
          value: function (e, t, a, i, s) {
            var n = e.globals.seriesCandleO[t][a],
              o = e.globals.seriesCandleH[t][a],
              l = e.globals.seriesCandleM[t][a],
              c = e.globals.seriesCandleL[t][a],
              h = e.globals.seriesCandleC[t][a];
            return e.config.series[t].type && e.config.series[t].type !== s
              ? `<div class="apexcharts-custom-tooltip">
          `
                  .concat(
                    e.config.series[t].name
                      ? e.config.series[t].name
                      : "series-" + (t + 1),
                    ": <strong>"
                  )
                  .concat(
                    e.globals.series[t][a],
                    `</strong>
        </div>`
                  )
              : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(
                  e.config.chart.type,
                  '">'
                ) +
                  "<div>".concat(i[0], ': <span class="value">') +
                  n +
                  "</span></div>" +
                  "<div>".concat(i[1], ': <span class="value">') +
                  o +
                  "</span></div>" +
                  (l
                    ? "<div>".concat(i[2], ': <span class="value">') +
                      l +
                      "</span></div>"
                    : "") +
                  "<div>".concat(i[3], ': <span class="value">') +
                  c +
                  "</span></div>" +
                  "<div>".concat(i[4], ': <span class="value">') +
                  h +
                  "</span></div></div>";
          },
        },
      ]),
      r
    );
  })(),
  ja = (function () {
    function r(e) {
      U(this, r), (this.opts = e);
    }
    return (
      $(r, [
        {
          key: "init",
          value: function (e) {
            var t = e.responsiveOverride,
              a = this.opts,
              i = new Rt(),
              s = new Na(a);
            (this.chartType = a.chart.type),
              (a = this.extendYAxis(a)),
              (a = this.extendAnnotations(a));
            var n = i.init(),
              o = {};
            if (a && aa(a) === "object") {
              var l,
                c,
                h,
                d,
                u,
                f,
                g,
                p,
                m,
                x,
                v = {};
              (v =
                [
                  "line",
                  "area",
                  "bar",
                  "candlestick",
                  "boxPlot",
                  "rangeBar",
                  "rangeArea",
                  "bubble",
                  "scatter",
                  "heatmap",
                  "treemap",
                  "pie",
                  "polarArea",
                  "donut",
                  "radar",
                  "radialBar",
                ].indexOf(a.chart.type) !== -1
                  ? s[a.chart.type]()
                  : s.line()),
                (l = a.plotOptions) !== null &&
                  l !== void 0 &&
                  (c = l.bar) !== null &&
                  c !== void 0 &&
                  c.isFunnel &&
                  (v = s.funnel()),
                a.chart.stacked &&
                  a.chart.type === "bar" &&
                  (v = s.stackedBars()),
                (h = a.chart.brush) !== null &&
                  h !== void 0 &&
                  h.enabled &&
                  (v = s.brush(v)),
                (d = a.plotOptions) !== null &&
                  d !== void 0 &&
                  (u = d.line) !== null &&
                  u !== void 0 &&
                  u.isSlopeChart &&
                  (v = s.slope()),
                a.chart.stacked &&
                  a.chart.stackType === "100%" &&
                  (a = s.stacked100(a)),
                (f = a.plotOptions) !== null &&
                  f !== void 0 &&
                  (g = f.bar) !== null &&
                  g !== void 0 &&
                  g.isDumbbell &&
                  (a = s.dumbbell(a)),
                this.checkForDarkTheme(window.Apex),
                this.checkForDarkTheme(a),
                (a.xaxis = a.xaxis || window.Apex.xaxis || {}),
                t || (a.xaxis.convertedCatToNumeric = !1),
                (((p = (a = this.checkForCatToNumericXAxis(
                  this.chartType,
                  v,
                  a
                )).chart.sparkline) !== null &&
                  p !== void 0 &&
                  p.enabled) ||
                  ((m = window.Apex.chart) !== null &&
                    m !== void 0 &&
                    (x = m.sparkline) !== null &&
                    x !== void 0 &&
                    x.enabled)) &&
                  (v = s.sparkline(v)),
                (o = _.extend(n, v));
            }
            var b = _.extend(o, window.Apex);
            return (n = _.extend(b, a)), (n = this.handleUserInputErrors(n));
          },
        },
        {
          key: "checkForCatToNumericXAxis",
          value: function (e, t, a) {
            var i,
              s,
              n = new Na(a),
              o =
                (e === "bar" || e === "boxPlot") &&
                ((i = a.plotOptions) === null ||
                i === void 0 ||
                (s = i.bar) === null ||
                s === void 0
                  ? void 0
                  : s.horizontal),
              l =
                e === "pie" ||
                e === "polarArea" ||
                e === "donut" ||
                e === "radar" ||
                e === "radialBar" ||
                e === "heatmap",
              c = a.xaxis.type !== "datetime" && a.xaxis.type !== "numeric",
              h = a.xaxis.tickPlacement
                ? a.xaxis.tickPlacement
                : t.xaxis && t.xaxis.tickPlacement;
            return (
              o || l || !c || h === "between" || (a = n.convertCatToNumeric(a)),
              a
            );
          },
        },
        {
          key: "extendYAxis",
          value: function (e, t) {
            var a = new Rt();
            (e.yaxis === void 0 ||
              !e.yaxis ||
              (Array.isArray(e.yaxis) && e.yaxis.length === 0)) &&
              (e.yaxis = {}),
              e.yaxis.constructor !== Array &&
                window.Apex.yaxis &&
                window.Apex.yaxis.constructor !== Array &&
                (e.yaxis = _.extend(e.yaxis, window.Apex.yaxis)),
              e.yaxis.constructor !== Array
                ? (e.yaxis = [_.extend(a.yAxis, e.yaxis)])
                : (e.yaxis = _.extendArray(e.yaxis, a.yAxis));
            var i = !1;
            e.yaxis.forEach(function (n) {
              n.logarithmic && (i = !0);
            });
            var s = e.series;
            return (
              t && !s && (s = t.config.series),
              i &&
                s.length !== e.yaxis.length &&
                s.length &&
                (e.yaxis = s.map(function (n, o) {
                  if (
                    (n.name || (s[o].name = "series-".concat(o + 1)),
                    e.yaxis[o])
                  )
                    return (e.yaxis[o].seriesName = s[o].name), e.yaxis[o];
                  var l = _.extend(a.yAxis, e.yaxis[0]);
                  return (l.show = !1), l;
                })),
              i &&
                s.length > 1 &&
                s.length !== e.yaxis.length &&
                console.warn(
                  "A multi-series logarithmic chart should have equal number of series and y-axes"
                ),
              e
            );
          },
        },
        {
          key: "extendAnnotations",
          value: function (e) {
            return (
              e.annotations === void 0 &&
                ((e.annotations = {}),
                (e.annotations.yaxis = []),
                (e.annotations.xaxis = []),
                (e.annotations.points = [])),
              (e = this.extendYAxisAnnotations(e)),
              (e = this.extendXAxisAnnotations(e)),
              (e = this.extendPointAnnotations(e))
            );
          },
        },
        {
          key: "extendYAxisAnnotations",
          value: function (e) {
            var t = new Rt();
            return (
              (e.annotations.yaxis = _.extendArray(
                e.annotations.yaxis !== void 0 ? e.annotations.yaxis : [],
                t.yAxisAnnotation
              )),
              e
            );
          },
        },
        {
          key: "extendXAxisAnnotations",
          value: function (e) {
            var t = new Rt();
            return (
              (e.annotations.xaxis = _.extendArray(
                e.annotations.xaxis !== void 0 ? e.annotations.xaxis : [],
                t.xAxisAnnotation
              )),
              e
            );
          },
        },
        {
          key: "extendPointAnnotations",
          value: function (e) {
            var t = new Rt();
            return (
              (e.annotations.points = _.extendArray(
                e.annotations.points !== void 0 ? e.annotations.points : [],
                t.pointAnnotation
              )),
              e
            );
          },
        },
        {
          key: "checkForDarkTheme",
          value: function (e) {
            e.theme &&
              e.theme.mode === "dark" &&
              (e.tooltip || (e.tooltip = {}),
              e.tooltip.theme !== "light" && (e.tooltip.theme = "dark"),
              e.chart.foreColor || (e.chart.foreColor = "#f6f7f8"),
              e.theme.palette || (e.theme.palette = "palette4"));
          },
        },
        {
          key: "handleUserInputErrors",
          value: function (e) {
            var t = e;
            if (t.tooltip.shared && t.tooltip.intersect)
              throw new Error(
                "tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false."
              );
            if (t.chart.type === "bar" && t.plotOptions.bar.horizontal) {
              if (t.yaxis.length > 1)
                throw new Error(
                  "Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false"
                );
              t.yaxis[0].reversed && (t.yaxis[0].opposite = !0),
                (t.xaxis.tooltip.enabled = !1),
                (t.yaxis[0].tooltip.enabled = !1),
                (t.chart.zoom.enabled = !1);
            }
            return (
              (t.chart.type !== "bar" && t.chart.type !== "rangeBar") ||
                (t.tooltip.shared &&
                  t.xaxis.crosshairs.width === "barWidth" &&
                  t.series.length > 1 &&
                  (t.xaxis.crosshairs.width = "tickWidth")),
              (t.chart.type !== "candlestick" && t.chart.type !== "boxPlot") ||
                (t.yaxis[0].reversed &&
                  (console.warn(
                    "Reversed y-axis in ".concat(
                      t.chart.type,
                      " chart is not supported."
                    )
                  ),
                  (t.yaxis[0].reversed = !1))),
              t
            );
          },
        },
      ]),
      r
    );
  })(),
  Hc = (function () {
    function r() {
      U(this, r);
    }
    return (
      $(r, [
        {
          key: "initGlobalVars",
          value: function (e) {
            (e.series = []),
              (e.seriesCandleO = []),
              (e.seriesCandleH = []),
              (e.seriesCandleM = []),
              (e.seriesCandleL = []),
              (e.seriesCandleC = []),
              (e.seriesRangeStart = []),
              (e.seriesRangeEnd = []),
              (e.seriesRange = []),
              (e.seriesPercent = []),
              (e.seriesGoals = []),
              (e.seriesX = []),
              (e.seriesZ = []),
              (e.seriesNames = []),
              (e.seriesTotals = []),
              (e.seriesLog = []),
              (e.seriesColors = []),
              (e.stackedSeriesTotals = []),
              (e.seriesXvalues = []),
              (e.seriesYvalues = []),
              (e.labels = []),
              (e.hasXaxisGroups = !1),
              (e.groups = []),
              (e.barGroups = []),
              (e.lineGroups = []),
              (e.areaGroups = []),
              (e.hasSeriesGroups = !1),
              (e.seriesGroups = []),
              (e.categoryLabels = []),
              (e.timescaleLabels = []),
              (e.noLabelsProvided = !1),
              (e.resizeTimer = null),
              (e.selectionResizeTimer = null),
              (e.lastWheelExecution = 0),
              (e.delayedElements = []),
              (e.pointsArray = []),
              (e.dataLabelsRects = []),
              (e.isXNumeric = !1),
              (e.skipLastTimelinelabel = !1),
              (e.skipFirstTimelinelabel = !1),
              (e.isDataXYZ = !1),
              (e.isMultiLineX = !1),
              (e.isMultipleYAxis = !1),
              (e.maxY = -Number.MAX_VALUE),
              (e.minY = Number.MIN_VALUE),
              (e.minYArr = []),
              (e.maxYArr = []),
              (e.maxX = -Number.MAX_VALUE),
              (e.minX = Number.MAX_VALUE),
              (e.initialMaxX = -Number.MAX_VALUE),
              (e.initialMinX = Number.MAX_VALUE),
              (e.maxDate = 0),
              (e.minDate = Number.MAX_VALUE),
              (e.minZ = Number.MAX_VALUE),
              (e.maxZ = -Number.MAX_VALUE),
              (e.minXDiff = Number.MAX_VALUE),
              (e.yAxisScale = []),
              (e.xAxisScale = null),
              (e.xAxisTicksPositions = []),
              (e.yLabelsCoords = []),
              (e.yTitleCoords = []),
              (e.barPadForNumericAxis = 0),
              (e.padHorizontal = 0),
              (e.xRange = 0),
              (e.yRange = []),
              (e.zRange = 0),
              (e.dataPoints = 0),
              (e.xTickAmount = 0),
              (e.multiAxisTickAmount = 0);
          },
        },
        {
          key: "globalVars",
          value: function (e) {
            return {
              chartID: null,
              cuid: null,
              events: {
                beforeMount: [],
                mounted: [],
                updated: [],
                clicked: [],
                selection: [],
                dataPointSelection: [],
                zoomed: [],
                scrolled: [],
              },
              colors: [],
              clientX: null,
              clientY: null,
              fill: { colors: [] },
              stroke: { colors: [] },
              dataLabels: { style: { colors: [] } },
              radarPolygons: { fill: { colors: [] } },
              markers: { colors: [], size: e.markers.size, largestSize: 0 },
              animationEnded: !1,
              isTouchDevice:
                "ontouchstart" in window || navigator.msMaxTouchPoints,
              isDirty: !1,
              isExecCalled: !1,
              initialConfig: null,
              initialSeries: [],
              lastXAxis: [],
              lastYAxis: [],
              columnSeries: null,
              labels: [],
              timescaleLabels: [],
              noLabelsProvided: !1,
              allSeriesCollapsed: !1,
              collapsedSeries: [],
              collapsedSeriesIndices: [],
              ancillaryCollapsedSeries: [],
              ancillaryCollapsedSeriesIndices: [],
              risingSeries: [],
              dataFormatXNumeric: !1,
              capturedSeriesIndex: -1,
              capturedDataPointIndex: -1,
              selectedDataPoints: [],
              invalidLogScale: !1,
              ignoreYAxisIndexes: [],
              maxValsInArrayIndex: 0,
              radialSize: 0,
              selection: void 0,
              zoomEnabled:
                e.chart.toolbar.autoSelected === "zoom" &&
                e.chart.toolbar.tools.zoom &&
                e.chart.zoom.enabled,
              panEnabled:
                e.chart.toolbar.autoSelected === "pan" &&
                e.chart.toolbar.tools.pan,
              selectionEnabled:
                e.chart.toolbar.autoSelected === "selection" &&
                e.chart.toolbar.tools.selection,
              yaxis: null,
              mousedown: !1,
              lastClientPosition: {},
              visibleXRange: void 0,
              yValueDecimal: 0,
              total: 0,
              SVGNS: "http://www.w3.org/2000/svg",
              svgWidth: 0,
              svgHeight: 0,
              noData: !1,
              locale: {},
              dom: {},
              memory: { methodsToExec: [] },
              shouldAnimate: !0,
              skipLastTimelinelabel: !1,
              skipFirstTimelinelabel: !1,
              delayedElements: [],
              axisCharts: !0,
              isDataXYZ: !1,
              isSlopeChart: e.plotOptions.line.isSlopeChart,
              resized: !1,
              resizeTimer: null,
              comboCharts: !1,
              dataChanged: !1,
              previousPaths: [],
              allSeriesHasEqualX: !0,
              pointsArray: [],
              dataLabelsRects: [],
              lastDrawnDataLabelsIndexes: [],
              hasNullValues: !1,
              zoomed: !1,
              gridWidth: 0,
              gridHeight: 0,
              rotateXLabels: !1,
              defaultLabels: !1,
              xLabelFormatter: void 0,
              yLabelFormatters: [],
              xaxisTooltipFormatter: void 0,
              ttKeyFormatter: void 0,
              ttVal: void 0,
              ttZFormatter: void 0,
              LINE_HEIGHT_RATIO: 1.618,
              xAxisLabelsHeight: 0,
              xAxisGroupLabelsHeight: 0,
              xAxisLabelsWidth: 0,
              yAxisLabelsWidth: 0,
              scaleX: 1,
              scaleY: 1,
              translateX: 0,
              translateY: 0,
              translateYAxisX: [],
              yAxisWidths: [],
              translateXAxisY: 0,
              translateXAxisX: 0,
              tooltip: null,
              niceScaleAllowedMagMsd: [
                [1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10],
                [1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10],
              ],
              niceScaleDefaultTicks: [
                1, 2, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12,
                12, 12, 12, 12, 12, 12, 12, 24,
              ],
              seriesYAxisMap: [],
              seriesYAxisReverseMap: [],
            };
          },
        },
        {
          key: "init",
          value: function (e) {
            var t = this.globalVars(e);
            return (
              this.initGlobalVars(t),
              (t.initialConfig = _.extend({}, e)),
              (t.initialSeries = _.clone(e.series)),
              (t.lastXAxis = _.clone(t.initialConfig.xaxis)),
              (t.lastYAxis = _.clone(t.initialConfig.yaxis)),
              t
            );
          },
        },
      ]),
      r
    );
  })(),
  mm = (function () {
    function r(e) {
      U(this, r), (this.opts = e);
    }
    return (
      $(r, [
        {
          key: "init",
          value: function () {
            var e = new ja(this.opts).init({ responsiveOverride: !1 });
            return { config: e, globals: new Hc().init(e) };
          },
        },
      ]),
      r
    );
  })(),
  tt = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.opts = null),
        (this.seriesIndex = 0),
        (this.patternIDs = []);
    }
    return (
      $(r, [
        {
          key: "clippedImgArea",
          value: function (e) {
            var t = this.w,
              a = t.config,
              i = parseInt(t.globals.gridWidth, 10),
              s = parseInt(t.globals.gridHeight, 10),
              n = i > s ? i : s,
              o = e.image,
              l = 0,
              c = 0;
            e.width === void 0 && e.height === void 0
              ? a.fill.image.width !== void 0 && a.fill.image.height !== void 0
                ? ((l = a.fill.image.width + 1), (c = a.fill.image.height))
                : ((l = n + 1), (c = n))
              : ((l = e.width), (c = e.height));
            var h = document.createElementNS(t.globals.SVGNS, "pattern");
            H.setAttrs(h, {
              id: e.patternID,
              patternUnits: e.patternUnits ? e.patternUnits : "userSpaceOnUse",
              width: l + "px",
              height: c + "px",
            });
            var d = document.createElementNS(t.globals.SVGNS, "image");
            h.appendChild(d),
              d.setAttributeNS(window.SVG.xlink, "href", o),
              H.setAttrs(d, {
                x: 0,
                y: 0,
                preserveAspectRatio: "none",
                width: l + "px",
                height: c + "px",
              }),
              (d.style.opacity = e.opacity),
              t.globals.dom.elDefs.node.appendChild(h);
          },
        },
        {
          key: "getSeriesIndex",
          value: function (e) {
            var t = this.w,
              a = t.config.chart.type;
            return (
              ((a === "bar" || a === "rangeBar") &&
                t.config.plotOptions.bar.distributed) ||
              a === "heatmap" ||
              a === "treemap"
                ? (this.seriesIndex = e.seriesNumber)
                : (this.seriesIndex = e.seriesNumber % t.globals.series.length),
              this.seriesIndex
            );
          },
        },
        {
          key: "computeColorStops",
          value: function (e, t) {
            var a,
              i = this.w,
              s = null,
              n = null,
              o = xa(e);
            try {
              for (o.s(); !(a = o.n()).done; ) {
                var l = a.value;
                l >= t.threshold
                  ? (s === null || l > s) && (s = l)
                  : (n === null || l < n) && (n = l);
              }
            } catch (d) {
              o.e(d);
            } finally {
              o.f();
            }
            s === null && (s = t.threshold), n === null && (n = t.threshold);
            var c = s - t.threshold + (t.threshold - n);
            c === 0 && (c = 1);
            var h = 100 - ((t.threshold - n) / c) * 100;
            return [
              {
                offset: (h = Math.max(0, Math.min(h, 100))),
                color: t.colorAboveThreshold,
                opacity: i.config.fill.opacity,
              },
              {
                offset: 0,
                color: t.colorBelowThreshold,
                opacity: i.config.fill.opacity,
              },
            ];
          },
        },
        {
          key: "fillPath",
          value: function (e) {
            var t,
              a,
              i,
              s = this.w;
            this.opts = e;
            var n,
              o,
              l,
              c = this.w.config;
            this.seriesIndex = this.getSeriesIndex(e);
            var h =
                c.plotOptions.line.colors.colorAboveThreshold &&
                c.plotOptions.line.colors.colorBelowThreshold,
              d = this.getFillColors()[this.seriesIndex];
            s.globals.seriesColors[this.seriesIndex] !== void 0 &&
              (d = s.globals.seriesColors[this.seriesIndex]),
              typeof d == "function" &&
                (d = d({
                  seriesIndex: this.seriesIndex,
                  dataPointIndex: e.dataPointIndex,
                  value: e.value,
                  w: s,
                }));
            var u,
              f,
              g,
              p = e.fillType ? e.fillType : this.getFillType(this.seriesIndex),
              m = Array.isArray(c.fill.opacity)
                ? c.fill.opacity[this.seriesIndex]
                : c.fill.opacity,
              x = p === "gradient" || h;
            e.color && (d = e.color),
              (t = s.config.series[this.seriesIndex]) !== null &&
                t !== void 0 &&
                (a = t.data) !== null &&
                a !== void 0 &&
                (i = a[e.dataPointIndex]) !== null &&
                i !== void 0 &&
                i.fillColor &&
                (d =
                  (u = s.config.series[this.seriesIndex]) === null ||
                  u === void 0 ||
                  (f = u.data) === null ||
                  f === void 0 ||
                  (g = f[e.dataPointIndex]) === null ||
                  g === void 0
                    ? void 0
                    : g.fillColor),
              d || ((d = "#fff"), console.warn("undefined color - ApexCharts"));
            var v = d;
            if (
              (d.indexOf("rgb") === -1
                ? d.indexOf("#") === -1
                  ? (v = d)
                  : d.length < 9 && (v = _.hexToRgba(d, m))
                : d.indexOf("rgba") > -1
                ? (m = _.getOpacityFromRGBA(d))
                : (v = _.hexToRgba(_.rgb2hex(d), m)),
              e.opacity && (m = e.opacity),
              p === "pattern" &&
                (o = this.handlePatternFill({
                  fillConfig: e.fillConfig,
                  patternFill: o,
                  fillColor: d,
                  fillOpacity: m,
                  defaultColor: v,
                })),
              x)
            ) {
              var b = Pe(c.fill.gradient.colorStops) || [],
                k = c.fill.gradient.type;
              h &&
                ((b[this.seriesIndex] = this.computeColorStops(
                  s.globals.series[this.seriesIndex],
                  c.plotOptions.line.colors
                )),
                (k = "vertical")),
                (l = this.handleGradientFill({
                  type: k,
                  fillConfig: e.fillConfig,
                  fillColor: d,
                  fillOpacity: m,
                  colorStops: b,
                  i: this.seriesIndex,
                }));
            }
            if (p === "image") {
              var y = c.fill.image.src,
                C = e.patternID ? e.patternID : "",
                A = "pattern"
                  .concat(s.globals.cuid)
                  .concat(e.seriesNumber + 1)
                  .concat(C);
              this.patternIDs.indexOf(A) === -1 &&
                (this.clippedImgArea({
                  opacity: m,
                  image: Array.isArray(y)
                    ? e.seriesNumber < y.length
                      ? y[e.seriesNumber]
                      : y[0]
                    : y,
                  width: e.width ? e.width : void 0,
                  height: e.height ? e.height : void 0,
                  patternUnits: e.patternUnits,
                  patternID: A,
                }),
                this.patternIDs.push(A)),
                (n = "url(#".concat(A, ")"));
            } else n = x ? l : p === "pattern" ? o : v;
            return e.solid && (n = v), n;
          },
        },
        {
          key: "getFillType",
          value: function (e) {
            var t = this.w;
            return Array.isArray(t.config.fill.type)
              ? t.config.fill.type[e]
              : t.config.fill.type;
          },
        },
        {
          key: "getFillColors",
          value: function () {
            var e = this.w,
              t = e.config,
              a = this.opts,
              i = [];
            return (
              e.globals.comboCharts
                ? e.config.series[this.seriesIndex].type === "line"
                  ? Array.isArray(e.globals.stroke.colors)
                    ? (i = e.globals.stroke.colors)
                    : i.push(e.globals.stroke.colors)
                  : Array.isArray(e.globals.fill.colors)
                  ? (i = e.globals.fill.colors)
                  : i.push(e.globals.fill.colors)
                : t.chart.type === "line"
                ? Array.isArray(e.globals.stroke.colors)
                  ? (i = e.globals.stroke.colors)
                  : i.push(e.globals.stroke.colors)
                : Array.isArray(e.globals.fill.colors)
                ? (i = e.globals.fill.colors)
                : i.push(e.globals.fill.colors),
              a.fillColors !== void 0 &&
                ((i = []),
                Array.isArray(a.fillColors)
                  ? (i = a.fillColors.slice())
                  : i.push(a.fillColors)),
              i
            );
          },
        },
        {
          key: "handlePatternFill",
          value: function (e) {
            var t = e.fillConfig,
              a = e.patternFill,
              i = e.fillColor,
              s = e.fillOpacity,
              n = e.defaultColor,
              o = this.w.config.fill;
            t && (o = t);
            var l = this.opts,
              c = new H(this.ctx),
              h = Array.isArray(o.pattern.strokeWidth)
                ? o.pattern.strokeWidth[this.seriesIndex]
                : o.pattern.strokeWidth,
              d = i;
            return (
              Array.isArray(o.pattern.style)
                ? (a =
                    o.pattern.style[l.seriesNumber] !== void 0
                      ? c.drawPattern(
                          o.pattern.style[l.seriesNumber],
                          o.pattern.width,
                          o.pattern.height,
                          d,
                          h,
                          s
                        )
                      : n)
                : (a = c.drawPattern(
                    o.pattern.style,
                    o.pattern.width,
                    o.pattern.height,
                    d,
                    h,
                    s
                  )),
              a
            );
          },
        },
        {
          key: "handleGradientFill",
          value: function (e) {
            var t = e.type,
              a = e.fillColor,
              i = e.fillOpacity,
              s = e.fillConfig,
              n = e.colorStops,
              o = e.i,
              l = this.w.config.fill;
            s && (l = Y(Y({}, l), s));
            var c = this.opts,
              h = new H(this.ctx),
              d = new _();
            t = t || l.gradient.type;
            var u,
              f = a,
              g =
                l.gradient.opacityFrom === void 0
                  ? i
                  : Array.isArray(l.gradient.opacityFrom)
                  ? l.gradient.opacityFrom[o]
                  : l.gradient.opacityFrom;
            f.indexOf("rgba") > -1 && (g = _.getOpacityFromRGBA(f));
            var p =
              l.gradient.opacityTo === void 0
                ? i
                : Array.isArray(l.gradient.opacityTo)
                ? l.gradient.opacityTo[o]
                : l.gradient.opacityTo;
            if (
              l.gradient.gradientToColors === void 0 ||
              l.gradient.gradientToColors.length === 0
            )
              u =
                l.gradient.shade === "dark"
                  ? d.shadeColor(
                      -1 * parseFloat(l.gradient.shadeIntensity),
                      a.indexOf("rgb") > -1 ? _.rgb2hex(a) : a
                    )
                  : d.shadeColor(
                      parseFloat(l.gradient.shadeIntensity),
                      a.indexOf("rgb") > -1 ? _.rgb2hex(a) : a
                    );
            else if (l.gradient.gradientToColors[c.seriesNumber]) {
              var m = l.gradient.gradientToColors[c.seriesNumber];
              (u = m), m.indexOf("rgba") > -1 && (p = _.getOpacityFromRGBA(m));
            } else u = a;
            if (
              (l.gradient.gradientFrom && (f = l.gradient.gradientFrom),
              l.gradient.gradientTo && (u = l.gradient.gradientTo),
              l.gradient.inverseColors)
            ) {
              var x = f;
              (f = u), (u = x);
            }
            return (
              f.indexOf("rgb") > -1 && (f = _.rgb2hex(f)),
              u.indexOf("rgb") > -1 && (u = _.rgb2hex(u)),
              h.drawGradient(t, f, u, g, p, c.size, l.gradient.stops, n, o)
            );
          },
        },
      ]),
      r
    );
  })(),
  da = (function () {
    function r(e, t) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "setGlobalMarkerSize",
          value: function () {
            var e = this.w;
            if (
              ((e.globals.markers.size = Array.isArray(e.config.markers.size)
                ? e.config.markers.size
                : [e.config.markers.size]),
              e.globals.markers.size.length > 0)
            ) {
              if (e.globals.markers.size.length < e.globals.series.length + 1)
                for (var t = 0; t <= e.globals.series.length; t++)
                  e.globals.markers.size[t] === void 0 &&
                    e.globals.markers.size.push(e.globals.markers.size[0]);
            } else
              e.globals.markers.size = e.config.series.map(function (a) {
                return e.config.markers.size;
              });
          },
        },
        {
          key: "plotChartMarkers",
          value: function (e) {
            var t = e.pointsPos,
              a = e.seriesIndex,
              i = e.j,
              s = e.pSize,
              n = e.alwaysDrawMarker,
              o = n !== void 0 && n,
              l = e.isVirtualPoint,
              c = l !== void 0 && l,
              h = this.w,
              d = a,
              u = t,
              f = null,
              g = new H(this.ctx),
              p = h.config.markers.discrete && h.config.markers.discrete.length;
            if (Array.isArray(u.x))
              for (var m = 0; m < u.x.length; m++) {
                var x = void 0,
                  v = i,
                  b = !_.isNumber(u.y[m]);
                h.globals.markers.largestSize === 0 &&
                  h.globals.hasNullValues &&
                  h.globals.series[d][i + 1] !== null &&
                  !c &&
                  (b = !0),
                  i === 1 && m === 0 && (v = 0),
                  i === 1 && m === 1 && (v = 1);
                var k = "apexcharts-marker";
                if (
                  ((h.config.chart.type !== "line" &&
                    h.config.chart.type !== "area") ||
                    h.globals.comboCharts ||
                    h.config.tooltip.intersect ||
                    (k += " no-pointer-events"),
                  (Array.isArray(h.config.markers.size)
                    ? h.globals.markers.size[a] > 0
                    : h.config.markers.size > 0) ||
                    o ||
                    p)
                ) {
                  b || (k += " w".concat(_.randomId()));
                  var y = this.getMarkerConfig({
                    cssClass: k,
                    seriesIndex: a,
                    dataPointIndex: v,
                  });
                  h.config.series[d].data[v] &&
                    (h.config.series[d].data[v].fillColor &&
                      (y.pointFillColor = h.config.series[d].data[v].fillColor),
                    h.config.series[d].data[v].strokeColor &&
                      (y.pointStrokeColor =
                        h.config.series[d].data[v].strokeColor)),
                    s !== void 0 && (y.pSize = s),
                    (u.x[m] < -h.globals.markers.largestSize ||
                      u.x[m] >
                        h.globals.gridWidth + h.globals.markers.largestSize ||
                      u.y[m] < -h.globals.markers.largestSize ||
                      u.y[m] >
                        h.globals.gridHeight + h.globals.markers.largestSize) &&
                      (y.pSize = 0),
                    !b &&
                      ((h.globals.markers.size[a] > 0 || o || p) &&
                        !f &&
                        (f = g.group({
                          class: o || p ? "" : "apexcharts-series-markers",
                        })).attr(
                          "clip-path",
                          "url(#gridRectMarkerMask".concat(h.globals.cuid, ")")
                        ),
                      (x = g.drawMarker(u.x[m], u.y[m], y)).attr("rel", v),
                      x.attr("j", v),
                      x.attr("index", a),
                      x.node.setAttribute("default-marker-size", y.pSize),
                      new Ee(this.ctx).setSelectionFilter(x, a, v),
                      this.addEvents(x),
                      f && f.add(x));
                } else
                  h.globals.pointsArray[a] === void 0 &&
                    (h.globals.pointsArray[a] = []),
                    h.globals.pointsArray[a].push([u.x[m], u.y[m]]);
              }
            return f;
          },
        },
        {
          key: "getMarkerConfig",
          value: function (e) {
            var t = e.cssClass,
              a = e.seriesIndex,
              i = e.dataPointIndex,
              s = i === void 0 ? null : i,
              n = e.radius,
              o = n === void 0 ? null : n,
              l = e.size,
              c = l === void 0 ? null : l,
              h = e.strokeWidth,
              d = h === void 0 ? null : h,
              u = this.w,
              f = this.getMarkerStyle(a),
              g = c === null ? u.globals.markers.size[a] : c,
              p = u.config.markers;
            return (
              s !== null &&
                p.discrete.length &&
                p.discrete.map(function (m) {
                  m.seriesIndex === a &&
                    m.dataPointIndex === s &&
                    ((f.pointStrokeColor = m.strokeColor),
                    (f.pointFillColor = m.fillColor),
                    (g = m.size),
                    (f.pointShape = m.shape));
                }),
              {
                pSize: o === null ? g : o,
                pRadius: o !== null ? o : p.radius,
                pointStrokeWidth:
                  d !== null
                    ? d
                    : Array.isArray(p.strokeWidth)
                    ? p.strokeWidth[a]
                    : p.strokeWidth,
                pointStrokeColor: f.pointStrokeColor,
                pointFillColor: f.pointFillColor,
                shape:
                  f.pointShape ||
                  (Array.isArray(p.shape) ? p.shape[a] : p.shape),
                class: t,
                pointStrokeOpacity: Array.isArray(p.strokeOpacity)
                  ? p.strokeOpacity[a]
                  : p.strokeOpacity,
                pointStrokeDashArray: Array.isArray(p.strokeDashArray)
                  ? p.strokeDashArray[a]
                  : p.strokeDashArray,
                pointFillOpacity: Array.isArray(p.fillOpacity)
                  ? p.fillOpacity[a]
                  : p.fillOpacity,
                seriesIndex: a,
              }
            );
          },
        },
        {
          key: "addEvents",
          value: function (e) {
            var t = this.w,
              a = new H(this.ctx);
            e.node.addEventListener(
              "mouseenter",
              a.pathMouseEnter.bind(this.ctx, e)
            ),
              e.node.addEventListener(
                "mouseleave",
                a.pathMouseLeave.bind(this.ctx, e)
              ),
              e.node.addEventListener(
                "mousedown",
                a.pathMouseDown.bind(this.ctx, e)
              ),
              e.node.addEventListener("click", t.config.markers.onClick),
              e.node.addEventListener("dblclick", t.config.markers.onDblClick),
              e.node.addEventListener(
                "touchstart",
                a.pathMouseDown.bind(this.ctx, e),
                { passive: !0 }
              );
          },
        },
        {
          key: "getMarkerStyle",
          value: function (e) {
            var t = this.w,
              a = t.globals.markers.colors,
              i = t.config.markers.strokeColor || t.config.markers.strokeColors;
            return {
              pointStrokeColor: Array.isArray(i) ? i[e] : i,
              pointFillColor: Array.isArray(a) ? a[e] : a,
            };
          },
        },
      ]),
      r
    );
  })(),
  Xc = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.initialAnim = this.w.config.chart.animations.enabled);
    }
    return (
      $(r, [
        {
          key: "draw",
          value: function (e, t, a) {
            var i = this.w,
              s = new H(this.ctx),
              n = a.realIndex,
              o = a.pointsPos,
              l = a.zRatio,
              c = a.elParent,
              h = s.group({
                class: "apexcharts-series-markers apexcharts-series-".concat(
                  i.config.chart.type
                ),
              });
            if (
              (h.attr(
                "clip-path",
                "url(#gridRectMarkerMask".concat(i.globals.cuid, ")")
              ),
              Array.isArray(o.x))
            )
              for (var d = 0; d < o.x.length; d++) {
                var u = t + 1,
                  f = !0;
                t === 0 && d === 0 && (u = 0), t === 0 && d === 1 && (u = 1);
                var g = i.globals.markers.size[n];
                if (l !== 1 / 0) {
                  var p = i.config.plotOptions.bubble;
                  (g = i.globals.seriesZ[n][u]),
                    p.zScaling && (g /= l),
                    p.minBubbleRadius &&
                      g < p.minBubbleRadius &&
                      (g = p.minBubbleRadius),
                    p.maxBubbleRadius &&
                      g > p.maxBubbleRadius &&
                      (g = p.maxBubbleRadius);
                }
                var m = o.x[d],
                  x = o.y[d];
                if (
                  ((g = g || 0),
                  (x !== null && i.globals.series[n][u] !== void 0) || (f = !1),
                  f)
                ) {
                  var v = this.drawPoint(m, x, g, n, u, t);
                  h.add(v);
                }
                c.add(h);
              }
          },
        },
        {
          key: "drawPoint",
          value: function (e, t, a, i, s, n) {
            var o = this.w,
              l = i,
              c = new oa(this.ctx),
              h = new Ee(this.ctx),
              d = new tt(this.ctx),
              u = new da(this.ctx),
              f = new H(this.ctx),
              g = u.getMarkerConfig({
                cssClass: "apexcharts-marker",
                seriesIndex: l,
                dataPointIndex: s,
                radius:
                  o.config.chart.type === "bubble" ||
                  (o.globals.comboCharts &&
                    o.config.series[i] &&
                    o.config.series[i].type === "bubble")
                    ? a
                    : null,
              }),
              p = d.fillPath({
                seriesNumber: i,
                dataPointIndex: s,
                color: g.pointFillColor,
                patternUnits: "objectBoundingBox",
                value: o.globals.series[i][n],
              }),
              m = f.drawMarker(e, t, g);
            if (
              (o.config.series[l].data[s] &&
                o.config.series[l].data[s].fillColor &&
                (p = o.config.series[l].data[s].fillColor),
              m.attr({ fill: p }),
              o.config.chart.dropShadow.enabled)
            ) {
              var x = o.config.chart.dropShadow;
              h.dropShadow(m, x, i);
            }
            if (!this.initialAnim || o.globals.dataChanged || o.globals.resized)
              o.globals.animationEnded = !0;
            else {
              var v = o.config.chart.animations.speed;
              c.animateMarker(m, v, o.globals.easing, function () {
                window.setTimeout(function () {
                  c.animationCompleted(m);
                }, 100);
              });
            }
            return (
              m.attr({
                rel: s,
                j: s,
                index: i,
                "default-marker-size": g.pSize,
              }),
              h.setSelectionFilter(m, i, s),
              u.addEvents(m),
              m.node.classList.add("apexcharts-marker"),
              m
            );
          },
        },
        {
          key: "centerTextInBubble",
          value: function (e) {
            var t = this.w;
            return {
              y: (e += parseInt(t.config.dataLabels.style.fontSize, 10) / 4),
            };
          },
        },
      ]),
      r
    );
  })(),
  ia = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "dataLabelsCorrection",
          value: function (e, t, a, i, s, n, o) {
            var l = this.w,
              c = !1,
              h = new H(this.ctx).getTextRects(a, o),
              d = h.width,
              u = h.height;
            t < 0 && (t = 0),
              t > l.globals.gridHeight + u &&
                (t = l.globals.gridHeight + u / 2),
              l.globals.dataLabelsRects[i] === void 0 &&
                (l.globals.dataLabelsRects[i] = []),
              l.globals.dataLabelsRects[i].push({
                x: e,
                y: t,
                width: d,
                height: u,
              });
            var f = l.globals.dataLabelsRects[i].length - 2,
              g =
                l.globals.lastDrawnDataLabelsIndexes[i] !== void 0
                  ? l.globals.lastDrawnDataLabelsIndexes[i][
                      l.globals.lastDrawnDataLabelsIndexes[i].length - 1
                    ]
                  : 0;
            if (l.globals.dataLabelsRects[i][f] !== void 0) {
              var p = l.globals.dataLabelsRects[i][g];
              (e > p.x + p.width ||
                t > p.y + p.height ||
                t + u < p.y ||
                e + d < p.x) &&
                (c = !0);
            }
            return (
              (s === 0 || n) && (c = !0),
              { x: e, y: t, textRects: h, drawnextLabel: c }
            );
          },
        },
        {
          key: "drawDataLabel",
          value: function (e) {
            var t = this,
              a = e.type,
              i = e.pos,
              s = e.i,
              n = e.j,
              o = e.isRangeStart,
              l = e.strokeWidth,
              c = l === void 0 ? 2 : l,
              h = this.w,
              d = new H(this.ctx),
              u = h.config.dataLabels,
              f = 0,
              g = 0,
              p = n,
              m = null;
            if (
              h.globals.collapsedSeriesIndices.indexOf(s) !== -1 ||
              !u.enabled ||
              !Array.isArray(i.x)
            )
              return m;
            m = d.group({ class: "apexcharts-data-labels" });
            for (var x = 0; x < i.x.length; x++)
              if (
                ((f = i.x[x] + u.offsetX),
                (g = i.y[x] + u.offsetY + c),
                !isNaN(f))
              ) {
                n === 1 && x === 0 && (p = 0), n === 1 && x === 1 && (p = 1);
                var v = h.globals.series[s][p];
                a === "rangeArea" &&
                  (v = o
                    ? h.globals.seriesRangeStart[s][p]
                    : h.globals.seriesRangeEnd[s][p]);
                var b = "",
                  k = function (C) {
                    return h.config.dataLabels.formatter(C, {
                      ctx: t.ctx,
                      seriesIndex: s,
                      dataPointIndex: p,
                      w: h,
                    });
                  };
                h.config.chart.type === "bubble"
                  ? ((b = k((v = h.globals.seriesZ[s][p]))),
                    (g = i.y[x]),
                    (g = new Xc(this.ctx).centerTextInBubble(g, s, p).y))
                  : v !== void 0 && (b = k(v));
                var y = h.config.dataLabels.textAnchor;
                h.globals.isSlopeChart &&
                  (y =
                    p === 0
                      ? "end"
                      : p === h.config.series[s].data.length - 1
                      ? "start"
                      : "middle"),
                  this.plotDataLabelsText({
                    x: f,
                    y: g,
                    text: b,
                    i: s,
                    j: p,
                    parent: m,
                    offsetCorrection: !0,
                    dataLabelsConfig: h.config.dataLabels,
                    textAnchor: y,
                  });
              }
            return m;
          },
        },
        {
          key: "plotDataLabelsText",
          value: function (e) {
            var t = this.w,
              a = new H(this.ctx),
              i = e.x,
              s = e.y,
              n = e.i,
              o = e.j,
              l = e.text,
              c = e.textAnchor,
              h = e.fontSize,
              d = e.parent,
              u = e.dataLabelsConfig,
              f = e.color,
              g = e.alwaysDrawDataLabel,
              p = e.offsetCorrection,
              m = e.className,
              x = null;
            if (
              Array.isArray(t.config.dataLabels.enabledOnSeries) &&
              t.config.dataLabels.enabledOnSeries.indexOf(n) < 0
            )
              return x;
            var v = { x: i, y: s, drawnextLabel: !0, textRects: null };
            p &&
              (v = this.dataLabelsCorrection(
                i,
                s,
                l,
                n,
                o,
                g,
                parseInt(u.style.fontSize, 10)
              )),
              t.globals.zoomed || ((i = v.x), (s = v.y)),
              v.textRects &&
                (i < -20 - v.textRects.width ||
                  i > t.globals.gridWidth + v.textRects.width + 30) &&
                (l = "");
            var b = t.globals.dataLabels.style.colors[n];
            (((t.config.chart.type === "bar" ||
              t.config.chart.type === "rangeBar") &&
              t.config.plotOptions.bar.distributed) ||
              t.config.dataLabels.distributed) &&
              (b = t.globals.dataLabels.style.colors[o]),
              typeof b == "function" &&
                (b = b({
                  series: t.globals.series,
                  seriesIndex: n,
                  dataPointIndex: o,
                  w: t,
                })),
              f && (b = f);
            var k = u.offsetX,
              y = u.offsetY;
            if (
              ((t.config.chart.type !== "bar" &&
                t.config.chart.type !== "rangeBar") ||
                ((k = 0), (y = 0)),
              t.globals.isSlopeChart &&
                (o !== 0 && (k = -2 * u.offsetX + 5),
                o !== 0 && o !== t.config.series[n].data.length - 1 && (k = 0)),
              v.drawnextLabel)
            ) {
              if (
                ((x = a.drawText({
                  width: 100,
                  height: parseInt(u.style.fontSize, 10),
                  x: i + k,
                  y: s + y,
                  foreColor: b,
                  textAnchor: c || u.textAnchor,
                  text: l,
                  fontSize: h || u.style.fontSize,
                  fontFamily: u.style.fontFamily,
                  fontWeight: u.style.fontWeight || "normal",
                })).attr({ class: m || "apexcharts-datalabel", cx: i, cy: s }),
                u.dropShadow.enabled)
              ) {
                var C = u.dropShadow;
                new Ee(this.ctx).dropShadow(x, C);
              }
              d.add(x),
                t.globals.lastDrawnDataLabelsIndexes[n] === void 0 &&
                  (t.globals.lastDrawnDataLabelsIndexes[n] = []),
                t.globals.lastDrawnDataLabelsIndexes[n].push(o);
            }
            return x;
          },
        },
        {
          key: "addBackgroundToDataLabel",
          value: function (e, t) {
            var a = this.w,
              i = a.config.dataLabels.background,
              s = i.padding,
              n = i.padding / 2,
              o = t.width,
              l = t.height,
              c = new H(this.ctx).drawRect(
                t.x - s,
                t.y - n / 2,
                o + 2 * s,
                l + n,
                i.borderRadius,
                a.config.chart.background !== "transparent" &&
                  a.config.chart.background
                  ? a.config.chart.background
                  : "#fff",
                i.opacity,
                i.borderWidth,
                i.borderColor
              );
            return (
              i.dropShadow.enabled &&
                new Ee(this.ctx).dropShadow(c, i.dropShadow),
              c
            );
          },
        },
        {
          key: "dataLabelsBackground",
          value: function () {
            var e = this.w;
            if (e.config.chart.type !== "bubble")
              for (
                var t = e.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-datalabels text"
                  ),
                  a = 0;
                a < t.length;
                a++
              ) {
                var i = t[a],
                  s = i.getBBox(),
                  n = null;
                if (
                  (s.width &&
                    s.height &&
                    (n = this.addBackgroundToDataLabel(i, s)),
                  n)
                ) {
                  i.parentNode.insertBefore(n.node, i);
                  var o = i.getAttribute("fill");
                  e.config.chart.animations.enabled &&
                  !e.globals.resized &&
                  !e.globals.dataChanged
                    ? n.animate().attr({ fill: o })
                    : n.attr({ fill: o }),
                    i.setAttribute(
                      "fill",
                      e.config.dataLabels.background.foreColor
                    );
                }
              }
          },
        },
        {
          key: "bringForward",
          value: function () {
            for (
              var e = this.w,
                t = e.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-datalabels"
                ),
                a = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-plot-series:last-child"
                ),
                i = 0;
              i < t.length;
              i++
            )
              a && a.insertBefore(t[i], a.nextSibling);
          },
        },
      ]),
      r
    );
  })(),
  Ve = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.legendInactiveClass = "legend-mouseover-inactive");
    }
    return (
      $(r, [
        {
          key: "getAllSeriesEls",
          value: function () {
            return this.w.globals.dom.baseEl.getElementsByClassName(
              "apexcharts-series"
            );
          },
        },
        {
          key: "getSeriesByName",
          value: function (e) {
            return this.w.globals.dom.baseEl.querySelector(
              ".apexcharts-inner .apexcharts-series[seriesName='".concat(
                _.escapeString(e),
                "']"
              )
            );
          },
        },
        {
          key: "isSeriesHidden",
          value: function (e) {
            var t = this.getSeriesByName(e),
              a = parseInt(t.getAttribute("data:realIndex"), 10);
            return {
              isHidden: t.classList.contains("apexcharts-series-collapsed"),
              realIndex: a,
            };
          },
        },
        {
          key: "addCollapsedClassToSeries",
          value: function (e, t) {
            var a = this.w;
            function i(s) {
              for (var n = 0; n < s.length; n++)
                s[n].index === t &&
                  e.node.classList.add("apexcharts-series-collapsed");
            }
            i(a.globals.collapsedSeries), i(a.globals.ancillaryCollapsedSeries);
          },
        },
        {
          key: "toggleSeries",
          value: function (e) {
            var t = this.isSeriesHidden(e);
            return (
              this.ctx.legend.legendHelpers.toggleDataSeries(
                t.realIndex,
                t.isHidden
              ),
              t.isHidden
            );
          },
        },
        {
          key: "showSeries",
          value: function (e) {
            var t = this.isSeriesHidden(e);
            t.isHidden &&
              this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex, !0);
          },
        },
        {
          key: "hideSeries",
          value: function (e) {
            var t = this.isSeriesHidden(e);
            t.isHidden ||
              this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex, !1);
          },
        },
        {
          key: "resetSeries",
          value: function () {
            var e =
                !(arguments.length > 0 && arguments[0] !== void 0) ||
                arguments[0],
              t =
                !(arguments.length > 1 && arguments[1] !== void 0) ||
                arguments[1],
              a =
                !(arguments.length > 2 && arguments[2] !== void 0) ||
                arguments[2],
              i = this.w,
              s = _.clone(i.globals.initialSeries);
            (i.globals.previousPaths = []),
              a
                ? ((i.globals.collapsedSeries = []),
                  (i.globals.ancillaryCollapsedSeries = []),
                  (i.globals.collapsedSeriesIndices = []),
                  (i.globals.ancillaryCollapsedSeriesIndices = []))
                : (s = this.emptyCollapsedSeries(s)),
              (i.config.series = s),
              e &&
                (t &&
                  ((i.globals.zoomed = !1),
                  this.ctx.updateHelpers.revertDefaultAxisMinMax()),
                this.ctx.updateHelpers._updateSeries(
                  s,
                  i.config.chart.animations.dynamicAnimation.enabled
                ));
          },
        },
        {
          key: "emptyCollapsedSeries",
          value: function (e) {
            for (var t = this.w, a = 0; a < e.length; a++)
              t.globals.collapsedSeriesIndices.indexOf(a) > -1 &&
                (e[a].data = []);
            return e;
          },
        },
        {
          key: "highlightSeries",
          value: function (e) {
            var t = this.w,
              a = this.getSeriesByName(e),
              i = parseInt(
                a == null ? void 0 : a.getAttribute("data:realIndex"),
                10
              ),
              s = t.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis"
              ),
              n = null,
              o = null,
              l = null;
            if (t.globals.axisCharts || t.config.chart.type === "radialBar")
              if (t.globals.axisCharts) {
                (n = t.globals.dom.baseEl.querySelector(
                  ".apexcharts-series[data\\:realIndex='".concat(i, "']")
                )),
                  (o = t.globals.dom.baseEl.querySelector(
                    ".apexcharts-datalabels[data\\:realIndex='".concat(i, "']")
                  ));
                var c = t.globals.seriesYAxisReverseMap[i];
                l = t.globals.dom.baseEl.querySelector(
                  ".apexcharts-yaxis[rel='".concat(c, "']")
                );
              } else
                n = t.globals.dom.baseEl.querySelector(
                  ".apexcharts-series[rel='".concat(i + 1, "']")
                );
            else
              n = t.globals.dom.baseEl.querySelector(
                ".apexcharts-series[rel='".concat(i + 1, "'] path")
              );
            for (var h = 0; h < s.length; h++)
              s[h].classList.add(this.legendInactiveClass);
            if (n)
              t.globals.axisCharts ||
                n.parentNode.classList.remove(this.legendInactiveClass),
                n.classList.remove(this.legendInactiveClass),
                o !== null && o.classList.remove(this.legendInactiveClass),
                l !== null && l.classList.remove(this.legendInactiveClass);
            else
              for (var d = 0; d < s.length; d++)
                s[d].classList.remove(this.legendInactiveClass);
          },
        },
        {
          key: "toggleSeriesOnHover",
          value: function (e, t) {
            var a = this.w;
            t || (t = e.target);
            var i = a.globals.dom.baseEl.querySelectorAll(
              ".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis"
            );
            if (e.type === "mousemove") {
              var s = parseInt(t.getAttribute("rel"), 10) - 1;
              this.highlightSeries(a.globals.seriesNames[s]);
            } else if (e.type === "mouseout")
              for (var n = 0; n < i.length; n++)
                i[n].classList.remove(this.legendInactiveClass);
          },
        },
        {
          key: "highlightRangeInSeries",
          value: function (e, t) {
            var a = this,
              i = this.w,
              s = i.globals.dom.baseEl.getElementsByClassName(
                "apexcharts-heatmap-rect"
              ),
              n = function (c) {
                for (var h = 0; h < s.length; h++)
                  s[h].classList[c](a.legendInactiveClass);
              };
            if (e.type === "mousemove") {
              var o = parseInt(t.getAttribute("rel"), 10) - 1;
              n("add");
              var l = i.config.plotOptions.heatmap.colorScale.ranges;
              (function (c, h) {
                for (var d = 0; d < s.length; d++) {
                  var u = Number(s[d].getAttribute("val"));
                  u >= c.from &&
                    (u < c.to || (c.to === h && u === h)) &&
                    s[d].classList.remove(a.legendInactiveClass);
                }
              })(
                l[o],
                l.reduce(function (c, h) {
                  return Math.max(c, h.to);
                }, 0)
              );
            } else e.type === "mouseout" && n("remove");
          },
        },
        {
          key: "getActiveConfigSeriesIndex",
          value: function () {
            var e =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : "asc",
              t =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : [],
              a = this.w,
              i = 0;
            if (a.config.series.length > 1) {
              for (
                var s = a.config.series.map(function (o, l) {
                    return o.data &&
                      o.data.length > 0 &&
                      a.globals.collapsedSeriesIndices.indexOf(l) === -1 &&
                      (!a.globals.comboCharts ||
                        t.length === 0 ||
                        (t.length && t.indexOf(a.config.series[l].type) > -1))
                      ? l
                      : -1;
                  }),
                  n = e === "asc" ? 0 : s.length - 1;
                e === "asc" ? n < s.length : n >= 0;
                e === "asc" ? n++ : n--
              )
                if (s[n] !== -1) {
                  i = s[n];
                  break;
                }
            }
            return i;
          },
        },
        {
          key: "getBarSeriesIndices",
          value: function () {
            return this.w.globals.comboCharts
              ? this.w.config.series
                  .map(function (e, t) {
                    return e.type === "bar" || e.type === "column" ? t : -1;
                  })
                  .filter(function (e) {
                    return e !== -1;
                  })
              : this.w.config.series.map(function (e, t) {
                  return t;
                });
          },
        },
        {
          key: "getPreviousPaths",
          value: function () {
            var e = this.w;
            function t(n, o, l) {
              for (
                var c = n[o].childNodes,
                  h = {
                    type: l,
                    paths: [],
                    realIndex: n[o].getAttribute("data:realIndex"),
                  },
                  d = 0;
                d < c.length;
                d++
              )
                if (c[d].hasAttribute("pathTo")) {
                  var u = c[d].getAttribute("pathTo");
                  h.paths.push({ d: u });
                }
              e.globals.previousPaths.push(h);
            }
            (e.globals.previousPaths = []),
              [
                "line",
                "area",
                "bar",
                "rangebar",
                "rangeArea",
                "candlestick",
                "radar",
              ].forEach(function (n) {
                for (
                  var o,
                    l =
                      ((o = n),
                      e.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-".concat(o, "-series .apexcharts-series")
                      )),
                    c = 0;
                  c < l.length;
                  c++
                )
                  t(l, c, n);
              });
            var a = e.globals.dom.baseEl.querySelectorAll(
              ".apexcharts-".concat(e.config.chart.type, " .apexcharts-series")
            );
            if (a.length > 0)
              for (
                var i = function (n) {
                    for (
                      var o = e.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-"
                            .concat(
                              e.config.chart.type,
                              " .apexcharts-series[data\\:realIndex='"
                            )
                            .concat(n, "'] rect")
                        ),
                        l = [],
                        c = function (d) {
                          var u = function (g) {
                              return o[d].getAttribute(g);
                            },
                            f = {
                              x: parseFloat(u("x")),
                              y: parseFloat(u("y")),
                              width: parseFloat(u("width")),
                              height: parseFloat(u("height")),
                            };
                          l.push({
                            rect: f,
                            color: o[d].getAttribute("color"),
                          });
                        },
                        h = 0;
                      h < o.length;
                      h++
                    )
                      c(h);
                    e.globals.previousPaths.push(l);
                  },
                  s = 0;
                s < a.length;
                s++
              )
                i(s);
            e.globals.axisCharts ||
              (e.globals.previousPaths = e.globals.series);
          },
        },
        {
          key: "clearPreviousPaths",
          value: function () {
            var e = this.w;
            (e.globals.previousPaths = []), (e.globals.allSeriesCollapsed = !1);
          },
        },
        {
          key: "handleNoData",
          value: function () {
            var e = this.w,
              t = e.config.noData,
              a = new H(this.ctx),
              i = e.globals.svgWidth / 2,
              s = e.globals.svgHeight / 2,
              n = "middle";
            if (
              ((e.globals.noData = !0),
              (e.globals.animationEnded = !0),
              t.align === "left"
                ? ((i = 10), (n = "start"))
                : t.align === "right" &&
                  ((i = e.globals.svgWidth - 10), (n = "end")),
              t.verticalAlign === "top"
                ? (s = 50)
                : t.verticalAlign === "bottom" &&
                  (s = e.globals.svgHeight - 50),
              (i += t.offsetX),
              (s = s + parseInt(t.style.fontSize, 10) + 2 + t.offsetY),
              t.text !== void 0 && t.text !== "")
            ) {
              var o = a.drawText({
                x: i,
                y: s,
                text: t.text,
                textAnchor: n,
                fontSize: t.style.fontSize,
                fontFamily: t.style.fontFamily,
                foreColor: t.style.color,
                opacity: 1,
                class: "apexcharts-text-nodata",
              });
              e.globals.dom.Paper.add(o);
            }
          },
        },
        {
          key: "setNullSeriesToZeroValues",
          value: function (e) {
            for (var t = this.w, a = 0; a < e.length; a++)
              if (e[a].length === 0)
                for (
                  var i = 0;
                  i < e[t.globals.maxValsInArrayIndex].length;
                  i++
                )
                  e[a].push(0);
            return e;
          },
        },
        {
          key: "hasAllSeriesEqualX",
          value: function () {
            for (
              var e = !0, t = this.w, a = this.filteredSeriesX(), i = 0;
              i < a.length - 1;
              i++
            )
              if (a[i][0] !== a[i + 1][0]) {
                e = !1;
                break;
              }
            return (t.globals.allSeriesHasEqualX = e), e;
          },
        },
        {
          key: "filteredSeriesX",
          value: function () {
            var e = this.w.globals.seriesX.map(function (t) {
              return t.length > 0 ? t : [];
            });
            return e;
          },
        },
      ]),
      r
    );
  })(),
  Us = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.twoDSeries = []),
        (this.threeDSeries = []),
        (this.twoDSeriesX = []),
        (this.seriesGoals = []),
        (this.coreUtils = new ke(this.ctx));
    }
    return (
      $(r, [
        {
          key: "isMultiFormat",
          value: function () {
            return this.isFormatXY() || this.isFormat2DArray();
          },
        },
        {
          key: "isFormatXY",
          value: function () {
            var e = this.w.config.series.slice(),
              t = new Ve(this.ctx);
            if (
              ((this.activeSeriesIndex = t.getActiveConfigSeriesIndex()),
              e[this.activeSeriesIndex].data !== void 0 &&
                e[this.activeSeriesIndex].data.length > 0 &&
                e[this.activeSeriesIndex].data[0] !== null &&
                e[this.activeSeriesIndex].data[0].x !== void 0 &&
                e[this.activeSeriesIndex].data[0] !== null)
            )
              return !0;
          },
        },
        {
          key: "isFormat2DArray",
          value: function () {
            var e = this.w.config.series.slice(),
              t = new Ve(this.ctx);
            if (
              ((this.activeSeriesIndex = t.getActiveConfigSeriesIndex()),
              e[this.activeSeriesIndex].data !== void 0 &&
                e[this.activeSeriesIndex].data.length > 0 &&
                e[this.activeSeriesIndex].data[0] !== void 0 &&
                e[this.activeSeriesIndex].data[0] !== null &&
                e[this.activeSeriesIndex].data[0].constructor === Array)
            )
              return !0;
          },
        },
        {
          key: "handleFormat2DArray",
          value: function (e, t) {
            for (
              var a = this.w.config,
                i = this.w.globals,
                s =
                  a.chart.type === "boxPlot" || a.series[t].type === "boxPlot",
                n = 0;
              n < e[t].data.length;
              n++
            )
              if (
                (e[t].data[n][1] !== void 0 &&
                  (Array.isArray(e[t].data[n][1]) &&
                  e[t].data[n][1].length === 4 &&
                  !s
                    ? this.twoDSeries.push(_.parseNumber(e[t].data[n][1][3]))
                    : e[t].data[n].length >= 5
                    ? this.twoDSeries.push(_.parseNumber(e[t].data[n][4]))
                    : this.twoDSeries.push(_.parseNumber(e[t].data[n][1])),
                  (i.dataFormatXNumeric = !0)),
                a.xaxis.type === "datetime")
              ) {
                var o = new Date(e[t].data[n][0]);
                (o = new Date(o).getTime()), this.twoDSeriesX.push(o);
              } else this.twoDSeriesX.push(e[t].data[n][0]);
            for (var l = 0; l < e[t].data.length; l++)
              e[t].data[l][2] !== void 0 &&
                (this.threeDSeries.push(e[t].data[l][2]), (i.isDataXYZ = !0));
          },
        },
        {
          key: "handleFormatXY",
          value: function (e, t) {
            var a = this.w.config,
              i = this.w.globals,
              s = new Me(this.ctx),
              n = t;
            i.collapsedSeriesIndices.indexOf(t) > -1 &&
              (n = this.activeSeriesIndex);
            for (var o = 0; o < e[t].data.length; o++)
              e[t].data[o].y !== void 0 &&
                (Array.isArray(e[t].data[o].y)
                  ? this.twoDSeries.push(
                      _.parseNumber(e[t].data[o].y[e[t].data[o].y.length - 1])
                    )
                  : this.twoDSeries.push(_.parseNumber(e[t].data[o].y))),
                e[t].data[o].goals !== void 0 &&
                Array.isArray(e[t].data[o].goals)
                  ? (this.seriesGoals[t] === void 0 &&
                      (this.seriesGoals[t] = []),
                    this.seriesGoals[t].push(e[t].data[o].goals))
                  : (this.seriesGoals[t] === void 0 &&
                      (this.seriesGoals[t] = []),
                    this.seriesGoals[t].push(null));
            for (var l = 0; l < e[n].data.length; l++) {
              var c = typeof e[n].data[l].x == "string",
                h = Array.isArray(e[n].data[l].x),
                d = !h && !!s.isValidDate(e[n].data[l].x);
              if (c || d)
                if (c || a.xaxis.convertedCatToNumeric) {
                  var u = i.isBarHorizontal && i.isRangeData;
                  a.xaxis.type !== "datetime" || u
                    ? ((this.fallbackToCategory = !0),
                      this.twoDSeriesX.push(e[n].data[l].x),
                      isNaN(e[n].data[l].x) ||
                        this.w.config.xaxis.type === "category" ||
                        typeof e[n].data[l].x == "string" ||
                        (i.isXNumeric = !0))
                    : this.twoDSeriesX.push(s.parseDate(e[n].data[l].x));
                } else
                  a.xaxis.type === "datetime"
                    ? this.twoDSeriesX.push(
                        s.parseDate(e[n].data[l].x.toString())
                      )
                    : ((i.dataFormatXNumeric = !0),
                      (i.isXNumeric = !0),
                      this.twoDSeriesX.push(parseFloat(e[n].data[l].x)));
              else
                h
                  ? ((this.fallbackToCategory = !0),
                    this.twoDSeriesX.push(e[n].data[l].x))
                  : ((i.isXNumeric = !0),
                    (i.dataFormatXNumeric = !0),
                    this.twoDSeriesX.push(e[n].data[l].x));
            }
            if (e[t].data[0] && e[t].data[0].z !== void 0) {
              for (var f = 0; f < e[t].data.length; f++)
                this.threeDSeries.push(e[t].data[f].z);
              i.isDataXYZ = !0;
            }
          },
        },
        {
          key: "handleRangeData",
          value: function (e, t) {
            var a = this.w.globals,
              i = {};
            return (
              this.isFormat2DArray()
                ? (i = this.handleRangeDataFormat("array", e, t))
                : this.isFormatXY() &&
                  (i = this.handleRangeDataFormat("xy", e, t)),
              a.seriesRangeStart.push(i.start === void 0 ? [] : i.start),
              a.seriesRangeEnd.push(i.end === void 0 ? [] : i.end),
              a.seriesRange.push(i.rangeUniques),
              a.seriesRange.forEach(function (s, n) {
                s &&
                  s.forEach(function (o, l) {
                    o.y.forEach(function (c, h) {
                      for (var d = 0; d < o.y.length; d++)
                        if (h !== d) {
                          var u = c.y1,
                            f = c.y2,
                            g = o.y[d].y1;
                          u <= o.y[d].y2 &&
                            g <= f &&
                            (o.overlaps.indexOf(c.rangeName) < 0 &&
                              o.overlaps.push(c.rangeName),
                            o.overlaps.indexOf(o.y[d].rangeName) < 0 &&
                              o.overlaps.push(o.y[d].rangeName));
                        }
                    });
                  });
              }),
              i
            );
          },
        },
        {
          key: "handleCandleStickBoxData",
          value: function (e, t) {
            var a = this.w.globals,
              i = {};
            return (
              this.isFormat2DArray()
                ? (i = this.handleCandleStickBoxDataFormat("array", e, t))
                : this.isFormatXY() &&
                  (i = this.handleCandleStickBoxDataFormat("xy", e, t)),
              (a.seriesCandleO[t] = i.o),
              (a.seriesCandleH[t] = i.h),
              (a.seriesCandleM[t] = i.m),
              (a.seriesCandleL[t] = i.l),
              (a.seriesCandleC[t] = i.c),
              i
            );
          },
        },
        {
          key: "handleRangeDataFormat",
          value: function (e, t, a) {
            var i = [],
              s = [],
              n = t[a].data
                .filter(function (h, d, u) {
                  return (
                    d ===
                    u.findIndex(function (f) {
                      return f.x === h.x;
                    })
                  );
                })
                .map(function (h, d) {
                  return { x: h.x, overlaps: [], y: [] };
                });
            if (e === "array")
              for (var o = 0; o < t[a].data.length; o++)
                Array.isArray(t[a].data[o])
                  ? (i.push(t[a].data[o][1][0]), s.push(t[a].data[o][1][1]))
                  : (i.push(t[a].data[o]), s.push(t[a].data[o]));
            else if (e === "xy")
              for (
                var l = function (h) {
                    var d = Array.isArray(t[a].data[h].y),
                      u = _.randomId(),
                      f = t[a].data[h].x,
                      g = {
                        y1: d ? t[a].data[h].y[0] : t[a].data[h].y,
                        y2: d ? t[a].data[h].y[1] : t[a].data[h].y,
                        rangeName: u,
                      };
                    t[a].data[h].rangeName = u;
                    var p = n.findIndex(function (m) {
                      return m.x === f;
                    });
                    n[p].y.push(g), i.push(g.y1), s.push(g.y2);
                  },
                  c = 0;
                c < t[a].data.length;
                c++
              )
                l(c);
            return { start: i, end: s, rangeUniques: n };
          },
        },
        {
          key: "handleCandleStickBoxDataFormat",
          value: function (e, t, a) {
            var i = this.w,
              s =
                i.config.chart.type === "boxPlot" ||
                i.config.series[a].type === "boxPlot",
              n = [],
              o = [],
              l = [],
              c = [],
              h = [];
            if (e === "array")
              if (
                (s && t[a].data[0].length === 6) ||
                (!s && t[a].data[0].length === 5)
              )
                for (var d = 0; d < t[a].data.length; d++)
                  n.push(t[a].data[d][1]),
                    o.push(t[a].data[d][2]),
                    s
                      ? (l.push(t[a].data[d][3]),
                        c.push(t[a].data[d][4]),
                        h.push(t[a].data[d][5]))
                      : (c.push(t[a].data[d][3]), h.push(t[a].data[d][4]));
              else
                for (var u = 0; u < t[a].data.length; u++)
                  Array.isArray(t[a].data[u][1]) &&
                    (n.push(t[a].data[u][1][0]),
                    o.push(t[a].data[u][1][1]),
                    s
                      ? (l.push(t[a].data[u][1][2]),
                        c.push(t[a].data[u][1][3]),
                        h.push(t[a].data[u][1][4]))
                      : (c.push(t[a].data[u][1][2]),
                        h.push(t[a].data[u][1][3])));
            else if (e === "xy")
              for (var f = 0; f < t[a].data.length; f++)
                Array.isArray(t[a].data[f].y) &&
                  (n.push(t[a].data[f].y[0]),
                  o.push(t[a].data[f].y[1]),
                  s
                    ? (l.push(t[a].data[f].y[2]),
                      c.push(t[a].data[f].y[3]),
                      h.push(t[a].data[f].y[4]))
                    : (c.push(t[a].data[f].y[2]), h.push(t[a].data[f].y[3])));
            return { o: n, h: o, m: l, l: c, c: h };
          },
        },
        {
          key: "parseDataAxisCharts",
          value: function (e) {
            var t = this,
              a =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : this.ctx,
              i = this.w.config,
              s = this.w.globals,
              n = new Me(a),
              o =
                i.labels.length > 0
                  ? i.labels.slice()
                  : i.xaxis.categories.slice();
            (s.isRangeBar = i.chart.type === "rangeBar" && s.isBarHorizontal),
              (s.hasXaxisGroups =
                i.xaxis.type === "category" && i.xaxis.group.groups.length > 0),
              s.hasXaxisGroups && (s.groups = i.xaxis.group.groups),
              e.forEach(function (f, g) {
                f.name !== void 0
                  ? s.seriesNames.push(f.name)
                  : s.seriesNames.push("series-" + parseInt(g + 1, 10));
              }),
              this.coreUtils.setSeriesYAxisMappings();
            var l = [],
              c = Pe(
                new Set(
                  i.series.map(function (f) {
                    return f.group;
                  })
                )
              );
            i.series.forEach(function (f, g) {
              var p = c.indexOf(f.group);
              l[p] || (l[p] = []), l[p].push(s.seriesNames[g]);
            }),
              (s.seriesGroups = l);
            for (
              var h = function () {
                  for (var f = 0; f < o.length; f++)
                    if (typeof o[f] == "string") {
                      if (!n.isValidDate(o[f]))
                        throw new Error(
                          "You have provided invalid Date format. Please provide a valid JavaScript Date"
                        );
                      t.twoDSeriesX.push(n.parseDate(o[f]));
                    } else t.twoDSeriesX.push(o[f]);
                },
                d = 0;
              d < e.length;
              d++
            ) {
              if (
                ((this.twoDSeries = []),
                (this.twoDSeriesX = []),
                (this.threeDSeries = []),
                e[d].data === void 0)
              )
                return void console.error(
                  "It is a possibility that you may have not included 'data' property in series."
                );
              if (
                ((i.chart.type !== "rangeBar" &&
                  i.chart.type !== "rangeArea" &&
                  e[d].type !== "rangeBar" &&
                  e[d].type !== "rangeArea") ||
                  ((s.isRangeData = !0),
                  (i.chart.type !== "rangeBar" &&
                    i.chart.type !== "rangeArea") ||
                    this.handleRangeData(e, d)),
                this.isMultiFormat())
              )
                this.isFormat2DArray()
                  ? this.handleFormat2DArray(e, d)
                  : this.isFormatXY() && this.handleFormatXY(e, d),
                  (i.chart.type !== "candlestick" &&
                    e[d].type !== "candlestick" &&
                    i.chart.type !== "boxPlot" &&
                    e[d].type !== "boxPlot") ||
                    this.handleCandleStickBoxData(e, d),
                  s.series.push(this.twoDSeries),
                  s.labels.push(this.twoDSeriesX),
                  s.seriesX.push(this.twoDSeriesX),
                  (s.seriesGoals = this.seriesGoals),
                  d !== this.activeSeriesIndex ||
                    this.fallbackToCategory ||
                    (s.isXNumeric = !0);
              else {
                i.xaxis.type === "datetime"
                  ? ((s.isXNumeric = !0), h(), s.seriesX.push(this.twoDSeriesX))
                  : i.xaxis.type === "numeric" &&
                    ((s.isXNumeric = !0),
                    o.length > 0 &&
                      ((this.twoDSeriesX = o),
                      s.seriesX.push(this.twoDSeriesX))),
                  s.labels.push(this.twoDSeriesX);
                var u = e[d].data.map(function (f) {
                  return _.parseNumber(f);
                });
                s.series.push(u);
              }
              s.seriesZ.push(this.threeDSeries),
                e[d].color !== void 0
                  ? s.seriesColors.push(e[d].color)
                  : s.seriesColors.push(void 0);
            }
            return this.w;
          },
        },
        {
          key: "parseDataNonAxisCharts",
          value: function (e) {
            var t = this.w.globals,
              a = this.w.config;
            (t.series = e.slice()), (t.seriesNames = a.labels.slice());
            for (var i = 0; i < t.series.length; i++)
              t.seriesNames[i] === void 0 &&
                t.seriesNames.push("series-" + (i + 1));
            return this.w;
          },
        },
        {
          key: "handleExternalLabelsData",
          value: function (e) {
            var t = this.w.config,
              a = this.w.globals;
            t.xaxis.categories.length > 0
              ? (a.labels = t.xaxis.categories)
              : t.labels.length > 0
              ? (a.labels = t.labels.slice())
              : this.fallbackToCategory
              ? ((a.labels = a.labels[0]),
                a.seriesRange.length &&
                  (a.seriesRange.map(function (i) {
                    i.forEach(function (s) {
                      a.labels.indexOf(s.x) < 0 && s.x && a.labels.push(s.x);
                    });
                  }),
                  (a.labels = Array.from(
                    new Set(a.labels.map(JSON.stringify)),
                    JSON.parse
                  ))),
                t.xaxis.convertedCatToNumeric &&
                  (new Na(t).convertCatToNumericXaxis(
                    t,
                    this.ctx,
                    a.seriesX[0]
                  ),
                  this._generateExternalLabels(e)))
              : this._generateExternalLabels(e);
          },
        },
        {
          key: "_generateExternalLabels",
          value: function (e) {
            var t = this.w.globals,
              a = this.w.config,
              i = [];
            if (t.axisCharts) {
              if (t.series.length > 0)
                if (this.isFormatXY())
                  for (
                    var s = a.series.map(function (d, u) {
                        return d.data.filter(function (f, g, p) {
                          return (
                            p.findIndex(function (m) {
                              return m.x === f.x;
                            }) === g
                          );
                        });
                      }),
                      n = s.reduce(function (d, u, f, g) {
                        return g[d].length > u.length ? d : f;
                      }, 0),
                      o = 0;
                    o < s[n].length;
                    o++
                  )
                    i.push(o + 1);
                else
                  for (
                    var l = 0;
                    l < t.series[t.maxValsInArrayIndex].length;
                    l++
                  )
                    i.push(l + 1);
              t.seriesX = [];
              for (var c = 0; c < e.length; c++) t.seriesX.push(i);
              this.w.globals.isBarHorizontal || (t.isXNumeric = !0);
            }
            if (i.length === 0) {
              i = t.axisCharts
                ? []
                : t.series.map(function (d, u) {
                    return u + 1;
                  });
              for (var h = 0; h < e.length; h++) t.seriesX.push(i);
            }
            (t.labels = i),
              a.xaxis.convertedCatToNumeric &&
                (t.categoryLabels = i.map(function (d) {
                  return a.xaxis.labels.formatter(d);
                })),
              (t.noLabelsProvided = !0);
          },
        },
        {
          key: "parseData",
          value: function (e) {
            var t = this.w,
              a = t.config,
              i = t.globals;
            if (
              (this.excludeCollapsedSeriesInYAxis(),
              (this.fallbackToCategory = !1),
              this.ctx.core.resetGlobals(),
              this.ctx.core.isMultipleY(),
              i.axisCharts
                ? (this.parseDataAxisCharts(e),
                  this.coreUtils.getLargestSeries())
                : this.parseDataNonAxisCharts(e),
              a.chart.stacked)
            ) {
              var s = new Ve(this.ctx);
              i.series = s.setNullSeriesToZeroValues(i.series);
            }
            this.coreUtils.getSeriesTotals(),
              i.axisCharts &&
                ((i.stackedSeriesTotals =
                  this.coreUtils.getStackedSeriesTotals()),
                (i.stackedSeriesTotalsByGroups =
                  this.coreUtils.getStackedSeriesTotalsByGroups())),
              this.coreUtils.getPercentSeries(),
              i.dataFormatXNumeric ||
                (i.isXNumeric &&
                  (a.xaxis.type !== "numeric" ||
                    a.labels.length !== 0 ||
                    a.xaxis.categories.length !== 0)) ||
                this.handleExternalLabelsData(e);
            for (
              var n = this.coreUtils.getCategoryLabels(i.labels), o = 0;
              o < n.length;
              o++
            )
              if (Array.isArray(n[o])) {
                i.isMultiLineX = !0;
                break;
              }
          },
        },
        {
          key: "excludeCollapsedSeriesInYAxis",
          value: function () {
            var e = this.w,
              t = [];
            e.globals.seriesYAxisMap.forEach(function (a, i) {
              var s = 0;
              a.forEach(function (n) {
                e.globals.collapsedSeriesIndices.indexOf(n) !== -1 && s++;
              }),
                s > 0 && s == a.length && t.push(i);
            }),
              (e.globals.ignoreYAxisIndexes = t.map(function (a) {
                return a;
              }));
          },
        },
      ]),
      r
    );
  })(),
  Ri = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "scaleSvgNode",
          value: function (e, t) {
            var a = parseFloat(e.getAttributeNS(null, "width")),
              i = parseFloat(e.getAttributeNS(null, "height"));
            e.setAttributeNS(null, "width", a * t),
              e.setAttributeNS(null, "height", i * t),
              e.setAttributeNS(null, "viewBox", "0 0 " + a + " " + i);
          },
        },
        {
          key: "getSvgString",
          value: function (e) {
            var t = this;
            return new Promise(function (a) {
              var i = t.w,
                s =
                  e ||
                  i.config.chart.toolbar.export.scale ||
                  i.config.chart.toolbar.export.width / i.globals.svgWidth;
              s || (s = 1);
              var n = t.w.globals.dom.Paper.svg(),
                o = t.w.globals.dom.Paper.node.cloneNode(!0);
              s !== 1 && t.scaleSvgNode(o, s),
                t.convertImagesToBase64(o).then(function () {
                  (n = new XMLSerializer().serializeToString(o)),
                    a(n.replace(/&nbsp;/g, "&#160;"));
                });
            });
          },
        },
        {
          key: "convertImagesToBase64",
          value: function (e) {
            var t = this,
              a = e.getElementsByTagName("image"),
              i = Array.from(a).map(function (s) {
                var n = s.getAttributeNS(
                  "http://www.w3.org/1999/xlink",
                  "href"
                );
                return n && !n.startsWith("data:")
                  ? t
                      .getBase64FromUrl(n)
                      .then(function (o) {
                        s.setAttributeNS(
                          "http://www.w3.org/1999/xlink",
                          "href",
                          o
                        );
                      })
                      .catch(function (o) {
                        console.error("Error converting image to base64:", o);
                      })
                  : Promise.resolve();
              });
            return Promise.all(i);
          },
        },
        {
          key: "getBase64FromUrl",
          value: function (e) {
            return new Promise(function (t, a) {
              var i = new Image();
              (i.crossOrigin = "Anonymous"),
                (i.onload = function () {
                  var s = document.createElement("canvas");
                  (s.width = i.width),
                    (s.height = i.height),
                    s.getContext("2d").drawImage(i, 0, 0),
                    t(s.toDataURL());
                }),
                (i.onerror = a),
                (i.src = e);
            });
          },
        },
        {
          key: "cleanup",
          value: function () {
            var e = this.w,
              t = e.globals.dom.baseEl.getElementsByClassName(
                "apexcharts-xcrosshairs"
              ),
              a = e.globals.dom.baseEl.getElementsByClassName(
                "apexcharts-ycrosshairs"
              ),
              i = e.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-zoom-rect, .apexcharts-selection-rect"
              );
            Array.prototype.forEach.call(i, function (s) {
              s.setAttribute("width", 0);
            }),
              t &&
                t[0] &&
                (t[0].setAttribute("x", -500),
                t[0].setAttribute("x1", -500),
                t[0].setAttribute("x2", -500)),
              a &&
                a[0] &&
                (a[0].setAttribute("y", -100),
                a[0].setAttribute("y1", -100),
                a[0].setAttribute("y2", -100));
          },
        },
        {
          key: "svgUrl",
          value: function () {
            var e = this;
            return new Promise(function (t) {
              e.cleanup(),
                e.getSvgString().then(function (a) {
                  var i = new Blob([a], {
                    type: "image/svg+xml;charset=utf-8",
                  });
                  t(URL.createObjectURL(i));
                });
            });
          },
        },
        {
          key: "dataURI",
          value: function (e) {
            var t = this;
            return new Promise(function (a) {
              var i = t.w,
                s = e ? e.scale || e.width / i.globals.svgWidth : 1;
              t.cleanup();
              var n = document.createElement("canvas");
              (n.width = i.globals.svgWidth * s),
                (n.height =
                  parseInt(i.globals.dom.elWrap.style.height, 10) * s);
              var o =
                  i.config.chart.background !== "transparent" &&
                  i.config.chart.background
                    ? i.config.chart.background
                    : "#fff",
                l = n.getContext("2d");
              (l.fillStyle = o),
                l.fillRect(0, 0, n.width * s, n.height * s),
                t.getSvgString(s).then(function (c) {
                  var h = "data:image/svg+xml," + encodeURIComponent(c),
                    d = new Image();
                  (d.crossOrigin = "anonymous"),
                    (d.onload = function () {
                      if ((l.drawImage(d, 0, 0), n.msToBlob)) {
                        var u = n.msToBlob();
                        a({ blob: u });
                      } else {
                        var f = n.toDataURL("image/png");
                        a({ imgURI: f });
                      }
                    }),
                    (d.src = h);
                });
            });
          },
        },
        {
          key: "exportToSVG",
          value: function () {
            var e = this;
            this.svgUrl().then(function (t) {
              e.triggerDownload(
                t,
                e.w.config.chart.toolbar.export.svg.filename,
                ".svg"
              );
            });
          },
        },
        {
          key: "exportToPng",
          value: function () {
            var e = this,
              t = this.w.config.chart.toolbar.export.scale,
              a = this.w.config.chart.toolbar.export.width,
              i = t ? { scale: t } : a ? { width: a } : void 0;
            this.dataURI(i).then(function (s) {
              var n = s.imgURI,
                o = s.blob;
              o
                ? navigator.msSaveOrOpenBlob(o, e.w.globals.chartID + ".png")
                : e.triggerDownload(
                    n,
                    e.w.config.chart.toolbar.export.png.filename,
                    ".png"
                  );
            });
          },
        },
        {
          key: "exportToCSV",
          value: function (e) {
            var t = this,
              a = e.series,
              i = e.fileName,
              s = e.columnDelimiter,
              n = s === void 0 ? "," : s,
              o = e.lineDelimiter,
              l =
                o === void 0
                  ? `
`
                  : o,
              c = this.w;
            a || (a = c.config.series);
            var h = [],
              d = [],
              u = "",
              f = c.globals.series.map(function (y, C) {
                return c.globals.collapsedSeriesIndices.indexOf(C) === -1
                  ? y
                  : [];
              }),
              g = function (y) {
                return typeof c.config.chart.toolbar.export.csv
                  .categoryFormatter == "function"
                  ? c.config.chart.toolbar.export.csv.categoryFormatter(y)
                  : c.config.xaxis.type === "datetime" && String(y).length >= 10
                  ? new Date(y).toDateString()
                  : _.isNumber(y)
                  ? y
                  : y.split(n).join("");
              },
              p = function (y) {
                return typeof c.config.chart.toolbar.export.csv
                  .valueFormatter == "function"
                  ? c.config.chart.toolbar.export.csv.valueFormatter(y)
                  : y;
              },
              m = Math.max.apply(
                Math,
                Pe(
                  a.map(function (y) {
                    return y.data ? y.data.length : 0;
                  })
                )
              ),
              x = new Us(this.ctx),
              v = new St(this.ctx),
              b = function (y) {
                var C = "";
                if (c.globals.axisCharts) {
                  if (
                    c.config.xaxis.type === "category" ||
                    c.config.xaxis.convertedCatToNumeric
                  )
                    if (c.globals.isBarHorizontal) {
                      var A = c.globals.yLabelFormatters[0],
                        S = new Ve(t.ctx).getActiveConfigSeriesIndex();
                      C = A(c.globals.labels[y], {
                        seriesIndex: S,
                        dataPointIndex: y,
                        w: c,
                      });
                    } else
                      C = v.getLabel(
                        c.globals.labels,
                        c.globals.timescaleLabels,
                        0,
                        y
                      ).text;
                  c.config.xaxis.type === "datetime" &&
                    (c.config.xaxis.categories.length
                      ? (C = c.config.xaxis.categories[y])
                      : c.config.labels.length && (C = c.config.labels[y]));
                } else C = c.config.labels[y];
                return C === null
                  ? "nullvalue"
                  : (Array.isArray(C) && (C = C.join(" ")),
                    _.isNumber(C) ? C : C.split(n).join(""));
              },
              k = function (y, C) {
                if ((h.length && C === 0 && d.push(h.join(n)), y.data)) {
                  y.data =
                    (y.data.length && y.data) ||
                    Pe(Array(m)).map(function () {
                      return "";
                    });
                  for (var A = 0; A < y.data.length; A++) {
                    h = [];
                    var S = b(A);
                    if (S !== "nullvalue") {
                      if (
                        (S ||
                          (x.isFormatXY()
                            ? (S = a[C].data[A].x)
                            : x.isFormat2DArray() &&
                              (S = a[C].data[A] ? a[C].data[A][0] : "")),
                        C === 0)
                      ) {
                        h.push(g(S));
                        for (var T = 0; T < c.globals.series.length; T++) {
                          var E,
                            L = x.isFormatXY()
                              ? (E = a[T].data[A]) === null || E === void 0
                                ? void 0
                                : E.y
                              : f[T][A];
                          h.push(p(L));
                        }
                      }
                      (c.config.chart.type === "candlestick" ||
                        (y.type && y.type === "candlestick")) &&
                        (h.pop(),
                        h.push(c.globals.seriesCandleO[C][A]),
                        h.push(c.globals.seriesCandleH[C][A]),
                        h.push(c.globals.seriesCandleL[C][A]),
                        h.push(c.globals.seriesCandleC[C][A])),
                        (c.config.chart.type === "boxPlot" ||
                          (y.type && y.type === "boxPlot")) &&
                          (h.pop(),
                          h.push(c.globals.seriesCandleO[C][A]),
                          h.push(c.globals.seriesCandleH[C][A]),
                          h.push(c.globals.seriesCandleM[C][A]),
                          h.push(c.globals.seriesCandleL[C][A]),
                          h.push(c.globals.seriesCandleC[C][A])),
                        c.config.chart.type === "rangeBar" &&
                          (h.pop(),
                          h.push(c.globals.seriesRangeStart[C][A]),
                          h.push(c.globals.seriesRangeEnd[C][A])),
                        h.length && d.push(h.join(n));
                    }
                  }
                }
              };
            h.push(c.config.chart.toolbar.export.csv.headerCategory),
              c.config.chart.type === "boxPlot"
                ? (h.push("minimum"),
                  h.push("q1"),
                  h.push("median"),
                  h.push("q3"),
                  h.push("maximum"))
                : c.config.chart.type === "candlestick"
                ? (h.push("open"),
                  h.push("high"),
                  h.push("low"),
                  h.push("close"))
                : c.config.chart.type === "rangeBar"
                ? (h.push("minimum"), h.push("maximum"))
                : a.map(function (y, C) {
                    var A = (y.name ? y.name : "series-".concat(C)) + "";
                    c.globals.axisCharts &&
                      h.push(
                        A.split(n).join("")
                          ? A.split(n).join("")
                          : "series-".concat(C)
                      );
                  }),
              c.globals.axisCharts ||
                (h.push(c.config.chart.toolbar.export.csv.headerValue),
                d.push(h.join(n))),
              c.globals.allSeriesHasEqualX ||
              !c.globals.axisCharts ||
              c.config.xaxis.categories.length ||
              c.config.labels.length
                ? a.map(function (y, C) {
                    c.globals.axisCharts
                      ? k(y, C)
                      : ((h = []).push(g(c.globals.labels[C])),
                        h.push(p(f[C])),
                        d.push(h.join(n)));
                  })
                : (function () {
                    var y = new Set(),
                      C = {};
                    a.forEach(function (A, S) {
                      A == null ||
                        A.data.forEach(function (T) {
                          var E, L;
                          if (x.isFormatXY()) (E = T.x), (L = T.y);
                          else {
                            if (!x.isFormat2DArray()) return;
                            (E = T[0]), (L = T[1]);
                          }
                          C[E] || (C[E] = Array(a.length).fill("")),
                            (C[E][S] = p(L)),
                            y.add(E);
                        });
                    }),
                      h.length && d.push(h.join(n)),
                      Array.from(y)
                        .sort()
                        .forEach(function (A) {
                          d.push([g(A), C[A].join(n)]);
                        });
                  })(),
              (u += d.join(l)),
              this.triggerDownload(
                "data:text/csv; charset=utf-8," +
                  encodeURIComponent("\uFEFF" + u),
                i || c.config.chart.toolbar.export.csv.filename,
                ".csv"
              );
          },
        },
        {
          key: "triggerDownload",
          value: function (e, t, a) {
            var i = document.createElement("a");
            (i.href = e),
              (i.download = (t || this.w.globals.chartID) + a),
              document.body.appendChild(i),
              i.click(),
              document.body.removeChild(i);
          },
        },
      ]),
      r
    );
  })(),
  Fa = (function () {
    function r(e, t) {
      U(this, r), (this.ctx = e), (this.elgrid = t), (this.w = e.w);
      var a = this.w;
      (this.axesUtils = new St(e)),
        (this.xaxisLabels = a.globals.labels.slice()),
        a.globals.timescaleLabels.length > 0 &&
          !a.globals.isBarHorizontal &&
          (this.xaxisLabels = a.globals.timescaleLabels.slice()),
        a.config.xaxis.overwriteCategories &&
          (this.xaxisLabels = a.config.xaxis.overwriteCategories),
        (this.drawnLabels = []),
        (this.drawnLabelsRects = []),
        a.config.xaxis.position === "top"
          ? (this.offY = 0)
          : (this.offY = a.globals.gridHeight),
        (this.offY = this.offY + a.config.xaxis.axisBorder.offsetY),
        (this.isCategoryBarHorizontal =
          a.config.chart.type === "bar" && a.config.plotOptions.bar.horizontal),
        (this.xaxisFontSize = a.config.xaxis.labels.style.fontSize),
        (this.xaxisFontFamily = a.config.xaxis.labels.style.fontFamily),
        (this.xaxisForeColors = a.config.xaxis.labels.style.colors),
        (this.xaxisBorderWidth = a.config.xaxis.axisBorder.width),
        this.isCategoryBarHorizontal &&
          (this.xaxisBorderWidth =
            a.config.yaxis[0].axisBorder.width.toString()),
        this.xaxisBorderWidth.indexOf("%") > -1
          ? (this.xaxisBorderWidth =
              (a.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10)) / 100)
          : (this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10)),
        (this.xaxisBorderHeight = a.config.xaxis.axisBorder.height),
        (this.yaxis = a.config.yaxis[0]);
    }
    return (
      $(r, [
        {
          key: "drawXaxis",
          value: function () {
            var e = this.w,
              t = new H(this.ctx),
              a = t.group({
                class: "apexcharts-xaxis",
                transform: "translate("
                  .concat(e.config.xaxis.offsetX, ", ")
                  .concat(e.config.xaxis.offsetY, ")"),
              }),
              i = t.group({
                class: "apexcharts-xaxis-texts-g",
                transform: "translate("
                  .concat(e.globals.translateXAxisX, ", ")
                  .concat(e.globals.translateXAxisY, ")"),
              });
            a.add(i);
            for (var s = [], n = 0; n < this.xaxisLabels.length; n++)
              s.push(this.xaxisLabels[n]);
            if (
              (this.drawXAxisLabelAndGroup(
                !0,
                t,
                i,
                s,
                e.globals.isXNumeric,
                function (g, p) {
                  return p;
                }
              ),
              e.globals.hasXaxisGroups)
            ) {
              var o = e.globals.groups;
              s = [];
              for (var l = 0; l < o.length; l++) s.push(o[l].title);
              var c = {};
              e.config.xaxis.group.style &&
                ((c.xaxisFontSize = e.config.xaxis.group.style.fontSize),
                (c.xaxisFontFamily = e.config.xaxis.group.style.fontFamily),
                (c.xaxisForeColors = e.config.xaxis.group.style.colors),
                (c.fontWeight = e.config.xaxis.group.style.fontWeight),
                (c.cssClass = e.config.xaxis.group.style.cssClass)),
                this.drawXAxisLabelAndGroup(
                  !1,
                  t,
                  i,
                  s,
                  !1,
                  function (g, p) {
                    return o[g].cols * p;
                  },
                  c
                );
            }
            if (e.config.xaxis.title.text !== void 0) {
              var h = t.group({ class: "apexcharts-xaxis-title" }),
                d = t.drawText({
                  x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,
                  y:
                    this.offY +
                    parseFloat(this.xaxisFontSize) +
                    (e.config.xaxis.position === "bottom"
                      ? e.globals.xAxisLabelsHeight
                      : -e.globals.xAxisLabelsHeight - 10) +
                    e.config.xaxis.title.offsetY,
                  text: e.config.xaxis.title.text,
                  textAnchor: "middle",
                  fontSize: e.config.xaxis.title.style.fontSize,
                  fontFamily: e.config.xaxis.title.style.fontFamily,
                  fontWeight: e.config.xaxis.title.style.fontWeight,
                  foreColor: e.config.xaxis.title.style.color,
                  cssClass:
                    "apexcharts-xaxis-title-text " +
                    e.config.xaxis.title.style.cssClass,
                });
              h.add(d), a.add(h);
            }
            if (e.config.xaxis.axisBorder.show) {
              var u = e.globals.barPadForNumericAxis,
                f = t.drawLine(
                  e.globals.padHorizontal +
                    e.config.xaxis.axisBorder.offsetX -
                    u,
                  this.offY,
                  this.xaxisBorderWidth + u,
                  this.offY,
                  e.config.xaxis.axisBorder.color,
                  0,
                  this.xaxisBorderHeight
                );
              this.elgrid && this.elgrid.elGridBorders && e.config.grid.show
                ? this.elgrid.elGridBorders.add(f)
                : a.add(f);
            }
            return a;
          },
        },
        {
          key: "drawXAxisLabelAndGroup",
          value: function (e, t, a, i, s, n) {
            var o,
              l = this,
              c =
                arguments.length > 6 && arguments[6] !== void 0
                  ? arguments[6]
                  : {},
              h = [],
              d = [],
              u = this.w,
              f = c.xaxisFontSize || this.xaxisFontSize,
              g = c.xaxisFontFamily || this.xaxisFontFamily,
              p = c.xaxisForeColors || this.xaxisForeColors,
              m = c.fontWeight || u.config.xaxis.labels.style.fontWeight,
              x = c.cssClass || u.config.xaxis.labels.style.cssClass,
              v = u.globals.padHorizontal,
              b = i.length,
              k = u.config.xaxis.type === "category" ? u.globals.dataPoints : b;
            if ((k === 0 && b > k && (k = b), s)) {
              var y = Math.max(
                Number(u.config.xaxis.tickAmount) || 1,
                k > 1 ? k - 1 : k
              );
              (o = u.globals.gridWidth / Math.min(y, b - 1)),
                (v = v + n(0, o) / 2 + u.config.xaxis.labels.offsetX);
            } else
              (o = u.globals.gridWidth / k),
                (v = v + n(0, o) + u.config.xaxis.labels.offsetX);
            for (
              var C = function (S) {
                  var T = v - n(S, o) / 2 + u.config.xaxis.labels.offsetX;
                  S === 0 &&
                    b === 1 &&
                    o / 2 === v &&
                    k === 1 &&
                    (T = u.globals.gridWidth / 2);
                  var E = l.axesUtils.getLabel(
                      i,
                      u.globals.timescaleLabels,
                      T,
                      S,
                      h,
                      f,
                      e
                    ),
                    L = 28;
                  if (
                    (u.globals.rotateXLabels && e && (L = 22),
                    u.config.xaxis.title.text &&
                      u.config.xaxis.position === "top" &&
                      (L +=
                        parseFloat(u.config.xaxis.title.style.fontSize) + 2),
                    e ||
                      (L =
                        L +
                        parseFloat(f) +
                        (u.globals.xAxisLabelsHeight -
                          u.globals.xAxisGroupLabelsHeight) +
                        (u.globals.rotateXLabels ? 10 : 0)),
                    (E =
                      u.config.xaxis.tickAmount !== void 0 &&
                      u.config.xaxis.tickAmount !== "dataPoints" &&
                      u.config.xaxis.type !== "datetime"
                        ? l.axesUtils.checkLabelBasedOnTickamount(S, E, b)
                        : l.axesUtils.checkForOverflowingLabels(S, E, b, h, d)),
                    u.config.xaxis.labels.show)
                  ) {
                    var I = t.drawText({
                      x: E.x,
                      y:
                        l.offY +
                        u.config.xaxis.labels.offsetY +
                        L -
                        (u.config.xaxis.position === "top"
                          ? u.globals.xAxisHeight +
                            u.config.xaxis.axisTicks.height -
                            2
                          : 0),
                      text: E.text,
                      textAnchor: "middle",
                      fontWeight: E.isBold ? 600 : m,
                      fontSize: f,
                      fontFamily: g,
                      foreColor: Array.isArray(p)
                        ? e && u.config.xaxis.convertedCatToNumeric
                          ? p[u.globals.minX + S - 1]
                          : p[S]
                        : p,
                      isPlainText: !1,
                      cssClass:
                        (e
                          ? "apexcharts-xaxis-label "
                          : "apexcharts-xaxis-group-label ") + x,
                    });
                    if (
                      (a.add(I),
                      I.on("click", function (O) {
                        if (
                          typeof u.config.chart.events.xAxisLabelClick ==
                          "function"
                        ) {
                          var N = Object.assign({}, u, { labelIndex: S });
                          u.config.chart.events.xAxisLabelClick(O, l.ctx, N);
                        }
                      }),
                      e)
                    ) {
                      var M = document.createElementNS(
                        u.globals.SVGNS,
                        "title"
                      );
                      (M.textContent = Array.isArray(E.text)
                        ? E.text.join(" ")
                        : E.text),
                        I.node.appendChild(M),
                        E.text !== "" && (h.push(E.text), d.push(E));
                    }
                  }
                  S < b - 1 && (v += n(S + 1, o));
                },
                A = 0;
              A <= b - 1;
              A++
            )
              C(A);
          },
        },
        {
          key: "drawXaxisInversed",
          value: function (e) {
            var t,
              a,
              i = this,
              s = this.w,
              n = new H(this.ctx),
              o = s.config.yaxis[0].opposite ? s.globals.translateYAxisX[e] : 0,
              l = n.group({
                class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                rel: e,
              }),
              c = n.group({
                class:
                  "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                transform: "translate(" + o + ", 0)",
              });
            l.add(c);
            var h = [];
            if (s.config.yaxis[e].show)
              for (var d = 0; d < this.xaxisLabels.length; d++)
                h.push(this.xaxisLabels[d]);
            (t = s.globals.gridHeight / h.length), (a = -t / 2.2);
            var u = s.globals.yLabelFormatters[0],
              f = s.config.yaxis[0].labels;
            if (f.show)
              for (
                var g = function (y) {
                    var C = h[y] === void 0 ? "" : h[y];
                    C = u(C, { seriesIndex: e, dataPointIndex: y, w: s });
                    var A = i.axesUtils.getYAxisForeColor(f.style.colors, e),
                      S = 0;
                    Array.isArray(C) &&
                      (S = (C.length / 2) * parseInt(f.style.fontSize, 10));
                    var T = f.offsetX - 15,
                      E = "end";
                    i.yaxis.opposite && (E = "start"),
                      s.config.yaxis[0].labels.align === "left"
                        ? ((T = f.offsetX), (E = "start"))
                        : s.config.yaxis[0].labels.align === "center"
                        ? ((T = f.offsetX), (E = "middle"))
                        : s.config.yaxis[0].labels.align === "right" &&
                          (E = "end");
                    var L = n.drawText({
                      x: T,
                      y: a + t + f.offsetY - S,
                      text: C,
                      textAnchor: E,
                      foreColor: Array.isArray(A) ? A[y] : A,
                      fontSize: f.style.fontSize,
                      fontFamily: f.style.fontFamily,
                      fontWeight: f.style.fontWeight,
                      isPlainText: !1,
                      cssClass: "apexcharts-yaxis-label " + f.style.cssClass,
                      maxWidth: f.maxWidth,
                    });
                    c.add(L),
                      L.on("click", function (O) {
                        if (
                          typeof s.config.chart.events.xAxisLabelClick ==
                          "function"
                        ) {
                          var N = Object.assign({}, s, { labelIndex: y });
                          s.config.chart.events.xAxisLabelClick(O, i.ctx, N);
                        }
                      });
                    var I = document.createElementNS(s.globals.SVGNS, "title");
                    if (
                      ((I.textContent = Array.isArray(C) ? C.join(" ") : C),
                      L.node.appendChild(I),
                      s.config.yaxis[e].labels.rotate !== 0)
                    ) {
                      var M = n.rotateAroundCenter(L.node);
                      L.node.setAttribute(
                        "transform",
                        "rotate("
                          .concat(s.config.yaxis[e].labels.rotate, " 0 ")
                          .concat(M.y, ")")
                      );
                    }
                    a += t;
                  },
                  p = 0;
                p <= h.length - 1;
                p++
              )
                g(p);
            if (s.config.yaxis[0].title.text !== void 0) {
              var m = n.group({
                  class:
                    "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                  transform: "translate(" + o + ", 0)",
                }),
                x = n.drawText({
                  x: s.config.yaxis[0].title.offsetX,
                  y: s.globals.gridHeight / 2 + s.config.yaxis[0].title.offsetY,
                  text: s.config.yaxis[0].title.text,
                  textAnchor: "middle",
                  foreColor: s.config.yaxis[0].title.style.color,
                  fontSize: s.config.yaxis[0].title.style.fontSize,
                  fontWeight: s.config.yaxis[0].title.style.fontWeight,
                  fontFamily: s.config.yaxis[0].title.style.fontFamily,
                  cssClass:
                    "apexcharts-yaxis-title-text " +
                    s.config.yaxis[0].title.style.cssClass,
                });
              m.add(x), l.add(m);
            }
            var v = 0;
            this.isCategoryBarHorizontal &&
              s.config.yaxis[0].opposite &&
              (v = s.globals.gridWidth);
            var b = s.config.xaxis.axisBorder;
            if (b.show) {
              var k = n.drawLine(
                s.globals.padHorizontal + b.offsetX + v,
                1 + b.offsetY,
                s.globals.padHorizontal + b.offsetX + v,
                s.globals.gridHeight + b.offsetY,
                b.color,
                0
              );
              this.elgrid && this.elgrid.elGridBorders && s.config.grid.show
                ? this.elgrid.elGridBorders.add(k)
                : l.add(k);
            }
            return (
              s.config.yaxis[0].axisTicks.show &&
                this.axesUtils.drawYAxisTicks(
                  v,
                  h.length,
                  s.config.yaxis[0].axisBorder,
                  s.config.yaxis[0].axisTicks,
                  0,
                  t,
                  l
                ),
              l
            );
          },
        },
        {
          key: "drawXaxisTicks",
          value: function (e, t, a) {
            var i = this.w,
              s = e;
            if (!(e < 0 || e - 2 > i.globals.gridWidth)) {
              var n = this.offY + i.config.xaxis.axisTicks.offsetY;
              if (
                ((t = t + n + i.config.xaxis.axisTicks.height),
                i.config.xaxis.position === "top" &&
                  (t = n - i.config.xaxis.axisTicks.height),
                i.config.xaxis.axisTicks.show)
              ) {
                var o = new H(this.ctx).drawLine(
                  e + i.config.xaxis.axisTicks.offsetX,
                  n + i.config.xaxis.offsetY,
                  s + i.config.xaxis.axisTicks.offsetX,
                  t + i.config.xaxis.offsetY,
                  i.config.xaxis.axisTicks.color
                );
                a.add(o), o.node.classList.add("apexcharts-xaxis-tick");
              }
            }
          },
        },
        {
          key: "getXAxisTicksPositions",
          value: function () {
            var e = this.w,
              t = [],
              a = this.xaxisLabels.length,
              i = e.globals.padHorizontal;
            if (e.globals.timescaleLabels.length > 0)
              for (var s = 0; s < a; s++)
                (i = this.xaxisLabels[s].position), t.push(i);
            else
              for (var n = a, o = 0; o < n; o++) {
                var l = n;
                e.globals.isXNumeric &&
                  e.config.chart.type !== "bar" &&
                  (l -= 1),
                  (i += e.globals.gridWidth / l),
                  t.push(i);
              }
            return t;
          },
        },
        {
          key: "xAxisLabelCorrections",
          value: function () {
            var e = this.w,
              t = new H(this.ctx),
              a = e.globals.dom.baseEl.querySelector(
                ".apexcharts-xaxis-texts-g"
              ),
              i = e.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"
              ),
              s = e.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-yaxis-inversed text"
              ),
              n = e.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-xaxis-inversed-texts-g text tspan"
              );
            if (e.globals.rotateXLabels || e.config.xaxis.labels.rotateAlways)
              for (var o = 0; o < i.length; o++) {
                var l = t.rotateAroundCenter(i[o]);
                (l.y = l.y - 1),
                  (l.x = l.x + 1),
                  i[o].setAttribute(
                    "transform",
                    "rotate("
                      .concat(e.config.xaxis.labels.rotate, " ")
                      .concat(l.x, " ")
                      .concat(l.y, ")")
                  ),
                  i[o].setAttribute("text-anchor", "end"),
                  a.setAttribute("transform", "translate(0, ".concat(-10, ")"));
                var c = i[o].childNodes;
                e.config.xaxis.labels.trim &&
                  Array.prototype.forEach.call(c, function (f) {
                    t.placeTextWithEllipsis(
                      f,
                      f.textContent,
                      e.globals.xAxisLabelsHeight -
                        (e.config.legend.position === "bottom" ? 20 : 10)
                    );
                  });
              }
            else
              (function () {
                for (
                  var f = e.globals.gridWidth / (e.globals.labels.length + 1),
                    g = 0;
                  g < i.length;
                  g++
                ) {
                  var p = i[g].childNodes;
                  e.config.xaxis.labels.trim &&
                    e.config.xaxis.type !== "datetime" &&
                    Array.prototype.forEach.call(p, function (m) {
                      t.placeTextWithEllipsis(m, m.textContent, f);
                    });
                }
              })();
            if (s.length > 0) {
              var h = s[s.length - 1].getBBox(),
                d = s[0].getBBox();
              h.x < -20 &&
                s[s.length - 1].parentNode.removeChild(s[s.length - 1]),
                d.x + d.width > e.globals.gridWidth &&
                  !e.globals.isBarHorizontal &&
                  s[0].parentNode.removeChild(s[0]);
              for (var u = 0; u < n.length; u++)
                t.placeTextWithEllipsis(
                  n[u],
                  n[u].textContent,
                  e.config.yaxis[0].labels.maxWidth -
                    (e.config.yaxis[0].title.text
                      ? 2 * parseFloat(e.config.yaxis[0].title.style.fontSize)
                      : 0) -
                    15
                );
            }
          },
        },
      ]),
      r
    );
  })(),
  Bc = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
      var t = this.w;
      (this.xaxisLabels = t.globals.labels.slice()),
        (this.axesUtils = new St(e)),
        (this.isRangeBar =
          t.globals.seriesRange.length && t.globals.isBarHorizontal),
        t.globals.timescaleLabels.length > 0 &&
          (this.xaxisLabels = t.globals.timescaleLabels.slice());
    }
    return (
      $(r, [
        {
          key: "drawGridArea",
          value: function () {
            var e =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : null,
              t = this.w,
              a = new H(this.ctx);
            e || (e = a.group({ class: "apexcharts-grid" }));
            var i = a.drawLine(
                t.globals.padHorizontal,
                1,
                t.globals.padHorizontal,
                t.globals.gridHeight,
                "transparent"
              ),
              s = a.drawLine(
                t.globals.padHorizontal,
                t.globals.gridHeight,
                t.globals.gridWidth,
                t.globals.gridHeight,
                "transparent"
              );
            return e.add(s), e.add(i), e;
          },
        },
        {
          key: "drawGrid",
          value: function () {
            if (this.w.globals.axisCharts) {
              var e = this.renderGrid();
              return this.drawGridArea(e.el), e;
            }
            return null;
          },
        },
        {
          key: "createGridMask",
          value: function () {
            var e = this.w,
              t = e.globals,
              a = new H(this.ctx),
              i = Array.isArray(e.config.stroke.width)
                ? Math.max.apply(Math, Pe(e.config.stroke.width))
                : e.config.stroke.width,
              s = function (h) {
                var d = document.createElementNS(t.SVGNS, "clipPath");
                return d.setAttribute("id", h), d;
              };
            (t.dom.elGridRectMask = s("gridRectMask".concat(t.cuid))),
              (t.dom.elGridRectBarMask = s("gridRectBarMask".concat(t.cuid))),
              (t.dom.elGridRectMarkerMask = s(
                "gridRectMarkerMask".concat(t.cuid)
              )),
              (t.dom.elForecastMask = s("forecastMask".concat(t.cuid))),
              (t.dom.elNonForecastMask = s("nonForecastMask".concat(t.cuid)));
            var n = 0,
              o = 0;
            (["bar", "rangeBar", "candlestick", "boxPlot"].includes(
              e.config.chart.type
            ) ||
              e.globals.comboBarCount > 0) &&
              e.globals.isXNumeric &&
              !e.globals.isBarHorizontal &&
              ((n = Math.max(
                e.config.grid.padding.left,
                t.barPadForNumericAxis
              )),
              (o = Math.max(
                e.config.grid.padding.right,
                t.barPadForNumericAxis
              ))),
              (t.dom.elGridRect = a.drawRect(
                -i / 2 - 2,
                -i / 2 - 2,
                t.gridWidth + i + 4,
                t.gridHeight + i + 4,
                0,
                "#fff"
              )),
              (t.dom.elGridRectBar = a.drawRect(
                -i / 2 - n - 2,
                -i / 2 - 2,
                t.gridWidth + i + o + n + 4,
                t.gridHeight + i + 4,
                0,
                "#fff"
              ));
            var l = e.globals.markers.largestSize;
            (t.dom.elGridRectMarker = a.drawRect(
              -l,
              -l,
              t.gridWidth + 2 * l,
              t.gridHeight + 2 * l,
              0,
              "#fff"
            )),
              t.dom.elGridRectMask.appendChild(t.dom.elGridRect.node),
              t.dom.elGridRectBarMask.appendChild(t.dom.elGridRectBar.node),
              t.dom.elGridRectMarkerMask.appendChild(
                t.dom.elGridRectMarker.node
              );
            var c = t.dom.baseEl.querySelector("defs");
            c.appendChild(t.dom.elGridRectMask),
              c.appendChild(t.dom.elGridRectBarMask),
              c.appendChild(t.dom.elGridRectMarkerMask),
              c.appendChild(t.dom.elForecastMask),
              c.appendChild(t.dom.elNonForecastMask);
          },
        },
        {
          key: "_drawGridLines",
          value: function (e) {
            var t = e.i,
              a = e.x1,
              i = e.y1,
              s = e.x2,
              n = e.y2,
              o = e.xCount,
              l = e.parent,
              c = this.w;
            if (
              !(
                (t === 0 && c.globals.skipFirstTimelinelabel) ||
                (t === o - 1 &&
                  c.globals.skipLastTimelinelabel &&
                  !c.config.xaxis.labels.formatter) ||
                c.config.chart.type === "radar"
              )
            ) {
              c.config.grid.xaxis.lines.show &&
                this._drawGridLine({
                  i: t,
                  x1: a,
                  y1: i,
                  x2: s,
                  y2: n,
                  xCount: o,
                  parent: l,
                });
              var h = 0;
              if (
                c.globals.hasXaxisGroups &&
                c.config.xaxis.tickPlacement === "between"
              ) {
                var d = c.globals.groups;
                if (d) {
                  for (var u = 0, f = 0; u < t && f < d.length; f++)
                    u += d[f].cols;
                  u === t && (h = 0.6 * c.globals.xAxisLabelsHeight);
                }
              }
              new Fa(this.ctx).drawXaxisTicks(a, h, c.globals.dom.elGraphical);
            }
          },
        },
        {
          key: "_drawGridLine",
          value: function (e) {
            var t = e.i,
              a = e.x1,
              i = e.y1,
              s = e.x2,
              n = e.y2,
              o = e.xCount,
              l = e.parent,
              c = this.w,
              h = l.node.classList.contains("apexcharts-gridlines-horizontal"),
              d = c.globals.barPadForNumericAxis,
              u =
                (i === 0 && n === 0) ||
                (a === 0 && s === 0) ||
                (i === c.globals.gridHeight && n === c.globals.gridHeight) ||
                (c.globals.isBarHorizontal && (t === 0 || t === o - 1)),
              f = new H(this).drawLine(
                a - (h ? d : 0),
                i,
                s + (h ? d : 0),
                n,
                c.config.grid.borderColor,
                c.config.grid.strokeDashArray
              );
            f.node.classList.add("apexcharts-gridline"),
              u && c.config.grid.show ? this.elGridBorders.add(f) : l.add(f);
          },
        },
        {
          key: "_drawGridBandRect",
          value: function (e) {
            var t = e.c,
              a = e.x1,
              i = e.y1,
              s = e.x2,
              n = e.y2,
              o = e.type,
              l = this.w,
              c = new H(this.ctx),
              h = l.globals.barPadForNumericAxis,
              d = l.config.grid[o].colors[t],
              u = c.drawRect(
                a - (o === "row" ? h : 0),
                i,
                s + (o === "row" ? 2 * h : 0),
                n,
                0,
                d,
                l.config.grid[o].opacity
              );
            this.elg.add(u),
              u.attr(
                "clip-path",
                "url(#gridRectMask".concat(l.globals.cuid, ")")
              ),
              u.node.classList.add("apexcharts-grid-".concat(o));
          },
        },
        {
          key: "_drawXYLines",
          value: function (e) {
            var t = this,
              a = e.xCount,
              i = e.tickAmount,
              s = this.w;
            if (
              s.config.grid.xaxis.lines.show ||
              s.config.xaxis.axisTicks.show
            ) {
              var n,
                o = s.globals.padHorizontal,
                l = s.globals.gridHeight;
              s.globals.timescaleLabels.length
                ? (function (g) {
                    for (
                      var p = g.xC,
                        m = g.x1,
                        x = g.y1,
                        v = g.x2,
                        b = g.y2,
                        k = 0;
                      k < p;
                      k++
                    )
                      (m = t.xaxisLabels[k].position),
                        (v = t.xaxisLabels[k].position),
                        t._drawGridLines({
                          i: k,
                          x1: m,
                          y1: x,
                          x2: v,
                          y2: b,
                          xCount: a,
                          parent: t.elgridLinesV,
                        });
                  })({ xC: a, x1: o, y1: 0, x2: n, y2: l })
                : (s.globals.isXNumeric &&
                    (a = s.globals.xAxisScale.result.length),
                  (function (g) {
                    for (
                      var p = g.xC,
                        m = g.x1,
                        x = g.y1,
                        v = g.x2,
                        b = g.y2,
                        k = 0;
                      k < p + (s.globals.isXNumeric ? 0 : 1);
                      k++
                    )
                      k === 0 &&
                        p === 1 &&
                        s.globals.dataPoints === 1 &&
                        (v = m = s.globals.gridWidth / 2),
                        t._drawGridLines({
                          i: k,
                          x1: m,
                          y1: x,
                          x2: v,
                          y2: b,
                          xCount: a,
                          parent: t.elgridLinesV,
                        }),
                        (v = m +=
                          s.globals.gridWidth /
                          (s.globals.isXNumeric ? p - 1 : p));
                  })({ xC: a, x1: o, y1: 0, x2: n, y2: l }));
            }
            if (s.config.grid.yaxis.lines.show) {
              var c = 0,
                h = 0,
                d = s.globals.gridWidth,
                u = i + 1;
              this.isRangeBar && (u = s.globals.labels.length);
              for (var f = 0; f < u + (this.isRangeBar ? 1 : 0); f++)
                this._drawGridLine({
                  i: f,
                  xCount: u + (this.isRangeBar ? 1 : 0),
                  x1: 0,
                  y1: c,
                  x2: d,
                  y2: h,
                  parent: this.elgridLinesH,
                }),
                  (h = c += s.globals.gridHeight / (this.isRangeBar ? u : i));
            }
          },
        },
        {
          key: "_drawInvertedXYLines",
          value: function (e) {
            var t = e.xCount,
              a = this.w;
            if (a.config.grid.xaxis.lines.show || a.config.xaxis.axisTicks.show)
              for (
                var i,
                  s = a.globals.padHorizontal,
                  n = a.globals.gridHeight,
                  o = 0;
                o < t + 1;
                o++
              )
                a.config.grid.xaxis.lines.show &&
                  this._drawGridLine({
                    i: o,
                    xCount: t + 1,
                    x1: s,
                    y1: 0,
                    x2: i,
                    y2: n,
                    parent: this.elgridLinesV,
                  }),
                  new Fa(this.ctx).drawXaxisTicks(
                    s,
                    0,
                    a.globals.dom.elGraphical
                  ),
                  (i = s += a.globals.gridWidth / t);
            if (a.config.grid.yaxis.lines.show)
              for (
                var l = 0, c = 0, h = a.globals.gridWidth, d = 0;
                d < a.globals.dataPoints + 1;
                d++
              )
                this._drawGridLine({
                  i: d,
                  xCount: a.globals.dataPoints + 1,
                  x1: 0,
                  y1: l,
                  x2: h,
                  y2: c,
                  parent: this.elgridLinesH,
                }),
                  (c = l += a.globals.gridHeight / a.globals.dataPoints);
          },
        },
        {
          key: "renderGrid",
          value: function () {
            var e = this.w,
              t = e.globals,
              a = new H(this.ctx);
            (this.elg = a.group({ class: "apexcharts-grid" })),
              (this.elgridLinesH = a.group({
                class: "apexcharts-gridlines-horizontal",
              })),
              (this.elgridLinesV = a.group({
                class: "apexcharts-gridlines-vertical",
              })),
              (this.elGridBorders = a.group({
                class: "apexcharts-grid-borders",
              })),
              this.elg.add(this.elgridLinesH),
              this.elg.add(this.elgridLinesV),
              e.config.grid.show ||
                (this.elgridLinesV.hide(),
                this.elgridLinesH.hide(),
                this.elGridBorders.hide());
            for (
              var i = 0;
              i < t.seriesYAxisMap.length && t.ignoreYAxisIndexes.includes(i);

            )
              i++;
            i === t.seriesYAxisMap.length && (i = 0);
            var s,
              n = t.yAxisScale[i].result.length - 1;
            if (!t.isBarHorizontal || this.isRangeBar) {
              var o, l, c;
              (s = this.xaxisLabels.length),
                this.isRangeBar &&
                  ((n = t.labels.length),
                  e.config.xaxis.tickAmount &&
                    e.config.xaxis.labels.formatter &&
                    (s = e.config.xaxis.tickAmount),
                  ((o = t.yAxisScale) === null ||
                  o === void 0 ||
                  (l = o[i]) === null ||
                  l === void 0 ||
                  (c = l.result) === null ||
                  c === void 0
                    ? void 0
                    : c.length) > 0 &&
                    e.config.xaxis.type !== "datetime" &&
                    (s = t.yAxisScale[i].result.length - 1)),
                this._drawXYLines({ xCount: s, tickAmount: n });
            } else
              (s = n),
                (n = t.xTickAmount),
                this._drawInvertedXYLines({ xCount: s, tickAmount: n });
            return (
              this.drawGridBands(s, n),
              {
                el: this.elg,
                elGridBorders: this.elGridBorders,
                xAxisTickWidth: t.gridWidth / s,
              }
            );
          },
        },
        {
          key: "drawGridBands",
          value: function (e, t) {
            var a,
              i,
              s = this,
              n = this.w;
            if (
              (((a = n.config.grid.row.colors) === null || a === void 0
                ? void 0
                : a.length) > 0 &&
                (function (g, p, m, x, v, b) {
                  for (var k = 0, y = 0; k < p; k++, y++)
                    y >= n.config.grid[g].colors.length && (y = 0),
                      s._drawGridBandRect({
                        c: y,
                        x1: m,
                        y1: x,
                        x2: v,
                        y2: b,
                        type: g,
                      }),
                      (x += n.globals.gridHeight / t);
                })(
                  "row",
                  t,
                  0,
                  0,
                  n.globals.gridWidth,
                  n.globals.gridHeight / t
                ),
              ((i = n.config.grid.column.colors) === null || i === void 0
                ? void 0
                : i.length) > 0)
            ) {
              var o =
                n.globals.isBarHorizontal ||
                n.config.xaxis.tickPlacement !== "on" ||
                (n.config.xaxis.type !== "category" &&
                  !n.config.xaxis.convertedCatToNumeric)
                  ? e
                  : e - 1;
              n.globals.isXNumeric &&
                (o = n.globals.xAxisScale.result.length - 1);
              for (
                var l = n.globals.padHorizontal,
                  c = n.globals.padHorizontal + n.globals.gridWidth / o,
                  h = n.globals.gridHeight,
                  d = 0,
                  u = 0;
                d < e;
                d++, u++
              ) {
                var f;
                u >= n.config.grid.column.colors.length && (u = 0),
                  n.config.xaxis.type === "datetime" &&
                    ((l = this.xaxisLabels[d].position),
                    (c =
                      (((f = this.xaxisLabels[d + 1]) === null || f === void 0
                        ? void 0
                        : f.position) || n.globals.gridWidth) -
                      this.xaxisLabels[d].position)),
                  this._drawGridBandRect({
                    c: u,
                    x1: l,
                    y1: 0,
                    x2: c,
                    y2: h,
                    type: "column",
                  }),
                  (l += n.globals.gridWidth / o);
              }
            }
          },
        },
      ]),
      r
    );
  })(),
  Yc = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.coreUtils = new ke(this.ctx));
    }
    return (
      $(r, [
        {
          key: "niceScale",
          value: function (e, t) {
            var a,
              i,
              s,
              n,
              o =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : 0,
              l = 1e-11,
              c = this.w,
              h = c.globals;
            h.isBarHorizontal
              ? ((a = c.config.xaxis),
                (i = Math.max((h.svgWidth - 100) / 25, 2)))
              : ((a = c.config.yaxis[o]),
                (i = Math.max((h.svgHeight - 100) / 15, 2))),
              _.isNumber(i) || (i = 10),
              (s = a.min !== void 0 && a.min !== null),
              (n = a.max !== void 0 && a.min !== null);
            var d = a.stepSize !== void 0 && a.stepSize !== null,
              u = a.tickAmount !== void 0 && a.tickAmount !== null,
              f = u
                ? a.tickAmount
                : h.niceScaleDefaultTicks[
                    Math.min(
                      Math.round(i / 2),
                      h.niceScaleDefaultTicks.length - 1
                    )
                  ];
            if (
              (h.isMultipleYAxis &&
                !u &&
                h.multiAxisTickAmount > 0 &&
                ((f = h.multiAxisTickAmount), (u = !0)),
              (f =
                f === "dataPoints"
                  ? h.dataPoints - 1
                  : Math.abs(Math.round(f))),
              ((e === Number.MIN_VALUE && t === 0) ||
                (!_.isNumber(e) && !_.isNumber(t)) ||
                (e === Number.MIN_VALUE && t === -Number.MAX_VALUE)) &&
                ((e = _.isNumber(a.min) ? a.min : 0),
                (t = _.isNumber(a.max) ? a.max : e + f),
                (h.allSeriesCollapsed = !1)),
              e > t)
            ) {
              console.warn(
                "axis.min cannot be greater than axis.max: swapping min and max"
              );
              var g = t;
              (t = e), (e = g);
            } else
              e === t && ((e = e === 0 ? 0 : e - 1), (t = t === 0 ? 2 : t + 1));
            var p = [];
            f < 1 && (f = 1);
            var m = f,
              x = Math.abs(t - e);
            !s && e > 0 && e / x < 0.15 && ((e = 0), (s = !0)),
              !n && t < 0 && -t / x < 0.15 && ((t = 0), (n = !0));
            var v = (x = Math.abs(t - e)) / m,
              b = v,
              k = Math.floor(Math.log10(b)),
              y = Math.pow(10, k),
              C = Math.ceil(b / y);
            if (
              ((v = b =
                (C =
                  h.niceScaleAllowedMagMsd[h.yValueDecimal === 0 ? 0 : 1][C]) *
                y),
              h.isBarHorizontal && a.stepSize && a.type !== "datetime"
                ? ((v = a.stepSize), (d = !0))
                : d && (v = a.stepSize),
              d && a.forceNiceScale)
            ) {
              var A = Math.floor(Math.log10(v));
              v *= Math.pow(10, k - A);
            }
            if (s && n) {
              var S = x / m;
              if (u)
                if (d)
                  if (_.mod(x, v) != 0) {
                    var T = _.getGCD(v, S);
                    v = S / T < 10 ? T : S;
                  } else _.mod(v, S) == 0 ? (v = S) : ((S = v), (u = !1));
                else v = S;
              else if (d) _.mod(x, v) == 0 ? (S = v) : (v = S);
              else if (_.mod(x, v) == 0) S = v;
              else {
                S = x / (m = Math.ceil(x / v));
                var E = _.getGCD(x, v);
                x / E < i && (S = E), (v = S);
              }
              m = Math.round(x / v);
            } else {
              if (s || n) {
                if (n)
                  if (u) e = t - v * m;
                  else {
                    var L = e;
                    (e = v * Math.floor(e / v)),
                      Math.abs(t - e) / _.getGCD(x, v) > i &&
                        ((e = t - v * f), (e += v * Math.floor((L - e) / v)));
                  }
                else if (s)
                  if (u) t = e + v * m;
                  else {
                    var I = t;
                    (t = v * Math.ceil(t / v)),
                      Math.abs(t - e) / _.getGCD(x, v) > i &&
                        ((t = e + v * f), (t += v * Math.ceil((I - t) / v)));
                  }
              } else if (h.isMultipleYAxis && u) {
                var M = v * Math.floor(e / v),
                  O = M + v * m;
                O < t && (v *= 2),
                  (O = t),
                  (t = (e = M) + v * m),
                  (x = Math.abs(t - e)),
                  e > 0 && e < Math.abs(O - t) && ((e = 0), (t = v * m)),
                  t < 0 && -t < Math.abs(M - e) && ((t = 0), (e = -v * m));
              } else (e = v * Math.floor(e / v)), (t = v * Math.ceil(t / v));
              (x = Math.abs(t - e)),
                (v = _.getGCD(x, v)),
                (m = Math.round(x / v));
            }
            if (
              (u ||
                s ||
                n ||
                ((m = Math.ceil((x - l) / (v + l))) > 16 &&
                  _.getPrimeFactors(m).length < 2 &&
                  m++),
              !u &&
                a.forceNiceScale &&
                h.yValueDecimal === 0 &&
                m > x &&
                ((m = x), (v = Math.round(x / m))),
              m > i && ((!u && !d) || a.forceNiceScale))
            ) {
              var N = _.getPrimeFactors(m),
                F = N.length - 1,
                D = m;
              e: for (var B = 0; B < F; B++)
                for (var z = 0; z <= F - B; z++) {
                  for (
                    var G = Math.min(z + B, F), V = D, Q = 1, Z = z;
                    Z <= G;
                    Z++
                  )
                    Q *= N[Z];
                  if ((V /= Q) < i) {
                    D = V;
                    break e;
                  }
                }
              (v = D === m ? x : x / D), (m = Math.round(x / v));
            }
            h.isMultipleYAxis &&
              h.multiAxisTickAmount == 0 &&
              h.ignoreYAxisIndexes.indexOf(o) < 0 &&
              (h.multiAxisTickAmount = m);
            var X = e - v,
              q = v * l;
            do (X += v), p.push(_.stripNumber(X, 7));
            while (t - X > q);
            return { result: p, niceMin: p[0], niceMax: p[p.length - 1] };
          },
        },
        {
          key: "linearScale",
          value: function (e, t) {
            var a =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : 10,
              i =
                arguments.length > 3 && arguments[3] !== void 0
                  ? arguments[3]
                  : 0,
              s =
                arguments.length > 4 && arguments[4] !== void 0
                  ? arguments[4]
                  : void 0,
              n = Math.abs(t - e),
              o = [];
            if (e === t)
              return {
                result: (o = [e]),
                niceMin: o[0],
                niceMax: o[o.length - 1],
              };
            (a = this._adjustTicksForSmallRange(a, i, n)) === "dataPoints" &&
              (a = this.w.globals.dataPoints - 1),
              s || (s = n / a),
              (s = Math.round(10 * (s + Number.EPSILON)) / 10),
              a === Number.MAX_VALUE && ((a = 5), (s = 1));
            for (var l = e; a >= 0; )
              o.push(l), (l = _.preciseAddition(l, s)), (a -= 1);
            return { result: o, niceMin: o[0], niceMax: o[o.length - 1] };
          },
        },
        {
          key: "logarithmicScaleNice",
          value: function (e, t, a) {
            t <= 0 && (t = Math.max(e, a)), e <= 0 && (e = Math.min(t, a));
            for (
              var i = [],
                s = Math.ceil(Math.log(t) / Math.log(a) + 1),
                n = Math.floor(Math.log(e) / Math.log(a));
              n < s;
              n++
            )
              i.push(Math.pow(a, n));
            return { result: i, niceMin: i[0], niceMax: i[i.length - 1] };
          },
        },
        {
          key: "logarithmicScale",
          value: function (e, t, a) {
            t <= 0 && (t = Math.max(e, a)), e <= 0 && (e = Math.min(t, a));
            for (
              var i = [],
                s = Math.log(t) / Math.log(a),
                n = Math.log(e) / Math.log(a),
                o = s - n,
                l = Math.round(o),
                c = o / l,
                h = 0,
                d = n;
              h < l;
              h++, d += c
            )
              i.push(Math.pow(a, d));
            return (
              i.push(Math.pow(a, s)), { result: i, niceMin: e, niceMax: t }
            );
          },
        },
        {
          key: "_adjustTicksForSmallRange",
          value: function (e, t, a) {
            var i = e;
            if (
              t !== void 0 &&
              this.w.config.yaxis[t].labels.formatter &&
              this.w.config.yaxis[t].tickAmount === void 0
            ) {
              var s = Number(this.w.config.yaxis[t].labels.formatter(1));
              _.isNumber(s) &&
                this.w.globals.yValueDecimal === 0 &&
                (i = Math.ceil(a));
            }
            return i < e ? i : e;
          },
        },
        {
          key: "setYScaleForIndex",
          value: function (e, t, a) {
            var i = this.w.globals,
              s = this.w.config,
              n = i.isBarHorizontal ? s.xaxis : s.yaxis[e];
            i.yAxisScale[e] === void 0 && (i.yAxisScale[e] = []);
            var o = Math.abs(a - t);
            n.logarithmic && o <= 5 && (i.invalidLogScale = !0),
              n.logarithmic && o > 5
                ? ((i.allSeriesCollapsed = !1),
                  (i.yAxisScale[e] = n.forceNiceScale
                    ? this.logarithmicScaleNice(t, a, n.logBase)
                    : this.logarithmicScale(t, a, n.logBase)))
                : a !== -Number.MAX_VALUE &&
                  _.isNumber(a) &&
                  t !== Number.MAX_VALUE &&
                  _.isNumber(t)
                ? ((i.allSeriesCollapsed = !1),
                  (i.yAxisScale[e] = this.niceScale(t, a, e)))
                : (i.yAxisScale[e] = this.niceScale(Number.MIN_VALUE, 0, e));
          },
        },
        {
          key: "setXScale",
          value: function (e, t) {
            var a = this.w,
              i = a.globals,
              s = Math.abs(t - e);
            if (t !== -Number.MAX_VALUE && _.isNumber(t)) {
              var n = i.xTickAmount;
              s < 10 && s > 1 && (n = s),
                (i.xAxisScale = this.linearScale(
                  e,
                  t,
                  n,
                  0,
                  a.config.xaxis.stepSize
                ));
            } else i.xAxisScale = this.linearScale(0, 10, 10);
            return i.xAxisScale;
          },
        },
        {
          key: "scaleMultipleYAxes",
          value: function () {
            var e = this,
              t = this.w.config,
              a = this.w.globals;
            this.coreUtils.setSeriesYAxisMappings();
            var i = a.seriesYAxisMap,
              s = a.minYArr,
              n = a.maxYArr;
            (a.allSeriesCollapsed = !0),
              (a.barGroups = []),
              i.forEach(function (o, l) {
                var c = [];
                o.forEach(function (h) {
                  var d,
                    u =
                      (d = t.series[h]) === null || d === void 0
                        ? void 0
                        : d.group;
                  c.indexOf(u) < 0 && c.push(u);
                }),
                  o.length > 0
                    ? (function () {
                        var h,
                          d,
                          u = Number.MAX_VALUE,
                          f = -Number.MAX_VALUE,
                          g = u,
                          p = f;
                        if (t.chart.stacked)
                          (function () {
                            var v = new Array(a.dataPoints).fill(0),
                              b = [],
                              k = [],
                              y = [];
                            c.forEach(function () {
                              b.push(
                                v.map(function () {
                                  return Number.MIN_VALUE;
                                })
                              ),
                                k.push(
                                  v.map(function () {
                                    return Number.MIN_VALUE;
                                  })
                                ),
                                y.push(
                                  v.map(function () {
                                    return Number.MIN_VALUE;
                                  })
                                );
                            });
                            for (
                              var C = function (S) {
                                  !h &&
                                    t.series[o[S]].type &&
                                    (h = t.series[o[S]].type);
                                  var T = o[S];
                                  (d = t.series[T].group
                                    ? t.series[T].group
                                    : "axis-".concat(l)),
                                    !(
                                      a.collapsedSeriesIndices.indexOf(T) < 0 &&
                                      a.ancillaryCollapsedSeriesIndices.indexOf(
                                        T
                                      ) < 0
                                    ) ||
                                      ((a.allSeriesCollapsed = !1),
                                      c.forEach(function (E, L) {
                                        if (t.series[T].group === E)
                                          for (
                                            var I = 0;
                                            I < a.series[T].length;
                                            I++
                                          ) {
                                            var M = a.series[T][I];
                                            M >= 0
                                              ? (k[L][I] += M)
                                              : (y[L][I] += M),
                                              (b[L][I] += M),
                                              (g = Math.min(g, M)),
                                              (p = Math.max(p, M));
                                          }
                                      })),
                                    (h !== "bar" && h !== "column") ||
                                      a.barGroups.push(d);
                                },
                                A = 0;
                              A < o.length;
                              A++
                            )
                              C(A);
                            h || (h = t.chart.type),
                              h === "bar" || h === "column"
                                ? c.forEach(function (S, T) {
                                    (u = Math.min(
                                      u,
                                      Math.min.apply(null, y[T])
                                    )),
                                      (f = Math.max(
                                        f,
                                        Math.max.apply(null, k[T])
                                      ));
                                  })
                                : (c.forEach(function (S, T) {
                                    (g = Math.min(
                                      g,
                                      Math.min.apply(null, b[T])
                                    )),
                                      (p = Math.max(
                                        p,
                                        Math.max.apply(null, b[T])
                                      ));
                                  }),
                                  (u = g),
                                  (f = p)),
                              u === Number.MIN_VALUE &&
                                f === Number.MIN_VALUE &&
                                (f = -Number.MAX_VALUE);
                          })();
                        else
                          for (var m = 0; m < o.length; m++) {
                            var x = o[m];
                            (u = Math.min(u, s[x])),
                              (f = Math.max(f, n[x])),
                              !(
                                a.collapsedSeriesIndices.indexOf(x) < 0 &&
                                a.ancillaryCollapsedSeriesIndices.indexOf(x) < 0
                              ) || (a.allSeriesCollapsed = !1);
                          }
                        t.yaxis[l].min !== void 0 &&
                          (u =
                            typeof t.yaxis[l].min == "function"
                              ? t.yaxis[l].min(u)
                              : t.yaxis[l].min),
                          t.yaxis[l].max !== void 0 &&
                            (f =
                              typeof t.yaxis[l].max == "function"
                                ? t.yaxis[l].max(f)
                                : t.yaxis[l].max),
                          (a.barGroups = a.barGroups.filter(function (v, b, k) {
                            return k.indexOf(v) === b;
                          })),
                          e.setYScaleForIndex(l, u, f),
                          o.forEach(function (v) {
                            (s[v] = a.yAxisScale[l].niceMin),
                              (n[v] = a.yAxisScale[l].niceMax);
                          });
                      })()
                    : e.setYScaleForIndex(l, 0, -Number.MAX_VALUE);
              });
          },
        },
      ]),
      r
    );
  })(),
  Jr = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w), (this.scales = new Yc(e));
    }
    return (
      $(r, [
        {
          key: "init",
          value: function () {
            this.setYRange(), this.setXRange(), this.setZRange();
          },
        },
        {
          key: "getMinYMaxY",
          value: function (e) {
            var t =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : Number.MAX_VALUE,
              a =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : -Number.MAX_VALUE,
              i =
                arguments.length > 3 && arguments[3] !== void 0
                  ? arguments[3]
                  : null,
              s = this.w.config,
              n = this.w.globals,
              o = -Number.MAX_VALUE,
              l = Number.MIN_VALUE;
            i === null && (i = e + 1);
            var c = n.series,
              h = c,
              d = c;
            s.chart.type === "candlestick"
              ? ((h = n.seriesCandleL), (d = n.seriesCandleH))
              : s.chart.type === "boxPlot"
              ? ((h = n.seriesCandleO), (d = n.seriesCandleC))
              : n.isRangeData &&
                ((h = n.seriesRangeStart), (d = n.seriesRangeEnd));
            var u = !1;
            if (n.seriesX.length >= i) {
              var f,
                g =
                  (f = n.brushSource) === null || f === void 0
                    ? void 0
                    : f.w.config.chart.brush;
              ((s.chart.zoom.enabled && s.chart.zoom.autoScaleYaxis) ||
                (g != null && g.enabled && g != null && g.autoScaleYaxis)) &&
                (u = !0);
            }
            for (var p = e; p < i; p++) {
              n.dataPoints = Math.max(n.dataPoints, c[p].length);
              var m = s.series[p].type;
              n.categoryLabels.length &&
                (n.dataPoints = n.categoryLabels.filter(function (y) {
                  return y !== void 0;
                }).length),
                n.labels.length &&
                  s.xaxis.type !== "datetime" &&
                  n.series.reduce(function (y, C) {
                    return y + C.length;
                  }, 0) !== 0 &&
                  (n.dataPoints = Math.max(n.dataPoints, n.labels.length));
              var x = 0,
                v = c[p].length - 1;
              if (u) {
                if (s.xaxis.min)
                  for (; x < v && n.seriesX[p][x] < s.xaxis.min; x++);
                if (s.xaxis.max)
                  for (; v > x && n.seriesX[p][v] > s.xaxis.max; v--);
              }
              for (var b = x; b <= v && b < n.series[p].length; b++) {
                var k = c[p][b];
                if (k !== null && _.isNumber(k)) {
                  switch (
                    (d[p][b] !== void 0 &&
                      ((o = Math.max(o, d[p][b])), (t = Math.min(t, d[p][b]))),
                    h[p][b] !== void 0 &&
                      ((t = Math.min(t, h[p][b])), (a = Math.max(a, h[p][b]))),
                    m)
                  ) {
                    case "candlestick":
                      n.seriesCandleC[p][b] !== void 0 &&
                        ((o = Math.max(o, n.seriesCandleH[p][b])),
                        (t = Math.min(t, n.seriesCandleL[p][b])));
                      break;
                    case "boxPlot":
                      n.seriesCandleC[p][b] !== void 0 &&
                        ((o = Math.max(o, n.seriesCandleC[p][b])),
                        (t = Math.min(t, n.seriesCandleO[p][b])));
                  }
                  m &&
                    m !== "candlestick" &&
                    m !== "boxPlot" &&
                    m !== "rangeArea" &&
                    m !== "rangeBar" &&
                    ((o = Math.max(o, n.series[p][b])),
                    (t = Math.min(t, n.series[p][b]))),
                    n.seriesGoals[p] &&
                      n.seriesGoals[p][b] &&
                      Array.isArray(n.seriesGoals[p][b]) &&
                      n.seriesGoals[p][b].forEach(function (y) {
                        (o = Math.max(o, y.value)), (t = Math.min(t, y.value));
                      }),
                    (a = o),
                    (k = _.noExponents(k)),
                    _.isFloat(k) &&
                      (n.yValueDecimal = Math.max(
                        n.yValueDecimal,
                        k.toString().split(".")[1].length
                      )),
                    l > h[p][b] && h[p][b] < 0 && (l = h[p][b]);
                } else n.hasNullValues = !0;
              }
              (m !== "bar" && m !== "column") ||
                (l < 0 && o < 0 && ((o = 0), (a = Math.max(a, 0))),
                l === Number.MIN_VALUE && ((l = 0), (t = Math.min(t, 0))));
            }
            return (
              s.chart.type === "rangeBar" &&
                n.seriesRangeStart.length &&
                n.isBarHorizontal &&
                (l = t),
              s.chart.type === "bar" &&
                (l < 0 && o < 0 && (o = 0), l === Number.MIN_VALUE && (l = 0)),
              { minY: l, maxY: o, lowestY: t, highestY: a }
            );
          },
        },
        {
          key: "setYRange",
          value: function () {
            var e = this.w.globals,
              t = this.w.config;
            (e.maxY = -Number.MAX_VALUE), (e.minY = Number.MIN_VALUE);
            var a,
              i = Number.MAX_VALUE;
            if (e.isMultipleYAxis) {
              i = Number.MAX_VALUE;
              for (var s = 0; s < e.series.length; s++)
                (a = this.getMinYMaxY(s)),
                  (e.minYArr[s] = a.lowestY),
                  (e.maxYArr[s] = a.highestY),
                  (i = Math.min(i, a.lowestY));
            }
            return (
              (a = this.getMinYMaxY(0, i, null, e.series.length)),
              t.chart.type === "bar"
                ? ((e.minY = a.minY), (e.maxY = a.maxY))
                : ((e.minY = a.lowestY), (e.maxY = a.highestY)),
              (i = a.lowestY),
              t.chart.stacked && this._setStackedMinMax(),
              t.chart.type === "line" ||
              t.chart.type === "area" ||
              t.chart.type === "scatter" ||
              t.chart.type === "candlestick" ||
              t.chart.type === "boxPlot" ||
              (t.chart.type === "rangeBar" && !e.isBarHorizontal)
                ? e.minY === Number.MIN_VALUE &&
                  i !== -Number.MAX_VALUE &&
                  i !== e.maxY &&
                  (e.minY = i)
                : (e.minY =
                    e.minY !== Number.MIN_VALUE
                      ? Math.min(a.minY, e.minY)
                      : a.minY),
              t.yaxis.forEach(function (n, o) {
                n.max !== void 0 &&
                  (typeof n.max == "number"
                    ? (e.maxYArr[o] = n.max)
                    : typeof n.max == "function" &&
                      (e.maxYArr[o] = n.max(
                        e.isMultipleYAxis ? e.maxYArr[o] : e.maxY
                      )),
                  (e.maxY = e.maxYArr[o])),
                  n.min !== void 0 &&
                    (typeof n.min == "number"
                      ? (e.minYArr[o] = n.min)
                      : typeof n.min == "function" &&
                        (e.minYArr[o] = n.min(
                          e.isMultipleYAxis
                            ? e.minYArr[o] === Number.MIN_VALUE
                              ? 0
                              : e.minYArr[o]
                            : e.minY
                        )),
                    (e.minY = e.minYArr[o]));
              }),
              e.isBarHorizontal &&
                ["min", "max"].forEach(function (n) {
                  t.xaxis[n] !== void 0 &&
                    typeof t.xaxis[n] == "number" &&
                    (n === "min"
                      ? (e.minY = t.xaxis[n])
                      : (e.maxY = t.xaxis[n]));
                }),
              e.isMultipleYAxis
                ? (this.scales.scaleMultipleYAxes(), (e.minY = i))
                : (this.scales.setYScaleForIndex(0, e.minY, e.maxY),
                  (e.minY = e.yAxisScale[0].niceMin),
                  (e.maxY = e.yAxisScale[0].niceMax),
                  (e.minYArr[0] = e.minY),
                  (e.maxYArr[0] = e.maxY)),
              (e.barGroups = []),
              (e.lineGroups = []),
              (e.areaGroups = []),
              t.series.forEach(function (n) {
                switch (n.type || t.chart.type) {
                  case "bar":
                  case "column":
                    e.barGroups.push(n.group);
                    break;
                  case "line":
                    e.lineGroups.push(n.group);
                    break;
                  case "area":
                    e.areaGroups.push(n.group);
                }
              }),
              (e.barGroups = e.barGroups.filter(function (n, o, l) {
                return l.indexOf(n) === o;
              })),
              (e.lineGroups = e.lineGroups.filter(function (n, o, l) {
                return l.indexOf(n) === o;
              })),
              (e.areaGroups = e.areaGroups.filter(function (n, o, l) {
                return l.indexOf(n) === o;
              })),
              {
                minY: e.minY,
                maxY: e.maxY,
                minYArr: e.minYArr,
                maxYArr: e.maxYArr,
                yAxisScale: e.yAxisScale,
              }
            );
          },
        },
        {
          key: "setXRange",
          value: function () {
            var e = this.w.globals,
              t = this.w.config,
              a =
                t.xaxis.type === "numeric" ||
                t.xaxis.type === "datetime" ||
                (t.xaxis.type === "category" && !e.noLabelsProvided) ||
                e.noLabelsProvided ||
                e.isXNumeric;
            if (
              (e.isXNumeric &&
                (function () {
                  for (var l = 0; l < e.series.length; l++)
                    if (e.labels[l])
                      for (var c = 0; c < e.labels[l].length; c++)
                        e.labels[l][c] !== null &&
                          _.isNumber(e.labels[l][c]) &&
                          ((e.maxX = Math.max(e.maxX, e.labels[l][c])),
                          (e.initialMaxX = Math.max(e.maxX, e.labels[l][c])),
                          (e.minX = Math.min(e.minX, e.labels[l][c])),
                          (e.initialMinX = Math.min(e.minX, e.labels[l][c])));
                })(),
              e.noLabelsProvided &&
                t.xaxis.categories.length === 0 &&
                ((e.maxX = e.labels[e.labels.length - 1]),
                (e.initialMaxX = e.labels[e.labels.length - 1]),
                (e.minX = 1),
                (e.initialMinX = 1)),
              e.isXNumeric || e.noLabelsProvided || e.dataFormatXNumeric)
            ) {
              var i = 10;
              if (t.xaxis.tickAmount === void 0)
                (i = Math.round(e.svgWidth / 150)),
                  t.xaxis.type === "numeric" &&
                    e.dataPoints < 30 &&
                    (i = e.dataPoints - 1),
                  i > e.dataPoints &&
                    e.dataPoints !== 0 &&
                    (i = e.dataPoints - 1);
              else if (t.xaxis.tickAmount === "dataPoints") {
                if (
                  (e.series.length > 1 &&
                    (i = e.series[e.maxValsInArrayIndex].length - 1),
                  e.isXNumeric)
                ) {
                  var s = e.maxX - e.minX;
                  s < 30 && (i = s - 1);
                }
              } else i = t.xaxis.tickAmount;
              if (
                ((e.xTickAmount = i),
                t.xaxis.max !== void 0 &&
                  typeof t.xaxis.max == "number" &&
                  (e.maxX = t.xaxis.max),
                t.xaxis.min !== void 0 &&
                  typeof t.xaxis.min == "number" &&
                  (e.minX = t.xaxis.min),
                t.xaxis.range !== void 0 && (e.minX = e.maxX - t.xaxis.range),
                e.minX !== Number.MAX_VALUE && e.maxX !== -Number.MAX_VALUE)
              )
                if (t.xaxis.convertedCatToNumeric && !e.dataFormatXNumeric) {
                  for (var n = [], o = e.minX - 1; o < e.maxX; o++)
                    n.push(o + 1);
                  e.xAxisScale = {
                    result: n,
                    niceMin: n[0],
                    niceMax: n[n.length - 1],
                  };
                } else e.xAxisScale = this.scales.setXScale(e.minX, e.maxX);
              else
                (e.xAxisScale = this.scales.linearScale(
                  0,
                  i,
                  i,
                  0,
                  t.xaxis.stepSize
                )),
                  e.noLabelsProvided &&
                    e.labels.length > 0 &&
                    ((e.xAxisScale = this.scales.linearScale(
                      1,
                      e.labels.length,
                      i - 1,
                      0,
                      t.xaxis.stepSize
                    )),
                    (e.seriesX = e.labels.slice()));
              a && (e.labels = e.xAxisScale.result.slice());
            }
            return (
              e.isBarHorizontal &&
                e.labels.length &&
                (e.xTickAmount = e.labels.length),
              this._handleSingleDataPoint(),
              this._getMinXDiff(),
              { minX: e.minX, maxX: e.maxX }
            );
          },
        },
        {
          key: "setZRange",
          value: function () {
            var e = this.w.globals;
            if (e.isDataXYZ) {
              for (var t = 0; t < e.series.length; t++)
                if (e.seriesZ[t] !== void 0)
                  for (var a = 0; a < e.seriesZ[t].length; a++)
                    e.seriesZ[t][a] !== null &&
                      _.isNumber(e.seriesZ[t][a]) &&
                      ((e.maxZ = Math.max(e.maxZ, e.seriesZ[t][a])),
                      (e.minZ = Math.min(e.minZ, e.seriesZ[t][a])));
            }
          },
        },
        {
          key: "_handleSingleDataPoint",
          value: function () {
            var e = this.w.globals,
              t = this.w.config;
            if (e.minX === e.maxX) {
              var a = new Me(this.ctx);
              if (t.xaxis.type === "datetime") {
                var i = a.getDate(e.minX);
                t.xaxis.labels.datetimeUTC
                  ? i.setUTCDate(i.getUTCDate() - 2)
                  : i.setDate(i.getDate() - 2),
                  (e.minX = new Date(i).getTime());
                var s = a.getDate(e.maxX);
                t.xaxis.labels.datetimeUTC
                  ? s.setUTCDate(s.getUTCDate() + 2)
                  : s.setDate(s.getDate() + 2),
                  (e.maxX = new Date(s).getTime());
              } else
                (t.xaxis.type === "numeric" ||
                  (t.xaxis.type === "category" && !e.noLabelsProvided)) &&
                  ((e.minX = e.minX - 2),
                  (e.initialMinX = e.minX),
                  (e.maxX = e.maxX + 2),
                  (e.initialMaxX = e.maxX));
            }
          },
        },
        {
          key: "_getMinXDiff",
          value: function () {
            var e = this.w.globals;
            e.isXNumeric &&
              e.seriesX.forEach(function (t, a) {
                if (t.length) {
                  t.length === 1 &&
                    t.push(
                      e.seriesX[e.maxValsInArrayIndex][
                        e.seriesX[e.maxValsInArrayIndex].length - 1
                      ]
                    );
                  var i = t.slice();
                  i.sort(function (s, n) {
                    return s - n;
                  }),
                    i.forEach(function (s, n) {
                      if (n > 0) {
                        var o = s - i[n - 1];
                        o > 0 && (e.minXDiff = Math.min(o, e.minXDiff));
                      }
                    }),
                    (e.dataPoints !== 1 && e.minXDiff !== Number.MAX_VALUE) ||
                      (e.minXDiff = 0.5);
                }
              });
          },
        },
        {
          key: "_setStackedMinMax",
          value: function () {
            var e = this,
              t = this.w.globals;
            if (t.series.length) {
              var a = t.seriesGroups;
              a.length ||
                (a = [
                  this.w.globals.seriesNames.map(function (n) {
                    return n;
                  }),
                ]);
              var i = {},
                s = {};
              a.forEach(function (n) {
                (i[n] = []),
                  (s[n] = []),
                  e.w.config.series
                    .map(function (o, l) {
                      return n.indexOf(t.seriesNames[l]) > -1 ? l : null;
                    })
                    .filter(function (o) {
                      return o !== null;
                    })
                    .forEach(function (o) {
                      for (
                        var l = 0;
                        l < t.series[t.maxValsInArrayIndex].length;
                        l++
                      ) {
                        var c, h, d, u;
                        i[n][l] === void 0 && ((i[n][l] = 0), (s[n][l] = 0)),
                          ((e.w.config.chart.stacked && !t.comboCharts) ||
                            (e.w.config.chart.stacked &&
                              t.comboCharts &&
                              (!e.w.config.chart.stackOnlyBar ||
                                ((c = e.w.config.series) === null ||
                                c === void 0 ||
                                (h = c[o]) === null ||
                                h === void 0
                                  ? void 0
                                  : h.type) === "bar" ||
                                ((d = e.w.config.series) === null ||
                                d === void 0 ||
                                (u = d[o]) === null ||
                                u === void 0
                                  ? void 0
                                  : u.type) === "column"))) &&
                            t.series[o][l] !== null &&
                            _.isNumber(t.series[o][l]) &&
                            (t.series[o][l] > 0
                              ? (i[n][l] += parseFloat(t.series[o][l]) + 1e-4)
                              : (s[n][l] += parseFloat(t.series[o][l])));
                      }
                    });
              }),
                Object.entries(i).forEach(function (n) {
                  var o = cc(n, 1)[0];
                  i[o].forEach(function (l, c) {
                    (t.maxY = Math.max(t.maxY, i[o][c])),
                      (t.minY = Math.min(t.minY, s[o][c]));
                  });
                });
            }
          },
        },
      ]),
      r
    );
  })(),
  $s = (function () {
    function r(e, t) {
      U(this, r), (this.ctx = e), (this.elgrid = t), (this.w = e.w);
      var a = this.w;
      (this.xaxisFontSize = a.config.xaxis.labels.style.fontSize),
        (this.axisFontFamily = a.config.xaxis.labels.style.fontFamily),
        (this.xaxisForeColors = a.config.xaxis.labels.style.colors),
        (this.isCategoryBarHorizontal =
          a.config.chart.type === "bar" && a.config.plotOptions.bar.horizontal),
        (this.xAxisoffX =
          a.config.xaxis.position === "bottom" ? a.globals.gridHeight : 0),
        (this.drawnLabels = []),
        (this.axesUtils = new St(e));
    }
    return (
      $(r, [
        {
          key: "drawYaxis",
          value: function (e) {
            var t = this.w,
              a = new H(this.ctx),
              i = t.config.yaxis[e].labels.style,
              s = i.fontSize,
              n = i.fontFamily,
              o = i.fontWeight,
              l = a.group({
                class: "apexcharts-yaxis",
                rel: e,
                transform: "translate(".concat(
                  t.globals.translateYAxisX[e],
                  ", 0)"
                ),
              });
            if (this.axesUtils.isYAxisHidden(e)) return l;
            var c = a.group({ class: "apexcharts-yaxis-texts-g" });
            l.add(c);
            var h = t.globals.yAxisScale[e].result.length - 1,
              d = t.globals.gridHeight / h,
              u = t.globals.yLabelFormatters[e],
              f = this.axesUtils.checkForReversedLabels(
                e,
                t.globals.yAxisScale[e].result.slice()
              );
            if (t.config.yaxis[e].labels.show) {
              var g = t.globals.translateY + t.config.yaxis[e].labels.offsetY;
              t.globals.isBarHorizontal
                ? (g = 0)
                : t.config.chart.type === "heatmap" && (g -= d / 2),
                (g += parseInt(s, 10) / 3);
              for (var p = h; p >= 0; p--) {
                var m = u(f[p], p, t),
                  x = t.config.yaxis[e].labels.padding;
                t.config.yaxis[e].opposite &&
                  t.config.yaxis.length !== 0 &&
                  (x *= -1);
                var v = this.getTextAnchor(
                    t.config.yaxis[e].labels.align,
                    t.config.yaxis[e].opposite
                  ),
                  b = this.axesUtils.getYAxisForeColor(i.colors, e),
                  k = Array.isArray(b) ? b[p] : b,
                  y = _.listToArray(
                    t.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-yaxis[rel='".concat(
                        e,
                        "'] .apexcharts-yaxis-label tspan"
                      )
                    )
                  ).map(function (A) {
                    return A.textContent;
                  }),
                  C = a.drawText({
                    x,
                    y: g,
                    text:
                      y.includes(m) && !t.config.yaxis[e].labels.showDuplicates
                        ? ""
                        : m,
                    textAnchor: v,
                    fontSize: s,
                    fontFamily: n,
                    fontWeight: o,
                    maxWidth: t.config.yaxis[e].labels.maxWidth,
                    foreColor: k,
                    isPlainText: !1,
                    cssClass: "apexcharts-yaxis-label ".concat(i.cssClass),
                  });
                c.add(C),
                  this.addTooltip(C, m),
                  t.config.yaxis[e].labels.rotate !== 0 &&
                    this.rotateLabel(
                      a,
                      C,
                      firstLabel,
                      t.config.yaxis[e].labels.rotate
                    ),
                  (g += d);
              }
            }
            return (
              this.addYAxisTitle(a, l, e), this.addAxisBorder(a, l, e, h, d), l
            );
          },
        },
        {
          key: "getTextAnchor",
          value: function (e, t) {
            return e === "left"
              ? "start"
              : e === "center"
              ? "middle"
              : e === "right"
              ? "end"
              : t
              ? "start"
              : "end";
          },
        },
        {
          key: "addTooltip",
          value: function (e, t) {
            var a = document.createElementNS(this.w.globals.SVGNS, "title");
            (a.textContent = Array.isArray(t) ? t.join(" ") : t),
              e.node.appendChild(a);
          },
        },
        {
          key: "rotateLabel",
          value: function (e, t, a, i) {
            var s = e.rotateAroundCenter(a.node),
              n = e.rotateAroundCenter(t.node);
            t.node.setAttribute(
              "transform",
              "rotate(".concat(i, " ").concat(s.x, " ").concat(n.y, ")")
            );
          },
        },
        {
          key: "addYAxisTitle",
          value: function (e, t, a) {
            var i = this.w;
            if (i.config.yaxis[a].title.text !== void 0) {
              var s = e.group({ class: "apexcharts-yaxis-title" }),
                n = i.config.yaxis[a].opposite
                  ? i.globals.translateYAxisX[a]
                  : 0,
                o = e.drawText({
                  x: n,
                  y:
                    i.globals.gridHeight / 2 +
                    i.globals.translateY +
                    i.config.yaxis[a].title.offsetY,
                  text: i.config.yaxis[a].title.text,
                  textAnchor: "end",
                  foreColor: i.config.yaxis[a].title.style.color,
                  fontSize: i.config.yaxis[a].title.style.fontSize,
                  fontWeight: i.config.yaxis[a].title.style.fontWeight,
                  fontFamily: i.config.yaxis[a].title.style.fontFamily,
                  cssClass: "apexcharts-yaxis-title-text ".concat(
                    i.config.yaxis[a].title.style.cssClass
                  ),
                });
              s.add(o), t.add(s);
            }
          },
        },
        {
          key: "addAxisBorder",
          value: function (e, t, a, i, s) {
            var n = this.w,
              o = n.config.yaxis[a].axisBorder,
              l = 31 + o.offsetX;
            if ((n.config.yaxis[a].opposite && (l = -31 - o.offsetX), o.show)) {
              var c = e.drawLine(
                l,
                n.globals.translateY + o.offsetY - 2,
                l,
                n.globals.gridHeight + n.globals.translateY + o.offsetY + 2,
                o.color,
                0,
                o.width
              );
              t.add(c);
            }
            n.config.yaxis[a].axisTicks.show &&
              this.axesUtils.drawYAxisTicks(
                l,
                i,
                o,
                n.config.yaxis[a].axisTicks,
                a,
                s,
                t
              );
          },
        },
        {
          key: "drawYaxisInversed",
          value: function (e) {
            var t = this.w,
              a = new H(this.ctx),
              i = a.group({
                class: "apexcharts-xaxis apexcharts-yaxis-inversed",
              }),
              s = a.group({
                class: "apexcharts-xaxis-texts-g",
                transform: "translate("
                  .concat(t.globals.translateXAxisX, ", ")
                  .concat(t.globals.translateXAxisY, ")"),
              });
            i.add(s);
            var n = t.globals.yAxisScale[e].result.length - 1,
              o = t.globals.gridWidth / n + 0.1,
              l = o + t.config.xaxis.labels.offsetX,
              c = t.globals.xLabelFormatter,
              h = this.axesUtils.checkForReversedLabels(
                e,
                t.globals.yAxisScale[e].result.slice()
              ),
              d = t.globals.timescaleLabels;
            if (
              (d.length > 0 &&
                ((this.xaxisLabels = d.slice()), (n = (h = d.slice()).length)),
              t.config.xaxis.labels.show)
            )
              for (
                var u = d.length ? 0 : n;
                d.length ? u < d.length : u >= 0;
                d.length ? u++ : u--
              ) {
                var f = c(h[u], u, t),
                  g =
                    t.globals.gridWidth +
                    t.globals.padHorizontal -
                    (l - o + t.config.xaxis.labels.offsetX);
                if (d.length) {
                  var p = this.axesUtils.getLabel(
                    h,
                    d,
                    g,
                    u,
                    this.drawnLabels,
                    this.xaxisFontSize
                  );
                  (g = p.x),
                    (f = p.text),
                    this.drawnLabels.push(p.text),
                    u === 0 && t.globals.skipFirstTimelinelabel && (f = ""),
                    u === h.length - 1 &&
                      t.globals.skipLastTimelinelabel &&
                      (f = "");
                }
                var m = a.drawText({
                  x: g,
                  y:
                    this.xAxisoffX +
                    t.config.xaxis.labels.offsetY +
                    30 -
                    (t.config.xaxis.position === "top"
                      ? t.globals.xAxisHeight +
                        t.config.xaxis.axisTicks.height -
                        2
                      : 0),
                  text: f,
                  textAnchor: "middle",
                  foreColor: Array.isArray(this.xaxisForeColors)
                    ? this.xaxisForeColors[e]
                    : this.xaxisForeColors,
                  fontSize: this.xaxisFontSize,
                  fontFamily: this.xaxisFontFamily,
                  fontWeight: t.config.xaxis.labels.style.fontWeight,
                  isPlainText: !1,
                  cssClass: "apexcharts-xaxis-label ".concat(
                    t.config.xaxis.labels.style.cssClass
                  ),
                });
                s.add(m), m.tspan(f), this.addTooltip(m, f), (l += o);
              }
            return (
              this.inversedYAxisTitleText(i), this.inversedYAxisBorder(i), i
            );
          },
        },
        {
          key: "inversedYAxisBorder",
          value: function (e) {
            var t = this.w,
              a = new H(this.ctx),
              i = t.config.xaxis.axisBorder;
            if (i.show) {
              var s = 0;
              t.config.chart.type === "bar" &&
                t.globals.isXNumeric &&
                (s -= 15);
              var n = a.drawLine(
                t.globals.padHorizontal + s + i.offsetX,
                this.xAxisoffX,
                t.globals.gridWidth,
                this.xAxisoffX,
                i.color,
                0,
                i.height
              );
              this.elgrid && this.elgrid.elGridBorders && t.config.grid.show
                ? this.elgrid.elGridBorders.add(n)
                : e.add(n);
            }
          },
        },
        {
          key: "inversedYAxisTitleText",
          value: function (e) {
            var t = this.w,
              a = new H(this.ctx);
            if (t.config.xaxis.title.text !== void 0) {
              var i = a.group({
                  class:
                    "apexcharts-xaxis-title apexcharts-yaxis-title-inversed",
                }),
                s = a.drawText({
                  x: t.globals.gridWidth / 2 + t.config.xaxis.title.offsetX,
                  y:
                    this.xAxisoffX +
                    parseFloat(this.xaxisFontSize) +
                    parseFloat(t.config.xaxis.title.style.fontSize) +
                    t.config.xaxis.title.offsetY +
                    20,
                  text: t.config.xaxis.title.text,
                  textAnchor: "middle",
                  fontSize: t.config.xaxis.title.style.fontSize,
                  fontFamily: t.config.xaxis.title.style.fontFamily,
                  fontWeight: t.config.xaxis.title.style.fontWeight,
                  foreColor: t.config.xaxis.title.style.color,
                  cssClass: "apexcharts-xaxis-title-text ".concat(
                    t.config.xaxis.title.style.cssClass
                  ),
                });
              i.add(s), e.add(i);
            }
          },
        },
        {
          key: "yAxisTitleRotate",
          value: function (e, t) {
            var a = this.w,
              i = new H(this.ctx),
              s = a.globals.dom.baseEl.querySelector(
                ".apexcharts-yaxis[rel='".concat(
                  e,
                  "'] .apexcharts-yaxis-texts-g"
                )
              ),
              n = s ? s.getBoundingClientRect() : { width: 0, height: 0 },
              o = a.globals.dom.baseEl.querySelector(
                ".apexcharts-yaxis[rel='".concat(
                  e,
                  "'] .apexcharts-yaxis-title text"
                )
              ),
              l = o ? o.getBoundingClientRect() : { width: 0, height: 0 };
            if (o) {
              var c = this.xPaddingForYAxisTitle(e, n, l, t);
              o.setAttribute("x", c.xPos - (t ? 10 : 0));
              var h = i.rotateAroundCenter(o);
              o.setAttribute(
                "transform",
                "rotate("
                  .concat(
                    t
                      ? -1 * a.config.yaxis[e].title.rotate
                      : a.config.yaxis[e].title.rotate,
                    " "
                  )
                  .concat(h.x, " ")
                  .concat(h.y, ")")
              );
            }
          },
        },
        {
          key: "xPaddingForYAxisTitle",
          value: function (e, t, a, i) {
            var s = this.w,
              n = 0,
              o = 10;
            return s.config.yaxis[e].title.text === void 0 || e < 0
              ? { xPos: n, padd: 0 }
              : (i
                  ? (n =
                      t.width +
                      s.config.yaxis[e].title.offsetX +
                      a.width / 2 +
                      o / 2)
                  : ((n =
                      -1 * t.width +
                      s.config.yaxis[e].title.offsetX +
                      o / 2 +
                      a.width / 2),
                    s.globals.isBarHorizontal &&
                      ((o = 25),
                      (n =
                        -1 * t.width - s.config.yaxis[e].title.offsetX - o))),
                { xPos: n, padd: o });
          },
        },
        {
          key: "setYAxisXPosition",
          value: function (e, t) {
            var a = this.w,
              i = 0,
              s = 0,
              n = 18,
              o = 1;
            a.config.yaxis.length > 1 && (this.multipleYs = !0),
              a.config.yaxis.forEach(function (l, c) {
                var h =
                    a.globals.ignoreYAxisIndexes.includes(c) ||
                    !l.show ||
                    l.floating ||
                    e[c].width === 0,
                  d = e[c].width + t[c].width;
                l.opposite
                  ? a.globals.isBarHorizontal
                    ? ((s = a.globals.gridWidth + a.globals.translateX - 1),
                      (a.globals.translateYAxisX[c] = s - l.labels.offsetX))
                    : ((s = a.globals.gridWidth + a.globals.translateX + o),
                      h || (o += d + 20),
                      (a.globals.translateYAxisX[c] =
                        s - l.labels.offsetX + 20))
                  : ((i = a.globals.translateX - n),
                    h || (n += d + 20),
                    (a.globals.translateYAxisX[c] = i + l.labels.offsetX));
              });
          },
        },
        {
          key: "setYAxisTextAlignments",
          value: function () {
            var e = this.w;
            _.listToArray(
              e.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis")
            ).forEach(function (t, a) {
              var i = e.config.yaxis[a];
              if (i && !i.floating && i.labels.align !== void 0) {
                var s = e.globals.dom.baseEl.querySelector(
                    ".apexcharts-yaxis[rel='".concat(
                      a,
                      "'] .apexcharts-yaxis-texts-g"
                    )
                  ),
                  n = _.listToArray(
                    e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-yaxis[rel='".concat(
                        a,
                        "'] .apexcharts-yaxis-label"
                      )
                    )
                  ),
                  o = s.getBoundingClientRect();
                n.forEach(function (l) {
                  l.setAttribute("text-anchor", i.labels.align);
                }),
                  i.labels.align !== "left" || i.opposite
                    ? i.labels.align === "center"
                      ? s.setAttribute(
                          "transform",
                          "translate(".concat(
                            (o.width / 2) * (i.opposite ? 1 : -1),
                            ", 0)"
                          )
                        )
                      : i.labels.align === "right" &&
                        i.opposite &&
                        s.setAttribute(
                          "transform",
                          "translate(".concat(o.width, ", 0)")
                        )
                    : s.setAttribute(
                        "transform",
                        "translate(-".concat(o.width, ", 0)")
                      );
              }
            });
          },
        },
      ]),
      r
    );
  })(),
  xm = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.documentEvent = _.bind(this.documentEvent, this));
    }
    return (
      $(r, [
        {
          key: "addEventListener",
          value: function (e, t) {
            var a = this.w;
            a.globals.events.hasOwnProperty(e)
              ? a.globals.events[e].push(t)
              : (a.globals.events[e] = [t]);
          },
        },
        {
          key: "removeEventListener",
          value: function (e, t) {
            var a = this.w;
            if (a.globals.events.hasOwnProperty(e)) {
              var i = a.globals.events[e].indexOf(t);
              i !== -1 && a.globals.events[e].splice(i, 1);
            }
          },
        },
        {
          key: "fireEvent",
          value: function (e, t) {
            var a = this.w;
            if (a.globals.events.hasOwnProperty(e)) {
              (t && t.length) || (t = []);
              for (var i = a.globals.events[e], s = i.length, n = 0; n < s; n++)
                i[n].apply(null, t);
            }
          },
        },
        {
          key: "setupEventHandlers",
          value: function () {
            var e = this,
              t = this.w,
              a = this.ctx,
              i = t.globals.dom.baseEl.querySelector(t.globals.chartClass);
            this.ctx.eventList.forEach(function (s) {
              i.addEventListener(
                s,
                function (n) {
                  var o = Object.assign({}, t, {
                    seriesIndex: t.globals.axisCharts
                      ? t.globals.capturedSeriesIndex
                      : 0,
                    dataPointIndex: t.globals.capturedDataPointIndex,
                  });
                  n.type === "mousemove" || n.type === "touchmove"
                    ? typeof t.config.chart.events.mouseMove == "function" &&
                      t.config.chart.events.mouseMove(n, a, o)
                    : n.type === "mouseleave" || n.type === "touchleave"
                    ? typeof t.config.chart.events.mouseLeave == "function" &&
                      t.config.chart.events.mouseLeave(n, a, o)
                    : ((n.type === "mouseup" && n.which === 1) ||
                        n.type === "touchend") &&
                      (typeof t.config.chart.events.click == "function" &&
                        t.config.chart.events.click(n, a, o),
                      a.ctx.events.fireEvent("click", [n, a, o]));
                },
                { capture: !1, passive: !0 }
              );
            }),
              this.ctx.eventList.forEach(function (s) {
                t.globals.dom.baseEl.addEventListener(s, e.documentEvent, {
                  passive: !0,
                });
              }),
              this.ctx.core.setupBrushHandler();
          },
        },
        {
          key: "documentEvent",
          value: function (e) {
            var t = this.w,
              a = e.target.className;
            if (e.type === "click") {
              var i = t.globals.dom.baseEl.querySelector(".apexcharts-menu");
              i &&
                i.classList.contains("apexcharts-menu-open") &&
                a !== "apexcharts-menu-icon" &&
                i.classList.remove("apexcharts-menu-open");
            }
            (t.globals.clientX =
              e.type === "touchmove" ? e.touches[0].clientX : e.clientX),
              (t.globals.clientY =
                e.type === "touchmove" ? e.touches[0].clientY : e.clientY);
          },
        },
      ]),
      r
    );
  })(),
  vm = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "setCurrentLocaleValues",
          value: function (e) {
            var t = this.w.config.chart.locales;
            window.Apex.chart &&
              window.Apex.chart.locales &&
              window.Apex.chart.locales.length > 0 &&
              (t = this.w.config.chart.locales.concat(
                window.Apex.chart.locales
              ));
            var a = t.filter(function (s) {
              return s.name === e;
            })[0];
            if (!a)
              throw new Error(
                "Wrong locale name provided. Please make sure you set the correct locale name in options"
              );
            var i = _.extend(zc, a);
            this.w.globals.locale = i.options;
          },
        },
      ]),
      r
    );
  })(),
  bm = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "drawAxis",
          value: function (e, t) {
            var a,
              i,
              s = this,
              n = this.w.globals,
              o = this.w.config,
              l = new Fa(this.ctx, t),
              c = new $s(this.ctx, t);
            n.axisCharts &&
              e !== "radar" &&
              (n.isBarHorizontal
                ? ((i = c.drawYaxisInversed(0)),
                  (a = l.drawXaxisInversed(0)),
                  n.dom.elGraphical.add(a),
                  n.dom.elGraphical.add(i))
                : ((a = l.drawXaxis()),
                  n.dom.elGraphical.add(a),
                  o.yaxis.map(function (h, d) {
                    if (
                      n.ignoreYAxisIndexes.indexOf(d) === -1 &&
                      ((i = c.drawYaxis(d)),
                      n.dom.Paper.add(i),
                      s.w.config.grid.position === "back")
                    ) {
                      var u = n.dom.Paper.children()[1];
                      u.remove(), n.dom.Paper.add(u);
                    }
                  })));
          },
        },
      ]),
      r
    );
  })(),
  es = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "drawXCrosshairs",
          value: function () {
            var e = this.w,
              t = new H(this.ctx),
              a = new Ee(this.ctx),
              i = e.config.xaxis.crosshairs.fill.gradient,
              s = e.config.xaxis.crosshairs.dropShadow,
              n = e.config.xaxis.crosshairs.fill.type,
              o = i.colorFrom,
              l = i.colorTo,
              c = i.opacityFrom,
              h = i.opacityTo,
              d = i.stops,
              u = s.enabled,
              f = s.left,
              g = s.top,
              p = s.blur,
              m = s.color,
              x = s.opacity,
              v = e.config.xaxis.crosshairs.fill.color;
            if (e.config.xaxis.crosshairs.show) {
              n === "gradient" &&
                (v = t.drawGradient("vertical", o, l, c, h, null, d, null));
              var b = t.drawRect();
              e.config.xaxis.crosshairs.width === 1 && (b = t.drawLine());
              var k = e.globals.gridHeight;
              (!_.isNumber(k) || k < 0) && (k = 0);
              var y = e.config.xaxis.crosshairs.width;
              (!_.isNumber(y) || y < 0) && (y = 0),
                b.attr({
                  class: "apexcharts-xcrosshairs",
                  x: 0,
                  y: 0,
                  y2: k,
                  width: y,
                  height: k,
                  fill: v,
                  filter: "none",
                  "fill-opacity": e.config.xaxis.crosshairs.opacity,
                  stroke: e.config.xaxis.crosshairs.stroke.color,
                  "stroke-width": e.config.xaxis.crosshairs.stroke.width,
                  "stroke-dasharray":
                    e.config.xaxis.crosshairs.stroke.dashArray,
                }),
                u &&
                  (b = a.dropShadow(b, {
                    left: f,
                    top: g,
                    blur: p,
                    color: m,
                    opacity: x,
                  })),
                e.globals.dom.elGraphical.add(b);
            }
          },
        },
        {
          key: "drawYCrosshairs",
          value: function () {
            var e = this.w,
              t = new H(this.ctx),
              a = e.config.yaxis[0].crosshairs,
              i = e.globals.barPadForNumericAxis;
            if (e.config.yaxis[0].crosshairs.show) {
              var s = t.drawLine(
                -i,
                0,
                e.globals.gridWidth + i,
                0,
                a.stroke.color,
                a.stroke.dashArray,
                a.stroke.width
              );
              s.attr({ class: "apexcharts-ycrosshairs" }),
                e.globals.dom.elGraphical.add(s);
            }
            var n = t.drawLine(
              -i,
              0,
              e.globals.gridWidth + i,
              0,
              a.stroke.color,
              0,
              0
            );
            n.attr({ class: "apexcharts-ycrosshairs-hidden" }),
              e.globals.dom.elGraphical.add(n);
          },
        },
      ]),
      r
    );
  })(),
  ym = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "checkResponsiveConfig",
          value: function (e) {
            var t = this,
              a = this.w,
              i = a.config;
            if (i.responsive.length !== 0) {
              var s = i.responsive.slice();
              s.sort(function (c, h) {
                return c.breakpoint > h.breakpoint
                  ? 1
                  : h.breakpoint > c.breakpoint
                  ? -1
                  : 0;
              }).reverse();
              var n = new ja({}),
                o = function () {
                  var c =
                      arguments.length > 0 && arguments[0] !== void 0
                        ? arguments[0]
                        : {},
                    h = s[0].breakpoint,
                    d =
                      window.innerWidth > 0 ? window.innerWidth : screen.width;
                  if (d > h) {
                    var u = _.clone(a.globals.initialConfig);
                    u.series = _.clone(a.config.series);
                    var f = ke.extendArrayProps(n, u, a);
                    (c = _.extend(f, c)),
                      (c = _.extend(a.config, c)),
                      t.overrideResponsiveOptions(c);
                  } else
                    for (var g = 0; g < s.length; g++)
                      d < s[g].breakpoint &&
                        ((c = ke.extendArrayProps(n, s[g].options, a)),
                        (c = _.extend(a.config, c)),
                        t.overrideResponsiveOptions(c));
                };
              if (e) {
                var l = ke.extendArrayProps(n, e, a);
                (l = _.extend(a.config, l)), o((l = _.extend(l, e)));
              } else o({});
            }
          },
        },
        {
          key: "overrideResponsiveOptions",
          value: function (e) {
            var t = new ja(e).init({ responsiveOverride: !0 });
            this.w.config = t;
          },
        },
      ]),
      r
    );
  })(),
  wm = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.colors = []),
        (this.isColorFn = !1),
        (this.isHeatmapDistributed = this.checkHeatmapDistributed()),
        (this.isBarDistributed = this.checkBarDistributed());
    }
    return (
      $(r, [
        {
          key: "checkHeatmapDistributed",
          value: function () {
            var e = this.w.config,
              t = e.chart,
              a = e.plotOptions;
            return (
              (t.type === "treemap" && a.treemap && a.treemap.distributed) ||
              (t.type === "heatmap" && a.heatmap && a.heatmap.distributed)
            );
          },
        },
        {
          key: "checkBarDistributed",
          value: function () {
            var e = this.w.config,
              t = e.chart,
              a = e.plotOptions;
            return (
              a.bar &&
              a.bar.distributed &&
              (t.type === "bar" || t.type === "rangeBar")
            );
          },
        },
        {
          key: "init",
          value: function () {
            this.setDefaultColors();
          },
        },
        {
          key: "setDefaultColors",
          value: function () {
            var e = this.w,
              t = new _();
            e.globals.dom.elWrap.classList.add(
              "apexcharts-theme-".concat(e.config.theme.mode)
            );
            var a = Pe(e.config.colors || e.config.fill.colors || []);
            (e.globals.colors = this.getColors(a)),
              this.applySeriesColors(e.globals.seriesColors, e.globals.colors),
              e.config.theme.monochrome.enabled &&
                (e.globals.colors = this.getMonochromeColors(
                  e.config.theme.monochrome,
                  e.globals.series,
                  t
                ));
            var i = e.globals.colors.slice();
            this.pushExtraColors(e.globals.colors),
              this.applyColorTypes(["fill", "stroke"], i),
              this.applyDataLabelsColors(i),
              this.applyRadarPolygonsColors(),
              this.applyMarkersColors(i);
          },
        },
        {
          key: "getColors",
          value: function (e) {
            var t = this,
              a = this.w;
            return e && e.length !== 0
              ? Array.isArray(e) && e.length > 0 && typeof e[0] == "function"
                ? ((this.isColorFn = !0),
                  a.config.series.map(function (i, s) {
                    var n = e[s] || e[0];
                    return typeof n == "function"
                      ? n({
                          value: a.globals.axisCharts
                            ? a.globals.series[s][0] || 0
                            : a.globals.series[s],
                          seriesIndex: s,
                          dataPointIndex: s,
                          w: t.w,
                        })
                      : n;
                  }))
                : e
              : this.predefined();
          },
        },
        {
          key: "applySeriesColors",
          value: function (e, t) {
            e.forEach(function (a, i) {
              a && (t[i] = a);
            });
          },
        },
        {
          key: "getMonochromeColors",
          value: function (e, t, a) {
            var i = e.color,
              s = e.shadeIntensity,
              n = e.shadeTo,
              o =
                this.isBarDistributed || this.isHeatmapDistributed
                  ? t[0].length * t.length
                  : t.length,
              l = 1 / (o / s),
              c = 0;
            return Array.from({ length: o }, function () {
              var h =
                n === "dark" ? a.shadeColor(-1 * c, i) : a.shadeColor(c, i);
              return (c += l), h;
            });
          },
        },
        {
          key: "applyColorTypes",
          value: function (e, t) {
            var a = this,
              i = this.w;
            e.forEach(function (s) {
              (i.globals[s].colors =
                i.config[s].colors === void 0
                  ? a.isColorFn
                    ? i.config.colors
                    : t
                  : i.config[s].colors.slice()),
                a.pushExtraColors(i.globals[s].colors);
            });
          },
        },
        {
          key: "applyDataLabelsColors",
          value: function (e) {
            var t = this.w;
            (t.globals.dataLabels.style.colors =
              t.config.dataLabels.style.colors === void 0
                ? e
                : t.config.dataLabels.style.colors.slice()),
              this.pushExtraColors(t.globals.dataLabels.style.colors, 50);
          },
        },
        {
          key: "applyRadarPolygonsColors",
          value: function () {
            var e = this.w;
            (e.globals.radarPolygons.fill.colors =
              e.config.plotOptions.radar.polygons.fill.colors === void 0
                ? [e.config.theme.mode === "dark" ? "#424242" : "none"]
                : e.config.plotOptions.radar.polygons.fill.colors.slice()),
              this.pushExtraColors(e.globals.radarPolygons.fill.colors, 20);
          },
        },
        {
          key: "applyMarkersColors",
          value: function (e) {
            var t = this.w;
            (t.globals.markers.colors =
              t.config.markers.colors === void 0
                ? e
                : t.config.markers.colors.slice()),
              this.pushExtraColors(t.globals.markers.colors);
          },
        },
        {
          key: "pushExtraColors",
          value: function (e, t) {
            var a =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : null,
              i = this.w,
              s = t || i.globals.series.length;
            if (
              (a === null &&
                (a =
                  this.isBarDistributed ||
                  this.isHeatmapDistributed ||
                  (i.config.chart.type === "heatmap" &&
                    i.config.plotOptions.heatmap &&
                    i.config.plotOptions.heatmap.colorScale.inverse)),
              a &&
                i.globals.series.length &&
                (s =
                  i.globals.series[i.globals.maxValsInArrayIndex].length *
                  i.globals.series.length),
              e.length < s)
            )
              for (var n = s - e.length, o = 0; o < n; o++) e.push(e[o]);
          },
        },
        {
          key: "updateThemeOptions",
          value: function (e) {
            (e.chart = e.chart || {}), (e.tooltip = e.tooltip || {});
            var t = e.theme.mode,
              a =
                t === "dark"
                  ? "palette4"
                  : t === "light"
                  ? "palette1"
                  : e.theme.palette || "palette1",
              i =
                t === "dark"
                  ? "#f6f7f8"
                  : t === "light"
                  ? "#373d3f"
                  : e.chart.foreColor || "#373d3f";
            return (
              (e.tooltip.theme = t || "light"),
              (e.chart.foreColor = i),
              (e.theme.palette = a),
              e
            );
          },
        },
        {
          key: "predefined",
          value: function () {
            var e = {
              palette1: ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"],
              palette2: ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"],
              palette3: ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"],
              palette4: ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"],
              palette5: ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"],
              palette6: ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"],
              palette7: ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"],
              palette8: ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"],
              palette9: ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"],
              palette10: [
                "#A300D6",
                "#7D02EB",
                "#5653FE",
                "#2983FF",
                "#00B1F2",
              ],
              default: ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"],
            };
            return e[this.w.config.theme.palette] || e.default;
          },
        },
      ]),
      r
    );
  })(),
  km = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "draw",
          value: function () {
            this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
          },
        },
        {
          key: "drawTitleSubtitle",
          value: function (e) {
            var t = this.w,
              a = e === "title" ? t.config.title : t.config.subtitle,
              i = t.globals.svgWidth / 2,
              s = a.offsetY,
              n = "middle";
            if (
              (a.align === "left"
                ? ((i = 10), (n = "start"))
                : a.align === "right" &&
                  ((i = t.globals.svgWidth - 10), (n = "end")),
              (i += a.offsetX),
              (s = s + parseInt(a.style.fontSize, 10) + a.margin / 2),
              a.text !== void 0)
            ) {
              var o = new H(this.ctx).drawText({
                x: i,
                y: s,
                text: a.text,
                textAnchor: n,
                fontSize: a.style.fontSize,
                fontFamily: a.style.fontFamily,
                fontWeight: a.style.fontWeight,
                foreColor: a.style.color,
                opacity: 1,
              });
              o.node.setAttribute("class", "apexcharts-".concat(e, "-text")),
                t.globals.dom.Paper.add(o);
            }
          },
        },
      ]),
      r
    );
  })(),
  Am = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.dCtx = e);
    }
    return (
      $(r, [
        {
          key: "getTitleSubtitleCoords",
          value: function (e) {
            var t = this.w,
              a = 0,
              i = 0,
              s =
                e === "title"
                  ? t.config.title.floating
                  : t.config.subtitle.floating,
              n = t.globals.dom.baseEl.querySelector(
                ".apexcharts-".concat(e, "-text")
              );
            if (n !== null && !s) {
              var o = n.getBoundingClientRect();
              (a = o.width),
                (i = t.globals.axisCharts ? o.height + 5 : o.height);
            }
            return { width: a, height: i };
          },
        },
        {
          key: "getLegendsRect",
          value: function () {
            var e = this.w,
              t = e.globals.dom.elLegendWrap;
            e.config.legend.height ||
              (e.config.legend.position !== "top" &&
                e.config.legend.position !== "bottom") ||
              (t.style.maxHeight = e.globals.svgHeight / 2 + "px");
            var a = Object.assign({}, _.getBoundingClientRect(t));
            return (
              t !== null && !e.config.legend.floating && e.config.legend.show
                ? (this.dCtx.lgRect = {
                    x: a.x,
                    y: a.y,
                    height: a.height,
                    width: a.height === 0 ? 0 : a.width,
                  })
                : (this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }),
              (e.config.legend.position !== "left" &&
                e.config.legend.position !== "right") ||
                (1.5 * this.dCtx.lgRect.width > e.globals.svgWidth &&
                  (this.dCtx.lgRect.width = e.globals.svgWidth / 1.5)),
              this.dCtx.lgRect
            );
          },
        },
        {
          key: "getDatalabelsRect",
          value: function () {
            var e = this,
              t = this.w,
              a = [];
            t.config.series.forEach(function (l, c) {
              l.data.forEach(function (h, d) {
                var u;
                (u = t.globals.series[c][d]),
                  (i = t.config.dataLabels.formatter(u, {
                    ctx: e.dCtx.ctx,
                    seriesIndex: c,
                    dataPointIndex: d,
                    w: t,
                  })),
                  a.push(i);
              });
            });
            var i = _.getLargestStringFromArr(a),
              s = new H(this.dCtx.ctx),
              n = t.config.dataLabels.style,
              o = s.getTextRects(i, parseInt(n.fontSize), n.fontFamily);
            return { width: 1.05 * o.width, height: o.height };
          },
        },
        {
          key: "getLargestStringFromMultiArr",
          value: function (e, t) {
            var a = e;
            if (this.w.globals.isMultiLineX) {
              var i = t.map(function (n, o) {
                  return Array.isArray(n) ? n.length : 1;
                }),
                s = Math.max.apply(Math, Pe(i));
              a = t[i.indexOf(s)];
            }
            return a;
          },
        },
      ]),
      r
    );
  })(),
  Cm = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.dCtx = e);
    }
    return (
      $(r, [
        {
          key: "getxAxisLabelsCoords",
          value: function () {
            var e,
              t = this.w,
              a = t.globals.labels.slice();
            if (
              (t.config.xaxis.convertedCatToNumeric &&
                a.length === 0 &&
                (a = t.globals.categoryLabels),
              t.globals.timescaleLabels.length > 0)
            ) {
              var i = this.getxAxisTimeScaleLabelsCoords();
              (e = { width: i.width, height: i.height }),
                (t.globals.rotateXLabels = !1);
            } else {
              this.dCtx.lgWidthForSideLegends =
                (t.config.legend.position !== "left" &&
                  t.config.legend.position !== "right") ||
                t.config.legend.floating
                  ? 0
                  : this.dCtx.lgRect.width;
              var s = t.globals.xLabelFormatter,
                n = _.getLargestStringFromArr(a),
                o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(n, a);
              t.globals.isBarHorizontal &&
                (o = n =
                  t.globals.yAxisScale[0].result.reduce(function (g, p) {
                    return g.length > p.length ? g : p;
                  }, 0));
              var l = new Ka(this.dCtx.ctx),
                c = n;
              (n = l.xLabelFormat(s, n, c, {
                i: void 0,
                dateFormatter: new Me(this.dCtx.ctx).formatDate,
                w: t,
              })),
                (o = l.xLabelFormat(s, o, c, {
                  i: void 0,
                  dateFormatter: new Me(this.dCtx.ctx).formatDate,
                  w: t,
                })),
                ((t.config.xaxis.convertedCatToNumeric && n === void 0) ||
                  String(n).trim() === "") &&
                  (o = n = "1");
              var h = new H(this.dCtx.ctx),
                d = h.getTextRects(n, t.config.xaxis.labels.style.fontSize),
                u = d;
              if (
                (n !== o &&
                  (u = h.getTextRects(o, t.config.xaxis.labels.style.fontSize)),
                ((e = {
                  width: d.width >= u.width ? d.width : u.width,
                  height: d.height >= u.height ? d.height : u.height,
                }).width *
                  a.length >
                  t.globals.svgWidth -
                    this.dCtx.lgWidthForSideLegends -
                    this.dCtx.yAxisWidth -
                    this.dCtx.gridPad.left -
                    this.dCtx.gridPad.right &&
                  t.config.xaxis.labels.rotate !== 0) ||
                  t.config.xaxis.labels.rotateAlways)
              ) {
                if (!t.globals.isBarHorizontal) {
                  t.globals.rotateXLabels = !0;
                  var f = function (g) {
                    return h.getTextRects(
                      g,
                      t.config.xaxis.labels.style.fontSize,
                      t.config.xaxis.labels.style.fontFamily,
                      "rotate(".concat(t.config.xaxis.labels.rotate, " 0 0)"),
                      !1
                    );
                  };
                  (d = f(n)),
                    n !== o && (u = f(o)),
                    (e.height =
                      (d.height > u.height ? d.height : u.height) / 1.5),
                    (e.width = d.width > u.width ? d.width : u.width);
                }
              } else t.globals.rotateXLabels = !1;
            }
            return (
              t.config.xaxis.labels.show || (e = { width: 0, height: 0 }),
              { width: e.width, height: e.height }
            );
          },
        },
        {
          key: "getxAxisGroupLabelsCoords",
          value: function () {
            var e,
              t = this.w;
            if (!t.globals.hasXaxisGroups) return { width: 0, height: 0 };
            var a,
              i =
                ((e = t.config.xaxis.group.style) === null || e === void 0
                  ? void 0
                  : e.fontSize) || t.config.xaxis.labels.style.fontSize,
              s = t.globals.groups.map(function (d) {
                return d.title;
              }),
              n = _.getLargestStringFromArr(s),
              o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(n, s),
              l = new H(this.dCtx.ctx),
              c = l.getTextRects(n, i),
              h = c;
            return (
              n !== o && (h = l.getTextRects(o, i)),
              (a = {
                width: c.width >= h.width ? c.width : h.width,
                height: c.height >= h.height ? c.height : h.height,
              }),
              t.config.xaxis.labels.show || (a = { width: 0, height: 0 }),
              { width: a.width, height: a.height }
            );
          },
        },
        {
          key: "getxAxisTitleCoords",
          value: function () {
            var e = this.w,
              t = 0,
              a = 0;
            if (e.config.xaxis.title.text !== void 0) {
              var i = new H(this.dCtx.ctx).getTextRects(
                e.config.xaxis.title.text,
                e.config.xaxis.title.style.fontSize
              );
              (t = i.width), (a = i.height);
            }
            return { width: t, height: a };
          },
        },
        {
          key: "getxAxisTimeScaleLabelsCoords",
          value: function () {
            var e,
              t = this.w;
            this.dCtx.timescaleLabels = t.globals.timescaleLabels.slice();
            var a = this.dCtx.timescaleLabels.map(function (s) {
                return s.value;
              }),
              i = a.reduce(function (s, n) {
                return s === void 0
                  ? (console.error(
                      "You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"
                    ),
                    0)
                  : s.length > n.length
                  ? s
                  : n;
              }, 0);
            return (
              1.05 *
                (e = new H(this.dCtx.ctx).getTextRects(
                  i,
                  t.config.xaxis.labels.style.fontSize
                )).width *
                a.length >
                t.globals.gridWidth &&
                t.config.xaxis.labels.rotate !== 0 &&
                (t.globals.overlappingXLabels = !0),
              e
            );
          },
        },
        {
          key: "additionalPaddingXLabels",
          value: function (e) {
            var t = this,
              a = this.w,
              i = a.globals,
              s = a.config,
              n = s.xaxis.type,
              o = e.width;
            (i.skipLastTimelinelabel = !1), (i.skipFirstTimelinelabel = !1);
            var l = a.config.yaxis[0].opposite && a.globals.isBarHorizontal,
              c = function (h, d) {
                (s.yaxis.length > 1 &&
                  (function (u) {
                    return i.collapsedSeriesIndices.indexOf(u) !== -1;
                  })(d)) ||
                  (function (u) {
                    if (
                      t.dCtx.timescaleLabels &&
                      t.dCtx.timescaleLabels.length
                    ) {
                      var f = t.dCtx.timescaleLabels[0],
                        g =
                          t.dCtx.timescaleLabels[
                            t.dCtx.timescaleLabels.length - 1
                          ].position +
                          o / 1.75 -
                          t.dCtx.yAxisWidthRight,
                        p = f.position - o / 1.75 + t.dCtx.yAxisWidthLeft,
                        m =
                          a.config.legend.position === "right" &&
                          t.dCtx.lgRect.width > 0
                            ? t.dCtx.lgRect.width
                            : 0;
                      g > i.svgWidth - i.translateX - m &&
                        (i.skipLastTimelinelabel = !0),
                        p <
                          -((u.show && !u.floating) ||
                          (s.chart.type !== "bar" &&
                            s.chart.type !== "candlestick" &&
                            s.chart.type !== "rangeBar" &&
                            s.chart.type !== "boxPlot")
                            ? 10
                            : o / 1.75) && (i.skipFirstTimelinelabel = !0);
                    } else
                      n === "datetime"
                        ? t.dCtx.gridPad.right < o &&
                          !i.rotateXLabels &&
                          (i.skipLastTimelinelabel = !0)
                        : n !== "datetime" &&
                          t.dCtx.gridPad.right <
                            o / 2 - t.dCtx.yAxisWidthRight &&
                          !i.rotateXLabels &&
                          !a.config.xaxis.labels.trim &&
                          (t.dCtx.xPadRight = o / 2 + 1);
                  })(h);
              };
            s.yaxis.forEach(function (h, d) {
              l
                ? (t.dCtx.gridPad.left < o && (t.dCtx.xPadLeft = o / 2 + 1),
                  (t.dCtx.xPadRight = o / 2 + 1))
                : c(h, d);
            });
          },
        },
      ]),
      r
    );
  })(),
  Sm = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.dCtx = e);
    }
    return (
      $(r, [
        {
          key: "getyAxisLabelsCoords",
          value: function () {
            var e = this,
              t = this.w,
              a = [],
              i = 10,
              s = new St(this.dCtx.ctx);
            return (
              t.config.yaxis.map(function (n, o) {
                var l = { seriesIndex: o, dataPointIndex: -1, w: t },
                  c = t.globals.yAxisScale[o],
                  h = 0;
                if (
                  (!s.isYAxisHidden(o) &&
                    n.labels.show &&
                    n.labels.minWidth !== void 0 &&
                    (h = n.labels.minWidth),
                  !s.isYAxisHidden(o) && n.labels.show && c.result.length)
                ) {
                  var d = t.globals.yLabelFormatters[o],
                    u = c.niceMin === Number.MIN_VALUE ? 0 : c.niceMin,
                    f = c.result.reduce(function (k, y) {
                      var C, A;
                      return ((C = String(d(k, l))) === null || C === void 0
                        ? void 0
                        : C.length) >
                        ((A = String(d(y, l))) === null || A === void 0
                          ? void 0
                          : A.length)
                        ? k
                        : y;
                    }, u),
                    g = (f = d(f, l));
                  if (
                    ((f !== void 0 && f.length !== 0) || (f = c.niceMax),
                    t.globals.isBarHorizontal)
                  ) {
                    i = 0;
                    var p = t.globals.labels.slice();
                    (f = _.getLargestStringFromArr(p)),
                      (f = d(f, { seriesIndex: o, dataPointIndex: -1, w: t })),
                      (g = e.dCtx.dimHelpers.getLargestStringFromMultiArr(
                        f,
                        p
                      ));
                  }
                  var m = new H(e.dCtx.ctx),
                    x = "rotate(".concat(n.labels.rotate, " 0 0)"),
                    v = m.getTextRects(
                      f,
                      n.labels.style.fontSize,
                      n.labels.style.fontFamily,
                      x,
                      !1
                    ),
                    b = v;
                  f !== g &&
                    (b = m.getTextRects(
                      g,
                      n.labels.style.fontSize,
                      n.labels.style.fontFamily,
                      x,
                      !1
                    )),
                    a.push({
                      width:
                        (h > b.width || h > v.width
                          ? h
                          : b.width > v.width
                          ? b.width
                          : v.width) + i,
                      height: b.height > v.height ? b.height : v.height,
                    });
                } else a.push({ width: 0, height: 0 });
              }),
              a
            );
          },
        },
        {
          key: "getyAxisTitleCoords",
          value: function () {
            var e = this,
              t = this.w,
              a = [];
            return (
              t.config.yaxis.map(function (i, s) {
                if (i.show && i.title.text !== void 0) {
                  var n = new H(e.dCtx.ctx),
                    o = "rotate(".concat(i.title.rotate, " 0 0)"),
                    l = n.getTextRects(
                      i.title.text,
                      i.title.style.fontSize,
                      i.title.style.fontFamily,
                      o,
                      !1
                    );
                  a.push({ width: l.width, height: l.height });
                } else a.push({ width: 0, height: 0 });
              }),
              a
            );
          },
        },
        {
          key: "getTotalYAxisWidth",
          value: function () {
            var e = this.w,
              t = 0,
              a = 0,
              i = 0,
              s = e.globals.yAxisScale.length > 1 ? 10 : 0,
              n = new St(this.dCtx.ctx),
              o = function (l, c) {
                var h = e.config.yaxis[c].floating,
                  d = 0;
                l.width > 0 && !h
                  ? ((d = l.width + s),
                    (function (u) {
                      return e.globals.ignoreYAxisIndexes.indexOf(u) > -1;
                    })(c) && (d = d - l.width - s))
                  : (d = h || n.isYAxisHidden(c) ? 0 : 5),
                  e.config.yaxis[c].opposite ? (i += d) : (a += d),
                  (t += d);
              };
            return (
              e.globals.yLabelsCoords.map(function (l, c) {
                o(l, c);
              }),
              e.globals.yTitleCoords.map(function (l, c) {
                o(l, c);
              }),
              e.globals.isBarHorizontal &&
                !e.config.yaxis[0].floating &&
                (t =
                  e.globals.yLabelsCoords[0].width +
                  e.globals.yTitleCoords[0].width +
                  15),
              (this.dCtx.yAxisWidthLeft = a),
              (this.dCtx.yAxisWidthRight = i),
              t
            );
          },
        },
      ]),
      r
    );
  })(),
  Tm = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.dCtx = e);
    }
    return (
      $(r, [
        {
          key: "gridPadForColumnsInNumericAxis",
          value: function (e) {
            var t = this.w,
              a = t.config,
              i = t.globals;
            if (
              i.noData ||
              i.collapsedSeries.length + i.ancillaryCollapsedSeries.length ===
                a.series.length
            )
              return 0;
            var s = function (f) {
                return ["bar", "rangeBar", "candlestick", "boxPlot"].includes(
                  f
                );
              },
              n = a.chart.type,
              o = 0,
              l = s(n) ? a.series.length : 1;
            i.comboBarCount > 0 && (l = i.comboBarCount),
              i.collapsedSeries.forEach(function (f) {
                s(f.type) && (l -= 1);
              }),
              a.chart.stacked && (l = 1);
            var c = s(n) || i.comboBarCount > 0,
              h = Math.abs(i.initialMaxX - i.initialMinX);
            if (c && i.isXNumeric && !i.isBarHorizontal && l > 0 && h !== 0) {
              h <= 3 && (h = i.dataPoints);
              var d = h / e,
                u = i.minXDiff && i.minXDiff / d > 0 ? i.minXDiff / d : 0;
              u > e / 2 && (u /= 2),
                (o = (u * parseInt(a.plotOptions.bar.columnWidth, 10)) / 100) <
                  1 && (o = 1),
                (i.barPadForNumericAxis = o);
            }
            return o;
          },
        },
        {
          key: "gridPadFortitleSubtitle",
          value: function () {
            var e = this,
              t = this.w,
              a = t.globals,
              i = this.dCtx.isSparkline || !a.axisCharts ? 0 : 10;
            ["title", "subtitle"].forEach(function (o) {
              t.config[o].text !== void 0
                ? (i += t.config[o].margin)
                : (i += e.dCtx.isSparkline || !a.axisCharts ? 0 : 5);
            }),
              !t.config.legend.show ||
                t.config.legend.position !== "bottom" ||
                t.config.legend.floating ||
                a.axisCharts ||
                (i += 10);
            var s = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),
              n = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
            (a.gridHeight -= s.height + n.height + i),
              (a.translateY += s.height + n.height + i);
          },
        },
        {
          key: "setGridXPosForDualYAxis",
          value: function (e, t) {
            var a = this.w,
              i = new St(this.dCtx.ctx);
            a.config.yaxis.forEach(function (s, n) {
              a.globals.ignoreYAxisIndexes.indexOf(n) !== -1 ||
                s.floating ||
                i.isYAxisHidden(n) ||
                (s.opposite &&
                  (a.globals.translateX -=
                    t[n].width +
                    e[n].width +
                    parseInt(s.labels.style.fontSize, 10) / 1.2 +
                    12),
                a.globals.translateX < 2 && (a.globals.translateX = 2));
            });
          },
        },
      ]),
      r
    );
  })(),
  _i = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.lgRect = {}),
        (this.yAxisWidth = 0),
        (this.yAxisWidthLeft = 0),
        (this.yAxisWidthRight = 0),
        (this.xAxisHeight = 0),
        (this.isSparkline = this.w.config.chart.sparkline.enabled),
        (this.dimHelpers = new Am(this)),
        (this.dimYAxis = new Sm(this)),
        (this.dimXAxis = new Cm(this)),
        (this.dimGrid = new Tm(this)),
        (this.lgWidthForSideLegends = 0),
        (this.gridPad = this.w.config.grid.padding),
        (this.xPadRight = 0),
        (this.xPadLeft = 0);
    }
    return (
      $(r, [
        {
          key: "plotCoords",
          value: function () {
            var e = this,
              t = this.w,
              a = t.globals;
            (this.lgRect = this.dimHelpers.getLegendsRect()),
              (this.datalabelsCoords = { width: 0, height: 0 });
            var i = Array.isArray(t.config.stroke.width)
              ? Math.max.apply(Math, Pe(t.config.stroke.width))
              : t.config.stroke.width;
            this.isSparkline &&
              ((t.config.markers.discrete.length > 0 ||
                t.config.markers.size > 0) &&
                Object.entries(this.gridPad).forEach(function (n) {
                  var o = cc(n, 2),
                    l = o[0],
                    c = o[1];
                  e.gridPad[l] = Math.max(
                    c,
                    e.w.globals.markers.largestSize / 1.5
                  );
                }),
              (this.gridPad.top = Math.max(i / 2, this.gridPad.top)),
              (this.gridPad.bottom = Math.max(i / 2, this.gridPad.bottom))),
              a.axisCharts
                ? this.setDimensionsForAxisCharts()
                : this.setDimensionsForNonAxisCharts(),
              this.dimGrid.gridPadFortitleSubtitle(),
              (a.gridHeight =
                a.gridHeight - this.gridPad.top - this.gridPad.bottom),
              (a.gridWidth =
                a.gridWidth -
                this.gridPad.left -
                this.gridPad.right -
                this.xPadRight -
                this.xPadLeft);
            var s = this.dimGrid.gridPadForColumnsInNumericAxis(a.gridWidth);
            (a.gridWidth = a.gridWidth - 2 * s),
              (a.translateX =
                a.translateX +
                this.gridPad.left +
                this.xPadLeft +
                (s > 0 ? s : 0)),
              (a.translateY = a.translateY + this.gridPad.top);
          },
        },
        {
          key: "setDimensionsForAxisCharts",
          value: function () {
            var e = this,
              t = this.w,
              a = t.globals,
              i = this.dimYAxis.getyAxisLabelsCoords(),
              s = this.dimYAxis.getyAxisTitleCoords();
            a.isSlopeChart &&
              (this.datalabelsCoords = this.dimHelpers.getDatalabelsRect()),
              (t.globals.yLabelsCoords = []),
              (t.globals.yTitleCoords = []),
              t.config.yaxis.map(function (f, g) {
                t.globals.yLabelsCoords.push({ width: i[g].width, index: g }),
                  t.globals.yTitleCoords.push({ width: s[g].width, index: g });
              }),
              (this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth());
            var n = this.dimXAxis.getxAxisLabelsCoords(),
              o = this.dimXAxis.getxAxisGroupLabelsCoords(),
              l = this.dimXAxis.getxAxisTitleCoords();
            this.conditionalChecksForAxisCoords(n, l, o),
              (a.translateXAxisY = t.globals.rotateXLabels
                ? this.xAxisHeight / 8
                : -4),
              (a.translateXAxisX =
                t.globals.rotateXLabels &&
                t.globals.isXNumeric &&
                t.config.xaxis.labels.rotate <= -45
                  ? -this.xAxisWidth / 4
                  : 0),
              t.globals.isBarHorizontal &&
                ((a.rotateXLabels = !1),
                (a.translateXAxisY =
                  (parseInt(t.config.xaxis.labels.style.fontSize, 10) / 1.5) *
                  -1)),
              (a.translateXAxisY =
                a.translateXAxisY + t.config.xaxis.labels.offsetY),
              (a.translateXAxisX =
                a.translateXAxisX + t.config.xaxis.labels.offsetX);
            var c = this.yAxisWidth,
              h = this.xAxisHeight;
            (a.xAxisLabelsHeight = this.xAxisHeight - l.height),
              (a.xAxisGroupLabelsHeight = a.xAxisLabelsHeight - n.height),
              (a.xAxisLabelsWidth = this.xAxisWidth),
              (a.xAxisHeight = this.xAxisHeight);
            var d = 10;
            (t.config.chart.type === "radar" || this.isSparkline) &&
              ((c = 0), (h = 0)),
              this.isSparkline && (this.lgRect = { height: 0, width: 0 }),
              (this.isSparkline || t.config.chart.type === "treemap") &&
                ((c = 0), (h = 0), (d = 0)),
              this.isSparkline ||
                t.config.chart.type === "treemap" ||
                this.dimXAxis.additionalPaddingXLabels(n);
            var u = function () {
              (a.translateX = c + e.datalabelsCoords.width),
                (a.gridHeight =
                  a.svgHeight -
                  e.lgRect.height -
                  h -
                  (e.isSparkline || t.config.chart.type === "treemap"
                    ? 0
                    : t.globals.rotateXLabels
                    ? 10
                    : 15)),
                (a.gridWidth = a.svgWidth - c - 2 * e.datalabelsCoords.width);
            };
            switch (
              (t.config.xaxis.position === "top" &&
                (d = a.xAxisHeight - t.config.xaxis.axisTicks.height - 5),
              t.config.legend.position)
            ) {
              case "bottom":
                (a.translateY = d), u();
                break;
              case "top":
                (a.translateY = this.lgRect.height + d), u();
                break;
              case "left":
                (a.translateY = d),
                  (a.translateX =
                    this.lgRect.width + c + this.datalabelsCoords.width),
                  (a.gridHeight = a.svgHeight - h - 12),
                  (a.gridWidth =
                    a.svgWidth -
                    this.lgRect.width -
                    c -
                    2 * this.datalabelsCoords.width);
                break;
              case "right":
                (a.translateY = d),
                  (a.translateX = c + this.datalabelsCoords.width),
                  (a.gridHeight = a.svgHeight - h - 12),
                  (a.gridWidth =
                    a.svgWidth -
                    this.lgRect.width -
                    c -
                    2 * this.datalabelsCoords.width -
                    5);
                break;
              default:
                throw new Error("Legend position not supported");
            }
            this.dimGrid.setGridXPosForDualYAxis(s, i),
              new $s(this.ctx).setYAxisXPosition(i, s);
          },
        },
        {
          key: "setDimensionsForNonAxisCharts",
          value: function () {
            var e = this.w,
              t = e.globals,
              a = e.config,
              i = 0;
            e.config.legend.show && !e.config.legend.floating && (i = 20);
            var s =
                a.chart.type === "pie" ||
                a.chart.type === "polarArea" ||
                a.chart.type === "donut"
                  ? "pie"
                  : "radialBar",
              n = a.plotOptions[s].offsetY,
              o = a.plotOptions[s].offsetX;
            if (!a.legend.show || a.legend.floating) {
              t.gridHeight = t.svgHeight;
              var l = t.dom.elWrap.getBoundingClientRect().width;
              return (
                (t.gridWidth = Math.min(l, t.gridHeight)),
                (t.translateY = n),
                void (t.translateX = o + (t.svgWidth - t.gridWidth) / 2)
              );
            }
            switch (a.legend.position) {
              case "bottom":
                (t.gridHeight = t.svgHeight - this.lgRect.height),
                  (t.gridWidth = t.svgWidth),
                  (t.translateY = n - 10),
                  (t.translateX = o + (t.svgWidth - t.gridWidth) / 2);
                break;
              case "top":
                (t.gridHeight = t.svgHeight - this.lgRect.height),
                  (t.gridWidth = t.svgWidth),
                  (t.translateY = this.lgRect.height + n + 10),
                  (t.translateX = o + (t.svgWidth - t.gridWidth) / 2);
                break;
              case "left":
                (t.gridWidth = t.svgWidth - this.lgRect.width - i),
                  (t.gridHeight =
                    a.chart.height !== "auto" ? t.svgHeight : t.gridWidth),
                  (t.translateY = n),
                  (t.translateX = o + this.lgRect.width + i);
                break;
              case "right":
                (t.gridWidth = t.svgWidth - this.lgRect.width - i - 5),
                  (t.gridHeight =
                    a.chart.height !== "auto" ? t.svgHeight : t.gridWidth),
                  (t.translateY = n),
                  (t.translateX = o + 10);
                break;
              default:
                throw new Error("Legend position not supported");
            }
          },
        },
        {
          key: "conditionalChecksForAxisCoords",
          value: function (e, t, a) {
            var i = this.w,
              s = i.globals.hasXaxisGroups ? 2 : 1,
              n = a.height + e.height + t.height,
              o = i.globals.isMultiLineX ? 1.2 : i.globals.LINE_HEIGHT_RATIO,
              l = i.globals.rotateXLabels ? 22 : 10,
              c =
                i.globals.rotateXLabels && i.config.legend.position === "bottom"
                  ? 10
                  : 0;
            (this.xAxisHeight = n * o + s * l + c),
              (this.xAxisWidth = e.width),
              this.xAxisHeight - t.height > i.config.xaxis.labels.maxHeight &&
                (this.xAxisHeight = i.config.xaxis.labels.maxHeight),
              i.config.xaxis.labels.minHeight &&
                this.xAxisHeight < i.config.xaxis.labels.minHeight &&
                (this.xAxisHeight = i.config.xaxis.labels.minHeight),
              i.config.xaxis.floating && (this.xAxisHeight = 0);
            var h = 0,
              d = 0;
            i.config.yaxis.forEach(function (u) {
              (h += u.labels.minWidth), (d += u.labels.maxWidth);
            }),
              this.yAxisWidth < h && (this.yAxisWidth = h),
              this.yAxisWidth > d && (this.yAxisWidth = d);
          },
        },
      ]),
      r
    );
  })(),
  Pm = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.lgCtx = e);
    }
    return (
      $(r, [
        {
          key: "getLegendStyles",
          value: function () {
            var e,
              t,
              a,
              i = document.createElement("style");
            i.setAttribute("type", "text/css");
            var s =
              ((e = this.lgCtx.ctx) === null ||
              e === void 0 ||
              (t = e.opts) === null ||
              t === void 0 ||
              (a = t.chart) === null ||
              a === void 0
                ? void 0
                : a.nonce) || this.w.config.chart.nonce;
            s && i.setAttribute("nonce", s);
            var n = document.createTextNode(`
      .apexcharts-flip-y {
        transform: scaleY(-1) translateY(-100%);
        transform-origin: top;
        transform-box: fill-box;
      }
      .apexcharts-flip-x {
        transform: scaleX(-1);
        transform-origin: center;
        transform-box: fill-box;
      }
      .apexcharts-legend {
        display: flex;
        overflow: auto;
        padding: 0 10px;
      }
      .apexcharts-legend.apexcharts-legend-group-horizontal {
        flex-direction: column;
      }
      .apexcharts-legend-group {
        display: flex;
      }
      .apexcharts-legend-group-vertical {
        flex-direction: column-reverse;
      }
      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {
        flex-wrap: wrap
      }
      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {
        flex-direction: column;
        bottom: 0;
      }
      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {
        justify-content: flex-start;
        align-items: flex-start;
      }
      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {
        justify-content: center;
        align-items: center;
      }
      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {
        justify-content: flex-end;
        align-items: flex-end;
      }
      .apexcharts-legend-series {
        cursor: pointer;
        line-height: normal;
        display: flex;
        align-items: center;
      }
      .apexcharts-legend-text {
        position: relative;
        font-size: 14px;
      }
      .apexcharts-legend-text *, .apexcharts-legend-marker * {
        pointer-events: none;
      }
      .apexcharts-legend-marker {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        margin-right: 1px;
      }

      .apexcharts-legend-series.apexcharts-no-click {
        cursor: auto;
      }
      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {
        display: none !important;
      }
      .apexcharts-inactive-legend {
        opacity: 0.45;
      }

    `);
            return i.appendChild(n), i;
          },
        },
        {
          key: "getLegendDimensions",
          value: function () {
            var e = this.w.globals.dom.baseEl
                .querySelector(".apexcharts-legend")
                .getBoundingClientRect(),
              t = e.width;
            return { clwh: e.height, clww: t };
          },
        },
        {
          key: "appendToForeignObject",
          value: function () {
            this.w.globals.dom.elLegendForeign.appendChild(
              this.getLegendStyles()
            );
          },
        },
        {
          key: "toggleDataSeries",
          value: function (e, t) {
            var a = this,
              i = this.w;
            if (i.globals.axisCharts || i.config.chart.type === "radialBar") {
              i.globals.resized = !0;
              var s = null,
                n = null;
              (i.globals.risingSeries = []),
                i.globals.axisCharts
                  ? ((s = i.globals.dom.baseEl.querySelector(
                      ".apexcharts-series[data\\:realIndex='".concat(e, "']")
                    )),
                    (n = parseInt(s.getAttribute("data:realIndex"), 10)))
                  : ((s = i.globals.dom.baseEl.querySelector(
                      ".apexcharts-series[rel='".concat(e + 1, "']")
                    )),
                    (n = parseInt(s.getAttribute("rel"), 10) - 1)),
                t
                  ? [
                      {
                        cs: i.globals.collapsedSeries,
                        csi: i.globals.collapsedSeriesIndices,
                      },
                      {
                        cs: i.globals.ancillaryCollapsedSeries,
                        csi: i.globals.ancillaryCollapsedSeriesIndices,
                      },
                    ].forEach(function (h) {
                      a.riseCollapsedSeries(h.cs, h.csi, n);
                    })
                  : this.hideSeries({ seriesEl: s, realIndex: n });
            } else {
              var o = i.globals.dom.Paper.findOne(
                  " .apexcharts-series[rel='".concat(e + 1, "'] path")
                ),
                l = i.config.chart.type;
              if (l === "pie" || l === "polarArea" || l === "donut") {
                var c = i.config.plotOptions.pie.donut.labels;
                new H(this.lgCtx.ctx).pathMouseDown(o, null),
                  this.lgCtx.ctx.pie.printDataLabelsInner(o.node, c);
              }
              o.fire("click");
            }
          },
        },
        {
          key: "getSeriesAfterCollapsing",
          value: function (e) {
            var t = e.realIndex,
              a = this.w,
              i = a.globals,
              s = _.clone(a.config.series);
            if (i.axisCharts) {
              var n = a.config.yaxis[i.seriesYAxisReverseMap[t]],
                o = {
                  index: t,
                  data: s[t].data.slice(),
                  type: s[t].type || a.config.chart.type,
                };
              if (n && n.show && n.showAlways)
                i.ancillaryCollapsedSeriesIndices.indexOf(t) < 0 &&
                  (i.ancillaryCollapsedSeries.push(o),
                  i.ancillaryCollapsedSeriesIndices.push(t));
              else if (i.collapsedSeriesIndices.indexOf(t) < 0) {
                i.collapsedSeries.push(o), i.collapsedSeriesIndices.push(t);
                var l = i.risingSeries.indexOf(t);
                i.risingSeries.splice(l, 1);
              }
            } else
              i.collapsedSeries.push({ index: t, data: s[t] }),
                i.collapsedSeriesIndices.push(t);
            return (
              (i.allSeriesCollapsed =
                i.collapsedSeries.length + i.ancillaryCollapsedSeries.length ===
                a.config.series.length),
              this._getSeriesBasedOnCollapsedState(s)
            );
          },
        },
        {
          key: "hideSeries",
          value: function (e) {
            for (
              var t = e.seriesEl,
                a = e.realIndex,
                i = this.w,
                s = this.getSeriesAfterCollapsing({ realIndex: a }),
                n = t.childNodes,
                o = 0;
              o < n.length;
              o++
            )
              n[o].classList.contains("apexcharts-series-markers-wrap") &&
                (n[o].classList.contains("apexcharts-hide")
                  ? n[o].classList.remove("apexcharts-hide")
                  : n[o].classList.add("apexcharts-hide"));
            this.lgCtx.ctx.updateHelpers._updateSeries(
              s,
              i.config.chart.animations.dynamicAnimation.enabled
            );
          },
        },
        {
          key: "riseCollapsedSeries",
          value: function (e, t, a) {
            var i = this.w,
              s = _.clone(i.config.series);
            if (e.length > 0) {
              for (var n = 0; n < e.length; n++)
                e[n].index === a &&
                  (i.globals.axisCharts
                    ? (s[a].data = e[n].data.slice())
                    : (s[a] = e[n].data),
                  typeof s[a] != "number" && (s[a].hidden = !1),
                  e.splice(n, 1),
                  t.splice(n, 1),
                  i.globals.risingSeries.push(a));
              (s = this._getSeriesBasedOnCollapsedState(s)),
                this.lgCtx.ctx.updateHelpers._updateSeries(
                  s,
                  i.config.chart.animations.dynamicAnimation.enabled
                );
            }
          },
        },
        {
          key: "_getSeriesBasedOnCollapsedState",
          value: function (e) {
            var t = this.w,
              a = 0;
            return (
              t.globals.axisCharts
                ? e.forEach(function (i, s) {
                    (t.globals.collapsedSeriesIndices.indexOf(s) < 0 &&
                      t.globals.ancillaryCollapsedSeriesIndices.indexOf(s) <
                        0) ||
                      ((e[s].data = []), a++);
                  })
                : e.forEach(function (i, s) {
                    !t.globals.collapsedSeriesIndices.indexOf(s) < 0 &&
                      ((e[s] = 0), a++);
                  }),
              (t.globals.allSeriesCollapsed = a === e.length),
              e
            );
          },
        },
      ]),
      r
    );
  })(),
  Wc = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.onLegendClick = this.onLegendClick.bind(this)),
        (this.onLegendHovered = this.onLegendHovered.bind(this)),
        (this.isBarsDistributed =
          this.w.config.chart.type === "bar" &&
          this.w.config.plotOptions.bar.distributed &&
          this.w.config.series.length === 1),
        (this.legendHelpers = new Pm(this));
    }
    return (
      $(r, [
        {
          key: "init",
          value: function () {
            var e = this.w,
              t = e.globals,
              a = e.config,
              i =
                (a.legend.showForSingleSeries && t.series.length === 1) ||
                this.isBarsDistributed ||
                t.series.length > 1;
            if (
              (this.legendHelpers.appendToForeignObject(),
              (i || !t.axisCharts) && a.legend.show)
            ) {
              for (; t.dom.elLegendWrap.firstChild; )
                t.dom.elLegendWrap.removeChild(t.dom.elLegendWrap.firstChild);
              this.drawLegends(),
                a.legend.position === "bottom" || a.legend.position === "top"
                  ? this.legendAlignHorizontal()
                  : (a.legend.position !== "right" &&
                      a.legend.position !== "left") ||
                    this.legendAlignVertical();
            }
          },
        },
        {
          key: "createLegendMarker",
          value: function (e) {
            var t = e.i,
              a = e.fillcolor,
              i = this.w,
              s = document.createElement("span");
            s.classList.add("apexcharts-legend-marker");
            var n = i.config.legend.markers.shape || i.config.markers.shape,
              o = n;
            Array.isArray(n) && (o = n[t]);
            var l = Array.isArray(i.config.legend.markers.size)
                ? parseFloat(i.config.legend.markers.size[t])
                : parseFloat(i.config.legend.markers.size),
              c = Array.isArray(i.config.legend.markers.offsetX)
                ? parseFloat(i.config.legend.markers.offsetX[t])
                : parseFloat(i.config.legend.markers.offsetX),
              h = Array.isArray(i.config.legend.markers.offsetY)
                ? parseFloat(i.config.legend.markers.offsetY[t])
                : parseFloat(i.config.legend.markers.offsetY),
              d = Array.isArray(i.config.legend.markers.strokeWidth)
                ? parseFloat(i.config.legend.markers.strokeWidth[t])
                : parseFloat(i.config.legend.markers.strokeWidth),
              u = s.style;
            if (
              ((u.height = 2 * (l + d) + "px"),
              (u.width = 2 * (l + d) + "px"),
              (u.left = c + "px"),
              (u.top = h + "px"),
              i.config.legend.markers.customHTML)
            )
              (u.background = "transparent"),
                (u.color = a[t]),
                Array.isArray(i.config.legend.markers.customHTML)
                  ? i.config.legend.markers.customHTML[t] &&
                    (s.innerHTML = i.config.legend.markers.customHTML[t]())
                  : (s.innerHTML = i.config.legend.markers.customHTML());
            else {
              var f = new da(this.ctx).getMarkerConfig({
                  cssClass:
                    "apexcharts-legend-marker apexcharts-marker apexcharts-marker-".concat(
                      o
                    ),
                  seriesIndex: t,
                  strokeWidth: d,
                  size: l,
                }),
                g = window.SVG().addTo(s).size("100%", "100%"),
                p = new H(this.ctx).drawMarker(
                  0,
                  0,
                  Y(
                    Y({}, f),
                    {},
                    {
                      pointFillColor: Array.isArray(a)
                        ? a[t]
                        : f.pointFillColor,
                      shape: o,
                    }
                  )
                );
              i.globals.dom.Paper.find(
                ".apexcharts-legend-marker.apexcharts-marker"
              ).forEach(function (m) {
                m.node.classList.contains("apexcharts-marker-triangle")
                  ? (m.node.style.transform = "translate(50%, 45%)")
                  : (m.node.style.transform = "translate(50%, 50%)");
              }),
                g.add(p);
            }
            return s;
          },
        },
        {
          key: "drawLegends",
          value: function () {
            var e = this,
              t = this,
              a = this.w,
              i = a.config.legend.fontFamily,
              s = a.globals.seriesNames,
              n = a.config.legend.markers.fillColors
                ? a.config.legend.markers.fillColors.slice()
                : a.globals.colors.slice();
            if (a.config.chart.type === "heatmap") {
              var o = a.config.plotOptions.heatmap.colorScale.ranges;
              (s = o.map(function (f) {
                return f.name ? f.name : f.from + " - " + f.to;
              })),
                (n = o.map(function (f) {
                  return f.color;
                }));
            } else this.isBarsDistributed && (s = a.globals.labels.slice());
            a.config.legend.customLegendItems.length &&
              (s = a.config.legend.customLegendItems);
            var l = a.globals.legendFormatter,
              c = a.config.legend.inverseOrder,
              h = [];
            a.globals.seriesGroups.length > 1 &&
              a.config.legend.clusterGroupedSeries &&
              a.globals.seriesGroups.forEach(function (f, g) {
                (h[g] = document.createElement("div")),
                  h[g].classList.add(
                    "apexcharts-legend-group",
                    "apexcharts-legend-group-".concat(g)
                  ),
                  a.config.legend.clusterGroupedSeriesOrientation ===
                  "horizontal"
                    ? a.globals.dom.elLegendWrap.classList.add(
                        "apexcharts-legend-group-horizontal"
                      )
                    : h[g].classList.add("apexcharts-legend-group-vertical");
              });
            for (
              var d = function (f) {
                  var g,
                    p = l(s[f], { seriesIndex: f, w: a }),
                    m = !1,
                    x = !1;
                  if (a.globals.collapsedSeries.length > 0)
                    for (var v = 0; v < a.globals.collapsedSeries.length; v++)
                      a.globals.collapsedSeries[v].index === f && (m = !0);
                  if (a.globals.ancillaryCollapsedSeriesIndices.length > 0)
                    for (
                      var b = 0;
                      b < a.globals.ancillaryCollapsedSeriesIndices.length;
                      b++
                    )
                      a.globals.ancillaryCollapsedSeriesIndices[b] === f &&
                        (x = !0);
                  var k = e.createLegendMarker({ i: f, fillcolor: n });
                  H.setAttrs(k, { rel: f + 1, "data:collapsed": m || x }),
                    (m || x) && k.classList.add("apexcharts-inactive-legend");
                  var y = document.createElement("div"),
                    C = document.createElement("span");
                  C.classList.add("apexcharts-legend-text"),
                    (C.innerHTML = Array.isArray(p) ? p.join(" ") : p);
                  var A = a.config.legend.labels.useSeriesColors
                    ? a.globals.colors[f]
                    : Array.isArray(a.config.legend.labels.colors)
                    ? (g = a.config.legend.labels.colors) === null ||
                      g === void 0
                      ? void 0
                      : g[f]
                    : a.config.legend.labels.colors;
                  A || (A = a.config.chart.foreColor),
                    (C.style.color = A),
                    (C.style.fontSize =
                      parseFloat(a.config.legend.fontSize) + "px"),
                    (C.style.fontWeight = a.config.legend.fontWeight),
                    (C.style.fontFamily = i || a.config.chart.fontFamily),
                    H.setAttrs(C, {
                      rel: f + 1,
                      i: f,
                      "data:default-text": encodeURIComponent(p),
                      "data:collapsed": m || x,
                    }),
                    y.appendChild(k),
                    y.appendChild(C);
                  var S = new ke(e.ctx);
                  a.config.legend.showForZeroSeries ||
                    (S.getSeriesTotalByIndex(f) === 0 &&
                      S.seriesHaveSameValues(f) &&
                      !S.isSeriesNull(f) &&
                      a.globals.collapsedSeriesIndices.indexOf(f) === -1 &&
                      a.globals.ancillaryCollapsedSeriesIndices.indexOf(f) ===
                        -1 &&
                      y.classList.add("apexcharts-hidden-zero-series")),
                    a.config.legend.showForNullSeries ||
                      (S.isSeriesNull(f) &&
                        a.globals.collapsedSeriesIndices.indexOf(f) === -1 &&
                        a.globals.ancillaryCollapsedSeriesIndices.indexOf(f) ===
                          -1 &&
                        y.classList.add("apexcharts-hidden-null-series")),
                    h.length
                      ? a.globals.seriesGroups.forEach(function (T, E) {
                          var L;
                          T.includes(
                            (L = a.config.series[f]) === null || L === void 0
                              ? void 0
                              : L.name
                          ) &&
                            (a.globals.dom.elLegendWrap.appendChild(h[E]),
                            h[E].appendChild(y));
                        })
                      : a.globals.dom.elLegendWrap.appendChild(y),
                    a.globals.dom.elLegendWrap.classList.add(
                      "apexcharts-align-".concat(
                        a.config.legend.horizontalAlign
                      )
                    ),
                    a.globals.dom.elLegendWrap.classList.add(
                      "apx-legend-position-" + a.config.legend.position
                    ),
                    y.classList.add("apexcharts-legend-series"),
                    (y.style.margin = ""
                      .concat(a.config.legend.itemMargin.vertical, "px ")
                      .concat(a.config.legend.itemMargin.horizontal, "px")),
                    (a.globals.dom.elLegendWrap.style.width = a.config.legend
                      .width
                      ? a.config.legend.width + "px"
                      : ""),
                    (a.globals.dom.elLegendWrap.style.height = a.config.legend
                      .height
                      ? a.config.legend.height + "px"
                      : ""),
                    H.setAttrs(y, {
                      rel: f + 1,
                      seriesName: _.escapeString(s[f]),
                      "data:collapsed": m || x,
                    }),
                    (m || x) && y.classList.add("apexcharts-inactive-legend"),
                    a.config.legend.onItemClick.toggleDataSeries ||
                      y.classList.add("apexcharts-no-click");
                },
                u = c ? s.length - 1 : 0;
              c ? u >= 0 : u <= s.length - 1;
              c ? u-- : u++
            )
              d(u);
            a.globals.dom.elWrap.addEventListener("click", t.onLegendClick, !0),
              a.config.legend.onItemHover.highlightDataSeries &&
                a.config.legend.customLegendItems.length === 0 &&
                (a.globals.dom.elWrap.addEventListener(
                  "mousemove",
                  t.onLegendHovered,
                  !0
                ),
                a.globals.dom.elWrap.addEventListener(
                  "mouseout",
                  t.onLegendHovered,
                  !0
                ));
          },
        },
        {
          key: "setLegendWrapXY",
          value: function (e, t) {
            var a = this.w,
              i = a.globals.dom.elLegendWrap,
              s = i.clientHeight,
              n = 0,
              o = 0;
            if (a.config.legend.position === "bottom")
              o =
                a.globals.svgHeight - Math.min(s, a.globals.svgHeight / 2) - 5;
            else if (a.config.legend.position === "top") {
              var l = new _i(this.ctx),
                c = l.dimHelpers.getTitleSubtitleCoords("title").height,
                h = l.dimHelpers.getTitleSubtitleCoords("subtitle").height;
              o = (c > 0 ? c - 10 : 0) + (h > 0 ? h - 10 : 0);
            }
            (i.style.position = "absolute"),
              (n = n + e + a.config.legend.offsetX),
              (o = o + t + a.config.legend.offsetY),
              (i.style.left = n + "px"),
              (i.style.top = o + "px"),
              a.config.legend.position === "right" &&
                ((i.style.left = "auto"),
                (i.style.right = 25 + a.config.legend.offsetX + "px")),
              ["width", "height"].forEach(function (d) {
                i.style[d] &&
                  (i.style[d] = parseInt(a.config.legend[d], 10) + "px");
              });
          },
        },
        {
          key: "legendAlignHorizontal",
          value: function () {
            var e = this.w;
            e.globals.dom.elLegendWrap.style.right = 0;
            var t = new _i(this.ctx),
              a = t.dimHelpers.getTitleSubtitleCoords("title"),
              i = t.dimHelpers.getTitleSubtitleCoords("subtitle"),
              s = 0;
            e.config.legend.position === "top" &&
              (s =
                a.height +
                i.height +
                e.config.title.margin +
                e.config.subtitle.margin -
                10),
              this.setLegendWrapXY(20, s);
          },
        },
        {
          key: "legendAlignVertical",
          value: function () {
            var e = this.w,
              t = this.legendHelpers.getLegendDimensions(),
              a = 0;
            e.config.legend.position === "left" && (a = 20),
              e.config.legend.position === "right" &&
                (a = e.globals.svgWidth - t.clww - 10),
              this.setLegendWrapXY(a, 20);
          },
        },
        {
          key: "onLegendHovered",
          value: function (e) {
            var t = this.w,
              a =
                e.target.classList.contains("apexcharts-legend-series") ||
                e.target.classList.contains("apexcharts-legend-text") ||
                e.target.classList.contains("apexcharts-legend-marker");
            if (t.config.chart.type === "heatmap" || this.isBarsDistributed) {
              if (a) {
                var i = parseInt(e.target.getAttribute("rel"), 10) - 1;
                this.ctx.events.fireEvent("legendHover", [this.ctx, i, this.w]),
                  new Ve(this.ctx).highlightRangeInSeries(e, e.target);
              }
            } else
              !e.target.classList.contains("apexcharts-inactive-legend") &&
                a &&
                new Ve(this.ctx).toggleSeriesOnHover(e, e.target);
          },
        },
        {
          key: "onLegendClick",
          value: function (e) {
            var t = this.w;
            if (
              !t.config.legend.customLegendItems.length &&
              (e.target.classList.contains("apexcharts-legend-series") ||
                e.target.classList.contains("apexcharts-legend-text") ||
                e.target.classList.contains("apexcharts-legend-marker"))
            ) {
              var a = parseInt(e.target.getAttribute("rel"), 10) - 1,
                i = e.target.getAttribute("data:collapsed") === "true",
                s = this.w.config.chart.events.legendClick;
              typeof s == "function" && s(this.ctx, a, this.w),
                this.ctx.events.fireEvent("legendClick", [this.ctx, a, this.w]);
              var n = this.w.config.legend.markers.onClick;
              typeof n == "function" &&
                e.target.classList.contains("apexcharts-legend-marker") &&
                (n(this.ctx, a, this.w),
                this.ctx.events.fireEvent("legendMarkerClick", [
                  this.ctx,
                  a,
                  this.w,
                ])),
                t.config.chart.type !== "treemap" &&
                  t.config.chart.type !== "heatmap" &&
                  !this.isBarsDistributed &&
                  t.config.legend.onItemClick.toggleDataSeries &&
                  this.legendHelpers.toggleDataSeries(a, i);
            }
          },
        },
      ]),
      r
    );
  })(),
  Vc = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
      var t = this.w;
      (this.ev = this.w.config.chart.events),
        (this.selectedClass = "apexcharts-selected"),
        (this.localeValues = this.w.globals.locale.toolbar),
        (this.minX = t.globals.minX),
        (this.maxX = t.globals.maxX);
    }
    return (
      $(r, [
        {
          key: "createToolbar",
          value: function () {
            var e = this,
              t = this.w,
              a = function () {
                return document.createElement("div");
              },
              i = a();
            if (
              (i.setAttribute("class", "apexcharts-toolbar"),
              (i.style.top = t.config.chart.toolbar.offsetY + "px"),
              (i.style.right = 3 - t.config.chart.toolbar.offsetX + "px"),
              t.globals.dom.elWrap.appendChild(i),
              (this.elZoom = a()),
              (this.elZoomIn = a()),
              (this.elZoomOut = a()),
              (this.elPan = a()),
              (this.elSelection = a()),
              (this.elZoomReset = a()),
              (this.elMenuIcon = a()),
              (this.elMenu = a()),
              (this.elCustomIcons = []),
              (this.t = t.config.chart.toolbar.tools),
              Array.isArray(this.t.customIcons))
            )
              for (var s = 0; s < this.t.customIcons.length; s++)
                this.elCustomIcons.push(a());
            var n = [],
              o = function (d, u, f) {
                var g = d.toLowerCase();
                e.t[g] &&
                  t.config.chart.zoom.enabled &&
                  n.push({
                    el: u,
                    icon: typeof e.t[g] == "string" ? e.t[g] : f,
                    title: e.localeValues[d],
                    class: "apexcharts-".concat(g, "-icon"),
                  });
              };
            o(
              "zoomIn",
              this.elZoomIn,
              `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
</svg>
`
            ),
              o(
                "zoomOut",
                this.elZoomOut,
                `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
</svg>
`
              );
            var l = function (d) {
              e.t[d] &&
                t.config.chart[d].enabled &&
                n.push({
                  el: d === "zoom" ? e.elZoom : e.elSelection,
                  icon:
                    typeof e.t[d] == "string"
                      ? e.t[d]
                      : d === "zoom"
                      ? `<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">
    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
    <path d="M0 0h24v24H0V0z" fill="none"/>
    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>
</svg>`
                      : `<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>
</svg>`,
                  title:
                    e.localeValues[
                      d === "zoom" ? "selectionZoom" : "selection"
                    ],
                  class: t.globals.isTouchDevice
                    ? "apexcharts-element-hidden"
                    : "apexcharts-".concat(d, "-icon"),
                });
            };
            l("zoom"),
              l("selection"),
              this.t.pan &&
                t.config.chart.zoom.enabled &&
                n.push({
                  el: this.elPan,
                  icon:
                    typeof this.t.pan == "string"
                      ? this.t.pan
                      : `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">
    <defs>
        <path d="M0 0h24v24H0z" id="a"/>
    </defs>
    <clipPath id="b">
        <use overflow="visible" xlink:href="#a"/>
    </clipPath>
    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>
</svg>`,
                  title: this.localeValues.pan,
                  class: t.globals.isTouchDevice
                    ? "apexcharts-element-hidden"
                    : "apexcharts-pan-icon",
                }),
              o(
                "reset",
                this.elZoomReset,
                `<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
    <path d="M0 0h24v24H0z" fill="none"/>
</svg>`
              ),
              this.t.download &&
                n.push({
                  el: this.elMenuIcon,
                  icon:
                    typeof this.t.download == "string"
                      ? this.t.download
                      : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                  title: this.localeValues.menu,
                  class: "apexcharts-menu-icon",
                });
            for (var c = 0; c < this.elCustomIcons.length; c++)
              n.push({
                el: this.elCustomIcons[c],
                icon: this.t.customIcons[c].icon,
                title: this.t.customIcons[c].title,
                index: this.t.customIcons[c].index,
                class:
                  "apexcharts-toolbar-custom-icon " +
                  this.t.customIcons[c].class,
              });
            n.forEach(function (d, u) {
              d.index && _.moveIndexInArray(n, u, d.index);
            });
            for (var h = 0; h < n.length; h++)
              H.setAttrs(n[h].el, { class: n[h].class, title: n[h].title }),
                (n[h].el.innerHTML = n[h].icon),
                i.appendChild(n[h].el);
            this._createHamburgerMenu(i),
              t.globals.zoomEnabled
                ? this.elZoom.classList.add(this.selectedClass)
                : t.globals.panEnabled
                ? this.elPan.classList.add(this.selectedClass)
                : t.globals.selectionEnabled &&
                  this.elSelection.classList.add(this.selectedClass),
              this.addToolbarEventListeners();
          },
        },
        {
          key: "_createHamburgerMenu",
          value: function (e) {
            (this.elMenuItems = []),
              e.appendChild(this.elMenu),
              H.setAttrs(this.elMenu, { class: "apexcharts-menu" });
            for (
              var t = [
                  { name: "exportSVG", title: this.localeValues.exportToSVG },
                  { name: "exportPNG", title: this.localeValues.exportToPNG },
                  { name: "exportCSV", title: this.localeValues.exportToCSV },
                ],
                a = 0;
              a < t.length;
              a++
            )
              this.elMenuItems.push(document.createElement("div")),
                (this.elMenuItems[a].innerHTML = t[a].title),
                H.setAttrs(this.elMenuItems[a], {
                  class: "apexcharts-menu-item ".concat(t[a].name),
                  title: t[a].title,
                }),
                this.elMenu.appendChild(this.elMenuItems[a]);
          },
        },
        {
          key: "addToolbarEventListeners",
          value: function () {
            var e = this;
            this.elZoomReset.addEventListener(
              "click",
              this.handleZoomReset.bind(this)
            ),
              this.elSelection.addEventListener(
                "click",
                this.toggleZoomSelection.bind(this, "selection")
              ),
              this.elZoom.addEventListener(
                "click",
                this.toggleZoomSelection.bind(this, "zoom")
              ),
              this.elZoomIn.addEventListener(
                "click",
                this.handleZoomIn.bind(this)
              ),
              this.elZoomOut.addEventListener(
                "click",
                this.handleZoomOut.bind(this)
              ),
              this.elPan.addEventListener(
                "click",
                this.togglePanning.bind(this)
              ),
              this.elMenuIcon.addEventListener(
                "click",
                this.toggleMenu.bind(this)
              ),
              this.elMenuItems.forEach(function (a) {
                a.classList.contains("exportSVG")
                  ? a.addEventListener("click", e.handleDownload.bind(e, "svg"))
                  : a.classList.contains("exportPNG")
                  ? a.addEventListener("click", e.handleDownload.bind(e, "png"))
                  : a.classList.contains("exportCSV") &&
                    a.addEventListener(
                      "click",
                      e.handleDownload.bind(e, "csv")
                    );
              });
            for (var t = 0; t < this.t.customIcons.length; t++)
              this.elCustomIcons[t].addEventListener(
                "click",
                this.t.customIcons[t].click.bind(this, this.ctx, this.ctx.w)
              );
          },
        },
        {
          key: "toggleZoomSelection",
          value: function (e) {
            this.ctx.getSyncedCharts().forEach(function (t) {
              t.ctx.toolbar.toggleOtherControls();
              var a =
                  e === "selection"
                    ? t.ctx.toolbar.elSelection
                    : t.ctx.toolbar.elZoom,
                i = e === "selection" ? "selectionEnabled" : "zoomEnabled";
              (t.w.globals[i] = !t.w.globals[i]),
                a.classList.contains(t.ctx.toolbar.selectedClass)
                  ? a.classList.remove(t.ctx.toolbar.selectedClass)
                  : a.classList.add(t.ctx.toolbar.selectedClass);
            });
          },
        },
        {
          key: "getToolbarIconsReference",
          value: function () {
            var e = this.w;
            this.elZoom ||
              (this.elZoom = e.globals.dom.baseEl.querySelector(
                ".apexcharts-zoom-icon"
              )),
              this.elPan ||
                (this.elPan = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-pan-icon"
                )),
              this.elSelection ||
                (this.elSelection = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-selection-icon"
                ));
          },
        },
        {
          key: "enableZoomPanFromToolbar",
          value: function (e) {
            this.toggleOtherControls(),
              e === "pan"
                ? (this.w.globals.panEnabled = !0)
                : (this.w.globals.zoomEnabled = !0);
            var t = e === "pan" ? this.elPan : this.elZoom,
              a = e === "pan" ? this.elZoom : this.elPan;
            t && t.classList.add(this.selectedClass),
              a && a.classList.remove(this.selectedClass);
          },
        },
        {
          key: "togglePanning",
          value: function () {
            this.ctx.getSyncedCharts().forEach(function (e) {
              e.ctx.toolbar.toggleOtherControls(),
                (e.w.globals.panEnabled = !e.w.globals.panEnabled),
                e.ctx.toolbar.elPan.classList.contains(
                  e.ctx.toolbar.selectedClass
                )
                  ? e.ctx.toolbar.elPan.classList.remove(
                      e.ctx.toolbar.selectedClass
                    )
                  : e.ctx.toolbar.elPan.classList.add(
                      e.ctx.toolbar.selectedClass
                    );
            });
          },
        },
        {
          key: "toggleOtherControls",
          value: function () {
            var e = this,
              t = this.w;
            (t.globals.panEnabled = !1),
              (t.globals.zoomEnabled = !1),
              (t.globals.selectionEnabled = !1),
              this.getToolbarIconsReference(),
              [this.elPan, this.elSelection, this.elZoom].forEach(function (a) {
                a && a.classList.remove(e.selectedClass);
              });
          },
        },
        {
          key: "handleZoomIn",
          value: function () {
            var e = this.w;
            e.globals.isRangeBar &&
              ((this.minX = e.globals.minY), (this.maxX = e.globals.maxY));
            var t = (this.minX + this.maxX) / 2,
              a = (this.minX + t) / 2,
              i = (this.maxX + t) / 2,
              s = this._getNewMinXMaxX(a, i);
            e.globals.disableZoomIn || this.zoomUpdateOptions(s.minX, s.maxX);
          },
        },
        {
          key: "handleZoomOut",
          value: function () {
            var e = this.w;
            if (
              (e.globals.isRangeBar &&
                ((this.minX = e.globals.minY), (this.maxX = e.globals.maxY)),
              !(
                e.config.xaxis.type === "datetime" &&
                new Date(this.minX).getUTCFullYear() < 1e3
              ))
            ) {
              var t = (this.minX + this.maxX) / 2,
                a = this.minX - (t - this.minX),
                i = this.maxX - (t - this.maxX),
                s = this._getNewMinXMaxX(a, i);
              e.globals.disableZoomOut ||
                this.zoomUpdateOptions(s.minX, s.maxX);
            }
          },
        },
        {
          key: "_getNewMinXMaxX",
          value: function (e, t) {
            var a = this.w.config.xaxis.convertedCatToNumeric;
            return { minX: a ? Math.floor(e) : e, maxX: a ? Math.floor(t) : t };
          },
        },
        {
          key: "zoomUpdateOptions",
          value: function (e, t) {
            var a = this.w;
            if (e !== void 0 || t !== void 0) {
              if (
                !(
                  a.config.xaxis.convertedCatToNumeric &&
                  (e < 1 && ((e = 1), (t = a.globals.dataPoints)), t - e < 2)
                )
              ) {
                var i = { min: e, max: t },
                  s = this.getBeforeZoomRange(i);
                s && (i = s.xaxis);
                var n = { xaxis: i },
                  o = _.clone(a.globals.initialConfig.yaxis);
                a.config.chart.group || (n.yaxis = o),
                  (this.w.globals.zoomed = !0),
                  this.ctx.updateHelpers._updateOptions(
                    n,
                    !1,
                    this.w.config.chart.animations.dynamicAnimation.enabled
                  ),
                  this.zoomCallback(i, o);
              }
            } else this.handleZoomReset();
          },
        },
        {
          key: "zoomCallback",
          value: function (e, t) {
            typeof this.ev.zoomed == "function" &&
              this.ev.zoomed(this.ctx, { xaxis: e, yaxis: t });
          },
        },
        {
          key: "getBeforeZoomRange",
          value: function (e, t) {
            var a = null;
            return (
              typeof this.ev.beforeZoom == "function" &&
                (a = this.ev.beforeZoom(this, { xaxis: e, yaxis: t })),
              a
            );
          },
        },
        {
          key: "toggleMenu",
          value: function () {
            var e = this;
            window.setTimeout(function () {
              e.elMenu.classList.contains("apexcharts-menu-open")
                ? e.elMenu.classList.remove("apexcharts-menu-open")
                : e.elMenu.classList.add("apexcharts-menu-open");
            }, 0);
          },
        },
        {
          key: "handleDownload",
          value: function (e) {
            var t = this.w,
              a = new Ri(this.ctx);
            switch (e) {
              case "svg":
                a.exportToSVG(this.ctx);
                break;
              case "png":
                a.exportToPng(this.ctx);
                break;
              case "csv":
                a.exportToCSV({
                  series: t.config.series,
                  columnDelimiter:
                    t.config.chart.toolbar.export.csv.columnDelimiter,
                });
            }
          },
        },
        {
          key: "handleZoomReset",
          value: function (e) {
            this.ctx.getSyncedCharts().forEach(function (t) {
              var a = t.w;
              if (
                ((a.globals.lastXAxis.min = a.globals.initialConfig.xaxis.min),
                (a.globals.lastXAxis.max = a.globals.initialConfig.xaxis.max),
                t.updateHelpers.revertDefaultAxisMinMax(),
                typeof a.config.chart.events.beforeResetZoom == "function")
              ) {
                var i = a.config.chart.events.beforeResetZoom(t, a);
                i && t.updateHelpers.revertDefaultAxisMinMax(i);
              }
              typeof a.config.chart.events.zoomed == "function" &&
                t.ctx.toolbar.zoomCallback({
                  min: a.config.xaxis.min,
                  max: a.config.xaxis.max,
                }),
                (a.globals.zoomed = !1);
              var s = t.ctx.series.emptyCollapsedSeries(
                _.clone(a.globals.initialSeries)
              );
              t.updateHelpers._updateSeries(
                s,
                a.config.chart.animations.dynamicAnimation.enabled
              );
            });
          },
        },
        {
          key: "destroy",
          value: function () {
            (this.elZoom = null),
              (this.elZoomIn = null),
              (this.elZoomOut = null),
              (this.elPan = null),
              (this.elSelection = null),
              (this.elZoomReset = null),
              (this.elMenuIcon = null);
          },
        },
      ]),
      r
    );
  })(),
  Lm = (function (r) {
    Ua(t, Vc);
    var e = Ga(t);
    function t(a) {
      var i;
      return (
        U(this, t),
        ((i = e.call(this, a)).ctx = a),
        (i.w = a.w),
        (i.dragged = !1),
        (i.graphics = new H(i.ctx)),
        (i.eventList = [
          "mousedown",
          "mouseleave",
          "mousemove",
          "touchstart",
          "touchmove",
          "mouseup",
          "touchend",
          "wheel",
        ]),
        (i.clientX = 0),
        (i.clientY = 0),
        (i.startX = 0),
        (i.endX = 0),
        (i.dragX = 0),
        (i.startY = 0),
        (i.endY = 0),
        (i.dragY = 0),
        (i.moveDirection = "none"),
        (i.debounceTimer = null),
        (i.debounceDelay = 100),
        (i.wheelDelay = 400),
        i
      );
    }
    return (
      $(t, [
        {
          key: "init",
          value: function (a) {
            var i = this,
              s = a.xyRatios,
              n = this.w,
              o = this;
            (this.xyRatios = s),
              (this.zoomRect = this.graphics.drawRect(0, 0, 0, 0)),
              (this.selectionRect = this.graphics.drawRect(0, 0, 0, 0)),
              (this.gridRect =
                n.globals.dom.baseEl.querySelector(".apexcharts-grid")),
              (this.constraints = new we(
                0,
                0,
                n.globals.gridWidth,
                n.globals.gridHeight
              )),
              this.zoomRect.node.classList.add("apexcharts-zoom-rect"),
              this.selectionRect.node.classList.add(
                "apexcharts-selection-rect"
              ),
              n.globals.dom.Paper.add(this.zoomRect),
              n.globals.dom.Paper.add(this.selectionRect),
              n.config.chart.selection.type === "x"
                ? (this.slDraggableRect = this.selectionRect
                    .draggable({
                      minX: 0,
                      minY: 0,
                      maxX: n.globals.gridWidth,
                      maxY: n.globals.gridHeight,
                    })
                    .on(
                      "dragmove.namespace",
                      this.selectionDragging.bind(this, "dragging")
                    ))
                : n.config.chart.selection.type === "y"
                ? (this.slDraggableRect = this.selectionRect
                    .draggable({ minX: 0, maxX: n.globals.gridWidth })
                    .on(
                      "dragmove.namespace",
                      this.selectionDragging.bind(this, "dragging")
                    ))
                : (this.slDraggableRect = this.selectionRect
                    .draggable()
                    .on(
                      "dragmove.namespace",
                      this.selectionDragging.bind(this, "dragging")
                    )),
              this.preselectedSelection(),
              (this.hoverArea = n.globals.dom.baseEl.querySelector(
                "".concat(n.globals.chartClass, " .apexcharts-svg")
              )),
              this.hoverArea.classList.add("apexcharts-zoomable"),
              this.eventList.forEach(function (l) {
                i.hoverArea.addEventListener(l, o.svgMouseEvents.bind(o, s), {
                  capture: !1,
                  passive: !0,
                });
              }),
              n.config.chart.zoom.enabled &&
                n.config.chart.zoom.allowMouseWheelZoom &&
                this.hoverArea.addEventListener(
                  "wheel",
                  o.mouseWheelEvent.bind(o),
                  { capture: !1, passive: !1 }
                );
          },
        },
        {
          key: "destroy",
          value: function () {
            this.slDraggableRect &&
              (this.slDraggableRect.draggable(!1),
              this.slDraggableRect.off(),
              this.selectionRect.off()),
              (this.selectionRect = null),
              (this.zoomRect = null),
              (this.gridRect = null);
          },
        },
        {
          key: "svgMouseEvents",
          value: function (a, i) {
            var s = this.w,
              n = this.ctx.toolbar,
              o = s.globals.zoomEnabled
                ? s.config.chart.zoom.type
                : s.config.chart.selection.type,
              l = s.config.chart.toolbar.autoSelected;
            if (
              (i.shiftKey
                ? ((this.shiftWasPressed = !0),
                  n.enableZoomPanFromToolbar(l === "pan" ? "zoom" : "pan"))
                : this.shiftWasPressed &&
                  (n.enableZoomPanFromToolbar(l), (this.shiftWasPressed = !1)),
              i.target)
            ) {
              var c,
                h = i.target.classList;
              if (
                (i.target.parentNode &&
                  i.target.parentNode !== null &&
                  (c = i.target.parentNode.classList),
                !(
                  h.contains("apexcharts-legend-marker") ||
                  h.contains("apexcharts-legend-text") ||
                  (c && c.contains("apexcharts-toolbar"))
                ))
              ) {
                if (
                  ((this.clientX =
                    i.type === "touchmove" || i.type === "touchstart"
                      ? i.touches[0].clientX
                      : i.type === "touchend"
                      ? i.changedTouches[0].clientX
                      : i.clientX),
                  (this.clientY =
                    i.type === "touchmove" || i.type === "touchstart"
                      ? i.touches[0].clientY
                      : i.type === "touchend"
                      ? i.changedTouches[0].clientY
                      : i.clientY),
                  (i.type === "mousedown" && i.which === 1) ||
                    i.type === "touchstart")
                ) {
                  var d = this.gridRect.getBoundingClientRect();
                  (this.startX =
                    this.clientX - d.left - s.globals.barPadForNumericAxis),
                    (this.startY = this.clientY - d.top),
                    (this.dragged = !1),
                    (this.w.globals.mousedown = !0);
                }
                ((i.type === "mousemove" && i.which === 1) ||
                  i.type === "touchmove") &&
                  ((this.dragged = !0),
                  s.globals.panEnabled
                    ? ((s.globals.selection = null),
                      this.w.globals.mousedown &&
                        this.panDragging({
                          context: this,
                          zoomtype: o,
                          xyRatios: a,
                        }))
                    : ((this.w.globals.mousedown && s.globals.zoomEnabled) ||
                        (this.w.globals.mousedown &&
                          s.globals.selectionEnabled)) &&
                      (this.selection = this.selectionDrawing({
                        context: this,
                        zoomtype: o,
                      }))),
                  (i.type !== "mouseup" &&
                    i.type !== "touchend" &&
                    i.type !== "mouseleave") ||
                    this.handleMouseUp({ zoomtype: o }),
                  this.makeSelectionRectDraggable();
              }
            }
          },
        },
        {
          key: "handleMouseUp",
          value: function (a) {
            var i,
              s = a.zoomtype,
              n = a.isResized,
              o = this.w,
              l =
                (i = this.gridRect) === null || i === void 0
                  ? void 0
                  : i.getBoundingClientRect();
            l &&
              (this.w.globals.mousedown || n) &&
              ((this.endX =
                this.clientX - l.left - o.globals.barPadForNumericAxis),
              (this.endY = this.clientY - l.top),
              (this.dragX = Math.abs(this.endX - this.startX)),
              (this.dragY = Math.abs(this.endY - this.startY)),
              (o.globals.zoomEnabled || o.globals.selectionEnabled) &&
                this.selectionDrawn({ context: this, zoomtype: s }),
              o.globals.panEnabled &&
                o.config.xaxis.convertedCatToNumeric &&
                this.delayedPanScrolled()),
              o.globals.zoomEnabled &&
                this.hideSelectionRect(this.selectionRect),
              (this.dragged = !1),
              (this.w.globals.mousedown = !1);
          },
        },
        {
          key: "mouseWheelEvent",
          value: function (a) {
            var i = this,
              s = this.w;
            a.preventDefault();
            var n = Date.now();
            n - s.globals.lastWheelExecution > this.wheelDelay &&
              (this.executeMouseWheelZoom(a),
              (s.globals.lastWheelExecution = n)),
              this.debounceTimer && clearTimeout(this.debounceTimer),
              (this.debounceTimer = setTimeout(function () {
                n - s.globals.lastWheelExecution > i.wheelDelay &&
                  (i.executeMouseWheelZoom(a),
                  (s.globals.lastWheelExecution = n));
              }, this.debounceDelay));
          },
        },
        {
          key: "executeMouseWheelZoom",
          value: function (a) {
            var i,
              s = this.w;
            (this.minX = s.globals.isRangeBar
              ? s.globals.minY
              : s.globals.minX),
              (this.maxX = s.globals.isRangeBar
                ? s.globals.maxY
                : s.globals.maxX);
            var n =
              (i = this.gridRect) === null || i === void 0
                ? void 0
                : i.getBoundingClientRect();
            if (n) {
              var o,
                l,
                c,
                h = (a.clientX - n.left) / n.width,
                d = this.minX,
                u = this.maxX,
                f = u - d;
              if (a.deltaY < 0) {
                var g = d + h * f;
                (l = g - (o = 0.5 * f) / 2), (c = g + o / 2);
              } else (l = d - (o = 1.5 * f) / 2), (c = u + o / 2);
              if (!s.globals.isRangeBar) {
                (l = Math.max(l, s.globals.initialMinX)),
                  (c = Math.min(c, s.globals.initialMaxX));
                var p = 0.01 * (s.globals.initialMaxX - s.globals.initialMinX);
                if (c - l < p) {
                  var m = (l + c) / 2;
                  (l = m - p / 2), (c = m + p / 2);
                }
              }
              var x = this._getNewMinXMaxX(l, c);
              isNaN(x.minX) ||
                isNaN(x.maxX) ||
                this.zoomUpdateOptions(x.minX, x.maxX);
            }
          },
        },
        {
          key: "makeSelectionRectDraggable",
          value: function () {
            var a = this,
              i = this.w;
            if (this.selectionRect) {
              var s = this.selectionRect.node.getBoundingClientRect();
              s.width > 0 &&
                s.height > 0 &&
                (this.selectionRect.select(!1).resize(!1),
                this.selectionRect
                  .select({
                    createRot: function () {},
                    updateRot: function () {},
                    createHandle: function (n, o, l, c, h) {
                      return h === "l" || h === "r"
                        ? n.circle(8).css({
                            "stroke-width": 1,
                            stroke: "#333",
                            fill: "#fff",
                          })
                        : n.circle(0);
                    },
                    updateHandle: function (n, o) {
                      return n.center(o[0], o[1]);
                    },
                  })
                  .resize()
                  .on("resize", function () {
                    var n = i.globals.zoomEnabled
                      ? i.config.chart.zoom.type
                      : i.config.chart.selection.type;
                    a.handleMouseUp({ zoomtype: n, isResized: !0 });
                  }));
            }
          },
        },
        {
          key: "preselectedSelection",
          value: function () {
            var a = this.w,
              i = this.xyRatios;
            if (!a.globals.zoomEnabled) {
              if (
                a.globals.selection !== void 0 &&
                a.globals.selection !== null
              )
                this.drawSelectionRect(
                  Y(
                    Y({}, a.globals.selection),
                    {},
                    {
                      translateX: a.globals.translateX,
                      translateY: a.globals.translateY,
                    }
                  )
                );
              else if (
                a.config.chart.selection.xaxis.min !== void 0 &&
                a.config.chart.selection.xaxis.max !== void 0
              ) {
                var s =
                    (a.config.chart.selection.xaxis.min - a.globals.minX) /
                    i.xRatio,
                  n =
                    a.globals.gridWidth -
                    (a.globals.maxX - a.config.chart.selection.xaxis.max) /
                      i.xRatio -
                    s;
                a.globals.isRangeBar &&
                  ((s =
                    (a.config.chart.selection.xaxis.min -
                      a.globals.yAxisScale[0].niceMin) /
                    i.invertedYRatio),
                  (n =
                    (a.config.chart.selection.xaxis.max -
                      a.config.chart.selection.xaxis.min) /
                    i.invertedYRatio));
                var o = {
                  x: s,
                  y: 0,
                  width: n,
                  height: a.globals.gridHeight,
                  translateX: a.globals.translateX,
                  translateY: a.globals.translateY,
                  selectionEnabled: !0,
                };
                this.drawSelectionRect(o),
                  this.makeSelectionRectDraggable(),
                  typeof a.config.chart.events.selection == "function" &&
                    a.config.chart.events.selection(this.ctx, {
                      xaxis: {
                        min: a.config.chart.selection.xaxis.min,
                        max: a.config.chart.selection.xaxis.max,
                      },
                      yaxis: {},
                    });
              }
            }
          },
        },
        {
          key: "drawSelectionRect",
          value: function (a) {
            var i = a.x,
              s = a.y,
              n = a.width,
              o = a.height,
              l = a.translateX,
              c = l === void 0 ? 0 : l,
              h = a.translateY,
              d = h === void 0 ? 0 : h,
              u = this.w,
              f = this.zoomRect,
              g = this.selectionRect;
            if (this.dragged || u.globals.selection !== null) {
              var p = { transform: "translate(" + c + ", " + d + ")" };
              u.globals.zoomEnabled &&
                this.dragged &&
                (n < 0 && (n = 1),
                f.attr({
                  x: i,
                  y: s,
                  width: n,
                  height: o,
                  fill: u.config.chart.zoom.zoomedArea.fill.color,
                  "fill-opacity": u.config.chart.zoom.zoomedArea.fill.opacity,
                  stroke: u.config.chart.zoom.zoomedArea.stroke.color,
                  "stroke-width": u.config.chart.zoom.zoomedArea.stroke.width,
                  "stroke-opacity":
                    u.config.chart.zoom.zoomedArea.stroke.opacity,
                }),
                H.setAttrs(f.node, p)),
                u.globals.selectionEnabled &&
                  (g.attr({
                    x: i,
                    y: s,
                    width: n > 0 ? n : 0,
                    height: o > 0 ? o : 0,
                    fill: u.config.chart.selection.fill.color,
                    "fill-opacity": u.config.chart.selection.fill.opacity,
                    stroke: u.config.chart.selection.stroke.color,
                    "stroke-width": u.config.chart.selection.stroke.width,
                    "stroke-dasharray":
                      u.config.chart.selection.stroke.dashArray,
                    "stroke-opacity": u.config.chart.selection.stroke.opacity,
                  }),
                  H.setAttrs(g.node, p));
            }
          },
        },
        {
          key: "hideSelectionRect",
          value: function (a) {
            a && a.attr({ x: 0, y: 0, width: 0, height: 0 });
          },
        },
        {
          key: "selectionDrawing",
          value: function (a) {
            var i = a.context,
              s = a.zoomtype,
              n = this.w,
              o = i,
              l = this.gridRect.getBoundingClientRect(),
              c = o.startX - 1,
              h = o.startY,
              d = !1,
              u = !1,
              f = o.clientX - l.left - n.globals.barPadForNumericAxis,
              g = o.clientY - l.top,
              p = f - c,
              m = g - h,
              x = {
                translateX: n.globals.translateX,
                translateY: n.globals.translateY,
              };
            return (
              Math.abs(p + c) > n.globals.gridWidth
                ? (p = n.globals.gridWidth - c)
                : f < 0 && (p = c),
              c > f && ((d = !0), (p = Math.abs(p))),
              h > g && ((u = !0), (m = Math.abs(m))),
              (x = Y(
                Y(
                  {},
                  (x =
                    s === "x"
                      ? {
                          x: d ? c - p : c,
                          y: 0,
                          width: p,
                          height: n.globals.gridHeight,
                        }
                      : s === "y"
                      ? {
                          x: 0,
                          y: u ? h - m : h,
                          width: n.globals.gridWidth,
                          height: m,
                        }
                      : {
                          x: d ? c - p : c,
                          y: u ? h - m : h,
                          width: p,
                          height: m,
                        })
                ),
                {},
                {
                  translateX: n.globals.translateX,
                  translateY: n.globals.translateY,
                }
              )),
              o.drawSelectionRect(x),
              o.selectionDragging("resizing"),
              x
            );
          },
        },
        {
          key: "selectionDragging",
          value: function (a, i) {
            var s = this,
              n = this.w;
            if (i) {
              i.preventDefault();
              var o = i.detail,
                l = o.handler,
                c = o.box,
                h = c.x,
                d = c.y;
              h < this.constraints.x && (h = this.constraints.x),
                d < this.constraints.y && (d = this.constraints.y),
                c.x2 > this.constraints.x2 && (h = this.constraints.x2 - c.w),
                c.y2 > this.constraints.y2 && (d = this.constraints.y2 - c.h),
                l.move(h, d);
              var u = this.xyRatios,
                f = this.selectionRect,
                g = 0;
              a === "resizing" && (g = 30);
              var p = function (x) {
                  return parseFloat(f.node.getAttribute(x));
                },
                m = {
                  x: p("x"),
                  y: p("y"),
                  width: p("width"),
                  height: p("height"),
                };
              (n.globals.selection = m),
                typeof n.config.chart.events.selection == "function" &&
                  n.globals.selectionEnabled &&
                  (clearTimeout(this.w.globals.selectionResizeTimer),
                  (this.w.globals.selectionResizeTimer = window.setTimeout(
                    function () {
                      var x,
                        v,
                        b,
                        k,
                        y = s.gridRect.getBoundingClientRect(),
                        C = f.node.getBoundingClientRect();
                      n.globals.isRangeBar
                        ? ((x =
                            n.globals.yAxisScale[0].niceMin +
                            (C.left - y.left) * u.invertedYRatio),
                          (v =
                            n.globals.yAxisScale[0].niceMin +
                            (C.right - y.left) * u.invertedYRatio),
                          (b = 0),
                          (k = 1))
                        : ((x =
                            n.globals.xAxisScale.niceMin +
                            (C.left - y.left) * u.xRatio),
                          (v =
                            n.globals.xAxisScale.niceMin +
                            (C.right - y.left) * u.xRatio),
                          (b =
                            n.globals.yAxisScale[0].niceMin +
                            (y.bottom - C.bottom) * u.yRatio[0]),
                          (k =
                            n.globals.yAxisScale[0].niceMax -
                            (C.top - y.top) * u.yRatio[0]));
                      var A = {
                        xaxis: { min: x, max: v },
                        yaxis: { min: b, max: k },
                      };
                      n.config.chart.events.selection(s.ctx, A),
                        n.config.chart.brush.enabled &&
                          n.config.chart.events.brushScrolled !== void 0 &&
                          n.config.chart.events.brushScrolled(s.ctx, A);
                    },
                    g
                  )));
            }
          },
        },
        {
          key: "selectionDrawn",
          value: function (a) {
            var i,
              s,
              n = a.context,
              o = a.zoomtype,
              l = this.w,
              c = n,
              h = this.xyRatios,
              d = this.ctx.toolbar,
              u = l.globals.zoomEnabled
                ? c.zoomRect.node.getBoundingClientRect()
                : c.selectionRect.node.getBoundingClientRect(),
              f = c.gridRect.getBoundingClientRect(),
              g = u.left - f.left - l.globals.barPadForNumericAxis,
              p = u.right - f.left - l.globals.barPadForNumericAxis,
              m = u.top - f.top,
              x = u.bottom - f.top;
            l.globals.isRangeBar
              ? ((i = l.globals.yAxisScale[0].niceMin + g * h.invertedYRatio),
                (s = l.globals.yAxisScale[0].niceMin + p * h.invertedYRatio))
              : ((i = l.globals.xAxisScale.niceMin + g * h.xRatio),
                (s = l.globals.xAxisScale.niceMin + p * h.xRatio));
            var v = [],
              b = [];
            if (
              (l.config.yaxis.forEach(function (E, L) {
                var I = l.globals.seriesYAxisMap[L][0],
                  M = l.globals.yAxisScale[L].niceMax - h.yRatio[I] * m,
                  O = l.globals.yAxisScale[L].niceMax - h.yRatio[I] * x;
                v.push(M), b.push(O);
              }),
              c.dragged && (c.dragX > 10 || c.dragY > 10) && i !== s)
            ) {
              if (l.globals.zoomEnabled) {
                var k = _.clone(l.globals.initialConfig.yaxis),
                  y = _.clone(l.globals.initialConfig.xaxis);
                if (
                  ((l.globals.zoomed = !0),
                  l.config.xaxis.convertedCatToNumeric &&
                    ((i = Math.floor(i)),
                    (s = Math.floor(s)),
                    i < 1 && ((i = 1), (s = l.globals.dataPoints)),
                    s - i < 2 && (s = i + 1)),
                  (o !== "xy" && o !== "x") || (y = { min: i, max: s }),
                  (o !== "xy" && o !== "y") ||
                    k.forEach(function (E, L) {
                      (k[L].min = b[L]), (k[L].max = v[L]);
                    }),
                  d)
                ) {
                  var C = d.getBeforeZoomRange(y, k);
                  C &&
                    ((y = C.xaxis ? C.xaxis : y), (k = C.yaxis ? C.yaxis : k));
                }
                var A = { xaxis: y };
                l.config.chart.group || (A.yaxis = k),
                  c.ctx.updateHelpers._updateOptions(
                    A,
                    !1,
                    c.w.config.chart.animations.dynamicAnimation.enabled
                  ),
                  typeof l.config.chart.events.zoomed == "function" &&
                    d.zoomCallback(y, k);
              } else if (l.globals.selectionEnabled) {
                var S,
                  T = null;
                (S = { min: i, max: s }),
                  (o !== "xy" && o !== "y") ||
                    (T = _.clone(l.config.yaxis)).forEach(function (E, L) {
                      (T[L].min = b[L]), (T[L].max = v[L]);
                    }),
                  (l.globals.selection = c.selection),
                  typeof l.config.chart.events.selection == "function" &&
                    l.config.chart.events.selection(c.ctx, {
                      xaxis: S,
                      yaxis: T,
                    });
              }
            }
          },
        },
        {
          key: "panDragging",
          value: function (a) {
            var i = a.context,
              s = this.w,
              n = i;
            if (s.globals.lastClientPosition.x !== void 0) {
              var o = s.globals.lastClientPosition.x - n.clientX,
                l = s.globals.lastClientPosition.y - n.clientY;
              Math.abs(o) > Math.abs(l) && o > 0
                ? (this.moveDirection = "left")
                : Math.abs(o) > Math.abs(l) && o < 0
                ? (this.moveDirection = "right")
                : Math.abs(l) > Math.abs(o) && l > 0
                ? (this.moveDirection = "up")
                : Math.abs(l) > Math.abs(o) &&
                  l < 0 &&
                  (this.moveDirection = "down");
            }
            s.globals.lastClientPosition = { x: n.clientX, y: n.clientY };
            var c = s.globals.isRangeBar ? s.globals.minY : s.globals.minX,
              h = s.globals.isRangeBar ? s.globals.maxY : s.globals.maxX;
            s.config.xaxis.convertedCatToNumeric || n.panScrolled(c, h);
          },
        },
        {
          key: "delayedPanScrolled",
          value: function () {
            var a = this.w,
              i = a.globals.minX,
              s = a.globals.maxX,
              n = (a.globals.maxX - a.globals.minX) / 2;
            this.moveDirection === "left"
              ? ((i = a.globals.minX + n), (s = a.globals.maxX + n))
              : this.moveDirection === "right" &&
                ((i = a.globals.minX - n), (s = a.globals.maxX - n)),
              (i = Math.floor(i)),
              (s = Math.floor(s)),
              this.updateScrolledChart({ xaxis: { min: i, max: s } }, i, s);
          },
        },
        {
          key: "panScrolled",
          value: function (a, i) {
            var s = this.w,
              n = this.xyRatios,
              o = _.clone(s.globals.initialConfig.yaxis),
              l = n.xRatio,
              c = s.globals.minX,
              h = s.globals.maxX;
            s.globals.isRangeBar &&
              ((l = n.invertedYRatio),
              (c = s.globals.minY),
              (h = s.globals.maxY)),
              this.moveDirection === "left"
                ? ((a = c + (s.globals.gridWidth / 15) * l),
                  (i = h + (s.globals.gridWidth / 15) * l))
                : this.moveDirection === "right" &&
                  ((a = c - (s.globals.gridWidth / 15) * l),
                  (i = h - (s.globals.gridWidth / 15) * l)),
              s.globals.isRangeBar ||
                ((a < s.globals.initialMinX || i > s.globals.initialMaxX) &&
                  ((a = c), (i = h)));
            var d = { xaxis: { min: a, max: i } };
            s.config.chart.group || (d.yaxis = o),
              this.updateScrolledChart(d, a, i);
          },
        },
        {
          key: "updateScrolledChart",
          value: function (a, i, s) {
            var n = this.w;
            this.ctx.updateHelpers._updateOptions(a, !1, !1),
              typeof n.config.chart.events.scrolled == "function" &&
                n.config.chart.events.scrolled(this.ctx, {
                  xaxis: { min: i, max: s },
                });
          },
        },
      ]),
      t
    );
  })(),
  Gc = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.ttCtx = e), (this.ctx = e.ctx);
    }
    return (
      $(r, [
        {
          key: "getNearestValues",
          value: function (e) {
            var t = e.hoverArea,
              a = e.elGrid,
              i = e.clientX,
              s = e.clientY,
              n = this.w,
              o = a.getBoundingClientRect(),
              l = o.width,
              c = o.height,
              h = l / (n.globals.dataPoints - 1),
              d = c / n.globals.dataPoints,
              u = this.hasBars();
            (!n.globals.comboCharts && !u) ||
              n.config.xaxis.convertedCatToNumeric ||
              (h = l / n.globals.dataPoints);
            var f = i - o.left - n.globals.barPadForNumericAxis,
              g = s - o.top;
            f < 0 || g < 0 || f > l || g > c
              ? (t.classList.remove("hovering-zoom"),
                t.classList.remove("hovering-pan"))
              : n.globals.zoomEnabled
              ? (t.classList.remove("hovering-pan"),
                t.classList.add("hovering-zoom"))
              : n.globals.panEnabled &&
                (t.classList.remove("hovering-zoom"),
                t.classList.add("hovering-pan"));
            var p = Math.round(f / h),
              m = Math.floor(g / d);
            u &&
              !n.config.xaxis.convertedCatToNumeric &&
              ((p = Math.ceil(f / h)), (p -= 1));
            var x = null,
              v = null,
              b = n.globals.seriesXvalues.map(function (S) {
                return S.filter(function (T) {
                  return _.isNumber(T);
                });
              }),
              k = n.globals.seriesYvalues.map(function (S) {
                return S.filter(function (T) {
                  return _.isNumber(T);
                });
              });
            if (n.globals.isXNumeric) {
              var y = this.ttCtx.getElGrid().getBoundingClientRect(),
                C = f * (y.width / l),
                A = g * (y.height / c);
              (x = (v = this.closestInMultiArray(C, A, b, k)).index),
                (p = v.j),
                x !== null &&
                  n.globals.hasNullValues &&
                  ((b = n.globals.seriesXvalues[x]),
                  (p = (v = this.closestInArray(C, b)).j));
            }
            return (
              (n.globals.capturedSeriesIndex = x === null ? -1 : x),
              (!p || p < 1) && (p = 0),
              n.globals.isBarHorizontal
                ? (n.globals.capturedDataPointIndex = m)
                : (n.globals.capturedDataPointIndex = p),
              {
                capturedSeries: x,
                j: n.globals.isBarHorizontal ? m : p,
                hoverX: f,
                hoverY: g,
              }
            );
          },
        },
        {
          key: "getFirstActiveXArray",
          value: function (e) {
            for (
              var t = this.w,
                a = 0,
                i = e.map(function (n, o) {
                  return n.length > 0 ? o : -1;
                }),
                s = 0;
              s < i.length;
              s++
            )
              if (
                i[s] !== -1 &&
                t.globals.collapsedSeriesIndices.indexOf(s) === -1 &&
                t.globals.ancillaryCollapsedSeriesIndices.indexOf(s) === -1
              ) {
                a = i[s];
                break;
              }
            return a;
          },
        },
        {
          key: "closestInMultiArray",
          value: function (e, t, a, i) {
            for (
              var s, n = this.w, o = 1 / 0, l = null, c = null, h = 0;
              h < a.length;
              h++
            )
              if (
                ((s = h),
                n.globals.collapsedSeriesIndices.indexOf(s) === -1 &&
                  n.globals.ancillaryCollapsedSeriesIndices.indexOf(s) === -1)
              )
                for (
                  var d = a[h],
                    u = i[h],
                    f = Math.min(d.length, u.length),
                    g = 0;
                  g < f;
                  g++
                ) {
                  var p = e - d[g],
                    m = Math.sqrt(p * p);
                  if (!n.globals.allSeriesHasEqualX) {
                    var x = t - u[g];
                    m = Math.sqrt(p * p + x * x);
                  }
                  m < o && ((o = m), (l = h), (c = g));
                }
            return { index: l, j: c };
          },
        },
        {
          key: "closestInArray",
          value: function (e, t) {
            for (
              var a = t[0], i = null, s = Math.abs(e - a), n = 0;
              n < t.length;
              n++
            ) {
              var o = Math.abs(e - t[n]);
              o < s && ((s = o), (i = n));
            }
            return { j: i };
          },
        },
        {
          key: "isXoverlap",
          value: function (e) {
            var t = [],
              a = this.w.globals.seriesX.filter(function (s) {
                return s[0] !== void 0;
              });
            if (a.length > 0)
              for (var i = 0; i < a.length - 1; i++)
                a[i][e] !== void 0 &&
                  a[i + 1][e] !== void 0 &&
                  a[i][e] !== a[i + 1][e] &&
                  t.push("unEqual");
            return t.length === 0;
          },
        },
        {
          key: "isInitialSeriesSameLen",
          value: function () {
            for (
              var e = !0, t = this.w.globals.initialSeries, a = 0;
              a < t.length - 1;
              a++
            )
              if (t[a].data.length !== t[a + 1].data.length) {
                e = !1;
                break;
              }
            return e;
          },
        },
        {
          key: "getBarsHeight",
          value: function (e) {
            return Pe(e).reduce(function (t, a) {
              return t + a.getBBox().height;
            }, 0);
          },
        },
        {
          key: "getElMarkers",
          value: function (e) {
            return typeof e == "number"
              ? this.w.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-series[data\\:realIndex='".concat(
                    e,
                    "'] .apexcharts-series-markers-wrap > *"
                  )
                )
              : this.w.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-series-markers-wrap > *"
                );
          },
        },
        {
          key: "getAllMarkers",
          value: function () {
            var e = this,
              t =
                arguments.length > 0 && arguments[0] !== void 0 && arguments[0],
              a = this.w.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-series-markers-wrap"
              );
            (a = Pe(a)),
              t &&
                (a = a.filter(function (s) {
                  var n = Number(s.getAttribute("data:realIndex"));
                  return e.w.globals.collapsedSeriesIndices.indexOf(n) === -1;
                })),
              a.sort(function (s, n) {
                var o = Number(s.getAttribute("data:realIndex")),
                  l = Number(n.getAttribute("data:realIndex"));
                return l < o ? 1 : l > o ? -1 : 0;
              });
            var i = [];
            return (
              a.forEach(function (s) {
                i.push(s.querySelector(".apexcharts-marker"));
              }),
              i
            );
          },
        },
        {
          key: "hasMarkers",
          value: function (e) {
            return this.getElMarkers(e).length > 0;
          },
        },
        {
          key: "getPathFromPoint",
          value: function (e, t) {
            var a = Number(e.getAttribute("cx")),
              i = Number(e.getAttribute("cy")),
              s = e.getAttribute("shape");
            return new H(this.ctx).getMarkerPath(a, i, s, t);
          },
        },
        {
          key: "getElBars",
          value: function () {
            return this.w.globals.dom.baseEl.querySelectorAll(
              ".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series"
            );
          },
        },
        {
          key: "hasBars",
          value: function () {
            return this.getElBars().length > 0;
          },
        },
        {
          key: "getHoverMarkerSize",
          value: function (e) {
            var t = this.w,
              a = t.config.markers.hover.size;
            return (
              a === void 0 &&
                (a =
                  t.globals.markers.size[e] +
                  t.config.markers.hover.sizeOffset),
              a
            );
          },
        },
        {
          key: "toggleAllTooltipSeriesGroups",
          value: function (e) {
            var t = this.w,
              a = this.ttCtx;
            a.allTooltipSeriesGroups.length === 0 &&
              (a.allTooltipSeriesGroups = t.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-tooltip-series-group"
              ));
            for (var i = a.allTooltipSeriesGroups, s = 0; s < i.length; s++)
              e === "enable"
                ? (i[s].classList.add("apexcharts-active"),
                  (i[s].style.display = t.config.tooltip.items.display))
                : (i[s].classList.remove("apexcharts-active"),
                  (i[s].style.display = "none"));
          },
        },
      ]),
      r
    );
  })(),
  Mm = (function () {
    function r(e) {
      U(this, r),
        (this.w = e.w),
        (this.ctx = e.ctx),
        (this.ttCtx = e),
        (this.tooltipUtil = new Gc(e));
    }
    return (
      $(r, [
        {
          key: "drawSeriesTexts",
          value: function (e) {
            var t = e.shared,
              a = t === void 0 || t,
              i = e.ttItems,
              s = e.i,
              n = s === void 0 ? 0 : s,
              o = e.j,
              l = o === void 0 ? null : o,
              c = e.y1,
              h = e.y2,
              d = e.e,
              u = this.w;
            u.config.tooltip.custom !== void 0
              ? this.handleCustomTooltip({ i: n, j: l, y1: c, y2: h, w: u })
              : this.toggleActiveInactiveSeries(a, n);
            var f = this.getValuesToPrint({ i: n, j: l });
            this.printLabels({
              i: n,
              j: l,
              values: f,
              ttItems: i,
              shared: a,
              e: d,
            });
            var g = this.ttCtx.getElTooltip();
            (this.ttCtx.tooltipRect.ttWidth = g.getBoundingClientRect().width),
              (this.ttCtx.tooltipRect.ttHeight =
                g.getBoundingClientRect().height);
          },
        },
        {
          key: "printLabels",
          value: function (e) {
            var t,
              a = this,
              i = e.i,
              s = e.j,
              n = e.values,
              o = e.ttItems,
              l = e.shared,
              c = e.e,
              h = this.w,
              d = [],
              u = function (y) {
                return (
                  h.globals.seriesGoals[y] &&
                  h.globals.seriesGoals[y][s] &&
                  Array.isArray(h.globals.seriesGoals[y][s])
                );
              },
              f = n.xVal,
              g = n.zVal,
              p = n.xAxisTTVal,
              m = "",
              x = h.globals.colors[i];
            s !== null &&
              h.config.plotOptions.bar.distributed &&
              (x = h.globals.colors[s]);
            for (
              var v = function (y, C) {
                  var A = a.getFormatters(i);
                  (m = a.getSeriesName({
                    fn: A.yLbTitleFormatter,
                    index: i,
                    seriesIndex: i,
                    j: s,
                  })),
                    h.config.chart.type === "treemap" &&
                      (m = A.yLbTitleFormatter(
                        String(h.config.series[i].data[s].x),
                        {
                          series: h.globals.series,
                          seriesIndex: i,
                          dataPointIndex: s,
                          w: h,
                        }
                      ));
                  var S = h.config.tooltip.inverseOrder ? C : y;
                  if (h.globals.axisCharts) {
                    var T = function (I) {
                      var M, O, N, F;
                      return h.globals.isRangeData
                        ? A.yLbFormatter(
                            (M = h.globals.seriesRangeStart) === null ||
                              M === void 0 ||
                              (O = M[I]) === null ||
                              O === void 0
                              ? void 0
                              : O[s],
                            {
                              series: h.globals.seriesRangeStart,
                              seriesIndex: I,
                              dataPointIndex: s,
                              w: h,
                            }
                          ) +
                            " - " +
                            A.yLbFormatter(
                              (N = h.globals.seriesRangeEnd) === null ||
                                N === void 0 ||
                                (F = N[I]) === null ||
                                F === void 0
                                ? void 0
                                : F[s],
                              {
                                series: h.globals.seriesRangeEnd,
                                seriesIndex: I,
                                dataPointIndex: s,
                                w: h,
                              }
                            )
                        : A.yLbFormatter(h.globals.series[I][s], {
                            series: h.globals.series,
                            seriesIndex: I,
                            dataPointIndex: s,
                            w: h,
                          });
                    };
                    if (l)
                      (A = a.getFormatters(S)),
                        (m = a.getSeriesName({
                          fn: A.yLbTitleFormatter,
                          index: S,
                          seriesIndex: i,
                          j: s,
                        })),
                        (x = h.globals.colors[S]),
                        (t = T(S)),
                        u(S) &&
                          (d = h.globals.seriesGoals[S][s].map(function (I) {
                            return {
                              attrs: I,
                              val: A.yLbFormatter(I.value, {
                                seriesIndex: S,
                                dataPointIndex: s,
                                w: h,
                              }),
                            };
                          }));
                    else {
                      var E,
                        L =
                          c == null || (E = c.target) === null || E === void 0
                            ? void 0
                            : E.getAttribute("fill");
                      L &&
                        (L.indexOf("url") !== -1
                          ? L.indexOf("Pattern") !== -1 &&
                            (x = h.globals.dom.baseEl
                              .querySelector(L.substr(4).slice(0, -1))
                              .childNodes[0].getAttribute("stroke"))
                          : (x = L)),
                        (t = T(i)),
                        u(i) &&
                          Array.isArray(h.globals.seriesGoals[i][s]) &&
                          (d = h.globals.seriesGoals[i][s].map(function (I) {
                            return {
                              attrs: I,
                              val: A.yLbFormatter(I.value, {
                                seriesIndex: i,
                                dataPointIndex: s,
                                w: h,
                              }),
                            };
                          }));
                    }
                  }
                  s === null &&
                    (t = A.yLbFormatter(
                      h.globals.series[i],
                      Y(Y({}, h), {}, { seriesIndex: i, dataPointIndex: i })
                    )),
                    a.DOMHandling({
                      i,
                      t: S,
                      j: s,
                      ttItems: o,
                      values: {
                        val: t,
                        goalVals: d,
                        xVal: f,
                        xAxisTTVal: p,
                        zVal: g,
                      },
                      seriesName: m,
                      shared: l,
                      pColor: x,
                    });
                },
                b = 0,
                k = h.globals.series.length - 1;
              b < h.globals.series.length;
              b++, k--
            )
              v(b, k);
          },
        },
        {
          key: "getFormatters",
          value: function (e) {
            var t,
              a = this.w,
              i = a.globals.yLabelFormatters[e];
            return (
              a.globals.ttVal !== void 0
                ? Array.isArray(a.globals.ttVal)
                  ? ((i = a.globals.ttVal[e] && a.globals.ttVal[e].formatter),
                    (t =
                      a.globals.ttVal[e] &&
                      a.globals.ttVal[e].title &&
                      a.globals.ttVal[e].title.formatter))
                  : ((i = a.globals.ttVal.formatter),
                    typeof a.globals.ttVal.title.formatter == "function" &&
                      (t = a.globals.ttVal.title.formatter))
                : (t = a.config.tooltip.y.title.formatter),
              typeof i != "function" &&
                (i = a.globals.yLabelFormatters[0]
                  ? a.globals.yLabelFormatters[0]
                  : function (s) {
                      return s;
                    }),
              typeof t != "function" &&
                (t = function (s) {
                  return s ? s + ": " : "";
                }),
              { yLbFormatter: i, yLbTitleFormatter: t }
            );
          },
        },
        {
          key: "getSeriesName",
          value: function (e) {
            var t = e.fn,
              a = e.index,
              i = e.seriesIndex,
              s = e.j,
              n = this.w;
            return t(String(n.globals.seriesNames[a]), {
              series: n.globals.series,
              seriesIndex: i,
              dataPointIndex: s,
              w: n,
            });
          },
        },
        {
          key: "DOMHandling",
          value: function (e) {
            e.i;
            var t = e.t,
              a = e.j,
              i = e.ttItems,
              s = e.values,
              n = e.seriesName,
              o = e.shared,
              l = e.pColor,
              c = this.w,
              h = this.ttCtx,
              d = s.val,
              u = s.goalVals,
              f = s.xVal,
              g = s.xAxisTTVal,
              p = s.zVal,
              m = null;
            (m = i[t].children),
              c.config.tooltip.fillSeriesColor &&
                ((i[t].style.color = l), (m[0].style.display = "none")),
              h.showTooltipTitle &&
                (h.tooltipTitle === null &&
                  (h.tooltipTitle = c.globals.dom.baseEl.querySelector(
                    ".apexcharts-tooltip-title"
                  )),
                (h.tooltipTitle.innerHTML = f)),
              h.isXAxisTooltipEnabled &&
                (h.xaxisTooltipText.innerHTML = g !== "" ? g : f);
            var x = i[t].querySelector(".apexcharts-tooltip-text-y-label");
            x && (x.innerHTML = n || "");
            var v = i[t].querySelector(".apexcharts-tooltip-text-y-value");
            v && (v.innerHTML = d !== void 0 ? d : ""),
              m[0] &&
                m[0].classList.contains("apexcharts-tooltip-marker") &&
                (c.config.tooltip.marker.fillColors &&
                  Array.isArray(c.config.tooltip.marker.fillColors) &&
                  (l = c.config.tooltip.marker.fillColors[t]),
                (m[0].style.color = l)),
              c.config.tooltip.marker.show || (m[0].style.display = "none");
            var b = i[t].querySelector(".apexcharts-tooltip-text-goals-label"),
              k = i[t].querySelector(".apexcharts-tooltip-text-goals-value");
            if (u.length && c.globals.seriesGoals[t]) {
              var y = function () {
                var S = "<div>",
                  T = "<div>";
                u.forEach(function (E, L) {
                  (S +=
                    ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '
                      .concat(
                        E.attrs.strokeColor,
                        '; height: 3px; border-radius: 0; top: 5px;"></span> '
                      )
                      .concat(E.attrs.name, "</div>")),
                    (T += "<div>".concat(E.val, "</div>"));
                }),
                  (b.innerHTML = S + "</div>"),
                  (k.innerHTML = T + "</div>");
              };
              o
                ? c.globals.seriesGoals[t][a] &&
                  Array.isArray(c.globals.seriesGoals[t][a])
                  ? y()
                  : ((b.innerHTML = ""), (k.innerHTML = ""))
                : y();
            } else (b.innerHTML = ""), (k.innerHTML = "");
            if (
              (p !== null &&
                ((i[t].querySelector(
                  ".apexcharts-tooltip-text-z-label"
                ).innerHTML = c.config.tooltip.z.title),
                (i[t].querySelector(
                  ".apexcharts-tooltip-text-z-value"
                ).innerHTML = p !== void 0 ? p : "")),
              o && m[0])
            ) {
              if (c.config.tooltip.hideEmptySeries) {
                var C = i[t].querySelector(".apexcharts-tooltip-marker"),
                  A = i[t].querySelector(".apexcharts-tooltip-text");
                parseFloat(d) == 0
                  ? ((C.style.display = "none"), (A.style.display = "none"))
                  : ((C.style.display = "block"), (A.style.display = "block"));
              }
              d == null ||
              c.globals.ancillaryCollapsedSeriesIndices.indexOf(t) > -1 ||
              c.globals.collapsedSeriesIndices.indexOf(t) > -1 ||
              (Array.isArray(h.tConfig.enabledOnSeries) &&
                h.tConfig.enabledOnSeries.indexOf(t) === -1)
                ? (m[0].parentNode.style.display = "none")
                : (m[0].parentNode.style.display =
                    c.config.tooltip.items.display);
            } else
              Array.isArray(h.tConfig.enabledOnSeries) &&
                h.tConfig.enabledOnSeries.indexOf(t) === -1 &&
                (m[0].parentNode.style.display = "none");
          },
        },
        {
          key: "toggleActiveInactiveSeries",
          value: function (e, t) {
            var a = this.w;
            if (e) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
            else {
              this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
              var i = a.globals.dom.baseEl.querySelector(
                ".apexcharts-tooltip-series-group-".concat(t)
              );
              i &&
                (i.classList.add("apexcharts-active"),
                (i.style.display = a.config.tooltip.items.display));
            }
          },
        },
        {
          key: "getValuesToPrint",
          value: function (e) {
            var t = e.i,
              a = e.j,
              i = this.w,
              s = this.ctx.series.filteredSeriesX(),
              n = "",
              o = "",
              l = null,
              c = null,
              h = {
                series: i.globals.series,
                seriesIndex: t,
                dataPointIndex: a,
                w: i,
              },
              d = i.globals.ttZFormatter;
            a === null
              ? (c = i.globals.series[t])
              : i.globals.isXNumeric && i.config.chart.type !== "treemap"
              ? ((n = s[t][a]),
                s[t].length === 0 &&
                  (n = s[this.tooltipUtil.getFirstActiveXArray(s)][a]))
              : (n = new Us(this.ctx).isFormatXY()
                  ? i.config.series[t].data[a] !== void 0
                    ? i.config.series[t].data[a].x
                    : ""
                  : i.globals.labels[a] !== void 0
                  ? i.globals.labels[a]
                  : "");
            var u = n;
            return (
              i.globals.isXNumeric && i.config.xaxis.type === "datetime"
                ? (n = new Ka(this.ctx).xLabelFormat(
                    i.globals.ttKeyFormatter,
                    u,
                    u,
                    {
                      i: void 0,
                      dateFormatter: new Me(this.ctx).formatDate,
                      w: this.w,
                    }
                  ))
                : (n = i.globals.isBarHorizontal
                    ? i.globals.yLabelFormatters[0](u, h)
                    : i.globals.xLabelFormatter(u, h)),
              i.config.tooltip.x.formatter !== void 0 &&
                (n = i.globals.ttKeyFormatter(u, h)),
              i.globals.seriesZ.length > 0 &&
                i.globals.seriesZ[t].length > 0 &&
                (l = d(i.globals.seriesZ[t][a], i)),
              (o =
                typeof i.config.xaxis.tooltip.formatter == "function"
                  ? i.globals.xaxisTooltipFormatter(u, h)
                  : n),
              {
                val: Array.isArray(c) ? c.join(" ") : c,
                xVal: Array.isArray(n) ? n.join(" ") : n,
                xAxisTTVal: Array.isArray(o) ? o.join(" ") : o,
                zVal: l,
              }
            );
          },
        },
        {
          key: "handleCustomTooltip",
          value: function (e) {
            var t = e.i,
              a = e.j,
              i = e.y1,
              s = e.y2,
              n = e.w,
              o = this.ttCtx.getElTooltip(),
              l = n.config.tooltip.custom;
            Array.isArray(l) && l[t] && (l = l[t]);
            var c = l({
              ctx: this.ctx,
              series: n.globals.series,
              seriesIndex: t,
              dataPointIndex: a,
              y1: i,
              y2: s,
              w: n,
            });
            typeof c == "string"
              ? (o.innerHTML = c)
              : (c instanceof Element || typeof c.nodeName == "string") &&
                ((o.innerHTML = ""), o.appendChild(c.cloneNode(!0)));
          },
        },
      ]),
      r
    );
  })(),
  Uc = (function () {
    function r(e) {
      U(this, r), (this.ttCtx = e), (this.ctx = e.ctx), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "moveXCrosshairs",
          value: function (e) {
            var t =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : null,
              a = this.ttCtx,
              i = this.w,
              s = a.getElXCrosshairs(),
              n = e - a.xcrosshairsWidth / 2,
              o = i.globals.labels.slice().length;
            if (
              (t !== null && (n = (i.globals.gridWidth / o) * t),
              s === null ||
                i.globals.isBarHorizontal ||
                (s.setAttribute("x", n),
                s.setAttribute("x1", n),
                s.setAttribute("x2", n),
                s.setAttribute("y2", i.globals.gridHeight),
                s.classList.add("apexcharts-active")),
              n < 0 && (n = 0),
              n > i.globals.gridWidth && (n = i.globals.gridWidth),
              a.isXAxisTooltipEnabled)
            ) {
              var l = n;
              (i.config.xaxis.crosshairs.width !== "tickWidth" &&
                i.config.xaxis.crosshairs.width !== "barWidth") ||
                (l = n + a.xcrosshairsWidth / 2),
                this.moveXAxisTooltip(l);
            }
          },
        },
        {
          key: "moveYCrosshairs",
          value: function (e) {
            var t = this.ttCtx;
            t.ycrosshairs !== null &&
              H.setAttrs(t.ycrosshairs, { y1: e, y2: e }),
              t.ycrosshairsHidden !== null &&
                H.setAttrs(t.ycrosshairsHidden, { y1: e, y2: e });
          },
        },
        {
          key: "moveXAxisTooltip",
          value: function (e) {
            var t = this.w,
              a = this.ttCtx;
            if (a.xaxisTooltip !== null && a.xcrosshairsWidth !== 0) {
              a.xaxisTooltip.classList.add("apexcharts-active");
              var i =
                a.xaxisOffY +
                t.config.xaxis.tooltip.offsetY +
                t.globals.translateY +
                1 +
                t.config.xaxis.offsetY;
              if (
                ((e -= a.xaxisTooltip.getBoundingClientRect().width / 2),
                !isNaN(e))
              ) {
                e += t.globals.translateX;
                var s;
                (s = new H(this.ctx).getTextRects(
                  a.xaxisTooltipText.innerHTML
                )),
                  (a.xaxisTooltipText.style.minWidth = s.width + "px"),
                  (a.xaxisTooltip.style.left = e + "px"),
                  (a.xaxisTooltip.style.top = i + "px");
              }
            }
          },
        },
        {
          key: "moveYAxisTooltip",
          value: function (e) {
            var t = this.w,
              a = this.ttCtx;
            a.yaxisTTEls === null &&
              (a.yaxisTTEls = t.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-yaxistooltip"
              ));
            var i = parseInt(a.ycrosshairsHidden.getAttribute("y1"), 10),
              s = t.globals.translateY + i,
              n = a.yaxisTTEls[e].getBoundingClientRect().height,
              o = t.globals.translateYAxisX[e] - 2;
            t.config.yaxis[e].opposite && (o -= 26),
              (s -= n / 2),
              t.globals.ignoreYAxisIndexes.indexOf(e) === -1
                ? (a.yaxisTTEls[e].classList.add("apexcharts-active"),
                  (a.yaxisTTEls[e].style.top = s + "px"),
                  (a.yaxisTTEls[e].style.left =
                    o + t.config.yaxis[e].tooltip.offsetX + "px"))
                : a.yaxisTTEls[e].classList.remove("apexcharts-active");
          },
        },
        {
          key: "moveTooltip",
          value: function (e, t) {
            var a =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : null,
              i = this.w,
              s = this.ttCtx,
              n = s.getElTooltip(),
              o = s.tooltipRect,
              l = a !== null ? parseFloat(a) : 1,
              c = parseFloat(e) + l + 5,
              h = parseFloat(t) + l / 2;
            if (
              (c > i.globals.gridWidth / 2 && (c = c - o.ttWidth - l - 10),
              c > i.globals.gridWidth - o.ttWidth - 10 &&
                (c = i.globals.gridWidth - o.ttWidth),
              c < -20 && (c = -20),
              i.config.tooltip.followCursor)
            ) {
              var d = s.getElGrid().getBoundingClientRect();
              (c = s.e.clientX - d.left) > i.globals.gridWidth / 2 &&
                (c -= s.tooltipRect.ttWidth),
                (h = s.e.clientY + i.globals.translateY - d.top) >
                  i.globals.gridHeight / 2 && (h -= s.tooltipRect.ttHeight);
            } else
              i.globals.isBarHorizontal ||
                (o.ttHeight / 2 + h > i.globals.gridHeight &&
                  (h =
                    i.globals.gridHeight - o.ttHeight + i.globals.translateY));
            isNaN(c) ||
              ((c += i.globals.translateX),
              (n.style.left = c + "px"),
              (n.style.top = h + "px"));
          },
        },
        {
          key: "moveMarkers",
          value: function (e, t) {
            var a = this.w,
              i = this.ttCtx;
            if (a.globals.markers.size[e] > 0)
              for (
                var s = a.globals.dom.baseEl.querySelectorAll(
                    " .apexcharts-series[data\\:realIndex='".concat(
                      e,
                      "'] .apexcharts-marker"
                    )
                  ),
                  n = 0;
                n < s.length;
                n++
              )
                parseInt(s[n].getAttribute("rel"), 10) === t &&
                  (i.marker.resetPointsSize(),
                  i.marker.enlargeCurrentPoint(t, s[n]));
            else i.marker.resetPointsSize(), this.moveDynamicPointOnHover(t, e);
          },
        },
        {
          key: "moveDynamicPointOnHover",
          value: function (e, t) {
            var a,
              i,
              s,
              n,
              o = this.w,
              l = this.ttCtx,
              c = new H(this.ctx),
              h = o.globals.pointsArray,
              d = l.tooltipUtil.getHoverMarkerSize(t),
              u = o.config.series[t].type;
            if (
              !u ||
              (u !== "column" && u !== "candlestick" && u !== "boxPlot")
            ) {
              (s = (a = h[t][e]) === null || a === void 0 ? void 0 : a[0]),
                (n =
                  ((i = h[t][e]) === null || i === void 0 ? void 0 : i[1]) ||
                  0);
              var f = o.globals.dom.baseEl.querySelector(
                ".apexcharts-series[data\\:realIndex='".concat(
                  t,
                  "'] .apexcharts-series-markers path"
                )
              );
              if (f && n < o.globals.gridHeight && n > 0) {
                var g = f.getAttribute("shape"),
                  p = c.getMarkerPath(s, n, g, 1.5 * d);
                f.setAttribute("d", p);
              }
              this.moveXCrosshairs(s),
                l.fixedTooltip || this.moveTooltip(s, n, d);
            }
          },
        },
        {
          key: "moveDynamicPointsOnHover",
          value: function (e) {
            var t,
              a = this.ttCtx,
              i = a.w,
              s = 0,
              n = 0,
              o = i.globals.pointsArray,
              l = new Ve(this.ctx),
              c = new H(this.ctx);
            t = l.getActiveConfigSeriesIndex("asc", [
              "line",
              "area",
              "scatter",
              "bubble",
            ]);
            var h = a.tooltipUtil.getHoverMarkerSize(t);
            if ((o[t] && ((s = o[t][e][0]), (n = o[t][e][1])), !isNaN(s))) {
              var d = a.tooltipUtil.getAllMarkers();
              if (d.length)
                for (var u = 0; u < i.globals.series.length; u++) {
                  var f = o[u];
                  if (
                    (i.globals.comboCharts &&
                      f === void 0 &&
                      d.splice(u, 0, null),
                    f && f.length)
                  ) {
                    var g = o[u][e][1],
                      p = void 0;
                    d[u].setAttribute("cx", s);
                    var m = d[u].getAttribute("shape");
                    if (
                      i.config.chart.type === "rangeArea" &&
                      !i.globals.comboCharts
                    ) {
                      var x = e + i.globals.series[u].length;
                      (p = o[u][x][1]), (g -= Math.abs(g - p) / 2);
                    }
                    if (
                      g !== null &&
                      !isNaN(g) &&
                      g < i.globals.gridHeight + h &&
                      g + h > 0
                    ) {
                      var v = c.getMarkerPath(s, g, m, h);
                      d[u].setAttribute("d", v);
                    } else d[u].setAttribute("d", "");
                  }
                }
              this.moveXCrosshairs(s),
                a.fixedTooltip ||
                  this.moveTooltip(s, n || i.globals.gridHeight, h);
            }
          },
        },
        {
          key: "moveStickyTooltipOverBars",
          value: function (e, t) {
            var a = this.w,
              i = this.ttCtx,
              s = a.globals.columnSeries
                ? a.globals.columnSeries.length
                : a.globals.series.length;
            a.config.chart.stacked && (s = a.globals.barGroups.length);
            var n =
              s >= 2 && s % 2 == 0 ? Math.floor(s / 2) : Math.floor(s / 2) + 1;
            a.globals.isBarHorizontal &&
              (n = new Ve(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
            var o = a.globals.dom.baseEl.querySelector(
              ".apexcharts-bar-series .apexcharts-series[rel='"
                .concat(n, "'] path[j='")
                .concat(
                  e,
                  "'], .apexcharts-candlestick-series .apexcharts-series[rel='"
                )
                .concat(n, "'] path[j='")
                .concat(
                  e,
                  "'], .apexcharts-boxPlot-series .apexcharts-series[rel='"
                )
                .concat(n, "'] path[j='")
                .concat(
                  e,
                  "'], .apexcharts-rangebar-series .apexcharts-series[rel='"
                )
                .concat(n, "'] path[j='")
                .concat(e, "']")
            );
            o ||
              typeof t != "number" ||
              (o = a.globals.dom.baseEl.querySelector(
                ".apexcharts-bar-series .apexcharts-series[data\\:realIndex='"
                  .concat(t, "'] path[j='")
                  .concat(
                    e,
                    `'],
        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='`
                  )
                  .concat(t, "'] path[j='")
                  .concat(
                    e,
                    `'],
        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='`
                  )
                  .concat(t, "'] path[j='")
                  .concat(
                    e,
                    `'],
        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='`
                  )
                  .concat(t, "'] path[j='")
                  .concat(e, "']")
              ));
            var l = o ? parseFloat(o.getAttribute("cx")) : 0,
              c = o ? parseFloat(o.getAttribute("cy")) : 0,
              h = o ? parseFloat(o.getAttribute("barWidth")) : 0,
              d = i.getElGrid().getBoundingClientRect(),
              u =
                o &&
                (o.classList.contains("apexcharts-candlestick-area") ||
                  o.classList.contains("apexcharts-boxPlot-area"));
            a.globals.isXNumeric
              ? (o && !u && (l -= s % 2 != 0 ? h / 2 : 0),
                o && u && (l -= h / 2))
              : a.globals.isBarHorizontal ||
                ((l =
                  i.xAxisTicksPositions[e - 1] + i.dataPointsDividedWidth / 2),
                isNaN(l) &&
                  (l =
                    i.xAxisTicksPositions[e] - i.dataPointsDividedWidth / 2)),
              a.globals.isBarHorizontal
                ? (c -= i.tooltipRect.ttHeight)
                : a.config.tooltip.followCursor
                ? (c = i.e.clientY - d.top - i.tooltipRect.ttHeight / 2)
                : c + i.tooltipRect.ttHeight + 15 > a.globals.gridHeight &&
                  (c = a.globals.gridHeight),
              a.globals.isBarHorizontal || this.moveXCrosshairs(l),
              i.fixedTooltip || this.moveTooltip(l, c || a.globals.gridHeight);
          },
        },
      ]),
      r
    );
  })(),
  Em = (function () {
    function r(e) {
      U(this, r),
        (this.w = e.w),
        (this.ttCtx = e),
        (this.ctx = e.ctx),
        (this.tooltipPosition = new Uc(e));
    }
    return (
      $(r, [
        {
          key: "drawDynamicPoints",
          value: function () {
            var e = this.w,
              t = new H(this.ctx),
              a = new da(this.ctx),
              i = e.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
            (i = Pe(i)),
              e.config.chart.stacked &&
                i.sort(function (d, u) {
                  return (
                    parseFloat(d.getAttribute("data:realIndex")) -
                    parseFloat(u.getAttribute("data:realIndex"))
                  );
                });
            for (var s = 0; s < i.length; s++) {
              var n = i[s].querySelector(".apexcharts-series-markers-wrap");
              if (n !== null) {
                var o = void 0,
                  l = "apexcharts-marker w".concat(
                    (Math.random() + 1).toString(36).substring(4)
                  );
                (e.config.chart.type !== "line" &&
                  e.config.chart.type !== "area") ||
                  e.globals.comboCharts ||
                  e.config.tooltip.intersect ||
                  (l += " no-pointer-events");
                var c = a.getMarkerConfig({
                  cssClass: l,
                  seriesIndex: Number(n.getAttribute("data:realIndex")),
                });
                (o = t.drawMarker(0, 0, c)).node.setAttribute(
                  "default-marker-size",
                  0
                );
                var h = document.createElementNS(e.globals.SVGNS, "g");
                h.classList.add("apexcharts-series-markers"),
                  h.appendChild(o.node),
                  n.appendChild(h);
              }
            }
          },
        },
        {
          key: "enlargeCurrentPoint",
          value: function (e, t) {
            var a =
                arguments.length > 2 && arguments[2] !== void 0
                  ? arguments[2]
                  : null,
              i =
                arguments.length > 3 && arguments[3] !== void 0
                  ? arguments[3]
                  : null,
              s = this.w;
            s.config.chart.type !== "bubble" && this.newPointSize(e, t);
            var n = t.getAttribute("cx"),
              o = t.getAttribute("cy");
            if (
              (a !== null && i !== null && ((n = a), (o = i)),
              this.tooltipPosition.moveXCrosshairs(n),
              !this.fixedTooltip)
            ) {
              if (s.config.chart.type === "radar") {
                var l = this.ttCtx.getElGrid().getBoundingClientRect();
                n = this.ttCtx.e.clientX - l.left;
              }
              this.tooltipPosition.moveTooltip(
                n,
                o,
                s.config.markers.hover.size
              );
            }
          },
        },
        {
          key: "enlargePoints",
          value: function (e) {
            for (
              var t = this.w,
                a = this,
                i = this.ttCtx,
                s = e,
                n = t.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                ),
                o = t.config.markers.hover.size,
                l = 0;
              l < n.length;
              l++
            ) {
              var c = n[l].getAttribute("rel"),
                h = n[l].getAttribute("index");
              if (
                (o === void 0 &&
                  (o =
                    t.globals.markers.size[h] +
                    t.config.markers.hover.sizeOffset),
                s === parseInt(c, 10))
              ) {
                a.newPointSize(s, n[l]);
                var d = n[l].getAttribute("cx"),
                  u = n[l].getAttribute("cy");
                a.tooltipPosition.moveXCrosshairs(d),
                  i.fixedTooltip || a.tooltipPosition.moveTooltip(d, u, o);
              } else a.oldPointSize(n[l]);
            }
          },
        },
        {
          key: "newPointSize",
          value: function (e, t) {
            var a = this.w,
              i = a.config.markers.hover.size,
              s = e === 0 ? t.parentNode.firstChild : t.parentNode.lastChild;
            if (s.getAttribute("default-marker-size") !== "0") {
              var n = parseInt(s.getAttribute("index"), 10);
              i === void 0 &&
                (i =
                  a.globals.markers.size[n] +
                  a.config.markers.hover.sizeOffset),
                i < 0 && (i = 0);
              var o = this.ttCtx.tooltipUtil.getPathFromPoint(t, i);
              t.setAttribute("d", o);
            }
          },
        },
        {
          key: "oldPointSize",
          value: function (e) {
            var t = parseFloat(e.getAttribute("default-marker-size")),
              a = this.ttCtx.tooltipUtil.getPathFromPoint(e, t);
            e.setAttribute("d", a);
          },
        },
        {
          key: "resetPointsSize",
          value: function () {
            for (
              var e = this.w.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                ),
                t = 0;
              t < e.length;
              t++
            ) {
              var a = parseFloat(e[t].getAttribute("default-marker-size"));
              if (_.isNumber(a) && a > 0) {
                var i = this.ttCtx.tooltipUtil.getPathFromPoint(e[t], a);
                e[t].setAttribute("d", i);
              } else e[t].setAttribute("d", "M0,0");
            }
          },
        },
      ]),
      r
    );
  })(),
  Im = (function () {
    function r(e) {
      U(this, r), (this.w = e.w);
      var t = this.w;
      (this.ttCtx = e),
        (this.isVerticalGroupedRangeBar =
          !t.globals.isBarHorizontal &&
          t.config.chart.type === "rangeBar" &&
          t.config.plotOptions.bar.rangeBarGroupRows);
    }
    return (
      $(r, [
        {
          key: "getAttr",
          value: function (e, t) {
            return parseFloat(e.target.getAttribute(t));
          },
        },
        {
          key: "handleHeatTreeTooltip",
          value: function (e) {
            var t = e.e,
              a = e.opt,
              i = e.x,
              s = e.y,
              n = e.type,
              o = this.ttCtx,
              l = this.w;
            if (t.target.classList.contains("apexcharts-".concat(n, "-rect"))) {
              var c = this.getAttr(t, "i"),
                h = this.getAttr(t, "j"),
                d = this.getAttr(t, "cx"),
                u = this.getAttr(t, "cy"),
                f = this.getAttr(t, "width"),
                g = this.getAttr(t, "height");
              if (
                (o.tooltipLabels.drawSeriesTexts({
                  ttItems: a.ttItems,
                  i: c,
                  j: h,
                  shared: !1,
                  e: t,
                }),
                (l.globals.capturedSeriesIndex = c),
                (l.globals.capturedDataPointIndex = h),
                (i = d + o.tooltipRect.ttWidth / 2 + f),
                (s = u + o.tooltipRect.ttHeight / 2 - g / 2),
                o.tooltipPosition.moveXCrosshairs(d + f / 2),
                i > l.globals.gridWidth / 2 &&
                  (i = d - o.tooltipRect.ttWidth / 2 + f),
                o.w.config.tooltip.followCursor)
              ) {
                var p = l.globals.dom.elWrap.getBoundingClientRect();
                (i =
                  l.globals.clientX -
                  p.left -
                  (i > l.globals.gridWidth / 2 ? o.tooltipRect.ttWidth : 0)),
                  (s =
                    l.globals.clientY -
                    p.top -
                    (s > l.globals.gridHeight / 2
                      ? o.tooltipRect.ttHeight
                      : 0));
              }
            }
            return { x: i, y: s };
          },
        },
        {
          key: "handleMarkerTooltip",
          value: function (e) {
            var t,
              a,
              i = e.e,
              s = e.opt,
              n = e.x,
              o = e.y,
              l = this.w,
              c = this.ttCtx;
            if (i.target.classList.contains("apexcharts-marker")) {
              var h = parseInt(s.paths.getAttribute("cx"), 10),
                d = parseInt(s.paths.getAttribute("cy"), 10),
                u = parseFloat(s.paths.getAttribute("val"));
              if (
                ((a = parseInt(s.paths.getAttribute("rel"), 10)),
                (t =
                  parseInt(
                    s.paths.parentNode.parentNode.parentNode.getAttribute(
                      "rel"
                    ),
                    10
                  ) - 1),
                c.intersect)
              ) {
                var f = _.findAncestor(s.paths, "apexcharts-series");
                f && (t = parseInt(f.getAttribute("data:realIndex"), 10));
              }
              if (
                (c.tooltipLabels.drawSeriesTexts({
                  ttItems: s.ttItems,
                  i: t,
                  j: a,
                  shared: !c.showOnIntersect && l.config.tooltip.shared,
                  e: i,
                }),
                i.type === "mouseup" && c.markerClick(i, t, a),
                (l.globals.capturedSeriesIndex = t),
                (l.globals.capturedDataPointIndex = a),
                (n = h),
                (o = d + l.globals.translateY - 1.4 * c.tooltipRect.ttHeight),
                c.w.config.tooltip.followCursor)
              ) {
                var g = c.getElGrid().getBoundingClientRect();
                o = c.e.clientY + l.globals.translateY - g.top;
              }
              u < 0 && (o = d), c.marker.enlargeCurrentPoint(a, s.paths, n, o);
            }
            return { x: n, y: o };
          },
        },
        {
          key: "handleBarTooltip",
          value: function (e) {
            var t,
              a,
              i = e.e,
              s = e.opt,
              n = this.w,
              o = this.ttCtx,
              l = o.getElTooltip(),
              c = 0,
              h = 0,
              d = 0,
              u = this.getBarTooltipXY({ e: i, opt: s });
            if (u.j !== null || u.barHeight !== 0 || u.barWidth !== 0) {
              t = u.i;
              var f = u.j;
              if (
                ((n.globals.capturedSeriesIndex = t),
                (n.globals.capturedDataPointIndex = f),
                (n.globals.isBarHorizontal && o.tooltipUtil.hasBars()) ||
                !n.config.tooltip.shared
                  ? ((h = u.x),
                    (d = u.y),
                    (a = Array.isArray(n.config.stroke.width)
                      ? n.config.stroke.width[t]
                      : n.config.stroke.width),
                    (c = h))
                  : n.globals.comboCharts ||
                    n.config.tooltip.shared ||
                    (c /= 2),
                isNaN(d) && (d = n.globals.svgHeight - o.tooltipRect.ttHeight),
                parseInt(s.paths.parentNode.getAttribute("data:realIndex"), 10),
                h + o.tooltipRect.ttWidth > n.globals.gridWidth
                  ? (h -= o.tooltipRect.ttWidth)
                  : h < 0 && (h = 0),
                o.w.config.tooltip.followCursor)
              ) {
                var g = o.getElGrid().getBoundingClientRect();
                d = o.e.clientY - g.top;
              }
              o.tooltip === null &&
                (o.tooltip = n.globals.dom.baseEl.querySelector(
                  ".apexcharts-tooltip"
                )),
                n.config.tooltip.shared ||
                  (n.globals.comboBarCount > 0
                    ? o.tooltipPosition.moveXCrosshairs(c + a / 2)
                    : o.tooltipPosition.moveXCrosshairs(c)),
                !o.fixedTooltip &&
                  (!n.config.tooltip.shared ||
                    (n.globals.isBarHorizontal && o.tooltipUtil.hasBars())) &&
                  ((d = d + n.globals.translateY - o.tooltipRect.ttHeight / 2),
                  (l.style.left = h + n.globals.translateX + "px"),
                  (l.style.top = d + "px"));
            }
          },
        },
        {
          key: "getBarTooltipXY",
          value: function (e) {
            var t = this,
              a = e.e,
              i = e.opt,
              s = this.w,
              n = null,
              o = this.ttCtx,
              l = 0,
              c = 0,
              h = 0,
              d = 0,
              u = 0,
              f = a.target.classList;
            if (
              f.contains("apexcharts-bar-area") ||
              f.contains("apexcharts-candlestick-area") ||
              f.contains("apexcharts-boxPlot-area") ||
              f.contains("apexcharts-rangebar-area")
            ) {
              var g = a.target,
                p = g.getBoundingClientRect(),
                m = i.elGrid.getBoundingClientRect(),
                x = p.height;
              u = p.height;
              var v = p.width,
                b = parseInt(g.getAttribute("cx"), 10),
                k = parseInt(g.getAttribute("cy"), 10);
              d = parseFloat(g.getAttribute("barWidth"));
              var y = a.type === "touchmove" ? a.touches[0].clientX : a.clientX;
              (n = parseInt(g.getAttribute("j"), 10)),
                (l = parseInt(g.parentNode.getAttribute("rel"), 10) - 1);
              var C = g.getAttribute("data-range-y1"),
                A = g.getAttribute("data-range-y2");
              s.globals.comboCharts &&
                (l = parseInt(g.parentNode.getAttribute("data:realIndex"), 10));
              var S = function (E) {
                  return s.globals.isXNumeric
                    ? b - v / 2
                    : t.isVerticalGroupedRangeBar
                    ? b + v / 2
                    : b - o.dataPointsDividedWidth + v / 2;
                },
                T = function () {
                  return (
                    k -
                    o.dataPointsDividedHeight +
                    x / 2 -
                    o.tooltipRect.ttHeight / 2
                  );
                };
              o.tooltipLabels.drawSeriesTexts({
                ttItems: i.ttItems,
                i: l,
                j: n,
                y1: C ? parseInt(C, 10) : null,
                y2: A ? parseInt(A, 10) : null,
                shared: !o.showOnIntersect && s.config.tooltip.shared,
                e: a,
              }),
                s.config.tooltip.followCursor
                  ? s.globals.isBarHorizontal
                    ? ((c = y - m.left + 15), (h = T()))
                    : ((c = S()),
                      (h = a.clientY - m.top - o.tooltipRect.ttHeight / 2 - 15))
                  : s.globals.isBarHorizontal
                  ? ((c = b) < o.xyRatios.baseLineInvertedY &&
                      (c = b - o.tooltipRect.ttWidth),
                    (h = T()))
                  : ((c = S()), (h = k));
            }
            return { x: c, y: h, barHeight: u, barWidth: d, i: l, j: n };
          },
        },
      ]),
      r
    );
  })(),
  Rm = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.ttCtx = e);
    }
    return (
      $(r, [
        {
          key: "drawXaxisTooltip",
          value: function () {
            var e = this.w,
              t = this.ttCtx,
              a = e.config.xaxis.position === "bottom";
            t.xaxisOffY = a
              ? e.globals.gridHeight + 1
              : -e.globals.xAxisHeight - e.config.xaxis.axisTicks.height + 3;
            var i = a
                ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom"
                : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
              s = e.globals.dom.elWrap;
            t.isXAxisTooltipEnabled &&
              e.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") ===
                null &&
              ((t.xaxisTooltip = document.createElement("div")),
              t.xaxisTooltip.setAttribute(
                "class",
                i + " apexcharts-theme-" + e.config.tooltip.theme
              ),
              s.appendChild(t.xaxisTooltip),
              (t.xaxisTooltipText = document.createElement("div")),
              t.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"),
              (t.xaxisTooltipText.style.fontFamily =
                e.config.xaxis.tooltip.style.fontFamily ||
                e.config.chart.fontFamily),
              (t.xaxisTooltipText.style.fontSize =
                e.config.xaxis.tooltip.style.fontSize),
              t.xaxisTooltip.appendChild(t.xaxisTooltipText));
          },
        },
        {
          key: "drawYaxisTooltip",
          value: function () {
            for (
              var e = this.w, t = this.ttCtx, a = 0;
              a < e.config.yaxis.length;
              a++
            ) {
              var i =
                e.config.yaxis[a].opposite ||
                e.config.yaxis[a].crosshairs.opposite;
              t.yaxisOffX = i ? e.globals.gridWidth + 1 : 1;
              var s = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                  a,
                  i
                    ? " apexcharts-yaxistooltip-right"
                    : " apexcharts-yaxistooltip-left"
                ),
                n = e.globals.dom.elWrap;
              e.globals.dom.baseEl.querySelector(
                ".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(a)
              ) === null &&
                ((t.yaxisTooltip = document.createElement("div")),
                t.yaxisTooltip.setAttribute(
                  "class",
                  s + " apexcharts-theme-" + e.config.tooltip.theme
                ),
                n.appendChild(t.yaxisTooltip),
                a === 0 && (t.yaxisTooltipText = []),
                (t.yaxisTooltipText[a] = document.createElement("div")),
                t.yaxisTooltipText[a].classList.add(
                  "apexcharts-yaxistooltip-text"
                ),
                t.yaxisTooltip.appendChild(t.yaxisTooltipText[a]));
            }
          },
        },
        {
          key: "setXCrosshairWidth",
          value: function () {
            var e = this.w,
              t = this.ttCtx,
              a = t.getElXCrosshairs();
            if (
              ((t.xcrosshairsWidth = parseInt(
                e.config.xaxis.crosshairs.width,
                10
              )),
              e.globals.comboCharts)
            ) {
              var i = e.globals.dom.baseEl.querySelector(
                ".apexcharts-bar-area"
              );
              if (
                i !== null &&
                e.config.xaxis.crosshairs.width === "barWidth"
              ) {
                var s = parseFloat(i.getAttribute("barWidth"));
                t.xcrosshairsWidth = s;
              } else if (e.config.xaxis.crosshairs.width === "tickWidth") {
                var n = e.globals.labels.length;
                t.xcrosshairsWidth = e.globals.gridWidth / n;
              }
            } else if (e.config.xaxis.crosshairs.width === "tickWidth") {
              var o = e.globals.labels.length;
              t.xcrosshairsWidth = e.globals.gridWidth / o;
            } else if (e.config.xaxis.crosshairs.width === "barWidth") {
              var l = e.globals.dom.baseEl.querySelector(
                ".apexcharts-bar-area"
              );
              if (l !== null) {
                var c = parseFloat(l.getAttribute("barWidth"));
                t.xcrosshairsWidth = c;
              } else t.xcrosshairsWidth = 1;
            }
            e.globals.isBarHorizontal && (t.xcrosshairsWidth = 0),
              a !== null &&
                t.xcrosshairsWidth > 0 &&
                a.setAttribute("width", t.xcrosshairsWidth);
          },
        },
        {
          key: "handleYCrosshair",
          value: function () {
            var e = this.w,
              t = this.ttCtx;
            (t.ycrosshairs = e.globals.dom.baseEl.querySelector(
              ".apexcharts-ycrosshairs"
            )),
              (t.ycrosshairsHidden = e.globals.dom.baseEl.querySelector(
                ".apexcharts-ycrosshairs-hidden"
              ));
          },
        },
        {
          key: "drawYaxisTooltipText",
          value: function (e, t, a) {
            var i = this.ttCtx,
              s = this.w,
              n = s.globals,
              o = n.seriesYAxisMap[e];
            if (i.yaxisTooltips[e] && o.length > 0) {
              var l = n.yLabelFormatters[e],
                c = i.getElGrid().getBoundingClientRect(),
                h = o[0],
                d = 0;
              a.yRatio.length > 1 && (d = h);
              var u = (t - c.top) * a.yRatio[d],
                f = n.maxYArr[h] - n.minYArr[h],
                g = n.minYArr[h] + (f - u);
              s.config.yaxis[e].reversed && (g = n.maxYArr[h] - (f - u)),
                i.tooltipPosition.moveYCrosshairs(t - c.top),
                (i.yaxisTooltipText[e].innerHTML = l(g)),
                i.tooltipPosition.moveYAxisTooltip(e);
            }
          },
        },
      ]),
      r
    );
  })(),
  yo = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
      var t = this.w;
      (this.tConfig = t.config.tooltip),
        (this.tooltipUtil = new Gc(this)),
        (this.tooltipLabels = new Mm(this)),
        (this.tooltipPosition = new Uc(this)),
        (this.marker = new Em(this)),
        (this.intersect = new Im(this)),
        (this.axesTooltip = new Rm(this)),
        (this.showOnIntersect = this.tConfig.intersect),
        (this.showTooltipTitle = this.tConfig.x.show),
        (this.fixedTooltip = this.tConfig.fixed.enabled),
        (this.xaxisTooltip = null),
        (this.yaxisTTEls = null),
        (this.isBarShared = !t.globals.isBarHorizontal && this.tConfig.shared),
        (this.lastHoverTime = Date.now());
    }
    return (
      $(r, [
        {
          key: "getElTooltip",
          value: function (e) {
            return (
              e || (e = this),
              e.w.globals.dom.baseEl
                ? e.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip")
                : null
            );
          },
        },
        {
          key: "getElXCrosshairs",
          value: function () {
            return this.w.globals.dom.baseEl.querySelector(
              ".apexcharts-xcrosshairs"
            );
          },
        },
        {
          key: "getElGrid",
          value: function () {
            return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
          },
        },
        {
          key: "drawTooltip",
          value: function (e) {
            var t = this.w;
            (this.xyRatios = e),
              (this.isXAxisTooltipEnabled =
                t.config.xaxis.tooltip.enabled && t.globals.axisCharts),
              (this.yaxisTooltips = t.config.yaxis.map(function (n, o) {
                return !!(n.show && n.tooltip.enabled && t.globals.axisCharts);
              })),
              (this.allTooltipSeriesGroups = []),
              t.globals.axisCharts || (this.showTooltipTitle = !1);
            var a = document.createElement("div");
            if (
              (a.classList.add("apexcharts-tooltip"),
              t.config.tooltip.cssClass &&
                a.classList.add(t.config.tooltip.cssClass),
              a.classList.add("apexcharts-theme-".concat(this.tConfig.theme)),
              t.globals.dom.elWrap.appendChild(a),
              t.globals.axisCharts)
            ) {
              this.axesTooltip.drawXaxisTooltip(),
                this.axesTooltip.drawYaxisTooltip(),
                this.axesTooltip.setXCrosshairWidth(),
                this.axesTooltip.handleYCrosshair();
              var i = new Fa(this.ctx);
              this.xAxisTicksPositions = i.getXAxisTicksPositions();
            }
            if (
              ((!t.globals.comboCharts &&
                !this.tConfig.intersect &&
                t.config.chart.type !== "rangeBar") ||
                this.tConfig.shared ||
                (this.showOnIntersect = !0),
              (t.config.markers.size !== 0 &&
                t.globals.markers.largestSize !== 0) ||
                this.marker.drawDynamicPoints(this),
              t.globals.collapsedSeries.length !== t.globals.series.length)
            ) {
              (this.dataPointsDividedHeight =
                t.globals.gridHeight / t.globals.dataPoints),
                (this.dataPointsDividedWidth =
                  t.globals.gridWidth / t.globals.dataPoints),
                this.showTooltipTitle &&
                  ((this.tooltipTitle = document.createElement("div")),
                  this.tooltipTitle.classList.add("apexcharts-tooltip-title"),
                  (this.tooltipTitle.style.fontFamily =
                    this.tConfig.style.fontFamily || t.config.chart.fontFamily),
                  (this.tooltipTitle.style.fontSize =
                    this.tConfig.style.fontSize),
                  a.appendChild(this.tooltipTitle));
              var s = t.globals.series.length;
              (t.globals.xyCharts || t.globals.comboCharts) &&
                this.tConfig.shared &&
                (s = this.showOnIntersect ? 1 : t.globals.series.length),
                (this.legendLabels = t.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-legend-text"
                )),
                (this.ttItems = this.createTTElements(s)),
                this.addSVGEvents();
            }
          },
        },
        {
          key: "createTTElements",
          value: function (e) {
            for (
              var t = this,
                a = this.w,
                i = [],
                s = this.getElTooltip(),
                n = function (l) {
                  var c = document.createElement("div");
                  c.classList.add(
                    "apexcharts-tooltip-series-group",
                    "apexcharts-tooltip-series-group-".concat(l)
                  ),
                    (c.style.order = a.config.tooltip.inverseOrder
                      ? e - l
                      : l + 1);
                  var h = document.createElement("span");
                  h.classList.add("apexcharts-tooltip-marker"),
                    (h.style.color = a.globals.colors[l]);
                  var d = a.config.markers.shape,
                    u = d;
                  Array.isArray(d) && (u = d[l]),
                    h.setAttribute("shape", u),
                    c.appendChild(h);
                  var f = document.createElement("div");
                  f.classList.add("apexcharts-tooltip-text"),
                    (f.style.fontFamily =
                      t.tConfig.style.fontFamily || a.config.chart.fontFamily),
                    (f.style.fontSize = t.tConfig.style.fontSize),
                    ["y", "goals", "z"].forEach(function (g) {
                      var p = document.createElement("div");
                      p.classList.add(
                        "apexcharts-tooltip-".concat(g, "-group")
                      );
                      var m = document.createElement("span");
                      m.classList.add(
                        "apexcharts-tooltip-text-".concat(g, "-label")
                      ),
                        p.appendChild(m);
                      var x = document.createElement("span");
                      x.classList.add(
                        "apexcharts-tooltip-text-".concat(g, "-value")
                      ),
                        p.appendChild(x),
                        f.appendChild(p);
                    }),
                    c.appendChild(f),
                    s.appendChild(c),
                    i.push(c);
                },
                o = 0;
              o < e;
              o++
            )
              n(o);
            return i;
          },
        },
        {
          key: "addSVGEvents",
          value: function () {
            var e = this.w,
              t = e.config.chart.type,
              a = this.getElTooltip(),
              i = !(
                t !== "bar" &&
                t !== "candlestick" &&
                t !== "boxPlot" &&
                t !== "rangeBar"
              ),
              s =
                t === "area" ||
                t === "line" ||
                t === "scatter" ||
                t === "bubble" ||
                t === "radar",
              n = e.globals.dom.Paper.node,
              o = this.getElGrid();
            o && (this.seriesBound = o.getBoundingClientRect());
            var l,
              c = [],
              h = [],
              d = {
                hoverArea: n,
                elGrid: o,
                tooltipEl: a,
                tooltipY: c,
                tooltipX: h,
                ttItems: this.ttItems,
              };
            if (
              e.globals.axisCharts &&
              (s
                ? (l = e.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"
                  ))
                : i
                ? (l = e.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area"
                  ))
                : (t !== "heatmap" && t !== "treemap") ||
                  (l = e.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap"
                  )),
              l && l.length)
            )
              for (var u = 0; u < l.length; u++)
                c.push(l[u].getAttribute("cy")),
                  h.push(l[u].getAttribute("cx"));
            if (
              (e.globals.xyCharts && !this.showOnIntersect) ||
              (e.globals.comboCharts && !this.showOnIntersect) ||
              (i && this.tooltipUtil.hasBars() && this.tConfig.shared)
            )
              this.addPathsEventListeners([n], d);
            else if (
              (i && !e.globals.comboCharts) ||
              (s && this.showOnIntersect)
            )
              this.addDatapointEventsListeners(d);
            else if (
              !e.globals.axisCharts ||
              t === "heatmap" ||
              t === "treemap"
            ) {
              var f =
                e.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
              this.addPathsEventListeners(f, d);
            }
            if (this.showOnIntersect) {
              var g = e.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker"
              );
              g.length > 0 && this.addPathsEventListeners(g, d),
                this.tooltipUtil.hasBars() &&
                  !this.tConfig.shared &&
                  this.addDatapointEventsListeners(d);
            }
          },
        },
        {
          key: "drawFixedTooltipRect",
          value: function () {
            var e = this.w,
              t = this.getElTooltip(),
              a = t.getBoundingClientRect(),
              i = a.width + 10,
              s = a.height + 10,
              n = this.tConfig.fixed.offsetX,
              o = this.tConfig.fixed.offsetY,
              l = this.tConfig.fixed.position.toLowerCase();
            return (
              l.indexOf("right") > -1 && (n = n + e.globals.svgWidth - i + 10),
              l.indexOf("bottom") > -1 &&
                (o = o + e.globals.svgHeight - s - 10),
              (t.style.left = n + "px"),
              (t.style.top = o + "px"),
              { x: n, y: o, ttWidth: i, ttHeight: s }
            );
          },
        },
        {
          key: "addDatapointEventsListeners",
          value: function (e) {
            var t = this.w.globals.dom.baseEl.querySelectorAll(
              ".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area"
            );
            this.addPathsEventListeners(t, e);
          },
        },
        {
          key: "addPathsEventListeners",
          value: function (e, t) {
            for (
              var a = this,
                i = function (n) {
                  var o = {
                    paths: e[n],
                    tooltipEl: t.tooltipEl,
                    tooltipY: t.tooltipY,
                    tooltipX: t.tooltipX,
                    elGrid: t.elGrid,
                    hoverArea: t.hoverArea,
                    ttItems: t.ttItems,
                  };
                  [
                    "mousemove",
                    "mouseup",
                    "touchmove",
                    "mouseout",
                    "touchend",
                  ].map(function (l) {
                    return e[n].addEventListener(
                      l,
                      a.onSeriesHover.bind(a, o),
                      { capture: !1, passive: !0 }
                    );
                  });
                },
                s = 0;
              s < e.length;
              s++
            )
              i(s);
          },
        },
        {
          key: "onSeriesHover",
          value: function (e, t) {
            var a = this,
              i = Date.now() - this.lastHoverTime;
            i >= 20
              ? this.seriesHover(e, t)
              : (clearTimeout(this.seriesHoverTimeout),
                (this.seriesHoverTimeout = setTimeout(function () {
                  a.seriesHover(e, t);
                }, 20 - i)));
          },
        },
        {
          key: "seriesHover",
          value: function (e, t) {
            var a = this;
            this.lastHoverTime = Date.now();
            var i = [],
              s = this.w;
            s.config.chart.group && (i = this.ctx.getGroupedCharts()),
              (s.globals.axisCharts &&
                ((s.globals.minX === -1 / 0 && s.globals.maxX === 1 / 0) ||
                  s.globals.dataPoints === 0)) ||
                (i.length
                  ? i.forEach(function (n) {
                      var o = a.getElTooltip(n),
                        l = {
                          paths: e.paths,
                          tooltipEl: o,
                          tooltipY: e.tooltipY,
                          tooltipX: e.tooltipX,
                          elGrid: e.elGrid,
                          hoverArea: e.hoverArea,
                          ttItems: n.w.globals.tooltip.ttItems,
                        };
                      n.w.globals.minX === a.w.globals.minX &&
                        n.w.globals.maxX === a.w.globals.maxX &&
                        n.w.globals.tooltip.seriesHoverByContext({
                          chartCtx: n,
                          ttCtx: n.w.globals.tooltip,
                          opt: l,
                          e: t,
                        });
                    })
                  : this.seriesHoverByContext({
                      chartCtx: this.ctx,
                      ttCtx: this.w.globals.tooltip,
                      opt: e,
                      e: t,
                    }));
          },
        },
        {
          key: "seriesHoverByContext",
          value: function (e) {
            var t = e.chartCtx,
              a = e.ttCtx,
              i = e.opt,
              s = e.e,
              n = t.w,
              o = this.getElTooltip(t);
            o &&
              ((a.tooltipRect = {
                x: 0,
                y: 0,
                ttWidth: o.getBoundingClientRect().width,
                ttHeight: o.getBoundingClientRect().height,
              }),
              (a.e = s),
              a.tooltipUtil.hasBars() &&
                !n.globals.comboCharts &&
                !a.isBarShared &&
                this.tConfig.onDatasetHover.highlightDataSeries &&
                new Ve(t).toggleSeriesOnHover(s, s.target.parentNode),
              a.fixedTooltip && a.drawFixedTooltipRect(),
              n.globals.axisCharts
                ? a.axisChartsTooltips({
                    e: s,
                    opt: i,
                    tooltipRect: a.tooltipRect,
                  })
                : a.nonAxisChartsTooltips({
                    e: s,
                    opt: i,
                    tooltipRect: a.tooltipRect,
                  }));
          },
        },
        {
          key: "axisChartsTooltips",
          value: function (e) {
            var t,
              a,
              i = e.e,
              s = e.opt,
              n = this.w,
              o = s.elGrid.getBoundingClientRect(),
              l = i.type === "touchmove" ? i.touches[0].clientX : i.clientX,
              c = i.type === "touchmove" ? i.touches[0].clientY : i.clientY;
            if (
              ((this.clientY = c),
              (this.clientX = l),
              (n.globals.capturedSeriesIndex = -1),
              (n.globals.capturedDataPointIndex = -1),
              c < o.top || c > o.top + o.height)
            )
              this.handleMouseOut(s);
            else {
              if (
                Array.isArray(this.tConfig.enabledOnSeries) &&
                !n.config.tooltip.shared
              ) {
                var h = parseInt(s.paths.getAttribute("index"), 10);
                if (this.tConfig.enabledOnSeries.indexOf(h) < 0)
                  return void this.handleMouseOut(s);
              }
              var d = this.getElTooltip(),
                u = this.getElXCrosshairs(),
                f = [];
              n.config.chart.group && (f = this.ctx.getSyncedCharts());
              var g =
                n.globals.xyCharts ||
                (n.config.chart.type === "bar" &&
                  !n.globals.isBarHorizontal &&
                  this.tooltipUtil.hasBars() &&
                  this.tConfig.shared) ||
                (n.globals.comboCharts && this.tooltipUtil.hasBars());
              if (
                i.type === "mousemove" ||
                i.type === "touchmove" ||
                i.type === "mouseup"
              ) {
                if (
                  n.globals.collapsedSeries.length +
                    n.globals.ancillaryCollapsedSeries.length ===
                  n.globals.series.length
                )
                  return;
                u !== null && u.classList.add("apexcharts-active");
                var p = this.yaxisTooltips.filter(function (v) {
                  return v === !0;
                });
                if (
                  (this.ycrosshairs !== null &&
                    p.length &&
                    this.ycrosshairs.classList.add("apexcharts-active"),
                  (g && !this.showOnIntersect) || f.length > 1)
                )
                  this.handleStickyTooltip(i, l, c, s);
                else if (
                  n.config.chart.type === "heatmap" ||
                  n.config.chart.type === "treemap"
                ) {
                  var m = this.intersect.handleHeatTreeTooltip({
                    e: i,
                    opt: s,
                    x: t,
                    y: a,
                    type: n.config.chart.type,
                  });
                  (t = m.x),
                    (a = m.y),
                    (d.style.left = t + "px"),
                    (d.style.top = a + "px");
                } else
                  this.tooltipUtil.hasBars() &&
                    this.intersect.handleBarTooltip({ e: i, opt: s }),
                    this.tooltipUtil.hasMarkers() &&
                      this.intersect.handleMarkerTooltip({
                        e: i,
                        opt: s,
                        x: t,
                        y: a,
                      });
                if (this.yaxisTooltips.length)
                  for (var x = 0; x < n.config.yaxis.length; x++)
                    this.axesTooltip.drawYaxisTooltipText(x, c, this.xyRatios);
                n.globals.dom.baseEl.classList.add("apexcharts-tooltip-active"),
                  s.tooltipEl.classList.add("apexcharts-active");
              } else
                (i.type !== "mouseout" && i.type !== "touchend") ||
                  this.handleMouseOut(s);
            }
          },
        },
        {
          key: "nonAxisChartsTooltips",
          value: function (e) {
            var t = e.e,
              a = e.opt,
              i = e.tooltipRect,
              s = this.w,
              n = a.paths.getAttribute("rel"),
              o = this.getElTooltip(),
              l = s.globals.dom.elWrap.getBoundingClientRect();
            if (t.type === "mousemove" || t.type === "touchmove") {
              s.globals.dom.baseEl.classList.add("apexcharts-tooltip-active"),
                o.classList.add("apexcharts-active"),
                this.tooltipLabels.drawSeriesTexts({
                  ttItems: a.ttItems,
                  i: parseInt(n, 10) - 1,
                  shared: !1,
                });
              var c = s.globals.clientX - l.left - i.ttWidth / 2,
                h = s.globals.clientY - l.top - i.ttHeight - 10;
              if (
                ((o.style.left = c + "px"),
                (o.style.top = h + "px"),
                s.config.legend.tooltipHoverFormatter)
              ) {
                var d = n - 1,
                  u = (0, s.config.legend.tooltipHoverFormatter)(
                    this.legendLabels[d].getAttribute("data:default-text"),
                    { seriesIndex: d, dataPointIndex: d, w: s }
                  );
                this.legendLabels[d].innerHTML = u;
              }
            } else
              (t.type !== "mouseout" && t.type !== "touchend") ||
                (o.classList.remove("apexcharts-active"),
                s.globals.dom.baseEl.classList.remove(
                  "apexcharts-tooltip-active"
                ),
                s.config.legend.tooltipHoverFormatter &&
                  this.legendLabels.forEach(function (f) {
                    var g = f.getAttribute("data:default-text");
                    f.innerHTML = decodeURIComponent(g);
                  }));
          },
        },
        {
          key: "handleStickyTooltip",
          value: function (e, t, a, i) {
            var s = this.w,
              n = this.tooltipUtil.getNearestValues({
                context: this,
                hoverArea: i.hoverArea,
                elGrid: i.elGrid,
                clientX: t,
                clientY: a,
              }),
              o = n.j,
              l = n.capturedSeries;
            s.globals.collapsedSeriesIndices.includes(l) && (l = null);
            var c = i.elGrid.getBoundingClientRect();
            if (n.hoverX < 0 || n.hoverX > c.width) this.handleMouseOut(i);
            else if (l !== null) this.handleStickyCapturedSeries(e, l, i, o);
            else if (
              this.tooltipUtil.isXoverlap(o) ||
              s.globals.isBarHorizontal
            ) {
              var h = s.globals.series.findIndex(function (d, u) {
                return !s.globals.collapsedSeriesIndices.includes(u);
              });
              this.create(e, this, h, o, i.ttItems);
            }
          },
        },
        {
          key: "handleStickyCapturedSeries",
          value: function (e, t, a, i) {
            var s = this.w;
            if (!this.tConfig.shared && s.globals.series[t][i] === null)
              return void this.handleMouseOut(a);
            if (s.globals.series[t][i] !== void 0)
              this.tConfig.shared &&
              this.tooltipUtil.isXoverlap(i) &&
              this.tooltipUtil.isInitialSeriesSameLen()
                ? this.create(e, this, t, i, a.ttItems)
                : this.create(e, this, t, i, a.ttItems, !1);
            else if (this.tooltipUtil.isXoverlap(i)) {
              var n = s.globals.series.findIndex(function (o, l) {
                return !s.globals.collapsedSeriesIndices.includes(l);
              });
              this.create(e, this, n, i, a.ttItems);
            }
          },
        },
        {
          key: "deactivateHoverFilter",
          value: function () {
            for (
              var e = this.w,
                t = new H(this.ctx),
                a = e.globals.dom.Paper.find(".apexcharts-bar-area"),
                i = 0;
              i < a.length;
              i++
            )
              t.pathMouseLeave(a[i]);
          },
        },
        {
          key: "handleMouseOut",
          value: function (e) {
            var t = this.w,
              a = this.getElXCrosshairs();
            if (
              (t.globals.dom.baseEl.classList.remove(
                "apexcharts-tooltip-active"
              ),
              e.tooltipEl.classList.remove("apexcharts-active"),
              this.deactivateHoverFilter(),
              t.config.chart.type !== "bubble" && this.marker.resetPointsSize(),
              a !== null && a.classList.remove("apexcharts-active"),
              this.ycrosshairs !== null &&
                this.ycrosshairs.classList.remove("apexcharts-active"),
              this.isXAxisTooltipEnabled &&
                this.xaxisTooltip.classList.remove("apexcharts-active"),
              this.yaxisTooltips.length)
            ) {
              this.yaxisTTEls === null &&
                (this.yaxisTTEls = t.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-yaxistooltip"
                ));
              for (var i = 0; i < this.yaxisTTEls.length; i++)
                this.yaxisTTEls[i].classList.remove("apexcharts-active");
            }
            t.config.legend.tooltipHoverFormatter &&
              this.legendLabels.forEach(function (s) {
                var n = s.getAttribute("data:default-text");
                s.innerHTML = decodeURIComponent(n);
              });
          },
        },
        {
          key: "markerClick",
          value: function (e, t, a) {
            var i = this.w;
            typeof i.config.chart.events.markerClick == "function" &&
              i.config.chart.events.markerClick(e, this.ctx, {
                seriesIndex: t,
                dataPointIndex: a,
                w: i,
              }),
              this.ctx.events.fireEvent("markerClick", [
                e,
                this.ctx,
                { seriesIndex: t, dataPointIndex: a, w: i },
              ]);
          },
        },
        {
          key: "create",
          value: function (e, t, a, i, s) {
            var n,
              o,
              l,
              c,
              h,
              d,
              u,
              f,
              g,
              p,
              m,
              x,
              v,
              b,
              k,
              y,
              C =
                arguments.length > 5 && arguments[5] !== void 0
                  ? arguments[5]
                  : null,
              A = this.w,
              S = t;
            e.type === "mouseup" && this.markerClick(e, a, i),
              C === null && (C = this.tConfig.shared);
            var T = this.tooltipUtil.hasMarkers(a),
              E = this.tooltipUtil.getElBars(),
              L = function () {
                A.globals.markers.largestSize > 0
                  ? S.marker.enlargePoints(i)
                  : S.tooltipPosition.moveDynamicPointsOnHover(i);
              };
            if (A.config.legend.tooltipHoverFormatter) {
              var I = A.config.legend.tooltipHoverFormatter,
                M = Array.from(this.legendLabels);
              M.forEach(function (Z) {
                var X = Z.getAttribute("data:default-text");
                Z.innerHTML = decodeURIComponent(X);
              });
              for (var O = 0; O < M.length; O++) {
                var N = M[O],
                  F = parseInt(N.getAttribute("i"), 10),
                  D = decodeURIComponent(N.getAttribute("data:default-text")),
                  B = I(D, { seriesIndex: C ? F : a, dataPointIndex: i, w: A });
                if (C)
                  N.innerHTML =
                    A.globals.collapsedSeriesIndices.indexOf(F) < 0 ? B : D;
                else if (((N.innerHTML = F === a ? B : D), a === F)) break;
              }
            }
            var z = Y(
              Y(
                { ttItems: s, i: a, j: i },
                ((n = A.globals.seriesRange) === null ||
                n === void 0 ||
                (o = n[a]) === null ||
                o === void 0 ||
                (l = o[i]) === null ||
                l === void 0 ||
                (c = l.y[0]) === null ||
                c === void 0
                  ? void 0
                  : c.y1) !== void 0 && {
                  y1:
                    (h = A.globals.seriesRange) === null ||
                    h === void 0 ||
                    (d = h[a]) === null ||
                    d === void 0 ||
                    (u = d[i]) === null ||
                    u === void 0 ||
                    (f = u.y[0]) === null ||
                    f === void 0
                      ? void 0
                      : f.y1,
                }
              ),
              ((g = A.globals.seriesRange) === null ||
              g === void 0 ||
              (p = g[a]) === null ||
              p === void 0 ||
              (m = p[i]) === null ||
              m === void 0 ||
              (x = m.y[0]) === null ||
              x === void 0
                ? void 0
                : x.y2) !== void 0 && {
                y2:
                  (v = A.globals.seriesRange) === null ||
                  v === void 0 ||
                  (b = v[a]) === null ||
                  b === void 0 ||
                  (k = b[i]) === null ||
                  k === void 0 ||
                  (y = k.y[0]) === null ||
                  y === void 0
                    ? void 0
                    : y.y2,
              }
            );
            if (C) {
              if (
                (S.tooltipLabels.drawSeriesTexts(
                  Y(
                    Y({}, z),
                    {},
                    { shared: !this.showOnIntersect && this.tConfig.shared }
                  )
                ),
                T)
              )
                L();
              else if (
                this.tooltipUtil.hasBars() &&
                ((this.barSeriesHeight = this.tooltipUtil.getBarsHeight(E)),
                this.barSeriesHeight > 0)
              ) {
                var G = new H(this.ctx),
                  V = A.globals.dom.Paper.find(
                    ".apexcharts-bar-area[j='".concat(i, "']")
                  );
                this.deactivateHoverFilter(),
                  S.tooltipPosition.moveStickyTooltipOverBars(i, a),
                  S.tooltipUtil.getAllMarkers(!0).length && L();
                for (var Q = 0; Q < V.length; Q++) G.pathMouseEnter(V[Q]);
              }
            } else
              S.tooltipLabels.drawSeriesTexts(Y({ shared: !1 }, z)),
                this.tooltipUtil.hasBars() &&
                  S.tooltipPosition.moveStickyTooltipOverBars(i, a),
                T && S.tooltipPosition.moveMarkers(a, i);
          },
        },
      ]),
      r
    );
  })(),
  _m = (function () {
    function r(e) {
      U(this, r),
        (this.w = e.w),
        (this.barCtx = e),
        (this.totalFormatter =
          this.w.config.plotOptions.bar.dataLabels.total.formatter),
        this.totalFormatter ||
          (this.totalFormatter = this.w.config.dataLabels.formatter);
    }
    return (
      $(r, [
        {
          key: "handleBarDataLabels",
          value: function (e) {
            var t,
              a,
              i = e.x,
              s = e.y,
              n = e.y1,
              o = e.y2,
              l = e.i,
              c = e.j,
              h = e.realIndex,
              d = e.columnGroupIndex,
              u = e.series,
              f = e.barHeight,
              g = e.barWidth,
              p = e.barXPosition,
              m = e.barYPosition,
              x = e.visibleSeries,
              v = e.renderedPath,
              b = this.w,
              k = new H(this.barCtx.ctx),
              y = Array.isArray(this.barCtx.strokeWidth)
                ? this.barCtx.strokeWidth[h]
                : this.barCtx.strokeWidth;
            b.globals.isXNumeric && !b.globals.isBarHorizontal
              ? ((t = i + parseFloat(g * (x + 1))),
                (a = s + parseFloat(f * (x + 1)) - y))
              : ((t = i + parseFloat(g * x)), (a = s + parseFloat(f * x)));
            var C,
              A = null,
              S = i,
              T = s,
              E = {},
              L = b.config.dataLabels,
              I = this.barCtx.barOptions.dataLabels,
              M = this.barCtx.barOptions.dataLabels.total;
            m !== void 0 && this.barCtx.isRangeBar && ((a = m), (T = m)),
              p !== void 0 &&
                this.barCtx.isVerticalGroupedRangeBar &&
                ((t = p), (S = p));
            var O = L.offsetX,
              N = L.offsetY,
              F = { width: 0, height: 0 };
            if (b.config.dataLabels.enabled) {
              var D = b.globals.series[l][c];
              F = k.getTextRects(
                b.config.dataLabels.formatter
                  ? b.config.dataLabels.formatter(
                      D,
                      Y(
                        Y({}, b),
                        {},
                        { seriesIndex: l, dataPointIndex: c, w: b }
                      )
                    )
                  : b.globals.yLabelFormatters[0](D),
                parseFloat(L.style.fontSize)
              );
            }
            var B = {
              x: i,
              y: s,
              i: l,
              j: c,
              realIndex: h,
              columnGroupIndex: d,
              renderedPath: v,
              bcx: t,
              bcy: a,
              barHeight: f,
              barWidth: g,
              textRects: F,
              strokeWidth: y,
              dataLabelsX: S,
              dataLabelsY: T,
              dataLabelsConfig: L,
              barDataLabelsConfig: I,
              barTotalDataLabelsConfig: M,
              offX: O,
              offY: N,
            };
            return (
              (E = this.barCtx.isHorizontal
                ? this.calculateBarsDataLabelsPosition(B)
                : this.calculateColumnsDataLabelsPosition(B)),
              v.attr({
                cy: E.bcy,
                cx: E.bcx,
                j: c,
                val: b.globals.series[l][c],
                barHeight: f,
                barWidth: g,
              }),
              (C = this.drawCalculatedDataLabels({
                x: E.dataLabelsX,
                y: E.dataLabelsY,
                val: this.barCtx.isRangeBar
                  ? [n, o]
                  : b.config.chart.stackType === "100%"
                  ? u[h][c]
                  : b.globals.series[h][c],
                i: h,
                j: c,
                barWidth: g,
                barHeight: f,
                textRects: F,
                dataLabelsConfig: L,
              })),
              b.config.chart.stacked &&
                M.enabled &&
                (A = this.drawTotalDataLabels({
                  x: E.totalDataLabelsX,
                  y: E.totalDataLabelsY,
                  barWidth: g,
                  barHeight: f,
                  realIndex: h,
                  textAnchor: E.totalDataLabelsAnchor,
                  val: this.getStackedTotalDataLabel({ realIndex: h, j: c }),
                  dataLabelsConfig: L,
                  barTotalDataLabelsConfig: M,
                })),
              { dataLabels: C, totalDataLabels: A }
            );
          },
        },
        {
          key: "getStackedTotalDataLabel",
          value: function (e) {
            var t = e.realIndex,
              a = e.j,
              i = this.w,
              s = this.barCtx.stackedSeriesTotals[a];
            return (
              this.totalFormatter &&
                (s = this.totalFormatter(
                  s,
                  Y(Y({}, i), {}, { seriesIndex: t, dataPointIndex: a, w: i })
                )),
              s
            );
          },
        },
        {
          key: "calculateColumnsDataLabelsPosition",
          value: function (e) {
            var t = this,
              a = this.w,
              i = e.i,
              s = e.j,
              n = e.realIndex;
            e.columnGroupIndex;
            var o,
              l,
              c = e.y,
              h = e.bcx,
              d = e.barWidth,
              u = e.barHeight,
              f = e.textRects,
              g = e.dataLabelsX,
              p = e.dataLabelsY,
              m = e.dataLabelsConfig,
              x = e.barDataLabelsConfig,
              v = e.barTotalDataLabelsConfig,
              b = e.strokeWidth,
              k = e.offX,
              y = e.offY,
              C = h;
            u = Math.abs(u);
            var A =
                a.config.plotOptions.bar.dataLabels.orientation === "vertical",
              S = this.barCtx.barHelpers.getZeroValueEncounters({
                i,
                j: s,
              }).zeroEncounters;
            h -= b / 2;
            var T = a.globals.gridWidth / a.globals.dataPoints;
            this.barCtx.isVerticalGroupedRangeBar
              ? (g += d / 2)
              : ((g = a.globals.isXNumeric ? h - d / 2 + k : h - T + d / 2 + k),
                S > 0 &&
                  a.config.plotOptions.bar.hideZeroBarsWhenGrouped &&
                  (g -= d * S)),
              A && (g = g + f.height / 2 - b / 2 - 2);
            var E = a.globals.series[i][s] < 0,
              L = c;
            switch (
              (this.barCtx.isReversed && (L = c + (E ? u : -u)), x.position)
            ) {
              case "center":
                p = A
                  ? E
                    ? L - u / 2 + y
                    : L + u / 2 - y
                  : E
                  ? L - u / 2 + f.height / 2 + y
                  : L + u / 2 + f.height / 2 - y;
                break;
              case "bottom":
                p = A
                  ? E
                    ? L - u + y
                    : L + u - y
                  : E
                  ? L - u + f.height + b + y
                  : L + u - f.height / 2 + b - y;
                break;
              case "top":
                p = A
                  ? E
                    ? L + y
                    : L - y
                  : E
                  ? L - f.height / 2 - y
                  : L + f.height + y;
            }
            var I = L;
            if (
              (a.globals.seriesGroups.forEach(function (N) {
                var F;
                (F = t.barCtx[N.join(",")]) === null ||
                  F === void 0 ||
                  F.prevY.forEach(function (D) {
                    I = E ? Math.max(D[s], I) : Math.min(D[s], I);
                  });
              }),
              this.barCtx.lastActiveBarSerieIndex === n && v.enabled)
            ) {
              var M = new H(this.barCtx.ctx).getTextRects(
                this.getStackedTotalDataLabel({ realIndex: n, j: s }),
                m.fontSize
              );
              o = E
                ? I - M.height / 2 - y - v.offsetY + 18
                : I + M.height + y + v.offsetY - 18;
              var O = T;
              l =
                C +
                (a.globals.isXNumeric
                  ? (-d * a.globals.barGroups.length) / 2
                  : (a.globals.barGroups.length * d) / 2 -
                    (a.globals.barGroups.length - 1) * d -
                    O) +
                v.offsetX;
            }
            return (
              a.config.chart.stacked ||
                (p < 0
                  ? (p = 0 + b)
                  : p + f.height / 3 > a.globals.gridHeight &&
                    (p = a.globals.gridHeight - b)),
              {
                bcx: h,
                bcy: c,
                dataLabelsX: g,
                dataLabelsY: p,
                totalDataLabelsX: l,
                totalDataLabelsY: o,
                totalDataLabelsAnchor: "middle",
              }
            );
          },
        },
        {
          key: "calculateBarsDataLabelsPosition",
          value: function (e) {
            var t = this,
              a = this.w,
              i = e.x,
              s = e.i,
              n = e.j,
              o = e.realIndex,
              l = e.bcy,
              c = e.barHeight,
              h = e.barWidth,
              d = e.textRects,
              u = e.dataLabelsX,
              f = e.strokeWidth,
              g = e.dataLabelsConfig,
              p = e.barDataLabelsConfig,
              m = e.barTotalDataLabelsConfig,
              x = e.offX,
              v = e.offY,
              b = a.globals.gridHeight / a.globals.dataPoints;
            h = Math.abs(h);
            var k,
              y,
              C =
                l -
                (this.barCtx.isRangeBar ? 0 : b) +
                c / 2 +
                d.height / 2 +
                v -
                3,
              A = "start",
              S = a.globals.series[s][n] < 0,
              T = i;
            switch (
              (this.barCtx.isReversed &&
                ((T = i + (S ? -h : h)), (A = S ? "start" : "end")),
              p.position)
            ) {
              case "center":
                u = S ? T + h / 2 - x : Math.max(d.width / 2, T - h / 2) + x;
                break;
              case "bottom":
                u = S ? T + h - f - x : T - h + f + x;
                break;
              case "top":
                u = S ? T - f - x : T - f + x;
            }
            var E = T;
            if (
              (a.globals.seriesGroups.forEach(function (I) {
                var M;
                (M = t.barCtx[I.join(",")]) === null ||
                  M === void 0 ||
                  M.prevX.forEach(function (O) {
                    E = S ? Math.min(O[n], E) : Math.max(O[n], E);
                  });
              }),
              this.barCtx.lastActiveBarSerieIndex === o && m.enabled)
            ) {
              var L = new H(this.barCtx.ctx).getTextRects(
                this.getStackedTotalDataLabel({ realIndex: o, j: n }),
                g.fontSize
              );
              S
                ? ((k = E - f - x - m.offsetX), (A = "end"))
                : (k =
                    E +
                    x +
                    m.offsetX +
                    (this.barCtx.isReversed ? -(h + f) : f)),
                (y = C - d.height / 2 + L.height / 2 + m.offsetY + f),
                a.globals.barGroups.length > 1 &&
                  (y -= (a.globals.barGroups.length / 2) * (c / 2));
            }
            return (
              a.config.chart.stacked ||
                (g.textAnchor === "start"
                  ? u - d.width < 0
                    ? (u = S ? d.width + f : f)
                    : u + d.width > a.globals.gridWidth &&
                      (u = S
                        ? a.globals.gridWidth - f
                        : a.globals.gridWidth - d.width - f)
                  : g.textAnchor === "middle"
                  ? u - d.width / 2 < 0
                    ? (u = d.width / 2 + f)
                    : u + d.width / 2 > a.globals.gridWidth &&
                      (u = a.globals.gridWidth - d.width / 2 - f)
                  : g.textAnchor === "end" &&
                    (u < 1
                      ? (u = d.width + f)
                      : u + 1 > a.globals.gridWidth &&
                        (u = a.globals.gridWidth - d.width - f))),
              {
                bcx: i,
                bcy: l,
                dataLabelsX: u,
                dataLabelsY: C,
                totalDataLabelsX: k,
                totalDataLabelsY: y,
                totalDataLabelsAnchor: A,
              }
            );
          },
        },
        {
          key: "drawCalculatedDataLabels",
          value: function (e) {
            var t = e.x,
              a = e.y,
              i = e.val,
              s = e.i,
              n = e.j,
              o = e.textRects,
              l = e.barHeight,
              c = e.barWidth,
              h = e.dataLabelsConfig,
              d = this.w,
              u = "rotate(0)";
            d.config.plotOptions.bar.dataLabels.orientation === "vertical" &&
              (u = "rotate(-90, ".concat(t, ", ").concat(a, ")"));
            var f = new ia(this.barCtx.ctx),
              g = new H(this.barCtx.ctx),
              p = h.formatter,
              m = null,
              x = d.globals.collapsedSeriesIndices.indexOf(s) > -1;
            if (h.enabled && !x) {
              m = g.group({ class: "apexcharts-data-labels", transform: u });
              var v = "";
              i !== void 0 &&
                (v = p(
                  i,
                  Y(Y({}, d), {}, { seriesIndex: s, dataPointIndex: n, w: d })
                )),
                !i &&
                  d.config.plotOptions.bar.hideZeroBarsWhenGrouped &&
                  (v = "");
              var b = d.globals.series[s][n] < 0,
                k = d.config.plotOptions.bar.dataLabels.position;
              d.config.plotOptions.bar.dataLabels.orientation === "vertical" &&
                (k === "top" && (h.textAnchor = b ? "end" : "start"),
                k === "center" && (h.textAnchor = "middle"),
                k === "bottom" && (h.textAnchor = b ? "end" : "start")),
                this.barCtx.isRangeBar &&
                  this.barCtx.barOptions.dataLabels.hideOverflowingLabels &&
                  c < g.getTextRects(v, parseFloat(h.style.fontSize)).width &&
                  (v = ""),
                d.config.chart.stacked &&
                  this.barCtx.barOptions.dataLabels.hideOverflowingLabels &&
                  (this.barCtx.isHorizontal
                    ? o.width / 1.6 > Math.abs(c) && (v = "")
                    : o.height / 1.6 > Math.abs(l) && (v = ""));
              var y = Y({}, h);
              this.barCtx.isHorizontal &&
                i < 0 &&
                (h.textAnchor === "start"
                  ? (y.textAnchor = "end")
                  : h.textAnchor === "end" && (y.textAnchor = "start")),
                f.plotDataLabelsText({
                  x: t,
                  y: a,
                  text: v,
                  i: s,
                  j: n,
                  parent: m,
                  dataLabelsConfig: y,
                  alwaysDrawDataLabel: !0,
                  offsetCorrection: !0,
                });
            }
            return m;
          },
        },
        {
          key: "drawTotalDataLabels",
          value: function (e) {
            var t = e.x,
              a = e.y,
              i = e.val,
              s = e.realIndex,
              n = e.textAnchor,
              o = e.barTotalDataLabelsConfig;
            this.w;
            var l,
              c = new H(this.barCtx.ctx);
            return (
              o.enabled &&
                t !== void 0 &&
                a !== void 0 &&
                this.barCtx.lastActiveBarSerieIndex === s &&
                (l = c.drawText({
                  x: t,
                  y: a,
                  foreColor: o.style.color,
                  text: i,
                  textAnchor: n,
                  fontFamily: o.style.fontFamily,
                  fontSize: o.style.fontSize,
                  fontWeight: o.style.fontWeight,
                })),
              l
            );
          },
        },
      ]),
      r
    );
  })(),
  Om = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.barCtx = e);
    }
    return (
      $(r, [
        {
          key: "initVariables",
          value: function (e) {
            var t = this.w;
            (this.barCtx.series = e),
              (this.barCtx.totalItems = 0),
              (this.barCtx.seriesLen = 0),
              (this.barCtx.visibleI = -1),
              (this.barCtx.visibleItems = 1);
            for (var a = 0; a < e.length; a++)
              if (
                (e[a].length > 0 &&
                  ((this.barCtx.seriesLen = this.barCtx.seriesLen + 1),
                  (this.barCtx.totalItems += e[a].length)),
                t.globals.isXNumeric)
              )
                for (var i = 0; i < e[a].length; i++)
                  t.globals.seriesX[a][i] > t.globals.minX &&
                    t.globals.seriesX[a][i] < t.globals.maxX &&
                    this.barCtx.visibleItems++;
              else this.barCtx.visibleItems = t.globals.dataPoints;
            (this.arrBorderRadius = this.createBorderRadiusArr(
              t.globals.series
            )),
              this.barCtx.seriesLen === 0 && (this.barCtx.seriesLen = 1),
              (this.barCtx.zeroSerieses = []),
              t.globals.comboCharts || this.checkZeroSeries({ series: e });
          },
        },
        {
          key: "initialPositions",
          value: function (e) {
            var t,
              a,
              i,
              s,
              n,
              o,
              l,
              c,
              h = this.w,
              d = h.globals.dataPoints;
            this.barCtx.isRangeBar && (d = h.globals.labels.length);
            var u = this.barCtx.seriesLen;
            if (
              (h.config.plotOptions.bar.rangeBarGroupRows && (u = 1),
              this.barCtx.isHorizontal)
            )
              (n = (i = h.globals.gridHeight / d) / u),
                h.globals.isXNumeric &&
                  (n =
                    (i = h.globals.gridHeight / this.barCtx.totalItems) /
                    this.barCtx.seriesLen),
                (n =
                  (n * parseInt(this.barCtx.barOptions.barHeight, 10)) / 100),
                String(this.barCtx.barOptions.barHeight).indexOf("%") === -1 &&
                  (n = parseInt(this.barCtx.barOptions.barHeight, 10)),
                (c =
                  this.barCtx.baseLineInvertedY +
                  h.globals.padHorizontal +
                  (this.barCtx.isReversed ? h.globals.gridWidth : 0) -
                  (this.barCtx.isReversed
                    ? 2 * this.barCtx.baseLineInvertedY
                    : 0)),
                this.barCtx.isFunnel && (c = h.globals.gridWidth / 2),
                (a = (i - n * this.barCtx.seriesLen) / 2);
            else {
              if (
                ((s = h.globals.gridWidth / this.barCtx.visibleItems),
                h.config.xaxis.convertedCatToNumeric &&
                  (s = h.globals.gridWidth / h.globals.dataPoints),
                (o =
                  ((s / u) * parseInt(this.barCtx.barOptions.columnWidth, 10)) /
                  100),
                h.globals.isXNumeric)
              ) {
                var f = this.barCtx.xRatio;
                h.globals.minXDiff &&
                  h.globals.minXDiff !== 0.5 &&
                  h.globals.minXDiff / f > 0 &&
                  (s = h.globals.minXDiff / f),
                  (o =
                    ((s / u) *
                      parseInt(this.barCtx.barOptions.columnWidth, 10)) /
                    100) < 1 && (o = 1);
              }
              String(this.barCtx.barOptions.columnWidth).indexOf("%") === -1 &&
                (o = parseInt(this.barCtx.barOptions.columnWidth, 10)),
                (l =
                  h.globals.gridHeight -
                  this.barCtx.baseLineY[this.barCtx.translationsIndex] -
                  (this.barCtx.isReversed ? h.globals.gridHeight : 0) +
                  (this.barCtx.isReversed
                    ? 2 * this.barCtx.baseLineY[this.barCtx.translationsIndex]
                    : 0)),
                h.globals.isXNumeric
                  ? (t = this.barCtx.getBarXForNumericXAxis({
                      x: t,
                      j: 0,
                      realIndex: e,
                      barWidth: o,
                    }).x)
                  : (t =
                      h.globals.padHorizontal +
                      _.noExponents(s - o * this.barCtx.seriesLen) / 2);
            }
            return (
              (h.globals.barHeight = n),
              (h.globals.barWidth = o),
              {
                x: t,
                y: a,
                yDivision: i,
                xDivision: s,
                barHeight: n,
                barWidth: o,
                zeroH: l,
                zeroW: c,
              }
            );
          },
        },
        {
          key: "initializeStackedPrevVars",
          value: function (e) {
            e.w.globals.seriesGroups.forEach(function (t) {
              e[t] || (e[t] = {}),
                (e[t].prevY = []),
                (e[t].prevX = []),
                (e[t].prevYF = []),
                (e[t].prevXF = []),
                (e[t].prevYVal = []),
                (e[t].prevXVal = []);
            });
          },
        },
        {
          key: "initializeStackedXYVars",
          value: function (e) {
            e.w.globals.seriesGroups.forEach(function (t) {
              e[t] || (e[t] = {}),
                (e[t].xArrj = []),
                (e[t].xArrjF = []),
                (e[t].xArrjVal = []),
                (e[t].yArrj = []),
                (e[t].yArrjF = []),
                (e[t].yArrjVal = []);
            });
          },
        },
        {
          key: "getPathFillColor",
          value: function (e, t, a, i) {
            var s,
              n,
              o,
              l,
              c = this.w,
              h = this.barCtx.ctx.fill,
              d = null,
              u = this.barCtx.barOptions.distributed ? a : t,
              f = !1;
            return (
              this.barCtx.barOptions.colors.ranges.length > 0 &&
                this.barCtx.barOptions.colors.ranges.map(function (g) {
                  e[t][a] >= g.from &&
                    e[t][a] <= g.to &&
                    ((d = g.color), (f = !0));
                }),
              {
                color: h.fillPath({
                  seriesNumber: this.barCtx.barOptions.distributed ? u : i,
                  dataPointIndex: a,
                  color: d,
                  value: e[t][a],
                  fillConfig:
                    (s = c.config.series[t].data[a]) === null || s === void 0
                      ? void 0
                      : s.fill,
                  fillType:
                    (n = c.config.series[t].data[a]) !== null &&
                    n !== void 0 &&
                    (o = n.fill) !== null &&
                    o !== void 0 &&
                    o.type
                      ? (l = c.config.series[t].data[a]) === null ||
                        l === void 0
                        ? void 0
                        : l.fill.type
                      : Array.isArray(c.config.fill.type)
                      ? c.config.fill.type[i]
                      : c.config.fill.type,
                }),
                useRangeColor: f,
              }
            );
          },
        },
        {
          key: "getStrokeWidth",
          value: function (e, t, a) {
            var i = 0,
              s = this.w;
            return (
              this.barCtx.series[e][t]
                ? (this.barCtx.isNullValue = !1)
                : (this.barCtx.isNullValue = !0),
              s.config.stroke.show &&
                (this.barCtx.isNullValue ||
                  (i = Array.isArray(this.barCtx.strokeWidth)
                    ? this.barCtx.strokeWidth[a]
                    : this.barCtx.strokeWidth)),
              i
            );
          },
        },
        {
          key: "createBorderRadiusArr",
          value: function (e) {
            var t,
              a = this.w,
              i =
                !this.w.config.chart.stacked ||
                a.config.plotOptions.bar.borderRadius <= 0,
              s = e.length,
              n = 0 | ((t = e[0]) === null || t === void 0 ? void 0 : t.length),
              o = Array.from({ length: s }, function () {
                return Array(n).fill(i ? "top" : "none");
              });
            if (i) return o;
            for (var l = 0; l < n; l++) {
              for (var c = [], h = [], d = 0, u = 0; u < s; u++) {
                var f = e[u][l];
                f > 0 ? (c.push(u), d++) : f < 0 && (h.push(u), d++);
              }
              if (c.length > 0 && h.length === 0)
                if (c.length === 1) o[c[0]][l] = "both";
                else {
                  var g,
                    p = c[0],
                    m = c[c.length - 1],
                    x = xa(c);
                  try {
                    for (x.s(); !(g = x.n()).done; ) {
                      var v = g.value;
                      o[v][l] = v === p ? "bottom" : v === m ? "top" : "none";
                    }
                  } catch (F) {
                    x.e(F);
                  } finally {
                    x.f();
                  }
                }
              else if (h.length > 0 && c.length === 0)
                if (h.length === 1) o[h[0]][l] = "both";
                else {
                  var b,
                    k = Math.max.apply(Math, h),
                    y = Math.min.apply(Math, h),
                    C = xa(h);
                  try {
                    for (C.s(); !(b = C.n()).done; ) {
                      var A = b.value;
                      o[A][l] = A === k ? "bottom" : A === y ? "top" : "none";
                    }
                  } catch (F) {
                    C.e(F);
                  } finally {
                    C.f();
                  }
                }
              else if (c.length > 0 && h.length > 0) {
                var S,
                  T = c[c.length - 1],
                  E = xa(c);
                try {
                  for (E.s(); !(S = E.n()).done; ) {
                    var L = S.value;
                    o[L][l] = L === T ? "top" : "none";
                  }
                } catch (F) {
                  E.e(F);
                } finally {
                  E.f();
                }
                var I,
                  M = Math.max.apply(Math, h),
                  O = xa(h);
                try {
                  for (O.s(); !(I = O.n()).done; ) {
                    var N = I.value;
                    o[N][l] = N === M ? "bottom" : "none";
                  }
                } catch (F) {
                  O.e(F);
                } finally {
                  O.f();
                }
              } else d === 1 && (o[c[0] || h[0]][l] = "both");
            }
            return o;
          },
        },
        {
          key: "barBackground",
          value: function (e) {
            var t = e.j,
              a = e.i,
              i = e.x1,
              s = e.x2,
              n = e.y1,
              o = e.y2,
              l = e.elSeries,
              c = this.w,
              h = new H(this.barCtx.ctx),
              d = new Ve(this.barCtx.ctx).getActiveConfigSeriesIndex();
            if (
              this.barCtx.barOptions.colors.backgroundBarColors.length > 0 &&
              d === a
            ) {
              t >= this.barCtx.barOptions.colors.backgroundBarColors.length &&
                (t %= this.barCtx.barOptions.colors.backgroundBarColors.length);
              var u = this.barCtx.barOptions.colors.backgroundBarColors[t],
                f = h.drawRect(
                  i !== void 0 ? i : 0,
                  n !== void 0 ? n : 0,
                  s !== void 0 ? s : c.globals.gridWidth,
                  o !== void 0 ? o : c.globals.gridHeight,
                  this.barCtx.barOptions.colors.backgroundBarRadius,
                  u,
                  this.barCtx.barOptions.colors.backgroundBarOpacity
                );
              l.add(f), f.node.classList.add("apexcharts-backgroundBar");
            }
          },
        },
        {
          key: "getColumnPaths",
          value: function (e) {
            var t,
              a = e.barWidth,
              i = e.barXPosition,
              s = e.y1,
              n = e.y2,
              o = e.strokeWidth,
              l = e.isReversed,
              c = e.series,
              h = e.seriesGroup,
              d = e.realIndex,
              u = e.i,
              f = e.j,
              g = e.w,
              p = new H(this.barCtx.ctx);
            (o = Array.isArray(o) ? o[d] : o) || (o = 0);
            var m = a,
              x = i;
            (t = g.config.series[d].data[f]) !== null &&
              t !== void 0 &&
              t.columnWidthOffset &&
              ((x = i - g.config.series[d].data[f].columnWidthOffset / 2),
              (m = a + g.config.series[d].data[f].columnWidthOffset));
            var v = o / 2,
              b = x + v,
              k = x + m - v,
              y = (c[u][f] >= 0 ? 1 : -1) * (l ? -1 : 1);
            (s += 0.001 - v * y), (n += 0.001 + v * y);
            var C = p.move(b, s),
              A = p.move(b, s),
              S = p.line(k, s);
            if (
              (g.globals.previousPaths.length > 0 &&
                (A = this.barCtx.getPreviousPath(d, f, !1)),
              (C =
                C +
                p.line(b, n) +
                p.line(k, n) +
                S +
                (g.config.plotOptions.bar.borderRadiusApplication ===
                  "around" || this.arrBorderRadius[d][f] === "both"
                  ? " Z"
                  : " z")),
              (A =
                A +
                p.line(b, s) +
                S +
                S +
                S +
                S +
                S +
                p.line(b, s) +
                (g.config.plotOptions.bar.borderRadiusApplication ===
                  "around" || this.arrBorderRadius[d][f] === "both"
                  ? " Z"
                  : " z")),
              this.arrBorderRadius[d][f] !== "none" &&
                (C = p.roundPathCorners(
                  C,
                  g.config.plotOptions.bar.borderRadius
                )),
              g.config.chart.stacked)
            ) {
              var T = this.barCtx;
              (T = this.barCtx[h]).yArrj.push(n - v * y),
                T.yArrjF.push(Math.abs(s - n + o * y)),
                T.yArrjVal.push(this.barCtx.series[u][f]);
            }
            return { pathTo: C, pathFrom: A };
          },
        },
        {
          key: "getBarpaths",
          value: function (e) {
            var t,
              a = e.barYPosition,
              i = e.barHeight,
              s = e.x1,
              n = e.x2,
              o = e.strokeWidth,
              l = e.isReversed,
              c = e.series,
              h = e.seriesGroup,
              d = e.realIndex,
              u = e.i,
              f = e.j,
              g = e.w,
              p = new H(this.barCtx.ctx);
            (o = Array.isArray(o) ? o[d] : o) || (o = 0);
            var m = a,
              x = i;
            (t = g.config.series[d].data[f]) !== null &&
              t !== void 0 &&
              t.barHeightOffset &&
              ((m = a - g.config.series[d].data[f].barHeightOffset / 2),
              (x = i + g.config.series[d].data[f].barHeightOffset));
            var v = o / 2,
              b = m + v,
              k = m + x - v,
              y = (c[u][f] >= 0 ? 1 : -1) * (l ? -1 : 1);
            (s += 0.001 + v * y), (n += 0.001 - v * y);
            var C = p.move(s, b),
              A = p.move(s, b);
            g.globals.previousPaths.length > 0 &&
              (A = this.barCtx.getPreviousPath(d, f, !1));
            var S = p.line(s, k);
            if (
              ((C =
                C +
                p.line(n, b) +
                p.line(n, k) +
                S +
                (g.config.plotOptions.bar.borderRadiusApplication ===
                  "around" || this.arrBorderRadius[d][f] === "both"
                  ? " Z"
                  : " z")),
              (A =
                A +
                p.line(s, b) +
                S +
                S +
                S +
                S +
                S +
                p.line(s, b) +
                (g.config.plotOptions.bar.borderRadiusApplication ===
                  "around" || this.arrBorderRadius[d][f] === "both"
                  ? " Z"
                  : " z")),
              this.arrBorderRadius[d][f] !== "none" &&
                (C = p.roundPathCorners(
                  C,
                  g.config.plotOptions.bar.borderRadius
                )),
              g.config.chart.stacked)
            ) {
              var T = this.barCtx;
              (T = this.barCtx[h]).xArrj.push(n + v * y),
                T.xArrjF.push(Math.abs(s - n - o * y)),
                T.xArrjVal.push(this.barCtx.series[u][f]);
            }
            return { pathTo: C, pathFrom: A };
          },
        },
        {
          key: "checkZeroSeries",
          value: function (e) {
            for (var t = e.series, a = this.w, i = 0; i < t.length; i++) {
              for (
                var s = 0, n = 0;
                n < t[a.globals.maxValsInArrayIndex].length;
                n++
              )
                s += t[i][n];
              s === 0 && this.barCtx.zeroSerieses.push(i);
            }
          },
        },
        {
          key: "getXForValue",
          value: function (e, t) {
            var a =
              !(arguments.length > 2 && arguments[2] !== void 0) || arguments[2]
                ? t
                : null;
            return (
              e != null &&
                (a =
                  t +
                  e / this.barCtx.invertedYRatio -
                  2 *
                    (this.barCtx.isReversed
                      ? e / this.barCtx.invertedYRatio
                      : 0)),
              a
            );
          },
        },
        {
          key: "getYForValue",
          value: function (e, t, a) {
            var i =
              !(arguments.length > 3 && arguments[3] !== void 0) || arguments[3]
                ? t
                : null;
            return (
              e != null &&
                (i =
                  t -
                  e / this.barCtx.yRatio[a] +
                  2 * (this.barCtx.isReversed ? e / this.barCtx.yRatio[a] : 0)),
              i
            );
          },
        },
        {
          key: "getGoalValues",
          value: function (e, t, a, i, s, n) {
            var o = this,
              l = this.w,
              c = [],
              h = function (f, g) {
                var p;
                c.push(
                  (Li(
                    (p = {}),
                    e,
                    e === "x"
                      ? o.getXForValue(f, t, !1)
                      : o.getYForValue(f, a, n, !1)
                  ),
                  Li(p, "attrs", g),
                  p)
                );
              };
            if (
              (l.globals.seriesGoals[i] &&
                l.globals.seriesGoals[i][s] &&
                Array.isArray(l.globals.seriesGoals[i][s]) &&
                l.globals.seriesGoals[i][s].forEach(function (f) {
                  h(f.value, f);
                }),
              this.barCtx.barOptions.isDumbbell && l.globals.seriesRange.length)
            ) {
              var d = this.barCtx.barOptions.dumbbellColors
                  ? this.barCtx.barOptions.dumbbellColors
                  : l.globals.colors,
                u = {
                  strokeHeight: e === "x" ? 0 : l.globals.markers.size[i],
                  strokeWidth: e === "x" ? l.globals.markers.size[i] : 0,
                  strokeDashArray: 0,
                  strokeLineCap: "round",
                  strokeColor: Array.isArray(d[i]) ? d[i][0] : d[i],
                };
              h(l.globals.seriesRangeStart[i][s], u),
                h(
                  l.globals.seriesRangeEnd[i][s],
                  Y(
                    Y({}, u),
                    {},
                    { strokeColor: Array.isArray(d[i]) ? d[i][1] : d[i] }
                  )
                );
            }
            return c;
          },
        },
        {
          key: "drawGoalLine",
          value: function (e) {
            var t = e.barXPosition,
              a = e.barYPosition,
              i = e.goalX,
              s = e.goalY,
              n = e.barWidth,
              o = e.barHeight,
              l = new H(this.barCtx.ctx),
              c = l.group({ className: "apexcharts-bar-goals-groups" });
            c.node.classList.add("apexcharts-element-hidden"),
              this.barCtx.w.globals.delayedElements.push({ el: c.node }),
              c.attr(
                "clip-path",
                "url(#gridRectMarkerMask".concat(
                  this.barCtx.w.globals.cuid,
                  ")"
                )
              );
            var h = null;
            return (
              this.barCtx.isHorizontal
                ? Array.isArray(i) &&
                  i.forEach(function (d) {
                    if (d.x >= -1 && d.x <= l.w.globals.gridWidth + 1) {
                      var u =
                          d.attrs.strokeHeight !== void 0
                            ? d.attrs.strokeHeight
                            : o / 2,
                        f = a + u + o / 2;
                      (h = l.drawLine(
                        d.x,
                        f - 2 * u,
                        d.x,
                        f,
                        d.attrs.strokeColor ? d.attrs.strokeColor : void 0,
                        d.attrs.strokeDashArray,
                        d.attrs.strokeWidth ? d.attrs.strokeWidth : 2,
                        d.attrs.strokeLineCap
                      )),
                        c.add(h);
                    }
                  })
                : Array.isArray(s) &&
                  s.forEach(function (d) {
                    if (d.y >= -1 && d.y <= l.w.globals.gridHeight + 1) {
                      var u =
                          d.attrs.strokeWidth !== void 0
                            ? d.attrs.strokeWidth
                            : n / 2,
                        f = t + u + n / 2;
                      (h = l.drawLine(
                        f - 2 * u,
                        d.y,
                        f,
                        d.y,
                        d.attrs.strokeColor ? d.attrs.strokeColor : void 0,
                        d.attrs.strokeDashArray,
                        d.attrs.strokeHeight ? d.attrs.strokeHeight : 2,
                        d.attrs.strokeLineCap
                      )),
                        c.add(h);
                    }
                  }),
              c
            );
          },
        },
        {
          key: "drawBarShadow",
          value: function (e) {
            var t = e.prevPaths,
              a = e.currPaths,
              i = e.color,
              s = this.w,
              n = t.x,
              o = t.x1,
              l = t.barYPosition,
              c = a.x,
              h = a.x1,
              d = a.barYPosition,
              u = l + a.barHeight,
              f = new H(this.barCtx.ctx),
              g = new _(),
              p =
                f.move(o, u) +
                f.line(n, u) +
                f.line(c, d) +
                f.line(h, d) +
                f.line(o, u) +
                (s.config.plotOptions.bar.borderRadiusApplication ===
                  "around" || this.arrBorderRadius[realIndex][j] === "both"
                  ? " Z"
                  : " z");
            return f.drawPath({
              d: p,
              fill: g.shadeColor(0.5, _.rgb2hex(i)),
              stroke: "none",
              strokeWidth: 0,
              fillOpacity: 1,
              classes: "apexcharts-bar-shadow apexcharts-decoration-element",
            });
          },
        },
        {
          key: "getZeroValueEncounters",
          value: function (e) {
            var t,
              a = e.i,
              i = e.j,
              s = this.w,
              n = 0,
              o = 0;
            return (
              (s.config.plotOptions.bar.horizontal
                ? s.globals.series.map(function (l, c) {
                    return c;
                  })
                : ((t = s.globals.columnSeries) === null || t === void 0
                    ? void 0
                    : t.i.map(function (l) {
                        return l;
                      })) || []
              ).forEach(function (l) {
                var c = s.globals.seriesPercent[l][i];
                c && n++, l < a && c === 0 && o++;
              }),
              { nonZeroColumns: n, zeroEncounters: o }
            );
          },
        },
        {
          key: "getGroupIndex",
          value: function (e) {
            var t = this.w,
              a = t.globals.seriesGroups.findIndex(function (n) {
                return n.indexOf(t.globals.seriesNames[e]) > -1;
              }),
              i = this.barCtx.columnGroupIndices,
              s = i.indexOf(a);
            return (
              s < 0 && (i.push(a), (s = i.length - 1)),
              { groupIndex: a, columnGroupIndex: s }
            );
          },
        },
      ]),
      r
    );
  })(),
  ra = (function () {
    function r(e, t) {
      U(this, r), (this.ctx = e), (this.w = e.w);
      var a = this.w;
      (this.barOptions = a.config.plotOptions.bar),
        (this.isHorizontal = this.barOptions.horizontal),
        (this.strokeWidth = a.config.stroke.width),
        (this.isNullValue = !1),
        (this.isRangeBar = a.globals.seriesRange.length && this.isHorizontal),
        (this.isVerticalGroupedRangeBar =
          !a.globals.isBarHorizontal &&
          a.globals.seriesRange.length &&
          a.config.plotOptions.bar.rangeBarGroupRows),
        (this.isFunnel = this.barOptions.isFunnel),
        (this.xyRatios = t),
        this.xyRatios !== null &&
          ((this.xRatio = t.xRatio),
          (this.yRatio = t.yRatio),
          (this.invertedXRatio = t.invertedXRatio),
          (this.invertedYRatio = t.invertedYRatio),
          (this.baseLineY = t.baseLineY),
          (this.baseLineInvertedY = t.baseLineInvertedY)),
        (this.yaxisIndex = 0),
        (this.translationsIndex = 0),
        (this.seriesLen = 0),
        (this.pathArr = []);
      var i = new Ve(this.ctx);
      (this.lastActiveBarSerieIndex = i.getActiveConfigSeriesIndex("desc", [
        "bar",
        "column",
      ])),
        (this.columnGroupIndices = []);
      var s = i.getBarSeriesIndices(),
        n = new ke(this.ctx);
      (this.stackedSeriesTotals = n.getStackedSeriesTotals(
        this.w.config.series
          .map(function (o, l) {
            return s.indexOf(l) === -1 ? l : -1;
          })
          .filter(function (o) {
            return o !== -1;
          })
      )),
        (this.barHelpers = new Om(this));
    }
    return (
      $(r, [
        {
          key: "draw",
          value: function (e, t) {
            var a = this.w,
              i = new H(this.ctx),
              s = new ke(this.ctx, a);
            (e = s.getLogSeries(e)),
              (this.series = e),
              (this.yRatio = s.getLogYRatios(this.yRatio)),
              this.barHelpers.initVariables(e);
            var n = i.group({
              class: "apexcharts-bar-series apexcharts-plot-series",
            });
            a.config.dataLabels.enabled &&
              this.totalItems > this.barOptions.dataLabels.maxItems &&
              console.warn(
                "WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts"
              );
            for (var o = 0, l = 0; o < e.length; o++, l++) {
              var c,
                h,
                d,
                u,
                f = void 0,
                g = void 0,
                p = [],
                m = [],
                x = a.globals.comboCharts ? t[o] : o,
                v = this.barHelpers.getGroupIndex(x).columnGroupIndex,
                b = i.group({
                  class: "apexcharts-series",
                  rel: o + 1,
                  seriesName: _.escapeString(a.globals.seriesNames[x]),
                  "data:realIndex": x,
                });
              this.ctx.series.addCollapsedClassToSeries(b, x),
                e[o].length > 0 && (this.visibleI = this.visibleI + 1);
              var k = 0,
                y = 0;
              this.yRatio.length > 1 &&
                ((this.yaxisIndex = a.globals.seriesYAxisReverseMap[x]),
                (this.translationsIndex = x));
              var C = this.translationsIndex;
              this.isReversed =
                a.config.yaxis[this.yaxisIndex] &&
                a.config.yaxis[this.yaxisIndex].reversed;
              var A = this.barHelpers.initialPositions(x);
              (g = A.y),
                (k = A.barHeight),
                (h = A.yDivision),
                (u = A.zeroW),
                (f = A.x),
                (y = A.barWidth),
                (c = A.xDivision),
                (d = A.zeroH),
                this.isHorizontal || m.push(f + y / 2);
              var S = i.group({
                class: "apexcharts-datalabels",
                "data:realIndex": x,
              });
              a.globals.delayedElements.push({ el: S.node }),
                S.node.classList.add("apexcharts-element-hidden");
              var T = i.group({ class: "apexcharts-bar-goals-markers" }),
                E = i.group({ class: "apexcharts-bar-shadows" });
              a.globals.delayedElements.push({ el: E.node }),
                E.node.classList.add("apexcharts-element-hidden");
              for (var L = 0; L < e[o].length; L++) {
                var I = this.barHelpers.getStrokeWidth(o, L, x),
                  M = null,
                  O = {
                    indexes: {
                      i: o,
                      j: L,
                      realIndex: x,
                      translationsIndex: C,
                      bc: l,
                    },
                    x: f,
                    y: g,
                    strokeWidth: I,
                    elSeries: b,
                  };
                this.isHorizontal
                  ? ((M = this.drawBarPaths(
                      Y(Y({}, O), {}, { barHeight: k, zeroW: u, yDivision: h })
                    )),
                    (y = this.series[o][L] / this.invertedYRatio))
                  : ((M = this.drawColumnPaths(
                      Y(Y({}, O), {}, { xDivision: c, barWidth: y, zeroH: d })
                    )),
                    (k = this.series[o][L] / this.yRatio[C]));
                var N = this.barHelpers.getPathFillColor(e, o, L, x);
                if (
                  this.isFunnel &&
                  this.barOptions.isFunnel3d &&
                  this.pathArr.length &&
                  L > 0
                ) {
                  var F,
                    D = this.barHelpers.drawBarShadow({
                      color:
                        typeof N.color == "string" &&
                        ((F = N.color) === null || F === void 0
                          ? void 0
                          : F.indexOf("url")) === -1
                          ? N.color
                          : _.hexToRgba(a.globals.colors[o]),
                      prevPaths: this.pathArr[this.pathArr.length - 1],
                      currPaths: M,
                    });
                  E.add(D),
                    a.config.chart.dropShadow.enabled &&
                      new Ee(this.ctx).dropShadow(
                        D,
                        a.config.chart.dropShadow,
                        x
                      );
                }
                this.pathArr.push(M);
                var B = this.barHelpers.drawGoalLine({
                  barXPosition: M.barXPosition,
                  barYPosition: M.barYPosition,
                  goalX: M.goalX,
                  goalY: M.goalY,
                  barHeight: k,
                  barWidth: y,
                });
                B && T.add(B),
                  (g = M.y),
                  (f = M.x),
                  L > 0 && m.push(f + y / 2),
                  p.push(g),
                  this.renderSeries(
                    Y(
                      Y(
                        { realIndex: x, pathFill: N.color },
                        N.useRangeColor ? { lineFill: N.color } : {}
                      ),
                      {},
                      {
                        j: L,
                        i: o,
                        columnGroupIndex: v,
                        pathFrom: M.pathFrom,
                        pathTo: M.pathTo,
                        strokeWidth: I,
                        elSeries: b,
                        x: f,
                        y: g,
                        series: e,
                        barHeight: Math.abs(M.barHeight ? M.barHeight : k),
                        barWidth: Math.abs(M.barWidth ? M.barWidth : y),
                        elDataLabelsWrap: S,
                        elGoalsMarkers: T,
                        elBarShadows: E,
                        visibleSeries: this.visibleI,
                        type: "bar",
                      }
                    )
                  );
              }
              (a.globals.seriesXvalues[x] = m),
                (a.globals.seriesYvalues[x] = p),
                n.add(b);
            }
            return n;
          },
        },
        {
          key: "renderSeries",
          value: function (e) {
            var t = e.realIndex,
              a = e.pathFill,
              i = e.lineFill,
              s = e.j,
              n = e.i,
              o = e.columnGroupIndex,
              l = e.pathFrom,
              c = e.pathTo,
              h = e.strokeWidth,
              d = e.elSeries,
              u = e.x,
              f = e.y,
              g = e.y1,
              p = e.y2,
              m = e.series,
              x = e.barHeight,
              v = e.barWidth,
              b = e.barXPosition,
              k = e.barYPosition,
              y = e.elDataLabelsWrap,
              C = e.elGoalsMarkers,
              A = e.elBarShadows,
              S = e.visibleSeries,
              T = e.type,
              E = e.classes,
              L = this.w,
              I = new H(this.ctx);
            if (!i) {
              var M =
                typeof L.globals.stroke.colors[t] == "function"
                  ? (function (B) {
                      var z,
                        G = L.config.stroke.colors;
                      return Array.isArray(G) &&
                        G.length > 0 &&
                        ((z = G[B]) || (z = ""), typeof z == "function")
                        ? z({
                            value: L.globals.series[B][s],
                            dataPointIndex: s,
                            w: L,
                          })
                        : z;
                    })(t)
                  : L.globals.stroke.colors[t];
              i = this.barOptions.distributed ? L.globals.stroke.colors[s] : M;
            }
            L.config.series[n].data[s] &&
              L.config.series[n].data[s].strokeColor &&
              (i = L.config.series[n].data[s].strokeColor),
              this.isNullValue && (a = "none");
            var O =
                ((s / L.config.chart.animations.animateGradually.delay) *
                  (L.config.chart.animations.speed / L.globals.dataPoints)) /
                2.4,
              N = I.renderPaths({
                i: n,
                j: s,
                realIndex: t,
                pathFrom: l,
                pathTo: c,
                stroke: i,
                strokeWidth: h,
                strokeLineCap: L.config.stroke.lineCap,
                fill: a,
                animationDelay: O,
                initialSpeed: L.config.chart.animations.speed,
                dataChangeSpeed:
                  L.config.chart.animations.dynamicAnimation.speed,
                className: "apexcharts-".concat(T, "-area ").concat(E),
                chartType: T,
              });
            N.attr(
              "clip-path",
              "url(#gridRectBarMask".concat(L.globals.cuid, ")")
            );
            var F = L.config.forecastDataPoints;
            F.count > 0 &&
              s >= L.globals.dataPoints - F.count &&
              (N.node.setAttribute("stroke-dasharray", F.dashArray),
              N.node.setAttribute("stroke-width", F.strokeWidth),
              N.node.setAttribute("fill-opacity", F.fillOpacity)),
              g !== void 0 &&
                p !== void 0 &&
                (N.attr("data-range-y1", g), N.attr("data-range-y2", p)),
              new Ee(this.ctx).setSelectionFilter(N, t, s),
              d.add(N);
            var D = new _m(this).handleBarDataLabels({
              x: u,
              y: f,
              y1: g,
              y2: p,
              i: n,
              j: s,
              series: m,
              realIndex: t,
              columnGroupIndex: o,
              barHeight: x,
              barWidth: v,
              barXPosition: b,
              barYPosition: k,
              renderedPath: N,
              visibleSeries: S,
            });
            return (
              D.dataLabels !== null && y.add(D.dataLabels),
              D.totalDataLabels && y.add(D.totalDataLabels),
              d.add(y),
              C && d.add(C),
              A && d.add(A),
              d
            );
          },
        },
        {
          key: "drawBarPaths",
          value: function (e) {
            var t,
              a = e.indexes,
              i = e.barHeight,
              s = e.strokeWidth,
              n = e.zeroW,
              o = e.x,
              l = e.y,
              c = e.yDivision,
              h = e.elSeries,
              d = this.w,
              u = a.i,
              f = a.j;
            if (d.globals.isXNumeric)
              t =
                (l =
                  (d.globals.seriesX[u][f] - d.globals.minX) /
                    this.invertedXRatio -
                  i) +
                i * this.visibleI;
            else if (d.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
              var g = 0,
                p = 0;
              d.globals.seriesPercent.forEach(function (x, v) {
                x[f] && g++, v < u && x[f] === 0 && p++;
              }),
                g > 0 && (i = (this.seriesLen * i) / g),
                (t = l + i * this.visibleI),
                (t -= i * p);
            } else t = l + i * this.visibleI;
            this.isFunnel &&
              (n -=
                (this.barHelpers.getXForValue(this.series[u][f], n) - n) / 2),
              (o = this.barHelpers.getXForValue(this.series[u][f], n));
            var m = this.barHelpers.getBarpaths({
              barYPosition: t,
              barHeight: i,
              x1: n,
              x2: o,
              strokeWidth: s,
              isReversed: this.isReversed,
              series: this.series,
              realIndex: a.realIndex,
              i: u,
              j: f,
              w: d,
            });
            return (
              d.globals.isXNumeric || (l += c),
              this.barHelpers.barBackground({
                j: f,
                i: u,
                y1: t - i * this.visibleI,
                y2: i * this.seriesLen,
                elSeries: h,
              }),
              {
                pathTo: m.pathTo,
                pathFrom: m.pathFrom,
                x1: n,
                x: o,
                y: l,
                goalX: this.barHelpers.getGoalValues("x", n, null, u, f),
                barYPosition: t,
                barHeight: i,
              }
            );
          },
        },
        {
          key: "drawColumnPaths",
          value: function (e) {
            var t,
              a = e.indexes,
              i = e.x,
              s = e.y,
              n = e.xDivision,
              o = e.barWidth,
              l = e.zeroH,
              c = e.strokeWidth,
              h = e.elSeries,
              d = this.w,
              u = a.realIndex,
              f = a.translationsIndex,
              g = a.i,
              p = a.j,
              m = a.bc;
            if (d.globals.isXNumeric) {
              var x = this.getBarXForNumericXAxis({
                x: i,
                j: p,
                realIndex: u,
                barWidth: o,
              });
              (i = x.x), (t = x.barXPosition);
            } else if (d.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
              var v = this.barHelpers.getZeroValueEncounters({ i: g, j: p }),
                b = v.nonZeroColumns,
                k = v.zeroEncounters;
              b > 0 && (o = (this.seriesLen * o) / b),
                (t = i + o * this.visibleI),
                (t -= o * k);
            } else t = i + o * this.visibleI;
            s = this.barHelpers.getYForValue(this.series[g][p], l, f);
            var y = this.barHelpers.getColumnPaths({
              barXPosition: t,
              barWidth: o,
              y1: l,
              y2: s,
              strokeWidth: c,
              isReversed: this.isReversed,
              series: this.series,
              realIndex: u,
              i: g,
              j: p,
              w: d,
            });
            return (
              d.globals.isXNumeric || (i += n),
              this.barHelpers.barBackground({
                bc: m,
                j: p,
                i: g,
                x1: t - c / 2 - o * this.visibleI,
                x2: o * this.seriesLen + c / 2,
                elSeries: h,
              }),
              {
                pathTo: y.pathTo,
                pathFrom: y.pathFrom,
                x: i,
                y: s,
                goalY: this.barHelpers.getGoalValues("y", null, l, g, p, f),
                barXPosition: t,
                barWidth: o,
              }
            );
          },
        },
        {
          key: "getBarXForNumericXAxis",
          value: function (e) {
            var t = e.x,
              a = e.barWidth,
              i = e.realIndex,
              s = e.j,
              n = this.w,
              o = i;
            return (
              n.globals.seriesX[i].length ||
                (o = n.globals.maxValsInArrayIndex),
              _.isNumber(n.globals.seriesX[o][s]) &&
                (t =
                  (n.globals.seriesX[o][s] - n.globals.minX) / this.xRatio -
                  (a * this.seriesLen) / 2),
              { barXPosition: t + a * this.visibleI, x: t }
            );
          },
        },
        {
          key: "getPreviousPath",
          value: function (e, t) {
            for (
              var a, i = this.w, s = 0;
              s < i.globals.previousPaths.length;
              s++
            ) {
              var n = i.globals.previousPaths[s];
              n.paths &&
                n.paths.length > 0 &&
                parseInt(n.realIndex, 10) === parseInt(e, 10) &&
                i.globals.previousPaths[s].paths[t] !== void 0 &&
                (a = i.globals.previousPaths[s].paths[t].d);
            }
            return a;
          },
        },
      ]),
      r
    );
  })(),
  wo = (function (r) {
    Ua(t, ra);
    var e = Ga(t);
    function t() {
      return U(this, t), e.apply(this, arguments);
    }
    return (
      $(t, [
        {
          key: "draw",
          value: function (a, i) {
            var s = this,
              n = this.w;
            (this.graphics = new H(this.ctx)),
              (this.bar = new ra(this.ctx, this.xyRatios));
            var o = new ke(this.ctx, n);
            (a = o.getLogSeries(a)),
              (this.yRatio = o.getLogYRatios(this.yRatio)),
              this.barHelpers.initVariables(a),
              n.config.chart.stackType === "100%" &&
                (a = n.globals.comboCharts
                  ? i.map(function (g) {
                      return n.globals.seriesPercent[g];
                    })
                  : n.globals.seriesPercent.slice()),
              (this.series = a),
              this.barHelpers.initializeStackedPrevVars(this);
            for (
              var l = this.graphics.group({
                  class: "apexcharts-bar-series apexcharts-plot-series",
                }),
                c = 0,
                h = 0,
                d = function (g, p) {
                  var m = void 0,
                    x = void 0,
                    v = void 0,
                    b = void 0,
                    k = n.globals.comboCharts ? i[g] : g,
                    y = s.barHelpers.getGroupIndex(k),
                    C = y.groupIndex,
                    A = y.columnGroupIndex;
                  s.groupCtx = s[n.globals.seriesGroups[C]];
                  var S = [],
                    T = [],
                    E = 0;
                  s.yRatio.length > 1 &&
                    ((s.yaxisIndex = n.globals.seriesYAxisReverseMap[k][0]),
                    (E = k)),
                    (s.isReversed =
                      n.config.yaxis[s.yaxisIndex] &&
                      n.config.yaxis[s.yaxisIndex].reversed);
                  var L = s.graphics.group({
                    class: "apexcharts-series",
                    seriesName: _.escapeString(n.globals.seriesNames[k]),
                    rel: g + 1,
                    "data:realIndex": k,
                  });
                  s.ctx.series.addCollapsedClassToSeries(L, k);
                  var I = s.graphics.group({
                      class: "apexcharts-datalabels",
                      "data:realIndex": k,
                    }),
                    M = s.graphics.group({
                      class: "apexcharts-bar-goals-markers",
                    }),
                    O = 0,
                    N = 0,
                    F = s.initialPositions(c, h, m, x, v, b, E);
                  (h = F.y),
                    (O = F.barHeight),
                    (x = F.yDivision),
                    (b = F.zeroW),
                    (c = F.x),
                    (N = F.barWidth),
                    (m = F.xDivision),
                    (v = F.zeroH),
                    (n.globals.barHeight = O),
                    (n.globals.barWidth = N),
                    s.barHelpers.initializeStackedXYVars(s),
                    s.groupCtx.prevY.length === 1 &&
                      s.groupCtx.prevY[0].every(function (q) {
                        return isNaN(q);
                      }) &&
                      ((s.groupCtx.prevY[0] = s.groupCtx.prevY[0].map(
                        function () {
                          return v;
                        }
                      )),
                      (s.groupCtx.prevYF[0] = s.groupCtx.prevYF[0].map(
                        function () {
                          return 0;
                        }
                      )));
                  for (var D = 0; D < n.globals.dataPoints; D++) {
                    var B = s.barHelpers.getStrokeWidth(g, D, k),
                      z = {
                        indexes: {
                          i: g,
                          j: D,
                          realIndex: k,
                          translationsIndex: E,
                          bc: p,
                        },
                        strokeWidth: B,
                        x: c,
                        y: h,
                        elSeries: L,
                        columnGroupIndex: A,
                        seriesGroup: n.globals.seriesGroups[C],
                      },
                      G = null;
                    s.isHorizontal
                      ? ((G = s.drawStackedBarPaths(
                          Y(
                            Y({}, z),
                            {},
                            { zeroW: b, barHeight: O, yDivision: x }
                          )
                        )),
                        (N = s.series[g][D] / s.invertedYRatio))
                      : ((G = s.drawStackedColumnPaths(
                          Y(
                            Y({}, z),
                            {},
                            { xDivision: m, barWidth: N, zeroH: v }
                          )
                        )),
                        (O = s.series[g][D] / s.yRatio[E]));
                    var V = s.barHelpers.drawGoalLine({
                      barXPosition: G.barXPosition,
                      barYPosition: G.barYPosition,
                      goalX: G.goalX,
                      goalY: G.goalY,
                      barHeight: O,
                      barWidth: N,
                    });
                    V && M.add(V), (h = G.y), (c = G.x), S.push(c), T.push(h);
                    var Q = s.barHelpers.getPathFillColor(a, g, D, k),
                      Z = "",
                      X = n.globals.isBarHorizontal
                        ? "apexcharts-flip-x"
                        : "apexcharts-flip-y";
                    ((s.barHelpers.arrBorderRadius[k][D] === "bottom" &&
                      n.globals.series[k][D] > 0) ||
                      (s.barHelpers.arrBorderRadius[k][D] === "top" &&
                        n.globals.series[k][D] < 0)) &&
                      (Z = X),
                      (L = s.renderSeries(
                        Y(
                          Y(
                            { realIndex: k, pathFill: Q.color },
                            Q.useRangeColor ? { lineFill: Q.color } : {}
                          ),
                          {},
                          {
                            j: D,
                            i: g,
                            columnGroupIndex: A,
                            pathFrom: G.pathFrom,
                            pathTo: G.pathTo,
                            strokeWidth: B,
                            elSeries: L,
                            x: c,
                            y: h,
                            series: a,
                            barHeight: O,
                            barWidth: N,
                            elDataLabelsWrap: I,
                            elGoalsMarkers: M,
                            type: "bar",
                            visibleSeries: A,
                            classes: Z,
                          }
                        )
                      ));
                  }
                  (n.globals.seriesXvalues[k] = S),
                    (n.globals.seriesYvalues[k] = T),
                    s.groupCtx.prevY.push(s.groupCtx.yArrj),
                    s.groupCtx.prevYF.push(s.groupCtx.yArrjF),
                    s.groupCtx.prevYVal.push(s.groupCtx.yArrjVal),
                    s.groupCtx.prevX.push(s.groupCtx.xArrj),
                    s.groupCtx.prevXF.push(s.groupCtx.xArrjF),
                    s.groupCtx.prevXVal.push(s.groupCtx.xArrjVal),
                    l.add(L);
                },
                u = 0,
                f = 0;
              u < a.length;
              u++, f++
            )
              d(u, f);
            return l;
          },
        },
        {
          key: "initialPositions",
          value: function (a, i, s, n, o, l, c) {
            var h,
              d,
              u = this.w;
            if (this.isHorizontal) {
              n = u.globals.gridHeight / u.globals.dataPoints;
              var f = u.config.plotOptions.bar.barHeight;
              (h =
                String(f).indexOf("%") === -1
                  ? parseInt(f, 10)
                  : (n * parseInt(f, 10)) / 100),
                (l =
                  u.globals.padHorizontal +
                  (this.isReversed
                    ? u.globals.gridWidth - this.baseLineInvertedY
                    : this.baseLineInvertedY)),
                (i = (n - h) / 2);
            } else {
              d = s = u.globals.gridWidth / u.globals.dataPoints;
              var g = u.config.plotOptions.bar.columnWidth;
              u.globals.isXNumeric && u.globals.dataPoints > 1
                ? (d =
                    ((s = u.globals.minXDiff / this.xRatio) *
                      parseInt(this.barOptions.columnWidth, 10)) /
                    100)
                : String(g).indexOf("%") === -1
                ? (d = parseInt(g, 10))
                : (d *= parseInt(g, 10) / 100),
                (o = this.isReversed
                  ? this.baseLineY[c]
                  : u.globals.gridHeight - this.baseLineY[c]),
                (a = u.globals.padHorizontal + (s - d) / 2);
            }
            var p = u.globals.barGroups.length || 1;
            return {
              x: a,
              y: i,
              yDivision: n,
              xDivision: s,
              barHeight: h / p,
              barWidth: d / p,
              zeroH: o,
              zeroW: l,
            };
          },
        },
        {
          key: "drawStackedBarPaths",
          value: function (a) {
            for (
              var i,
                s = a.indexes,
                n = a.barHeight,
                o = a.strokeWidth,
                l = a.zeroW,
                c = a.x,
                h = a.y,
                d = a.columnGroupIndex,
                u = a.seriesGroup,
                f = a.yDivision,
                g = a.elSeries,
                p = this.w,
                m = h + d * n,
                x = s.i,
                v = s.j,
                b = s.realIndex,
                k = s.translationsIndex,
                y = 0,
                C = 0;
              C < this.groupCtx.prevXF.length;
              C++
            )
              y += this.groupCtx.prevXF[C][v];
            var A;
            if ((A = u.indexOf(p.config.series[b].name)) > 0) {
              var S = l;
              this.groupCtx.prevXVal[A - 1][v] < 0
                ? (S =
                    this.series[x][v] >= 0
                      ? this.groupCtx.prevX[A - 1][v] +
                        y -
                        2 * (this.isReversed ? y : 0)
                      : this.groupCtx.prevX[A - 1][v])
                : this.groupCtx.prevXVal[A - 1][v] >= 0 &&
                  (S =
                    this.series[x][v] >= 0
                      ? this.groupCtx.prevX[A - 1][v]
                      : this.groupCtx.prevX[A - 1][v] -
                        y +
                        2 * (this.isReversed ? y : 0)),
                (i = S);
            } else i = l;
            c =
              this.series[x][v] === null
                ? i
                : i +
                  this.series[x][v] / this.invertedYRatio -
                  2 *
                    (this.isReversed
                      ? this.series[x][v] / this.invertedYRatio
                      : 0);
            var T = this.barHelpers.getBarpaths({
              barYPosition: m,
              barHeight: n,
              x1: i,
              x2: c,
              strokeWidth: o,
              isReversed: this.isReversed,
              series: this.series,
              realIndex: s.realIndex,
              seriesGroup: u,
              i: x,
              j: v,
              w: p,
            });
            return (
              this.barHelpers.barBackground({
                j: v,
                i: x,
                y1: m,
                y2: n,
                elSeries: g,
              }),
              (h += f),
              {
                pathTo: T.pathTo,
                pathFrom: T.pathFrom,
                goalX: this.barHelpers.getGoalValues("x", l, null, x, v, k),
                barXPosition: i,
                barYPosition: m,
                x: c,
                y: h,
              }
            );
          },
        },
        {
          key: "drawStackedColumnPaths",
          value: function (a) {
            var i = a.indexes,
              s = a.x,
              n = a.y,
              o = a.xDivision,
              l = a.barWidth,
              c = a.zeroH,
              h = a.columnGroupIndex,
              d = a.seriesGroup,
              u = a.elSeries,
              f = this.w,
              g = i.i,
              p = i.j,
              m = i.bc,
              x = i.realIndex,
              v = i.translationsIndex;
            if (f.globals.isXNumeric) {
              var b = f.globals.seriesX[x][p];
              b || (b = 0),
                (s =
                  (b - f.globals.minX) / this.xRatio -
                  (l / 2) * f.globals.barGroups.length);
            }
            for (
              var k, y = s + h * l, C = 0, A = 0;
              A < this.groupCtx.prevYF.length;
              A++
            )
              C += isNaN(this.groupCtx.prevYF[A][p])
                ? 0
                : this.groupCtx.prevYF[A][p];
            var S = g;
            if (
              (d && (S = d.indexOf(f.globals.seriesNames[x])),
              (S > 0 && !f.globals.isXNumeric) ||
                (S > 0 &&
                  f.globals.isXNumeric &&
                  f.globals.seriesX[x - 1][p] === f.globals.seriesX[x][p]))
            ) {
              var T,
                E,
                L,
                I = Math.min(this.yRatio.length + 1, x + 1);
              if (
                this.groupCtx.prevY[S - 1] !== void 0 &&
                this.groupCtx.prevY[S - 1].length
              )
                for (var M = 1; M < I; M++) {
                  var O;
                  if (
                    !isNaN(
                      (O = this.groupCtx.prevY[S - M]) === null || O === void 0
                        ? void 0
                        : O[p]
                    )
                  ) {
                    L = this.groupCtx.prevY[S - M][p];
                    break;
                  }
                }
              for (var N = 1; N < I; N++) {
                var F, D;
                if (
                  ((F = this.groupCtx.prevYVal[S - N]) === null || F === void 0
                    ? void 0
                    : F[p]) < 0
                ) {
                  E =
                    this.series[g][p] >= 0
                      ? L - C + 2 * (this.isReversed ? C : 0)
                      : L;
                  break;
                }
                if (
                  ((D = this.groupCtx.prevYVal[S - N]) === null || D === void 0
                    ? void 0
                    : D[p]) >= 0
                ) {
                  E =
                    this.series[g][p] >= 0
                      ? L
                      : L + C - 2 * (this.isReversed ? C : 0);
                  break;
                }
              }
              E === void 0 && (E = f.globals.gridHeight),
                (k =
                  (T = this.groupCtx.prevYF[0]) !== null &&
                  T !== void 0 &&
                  T.every(function (z) {
                    return z === 0;
                  }) &&
                  this.groupCtx.prevYF.slice(1, S).every(function (z) {
                    return z.every(function (G) {
                      return isNaN(G);
                    });
                  })
                    ? c
                    : E);
            } else k = c;
            n = this.series[g][p]
              ? k -
                this.series[g][p] / this.yRatio[v] +
                2 * (this.isReversed ? this.series[g][p] / this.yRatio[v] : 0)
              : k;
            var B = this.barHelpers.getColumnPaths({
              barXPosition: y,
              barWidth: l,
              y1: k,
              y2: n,
              yRatio: this.yRatio[v],
              strokeWidth: this.strokeWidth,
              isReversed: this.isReversed,
              series: this.series,
              seriesGroup: d,
              realIndex: i.realIndex,
              i: g,
              j: p,
              w: f,
            });
            return (
              this.barHelpers.barBackground({
                bc: m,
                j: p,
                i: g,
                x1: y,
                x2: l,
                elSeries: u,
              }),
              {
                pathTo: B.pathTo,
                pathFrom: B.pathFrom,
                goalY: this.barHelpers.getGoalValues("y", null, c, g, p),
                barXPosition: y,
                x: f.globals.isXNumeric ? s : s + o,
                y: n,
              }
            );
          },
        },
      ]),
      t
    );
  })(),
  br = (function (r) {
    Ua(t, ra);
    var e = Ga(t);
    function t() {
      return U(this, t), e.apply(this, arguments);
    }
    return (
      $(t, [
        {
          key: "draw",
          value: function (a, i, s) {
            var n = this,
              o = this.w,
              l = new H(this.ctx),
              c = o.globals.comboCharts ? i : o.config.chart.type,
              h = new tt(this.ctx);
            (this.candlestickOptions = this.w.config.plotOptions.candlestick),
              (this.boxOptions = this.w.config.plotOptions.boxPlot),
              (this.isHorizontal = o.config.plotOptions.bar.horizontal);
            var d = new ke(this.ctx, o);
            (a = d.getLogSeries(a)),
              (this.series = a),
              (this.yRatio = d.getLogYRatios(this.yRatio)),
              this.barHelpers.initVariables(a);
            for (
              var u = l.group({
                  class: "apexcharts-".concat(
                    c,
                    "-series apexcharts-plot-series"
                  ),
                }),
                f = function (p) {
                  n.isBoxPlot =
                    o.config.chart.type === "boxPlot" ||
                    o.config.series[p].type === "boxPlot";
                  var m,
                    x,
                    v,
                    b,
                    k = void 0,
                    y = void 0,
                    C = [],
                    A = [],
                    S = o.globals.comboCharts ? s[p] : p,
                    T = n.barHelpers.getGroupIndex(S).columnGroupIndex,
                    E = l.group({
                      class: "apexcharts-series",
                      seriesName: _.escapeString(o.globals.seriesNames[S]),
                      rel: p + 1,
                      "data:realIndex": S,
                    });
                  n.ctx.series.addCollapsedClassToSeries(E, S),
                    a[p].length > 0 && (n.visibleI = n.visibleI + 1);
                  var L,
                    I,
                    M = 0;
                  n.yRatio.length > 1 &&
                    ((n.yaxisIndex = o.globals.seriesYAxisReverseMap[S][0]),
                    (M = S));
                  var O = n.barHelpers.initialPositions(S);
                  (y = O.y),
                    (L = O.barHeight),
                    (x = O.yDivision),
                    (b = O.zeroW),
                    (k = O.x),
                    (I = O.barWidth),
                    (m = O.xDivision),
                    (v = O.zeroH),
                    A.push(k + I / 2);
                  for (
                    var N = l.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": S,
                      }),
                      F = l.group({ class: "apexcharts-bar-goals-markers" }),
                      D = function (z) {
                        var G = n.barHelpers.getStrokeWidth(p, z, S),
                          V = null,
                          Q = {
                            indexes: {
                              i: p,
                              j: z,
                              realIndex: S,
                              translationsIndex: M,
                            },
                            x: k,
                            y,
                            strokeWidth: G,
                            elSeries: E,
                          };
                        (V = n.isHorizontal
                          ? n.drawHorizontalBoxPaths(
                              Y(
                                Y({}, Q),
                                {},
                                { yDivision: x, barHeight: L, zeroW: b }
                              )
                            )
                          : n.drawVerticalBoxPaths(
                              Y(
                                Y({}, Q),
                                {},
                                { xDivision: m, barWidth: I, zeroH: v }
                              )
                            )),
                          (y = V.y),
                          (k = V.x);
                        var Z = n.barHelpers.drawGoalLine({
                          barXPosition: V.barXPosition,
                          barYPosition: V.barYPosition,
                          goalX: V.goalX,
                          goalY: V.goalY,
                          barHeight: L,
                          barWidth: I,
                        });
                        Z && F.add(Z),
                          z > 0 && A.push(k + I / 2),
                          C.push(y),
                          V.pathTo.forEach(function (X, q) {
                            var J =
                                !n.isBoxPlot &&
                                n.candlestickOptions.wick.useFillColor
                                  ? V.color[q]
                                  : o.globals.stroke.colors[p],
                              te = h.fillPath({
                                seriesNumber: S,
                                dataPointIndex: z,
                                color: V.color[q],
                                value: a[p][z],
                              });
                            n.renderSeries({
                              realIndex: S,
                              pathFill: te,
                              lineFill: J,
                              j: z,
                              i: p,
                              pathFrom: V.pathFrom,
                              pathTo: X,
                              strokeWidth: G,
                              elSeries: E,
                              x: k,
                              y,
                              series: a,
                              columnGroupIndex: T,
                              barHeight: L,
                              barWidth: I,
                              elDataLabelsWrap: N,
                              elGoalsMarkers: F,
                              visibleSeries: n.visibleI,
                              type: o.config.chart.type,
                            });
                          });
                      },
                      B = 0;
                    B < o.globals.dataPoints;
                    B++
                  )
                    D(B);
                  (o.globals.seriesXvalues[S] = A),
                    (o.globals.seriesYvalues[S] = C),
                    u.add(E);
                },
                g = 0;
              g < a.length;
              g++
            )
              f(g);
            return u;
          },
        },
        {
          key: "drawVerticalBoxPaths",
          value: function (a) {
            var i = a.indexes,
              s = a.x;
            a.y;
            var n = a.xDivision,
              o = a.barWidth,
              l = a.zeroH,
              c = a.strokeWidth,
              h = this.w,
              d = new H(this.ctx),
              u = i.i,
              f = i.j,
              g = h.config.plotOptions.candlestick.colors,
              p = this.boxOptions.colors,
              m = i.realIndex,
              x = function (N) {
                return Array.isArray(N) ? N[m] : N;
              },
              v = x(g.upward),
              b = x(g.downward),
              k = this.yRatio[i.translationsIndex],
              y = this.getOHLCValue(m, f),
              C = l,
              A = l,
              S = y.o < y.c ? [v] : [b];
            this.isBoxPlot && (S = [x(p.lower), x(p.upper)]);
            var T = Math.min(y.o, y.c),
              E = Math.max(y.o, y.c),
              L = y.m;
            h.globals.isXNumeric &&
              (s =
                (h.globals.seriesX[m][f] - h.globals.minX) / this.xRatio -
                o / 2);
            var I = s + o * this.visibleI;
            this.series[u][f] === void 0 || this.series[u][f] === null
              ? ((T = l), (E = l))
              : ((T = l - T / k),
                (E = l - E / k),
                (C = l - y.h / k),
                (A = l - y.l / k),
                (L = l - y.m / k));
            var M = d.move(I, l),
              O = d.move(I + o / 2, T);
            return (
              h.globals.previousPaths.length > 0 &&
                (O = this.getPreviousPath(m, f, !0)),
              (M = this.isBoxPlot
                ? [
                    d.move(I, T) +
                      d.line(I + o / 2, T) +
                      d.line(I + o / 2, C) +
                      d.line(I + o / 4, C) +
                      d.line(I + o - o / 4, C) +
                      d.line(I + o / 2, C) +
                      d.line(I + o / 2, T) +
                      d.line(I + o, T) +
                      d.line(I + o, L) +
                      d.line(I, L) +
                      d.line(I, T + c / 2),
                    d.move(I, L) +
                      d.line(I + o, L) +
                      d.line(I + o, E) +
                      d.line(I + o / 2, E) +
                      d.line(I + o / 2, A) +
                      d.line(I + o - o / 4, A) +
                      d.line(I + o / 4, A) +
                      d.line(I + o / 2, A) +
                      d.line(I + o / 2, E) +
                      d.line(I, E) +
                      d.line(I, L) +
                      "z",
                  ]
                : [
                    d.move(I, E) +
                      d.line(I + o / 2, E) +
                      d.line(I + o / 2, C) +
                      d.line(I + o / 2, E) +
                      d.line(I + o, E) +
                      d.line(I + o, T) +
                      d.line(I + o / 2, T) +
                      d.line(I + o / 2, A) +
                      d.line(I + o / 2, T) +
                      d.line(I, T) +
                      d.line(I, E - c / 2),
                  ]),
              (O += d.move(I, T)),
              h.globals.isXNumeric || (s += n),
              {
                pathTo: M,
                pathFrom: O,
                x: s,
                y: E,
                goalY: this.barHelpers.getGoalValues(
                  "y",
                  null,
                  l,
                  u,
                  f,
                  i.translationsIndex
                ),
                barXPosition: I,
                color: S,
              }
            );
          },
        },
        {
          key: "drawHorizontalBoxPaths",
          value: function (a) {
            var i = a.indexes;
            a.x;
            var s = a.y,
              n = a.yDivision,
              o = a.barHeight,
              l = a.zeroW,
              c = a.strokeWidth,
              h = this.w,
              d = new H(this.ctx),
              u = i.i,
              f = i.j,
              g = this.boxOptions.colors.lower;
            this.isBoxPlot &&
              (g = [
                this.boxOptions.colors.lower,
                this.boxOptions.colors.upper,
              ]);
            var p = this.invertedYRatio,
              m = i.realIndex,
              x = this.getOHLCValue(m, f),
              v = l,
              b = l,
              k = Math.min(x.o, x.c),
              y = Math.max(x.o, x.c),
              C = x.m;
            h.globals.isXNumeric &&
              (s =
                (h.globals.seriesX[m][f] - h.globals.minX) /
                  this.invertedXRatio -
                o / 2);
            var A = s + o * this.visibleI;
            this.series[u][f] === void 0 || this.series[u][f] === null
              ? ((k = l), (y = l))
              : ((k = l + k / p),
                (y = l + y / p),
                (v = l + x.h / p),
                (b = l + x.l / p),
                (C = l + x.m / p));
            var S = d.move(l, A),
              T = d.move(k, A + o / 2);
            return (
              h.globals.previousPaths.length > 0 &&
                (T = this.getPreviousPath(m, f, !0)),
              (S = [
                d.move(k, A) +
                  d.line(k, A + o / 2) +
                  d.line(v, A + o / 2) +
                  d.line(v, A + o / 2 - o / 4) +
                  d.line(v, A + o / 2 + o / 4) +
                  d.line(v, A + o / 2) +
                  d.line(k, A + o / 2) +
                  d.line(k, A + o) +
                  d.line(C, A + o) +
                  d.line(C, A) +
                  d.line(k + c / 2, A),
                d.move(C, A) +
                  d.line(C, A + o) +
                  d.line(y, A + o) +
                  d.line(y, A + o / 2) +
                  d.line(b, A + o / 2) +
                  d.line(b, A + o - o / 4) +
                  d.line(b, A + o / 4) +
                  d.line(b, A + o / 2) +
                  d.line(y, A + o / 2) +
                  d.line(y, A) +
                  d.line(C, A) +
                  "z",
              ]),
              (T += d.move(k, A)),
              h.globals.isXNumeric || (s += n),
              {
                pathTo: S,
                pathFrom: T,
                x: y,
                y: s,
                goalX: this.barHelpers.getGoalValues("x", l, null, u, f),
                barYPosition: A,
                color: g,
              }
            );
          },
        },
        {
          key: "getOHLCValue",
          value: function (a, i) {
            var s = this.w,
              n = new ke(this.ctx, s),
              o = n.getLogValAtSeriesIndex(s.globals.seriesCandleH[a][i], a),
              l = n.getLogValAtSeriesIndex(s.globals.seriesCandleO[a][i], a),
              c = n.getLogValAtSeriesIndex(s.globals.seriesCandleM[a][i], a),
              h = n.getLogValAtSeriesIndex(s.globals.seriesCandleC[a][i], a),
              d = n.getLogValAtSeriesIndex(s.globals.seriesCandleL[a][i], a);
            return {
              o: this.isBoxPlot ? o : l,
              h: this.isBoxPlot ? l : o,
              m: c,
              l: this.isBoxPlot ? h : d,
              c: this.isBoxPlot ? d : h,
            };
          },
        },
      ]),
      t
    );
  })(),
  $c = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "checkColorRange",
          value: function () {
            var e = this.w,
              t = !1,
              a = e.config.plotOptions[e.config.chart.type];
            return (
              a.colorScale.ranges.length > 0 &&
                a.colorScale.ranges.map(function (i, s) {
                  i.from <= 0 && (t = !0);
                }),
              t
            );
          },
        },
        {
          key: "getShadeColor",
          value: function (e, t, a, i) {
            var s = this.w,
              n = 1,
              o = s.config.plotOptions[e].shadeIntensity,
              l = this.determineColor(e, t, a);
            s.globals.hasNegs || i
              ? (n = s.config.plotOptions[e].reverseNegativeShade
                  ? l.percent < 0
                    ? (l.percent / 100) * (1.25 * o)
                    : (1 - l.percent / 100) * (1.25 * o)
                  : l.percent <= 0
                  ? 1 - (1 + l.percent / 100) * o
                  : (1 - l.percent / 100) * o)
              : ((n = 1 - l.percent / 100),
                e === "treemap" && (n = (1 - l.percent / 100) * (1.25 * o)));
            var c = l.color,
              h = new _();
            if (s.config.plotOptions[e].enableShades)
              if (this.w.config.theme.mode === "dark") {
                var d = h.shadeColor(-1 * n, l.color);
                c = _.hexToRgba(
                  _.isColorHex(d) ? d : _.rgb2hex(d),
                  s.config.fill.opacity
                );
              } else {
                var u = h.shadeColor(n, l.color);
                c = _.hexToRgba(
                  _.isColorHex(u) ? u : _.rgb2hex(u),
                  s.config.fill.opacity
                );
              }
            return { color: c, colorProps: l };
          },
        },
        {
          key: "determineColor",
          value: function (e, t, a) {
            var i = this.w,
              s = i.globals.series[t][a],
              n = i.config.plotOptions[e],
              o = n.colorScale.inverse ? a : t;
            n.distributed && i.config.chart.type === "treemap" && (o = a);
            var l = i.globals.colors[o],
              c = null,
              h = Math.min.apply(Math, Pe(i.globals.series[t])),
              d = Math.max.apply(Math, Pe(i.globals.series[t]));
            n.distributed ||
              e !== "heatmap" ||
              ((h = i.globals.minY), (d = i.globals.maxY)),
              n.colorScale.min !== void 0 &&
                ((h =
                  n.colorScale.min < i.globals.minY
                    ? n.colorScale.min
                    : i.globals.minY),
                (d =
                  n.colorScale.max > i.globals.maxY
                    ? n.colorScale.max
                    : i.globals.maxY));
            var u = Math.abs(d) + Math.abs(h),
              f = (100 * s) / (u === 0 ? u - 1e-6 : u);
            return (
              n.colorScale.ranges.length > 0 &&
                n.colorScale.ranges.map(function (g, p) {
                  if (s >= g.from && s <= g.to) {
                    (l = g.color),
                      (c = g.foreColor ? g.foreColor : null),
                      (h = g.from),
                      (d = g.to);
                    var m = Math.abs(d) + Math.abs(h);
                    f = (100 * s) / (m === 0 ? m - 1e-6 : m);
                  }
                }),
              { color: l, foreColor: c, percent: f }
            );
          },
        },
        {
          key: "calculateDataLabels",
          value: function (e) {
            var t = e.text,
              a = e.x,
              i = e.y,
              s = e.i,
              n = e.j,
              o = e.colorProps,
              l = e.fontSize,
              c = this.w.config.dataLabels,
              h = new H(this.ctx),
              d = new ia(this.ctx),
              u = null;
            if (c.enabled) {
              u = h.group({ class: "apexcharts-data-labels" });
              var f = c.offsetX,
                g = c.offsetY,
                p = a + f,
                m = i + parseFloat(c.style.fontSize) / 3 + g;
              d.plotDataLabelsText({
                x: p,
                y: m,
                text: t,
                i: s,
                j: n,
                color: o.foreColor,
                parent: u,
                fontSize: l,
                dataLabelsConfig: c,
              });
            }
            return u;
          },
        },
        {
          key: "addListeners",
          value: function (e) {
            var t = new H(this.ctx);
            e.node.addEventListener(
              "mouseenter",
              t.pathMouseEnter.bind(this, e)
            ),
              e.node.addEventListener(
                "mouseleave",
                t.pathMouseLeave.bind(this, e)
              ),
              e.node.addEventListener(
                "mousedown",
                t.pathMouseDown.bind(this, e)
              );
          },
        },
      ]),
      r
    );
  })(),
  Nm = (function () {
    function r(e, t) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.xRatio = t.xRatio),
        (this.yRatio = t.yRatio),
        (this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation),
        (this.helpers = new $c(e)),
        (this.rectRadius = this.w.config.plotOptions.heatmap.radius),
        (this.strokeWidth = this.w.config.stroke.show
          ? this.w.config.stroke.width
          : 0);
    }
    return (
      $(r, [
        {
          key: "draw",
          value: function (e) {
            var t = this.w,
              a = new H(this.ctx),
              i = a.group({ class: "apexcharts-heatmap" });
            i.attr(
              "clip-path",
              "url(#gridRectMask".concat(t.globals.cuid, ")")
            );
            var s = t.globals.gridWidth / t.globals.dataPoints,
              n = t.globals.gridHeight / t.globals.series.length,
              o = 0,
              l = !1;
            this.negRange = this.helpers.checkColorRange();
            var c = e.slice();
            t.config.yaxis[0].reversed && ((l = !0), c.reverse());
            for (
              var h = l ? 0 : c.length - 1;
              l ? h < c.length : h >= 0;
              l ? h++ : h--
            ) {
              var d = a.group({
                class: "apexcharts-series apexcharts-heatmap-series",
                seriesName: _.escapeString(t.globals.seriesNames[h]),
                rel: h + 1,
                "data:realIndex": h,
              });
              if (
                (this.ctx.series.addCollapsedClassToSeries(d, h),
                t.config.chart.dropShadow.enabled)
              ) {
                var u = t.config.chart.dropShadow;
                new Ee(this.ctx).dropShadow(d, u, h);
              }
              for (
                var f = 0,
                  g = t.config.plotOptions.heatmap.shadeIntensity,
                  p = 0,
                  m = 0;
                m < t.globals.dataPoints;
                m++
              )
                if (
                  t.globals.seriesX.length &&
                  !t.globals.allSeriesHasEqualX &&
                  t.globals.minX + t.globals.minXDiff * m <
                    t.globals.seriesX[h][p]
                )
                  f += s;
                else {
                  if (p >= c[h].length) break;
                  var x = this.helpers.getShadeColor(
                      t.config.chart.type,
                      h,
                      p,
                      this.negRange
                    ),
                    v = x.color,
                    b = x.colorProps;
                  t.config.fill.type === "image" &&
                    (v = new tt(this.ctx).fillPath({
                      seriesNumber: h,
                      dataPointIndex: p,
                      opacity: t.globals.hasNegs
                        ? b.percent < 0
                          ? 1 - (1 + b.percent / 100)
                          : g + b.percent / 100
                        : b.percent / 100,
                      patternID: _.randomId(),
                      width: t.config.fill.image.width
                        ? t.config.fill.image.width
                        : s,
                      height: t.config.fill.image.height
                        ? t.config.fill.image.height
                        : n,
                    }));
                  var k = this.rectRadius,
                    y = a.drawRect(f, o, s, n, k);
                  if (
                    (y.attr({ cx: f, cy: o }),
                    y.node.classList.add("apexcharts-heatmap-rect"),
                    d.add(y),
                    y.attr({
                      fill: v,
                      i: h,
                      index: h,
                      j: p,
                      val: e[h][p],
                      "stroke-width": this.strokeWidth,
                      stroke: t.config.plotOptions.heatmap.useFillColorAsStroke
                        ? v
                        : t.globals.stroke.colors[0],
                      color: v,
                    }),
                    this.helpers.addListeners(y),
                    t.config.chart.animations.enabled && !t.globals.dataChanged)
                  ) {
                    var C = 1;
                    t.globals.resized || (C = t.config.chart.animations.speed),
                      this.animateHeatMap(y, f, o, s, n, C);
                  }
                  if (t.globals.dataChanged) {
                    var A = 1;
                    if (this.dynamicAnim.enabled && t.globals.shouldAnimate) {
                      A = this.dynamicAnim.speed;
                      var S =
                        t.globals.previousPaths[h] &&
                        t.globals.previousPaths[h][p] &&
                        t.globals.previousPaths[h][p].color;
                      S || (S = "rgba(255, 255, 255, 0)"),
                        this.animateHeatColor(
                          y,
                          _.isColorHex(S) ? S : _.rgb2hex(S),
                          _.isColorHex(v) ? v : _.rgb2hex(v),
                          A
                        );
                    }
                  }
                  var T = (0, t.config.dataLabels.formatter)(
                      t.globals.series[h][p],
                      {
                        value: t.globals.series[h][p],
                        seriesIndex: h,
                        dataPointIndex: p,
                        w: t,
                      }
                    ),
                    E = this.helpers.calculateDataLabels({
                      text: T,
                      x: f + s / 2,
                      y: o + n / 2,
                      i: h,
                      j: p,
                      colorProps: b,
                      series: c,
                    });
                  E !== null && d.add(E), (f += s), p++;
                }
              (o += n), i.add(d);
            }
            var L = t.globals.yAxisScale[0].result.slice();
            return (
              t.config.yaxis[0].reversed ? L.unshift("") : L.push(""),
              (t.globals.yAxisScale[0].result = L),
              i
            );
          },
        },
        {
          key: "animateHeatMap",
          value: function (e, t, a, i, s, n) {
            var o = new oa(this.ctx);
            o.animateRect(
              e,
              { x: t + i / 2, y: a + s / 2, width: 0, height: 0 },
              { x: t, y: a, width: i, height: s },
              n,
              function () {
                o.animationCompleted(e);
              }
            );
          },
        },
        {
          key: "animateHeatColor",
          value: function (e, t, a, i) {
            e.attr({ fill: t }).animate(i).attr({ fill: a });
          },
        },
      ]),
      r
    );
  })(),
  qc = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "drawYAxisTexts",
          value: function (e, t, a, i) {
            var s = this.w,
              n = s.config.yaxis[0],
              o = s.globals.yLabelFormatters[0];
            return new H(this.ctx).drawText({
              x: e + n.labels.offsetX,
              y: t + n.labels.offsetY,
              text: o(i, a),
              textAnchor: "middle",
              fontSize: n.labels.style.fontSize,
              fontFamily: n.labels.style.fontFamily,
              foreColor: Array.isArray(n.labels.style.colors)
                ? n.labels.style.colors[a]
                : n.labels.style.colors,
            });
          },
        },
      ]),
      r
    );
  })(),
  Zc = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
      var t = this.w;
      (this.chartType = this.w.config.chart.type),
        (this.initialAnim = this.w.config.chart.animations.enabled),
        (this.dynamicAnim =
          this.initialAnim &&
          this.w.config.chart.animations.dynamicAnimation.enabled),
        (this.animBeginArr = [0]),
        (this.animDur = 0),
        (this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels),
        (this.lineColorArr =
          t.globals.stroke.colors !== void 0
            ? t.globals.stroke.colors
            : t.globals.colors),
        (this.defaultSize = Math.min(
          t.globals.gridWidth,
          t.globals.gridHeight
        )),
        (this.centerY = this.defaultSize / 2),
        (this.centerX = t.globals.gridWidth / 2),
        t.config.chart.type === "radialBar"
          ? (this.fullAngle = 360)
          : (this.fullAngle = Math.abs(
              t.config.plotOptions.pie.endAngle -
                t.config.plotOptions.pie.startAngle
            )),
        (this.initialAngle =
          t.config.plotOptions.pie.startAngle % this.fullAngle),
        (t.globals.radialSize =
          this.defaultSize / 2.05 -
          t.config.stroke.width -
          (t.config.chart.sparkline.enabled
            ? 0
            : t.config.chart.dropShadow.blur)),
        (this.donutSize =
          (t.globals.radialSize *
            parseInt(t.config.plotOptions.pie.donut.size, 10)) /
          100);
      var a = t.config.plotOptions.pie.customScale,
        i = t.globals.gridWidth / 2,
        s = t.globals.gridHeight / 2;
      (this.translateX = i - i * a),
        (this.translateY = s - s * a),
        (this.dataLabelsGroup = new H(this.ctx).group({
          class: "apexcharts-datalabels-group",
          transform: "translate("
            .concat(this.translateX, ", ")
            .concat(this.translateY, ") scale(")
            .concat(a, ")"),
        })),
        (this.maxY = 0),
        (this.sliceLabels = []),
        (this.sliceSizes = []),
        (this.prevSectorAngleArr = []);
    }
    return (
      $(r, [
        {
          key: "draw",
          value: function (e) {
            var t = this,
              a = this.w,
              i = new H(this.ctx),
              s = i.group({ class: "apexcharts-pie" });
            if (a.globals.noData) return s;
            for (var n = 0, o = 0; o < e.length; o++) n += _.negToZero(e[o]);
            var l = [],
              c = i.group();
            n === 0 && (n = 1e-5),
              e.forEach(function (b) {
                t.maxY = Math.max(t.maxY, b);
              }),
              a.config.yaxis[0].max && (this.maxY = a.config.yaxis[0].max),
              a.config.grid.position === "back" &&
                this.chartType === "polarArea" &&
                this.drawPolarElements(s);
            for (var h = 0; h < e.length; h++) {
              var d = (this.fullAngle * _.negToZero(e[h])) / n;
              l.push(d),
                this.chartType === "polarArea"
                  ? ((l[h] = this.fullAngle / e.length),
                    this.sliceSizes.push(
                      (a.globals.radialSize * e[h]) / this.maxY
                    ))
                  : this.sliceSizes.push(a.globals.radialSize);
            }
            if (a.globals.dataChanged) {
              for (var u, f = 0, g = 0; g < a.globals.previousPaths.length; g++)
                f += _.negToZero(a.globals.previousPaths[g]);
              for (var p = 0; p < a.globals.previousPaths.length; p++)
                (u =
                  (this.fullAngle * _.negToZero(a.globals.previousPaths[p])) /
                  f),
                  this.prevSectorAngleArr.push(u);
            }
            if (
              (this.donutSize < 0 && (this.donutSize = 0),
              this.chartType === "donut")
            ) {
              var m = i.drawCircle(this.donutSize);
              m.attr({
                cx: this.centerX,
                cy: this.centerY,
                fill: a.config.plotOptions.pie.donut.background
                  ? a.config.plotOptions.pie.donut.background
                  : "transparent",
              }),
                c.add(m);
            }
            var x = this.drawArcs(l, e);
            if (
              (this.sliceLabels.forEach(function (b) {
                x.add(b);
              }),
              c.attr({
                transform: "translate("
                  .concat(this.translateX, ", ")
                  .concat(this.translateY, ") scale(")
                  .concat(a.config.plotOptions.pie.customScale, ")"),
              }),
              c.add(x),
              s.add(c),
              this.donutDataLabels.show)
            ) {
              var v = this.renderInnerDataLabels(
                this.dataLabelsGroup,
                this.donutDataLabels,
                {
                  hollowSize: this.donutSize,
                  centerX: this.centerX,
                  centerY: this.centerY,
                  opacity: this.donutDataLabels.show,
                }
              );
              s.add(v);
            }
            return (
              a.config.grid.position === "front" &&
                this.chartType === "polarArea" &&
                this.drawPolarElements(s),
              s
            );
          },
        },
        {
          key: "drawArcs",
          value: function (e, t) {
            var a = this.w,
              i = new Ee(this.ctx),
              s = new H(this.ctx),
              n = new tt(this.ctx),
              o = s.group({ class: "apexcharts-slices" }),
              l = this.initialAngle,
              c = this.initialAngle,
              h = this.initialAngle,
              d = this.initialAngle;
            this.strokeWidth = a.config.stroke.show ? a.config.stroke.width : 0;
            for (var u = 0; u < e.length; u++) {
              var f = s.group({
                class: "apexcharts-series apexcharts-pie-series",
                seriesName: _.escapeString(a.globals.seriesNames[u]),
                rel: u + 1,
                "data:realIndex": u,
              });
              o.add(f),
                (c = d),
                (h = (l = h) + e[u]),
                (d = c + this.prevSectorAngleArr[u]);
              var g = h < l ? this.fullAngle + h - l : h - l,
                p = n.fillPath({
                  seriesNumber: u,
                  size: this.sliceSizes[u],
                  value: t[u],
                }),
                m = this.getChangedPath(c, d),
                x = s.drawPath({
                  d: m,
                  stroke: Array.isArray(this.lineColorArr)
                    ? this.lineColorArr[u]
                    : this.lineColorArr,
                  strokeWidth: 0,
                  fill: p,
                  fillOpacity: a.config.fill.opacity,
                  classes: "apexcharts-pie-area apexcharts-"
                    .concat(this.chartType.toLowerCase(), "-slice-")
                    .concat(u),
                });
              if (
                (x.attr({ index: 0, j: u }),
                i.setSelectionFilter(x, 0, u),
                a.config.chart.dropShadow.enabled)
              ) {
                var v = a.config.chart.dropShadow;
                i.dropShadow(x, v, u);
              }
              this.addListeners(x, this.donutDataLabels),
                H.setAttrs(x.node, {
                  "data:angle": g,
                  "data:startAngle": l,
                  "data:strokeWidth": this.strokeWidth,
                  "data:value": t[u],
                });
              var b = { x: 0, y: 0 };
              this.chartType === "pie" || this.chartType === "polarArea"
                ? (b = _.polarToCartesian(
                    this.centerX,
                    this.centerY,
                    a.globals.radialSize / 1.25 +
                      a.config.plotOptions.pie.dataLabels.offset,
                    (l + g / 2) % this.fullAngle
                  ))
                : this.chartType === "donut" &&
                  (b = _.polarToCartesian(
                    this.centerX,
                    this.centerY,
                    (a.globals.radialSize + this.donutSize) / 2 +
                      a.config.plotOptions.pie.dataLabels.offset,
                    (l + g / 2) % this.fullAngle
                  )),
                f.add(x);
              var k = 0;
              if (
                (!this.initialAnim || a.globals.resized || a.globals.dataChanged
                  ? this.animBeginArr.push(0)
                  : ((k =
                      (g / this.fullAngle) *
                      a.config.chart.animations.speed) === 0 && (k = 1),
                    (this.animDur = k + this.animDur),
                    this.animBeginArr.push(this.animDur)),
                this.dynamicAnim && a.globals.dataChanged
                  ? this.animatePaths(x, {
                      size: this.sliceSizes[u],
                      endAngle: h,
                      startAngle: l,
                      prevStartAngle: c,
                      prevEndAngle: d,
                      animateStartingPos: !0,
                      i: u,
                      animBeginArr: this.animBeginArr,
                      shouldSetPrevPaths: !0,
                      dur: a.config.chart.animations.dynamicAnimation.speed,
                    })
                  : this.animatePaths(x, {
                      size: this.sliceSizes[u],
                      endAngle: h,
                      startAngle: l,
                      i: u,
                      totalItems: e.length - 1,
                      animBeginArr: this.animBeginArr,
                      dur: k,
                    }),
                a.config.plotOptions.pie.expandOnClick &&
                  this.chartType !== "polarArea" &&
                  x.node.addEventListener(
                    "mouseup",
                    this.pieClicked.bind(this, u)
                  ),
                a.globals.selectedDataPoints[0] !== void 0 &&
                  a.globals.selectedDataPoints[0].indexOf(u) > -1 &&
                  this.pieClicked(u),
                a.config.dataLabels.enabled)
              ) {
                var y = b.x,
                  C = b.y,
                  A = (100 * g) / this.fullAngle + "%";
                if (
                  g !== 0 &&
                  a.config.plotOptions.pie.dataLabels.minAngleToShowLabel < e[u]
                ) {
                  var S = a.config.dataLabels.formatter;
                  S !== void 0 &&
                    (A = S(a.globals.seriesPercent[u][0], {
                      seriesIndex: u,
                      w: a,
                    }));
                  var T = a.globals.dataLabels.style.colors[u],
                    E = s.group({ class: "apexcharts-datalabels" }),
                    L = s.drawText({
                      x: y,
                      y: C,
                      text: A,
                      textAnchor: "middle",
                      fontSize: a.config.dataLabels.style.fontSize,
                      fontFamily: a.config.dataLabels.style.fontFamily,
                      fontWeight: a.config.dataLabels.style.fontWeight,
                      foreColor: T,
                    });
                  if ((E.add(L), a.config.dataLabels.dropShadow.enabled)) {
                    var I = a.config.dataLabels.dropShadow;
                    i.dropShadow(L, I);
                  }
                  L.node.classList.add("apexcharts-pie-label"),
                    a.config.chart.animations.animate &&
                      a.globals.resized === !1 &&
                      (L.node.classList.add("apexcharts-pie-label-delay"),
                      (L.node.style.animationDelay =
                        a.config.chart.animations.speed / 940 + "s")),
                    this.sliceLabels.push(E);
                }
              }
            }
            return o;
          },
        },
        {
          key: "addListeners",
          value: function (e, t) {
            var a = new H(this.ctx);
            e.node.addEventListener(
              "mouseenter",
              a.pathMouseEnter.bind(this, e)
            ),
              e.node.addEventListener(
                "mouseleave",
                a.pathMouseLeave.bind(this, e)
              ),
              e.node.addEventListener(
                "mouseleave",
                this.revertDataLabelsInner.bind(this, e.node, t)
              ),
              e.node.addEventListener(
                "mousedown",
                a.pathMouseDown.bind(this, e)
              ),
              this.donutDataLabels.total.showAlways ||
                (e.node.addEventListener(
                  "mouseenter",
                  this.printDataLabelsInner.bind(this, e.node, t)
                ),
                e.node.addEventListener(
                  "mousedown",
                  this.printDataLabelsInner.bind(this, e.node, t)
                ));
          },
        },
        {
          key: "animatePaths",
          value: function (e, t) {
            var a = this.w,
              i =
                t.endAngle < t.startAngle
                  ? this.fullAngle + t.endAngle - t.startAngle
                  : t.endAngle - t.startAngle,
              s = i,
              n = t.startAngle,
              o = t.startAngle;
            t.prevStartAngle !== void 0 &&
              t.prevEndAngle !== void 0 &&
              ((n = t.prevEndAngle),
              (s =
                t.prevEndAngle < t.prevStartAngle
                  ? this.fullAngle + t.prevEndAngle - t.prevStartAngle
                  : t.prevEndAngle - t.prevStartAngle)),
              t.i === a.config.series.length - 1 &&
                (i + o > this.fullAngle
                  ? (t.endAngle = t.endAngle - (i + o))
                  : i + o < this.fullAngle &&
                    (t.endAngle = t.endAngle + (this.fullAngle - (i + o)))),
              i === this.fullAngle && (i = this.fullAngle - 0.01),
              this.animateArc(e, n, o, i, s, t);
          },
        },
        {
          key: "animateArc",
          value: function (e, t, a, i, s, n) {
            var o,
              l = this,
              c = this.w,
              h = new oa(this.ctx),
              d = n.size;
            (isNaN(t) || isNaN(s)) && ((t = a), (s = i), (n.dur = 0));
            var u = i,
              f = a,
              g = t < a ? this.fullAngle + t - a : t - a;
            c.globals.dataChanged &&
              n.shouldSetPrevPaths &&
              n.prevEndAngle &&
              ((o = l.getPiePath({
                me: l,
                startAngle: n.prevStartAngle,
                angle:
                  n.prevEndAngle < n.prevStartAngle
                    ? this.fullAngle + n.prevEndAngle - n.prevStartAngle
                    : n.prevEndAngle - n.prevStartAngle,
                size: d,
              })),
              e.attr({ d: o })),
              n.dur !== 0
                ? e
                    .animate(n.dur, n.animBeginArr[n.i])
                    .after(function () {
                      (l.chartType !== "pie" &&
                        l.chartType !== "donut" &&
                        l.chartType !== "polarArea") ||
                        this.animate(
                          c.config.chart.animations.dynamicAnimation.speed
                        ).attr({ "stroke-width": l.strokeWidth }),
                        n.i === c.config.series.length - 1 &&
                          h.animationCompleted(e);
                    })
                    .during(function (p) {
                      (u = g + (i - g) * p),
                        n.animateStartingPos &&
                          ((u = s + (i - s) * p),
                          (f = t - s + (a - (t - s)) * p)),
                        (o = l.getPiePath({
                          me: l,
                          startAngle: f,
                          angle: u,
                          size: d,
                        })),
                        e.node.setAttribute("data:pathOrig", o),
                        e.attr({ d: o });
                    })
                : ((o = l.getPiePath({
                    me: l,
                    startAngle: f,
                    angle: i,
                    size: d,
                  })),
                  n.isTrack || (c.globals.animationEnded = !0),
                  e.node.setAttribute("data:pathOrig", o),
                  e.attr({ d: o, "stroke-width": l.strokeWidth }));
          },
        },
        {
          key: "pieClicked",
          value: function (e) {
            var t,
              a = this.w,
              i = this,
              s =
                i.sliceSizes[e] +
                (a.config.plotOptions.pie.expandOnClick ? 4 : 0),
              n = a.globals.dom.Paper.findOne(
                ".apexcharts-"
                  .concat(i.chartType.toLowerCase(), "-slice-")
                  .concat(e)
              );
            if (n.attr("data:pieClicked") !== "true") {
              var o = a.globals.dom.baseEl.getElementsByClassName(
                "apexcharts-pie-area"
              );
              Array.prototype.forEach.call(o, function (d) {
                d.setAttribute("data:pieClicked", "false");
                var u = d.getAttribute("data:pathOrig");
                u && d.setAttribute("d", u);
              }),
                (a.globals.capturedDataPointIndex = e),
                n.attr("data:pieClicked", "true");
              var l = parseInt(n.attr("data:startAngle"), 10),
                c = parseInt(n.attr("data:angle"), 10);
              (t = i.getPiePath({ me: i, startAngle: l, angle: c, size: s })),
                c !== 360 && n.plot(t);
            } else {
              n.attr({ "data:pieClicked": "false" }),
                this.revertDataLabelsInner(n.node, this.donutDataLabels);
              var h = n.attr("data:pathOrig");
              n.attr({ d: h });
            }
          },
        },
        {
          key: "getChangedPath",
          value: function (e, t) {
            var a = "";
            return (
              this.dynamicAnim &&
                this.w.globals.dataChanged &&
                (a = this.getPiePath({
                  me: this,
                  startAngle: e,
                  angle: t - e,
                  size: this.size,
                })),
              a
            );
          },
        },
        {
          key: "getPiePath",
          value: function (e) {
            var t,
              a = e.me,
              i = e.startAngle,
              s = e.angle,
              n = e.size,
              o = new H(this.ctx),
              l = i,
              c = (Math.PI * (l - 90)) / 180,
              h = s + i;
            Math.ceil(h) >=
              this.fullAngle +
                (this.w.config.plotOptions.pie.startAngle % this.fullAngle) &&
              (h =
                this.fullAngle +
                (this.w.config.plotOptions.pie.startAngle % this.fullAngle) -
                0.01),
              Math.ceil(h) > this.fullAngle && (h -= this.fullAngle);
            var d = (Math.PI * (h - 90)) / 180,
              u = a.centerX + n * Math.cos(c),
              f = a.centerY + n * Math.sin(c),
              g = a.centerX + n * Math.cos(d),
              p = a.centerY + n * Math.sin(d),
              m = _.polarToCartesian(a.centerX, a.centerY, a.donutSize, h),
              x = _.polarToCartesian(a.centerX, a.centerY, a.donutSize, l),
              v = s > 180 ? 1 : 0,
              b = ["M", u, f, "A", n, n, 0, v, 1, g, p];
            return (
              (t =
                a.chartType === "donut"
                  ? []
                      .concat(b, [
                        "L",
                        m.x,
                        m.y,
                        "A",
                        a.donutSize,
                        a.donutSize,
                        0,
                        v,
                        0,
                        x.x,
                        x.y,
                        "L",
                        u,
                        f,
                        "z",
                      ])
                      .join(" ")
                  : a.chartType === "pie" || a.chartType === "polarArea"
                  ? []
                      .concat(b, ["L", a.centerX, a.centerY, "L", u, f])
                      .join(" ")
                  : [].concat(b).join(" ")),
              o.roundPathCorners(t, 2 * this.strokeWidth)
            );
          },
        },
        {
          key: "drawPolarElements",
          value: function (e) {
            var t = this.w,
              a = new Yc(this.ctx),
              i = new H(this.ctx),
              s = new qc(this.ctx),
              n = i.group(),
              o = i.group(),
              l = a.niceScale(0, Math.ceil(this.maxY), 0),
              c = l.result.reverse(),
              h = l.result.length;
            this.maxY = l.niceMax;
            for (
              var d = t.globals.radialSize, u = d / (h - 1), f = 0;
              f < h - 1;
              f++
            ) {
              var g = i.drawCircle(d);
              if (
                (g.attr({
                  cx: this.centerX,
                  cy: this.centerY,
                  fill: "none",
                  "stroke-width":
                    t.config.plotOptions.polarArea.rings.strokeWidth,
                  stroke: t.config.plotOptions.polarArea.rings.strokeColor,
                }),
                t.config.yaxis[0].show)
              ) {
                var p = s.drawYAxisTexts(
                  this.centerX,
                  this.centerY -
                    d +
                    parseInt(t.config.yaxis[0].labels.style.fontSize, 10) / 2,
                  f,
                  c[f]
                );
                o.add(p);
              }
              n.add(g), (d -= u);
            }
            this.drawSpokes(e), e.add(n), e.add(o);
          },
        },
        {
          key: "renderInnerDataLabels",
          value: function (e, t, a) {
            var i = this.w,
              s = new H(this.ctx),
              n = t.total.show;
            (e.node.innerHTML = ""), (e.node.style.opacity = a.opacity);
            var o,
              l,
              c = a.centerX,
              h = this.donutDataLabels.total.label
                ? a.centerY
                : a.centerY - a.centerY / 6;
            o = t.name.color === void 0 ? i.globals.colors[0] : t.name.color;
            var d = t.name.fontSize,
              u = t.name.fontFamily,
              f = t.name.fontWeight;
            l =
              t.value.color === void 0
                ? i.config.chart.foreColor
                : t.value.color;
            var g = t.value.formatter,
              p = "",
              m = "";
            if (
              (n
                ? ((o = t.total.color),
                  (d = t.total.fontSize),
                  (u = t.total.fontFamily),
                  (f = t.total.fontWeight),
                  (m = this.donutDataLabels.total.label ? t.total.label : ""),
                  (p = t.total.formatter(i)))
                : i.globals.series.length === 1 &&
                  ((p = g(i.globals.series[0], i)),
                  (m = i.globals.seriesNames[0])),
              m && (m = t.name.formatter(m, t.total.show, i)),
              t.name.show)
            ) {
              var x = s.drawText({
                x: c,
                y: h + parseFloat(t.name.offsetY),
                text: m,
                textAnchor: "middle",
                foreColor: o,
                fontSize: d,
                fontWeight: f,
                fontFamily: u,
              });
              x.node.classList.add("apexcharts-datalabel-label"), e.add(x);
            }
            if (t.value.show) {
              var v = t.name.show
                  ? parseFloat(t.value.offsetY) + 16
                  : t.value.offsetY,
                b = s.drawText({
                  x: c,
                  y: h + v,
                  text: p,
                  textAnchor: "middle",
                  foreColor: l,
                  fontWeight: t.value.fontWeight,
                  fontSize: t.value.fontSize,
                  fontFamily: t.value.fontFamily,
                });
              b.node.classList.add("apexcharts-datalabel-value"), e.add(b);
            }
            return e;
          },
        },
        {
          key: "printInnerLabels",
          value: function (e, t, a, i) {
            var s,
              n = this.w;
            i
              ? (s =
                  e.name.color === void 0
                    ? n.globals.colors[
                        parseInt(i.parentNode.getAttribute("rel"), 10) - 1
                      ]
                    : e.name.color)
              : n.globals.series.length > 1 &&
                e.total.show &&
                (s = e.total.color);
            var o = n.globals.dom.baseEl.querySelector(
                ".apexcharts-datalabel-label"
              ),
              l = n.globals.dom.baseEl.querySelector(
                ".apexcharts-datalabel-value"
              );
            (a = (0, e.value.formatter)(a, n)),
              i ||
                typeof e.total.formatter != "function" ||
                (a = e.total.formatter(n));
            var c = t === e.total.label;
            (t = this.donutDataLabels.total.label
              ? e.name.formatter(t, c, n)
              : ""),
              o !== null && (o.textContent = t),
              l !== null && (l.textContent = a),
              o !== null && (o.style.fill = s);
          },
        },
        {
          key: "printDataLabelsInner",
          value: function (e, t) {
            var a = this.w,
              i = e.getAttribute("data:value"),
              s =
                a.globals.seriesNames[
                  parseInt(e.parentNode.getAttribute("rel"), 10) - 1
                ];
            a.globals.series.length > 1 && this.printInnerLabels(t, s, i, e);
            var n = a.globals.dom.baseEl.querySelector(
              ".apexcharts-datalabels-group"
            );
            n !== null && (n.style.opacity = 1);
          },
        },
        {
          key: "drawSpokes",
          value: function (e) {
            var t = this,
              a = this.w,
              i = new H(this.ctx),
              s = a.config.plotOptions.polarArea.spokes;
            if (s.strokeWidth !== 0) {
              for (
                var n = [], o = 360 / a.globals.series.length, l = 0;
                l < a.globals.series.length;
                l++
              )
                n.push(
                  _.polarToCartesian(
                    this.centerX,
                    this.centerY,
                    a.globals.radialSize,
                    a.config.plotOptions.pie.startAngle + o * l
                  )
                );
              n.forEach(function (c, h) {
                var d = i.drawLine(
                  c.x,
                  c.y,
                  t.centerX,
                  t.centerY,
                  Array.isArray(s.connectorColors)
                    ? s.connectorColors[h]
                    : s.connectorColors
                );
                e.add(d);
              });
            }
          },
        },
        {
          key: "revertDataLabelsInner",
          value: function () {
            var e = this.w;
            if (this.donutDataLabels.show) {
              var t = e.globals.dom.Paper.findOne(
                  ".apexcharts-datalabels-group"
                ),
                a = this.renderInnerDataLabels(t, this.donutDataLabels, {
                  hollowSize: this.donutSize,
                  centerX: this.centerX,
                  centerY: this.centerY,
                  opacity: this.donutDataLabels.show,
                });
              e.globals.dom.Paper.findOne(
                ".apexcharts-radialbar, .apexcharts-pie"
              ).add(a);
            }
          },
        },
      ]),
      r
    );
  })(),
  jm = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.chartType = this.w.config.chart.type),
        (this.initialAnim = this.w.config.chart.animations.enabled),
        (this.dynamicAnim =
          this.initialAnim &&
          this.w.config.chart.animations.dynamicAnimation.enabled),
        (this.animDur = 0);
      var t = this.w;
      (this.graphics = new H(this.ctx)),
        (this.lineColorArr =
          t.globals.stroke.colors !== void 0
            ? t.globals.stroke.colors
            : t.globals.colors),
        (this.defaultSize =
          t.globals.svgHeight < t.globals.svgWidth
            ? t.globals.gridHeight
            : t.globals.gridWidth),
        (this.isLog = t.config.yaxis[0].logarithmic),
        (this.logBase = t.config.yaxis[0].logBase),
        (this.coreUtils = new ke(this.ctx)),
        (this.maxValue = this.isLog
          ? this.coreUtils.getLogVal(this.logBase, t.globals.maxY, 0)
          : t.globals.maxY),
        (this.minValue = this.isLog
          ? this.coreUtils.getLogVal(this.logBase, this.w.globals.minY, 0)
          : t.globals.minY),
        (this.polygons = t.config.plotOptions.radar.polygons),
        (this.strokeWidth = t.config.stroke.show ? t.config.stroke.width : 0),
        (this.size =
          this.defaultSize / 2.1 -
          this.strokeWidth -
          t.config.chart.dropShadow.blur),
        t.config.xaxis.labels.show &&
          (this.size = this.size - t.globals.xAxisLabelsWidth / 1.75),
        t.config.plotOptions.radar.size !== void 0 &&
          (this.size = t.config.plotOptions.radar.size),
        (this.dataRadiusOfPercent = []),
        (this.dataRadius = []),
        (this.angleArr = []),
        (this.yaxisLabelsTextsPos = []);
    }
    return (
      $(r, [
        {
          key: "draw",
          value: function (e) {
            var t = this,
              a = this.w,
              i = new tt(this.ctx),
              s = [],
              n = new ia(this.ctx);
            e.length &&
              (this.dataPointsLen = e[a.globals.maxValsInArrayIndex].length),
              (this.disAngle = (2 * Math.PI) / this.dataPointsLen);
            var o = a.globals.gridWidth / 2,
              l = a.globals.gridHeight / 2,
              c = o + a.config.plotOptions.radar.offsetX,
              h = l + a.config.plotOptions.radar.offsetY,
              d = this.graphics.group({
                class: "apexcharts-radar-series apexcharts-plot-series",
                transform: "translate("
                  .concat(c || 0, ", ")
                  .concat(h || 0, ")"),
              }),
              u = [],
              f = null,
              g = null;
            if (
              ((this.yaxisLabels = this.graphics.group({
                class: "apexcharts-yaxis",
              })),
              e.forEach(function (m, x) {
                var v = m.length === a.globals.dataPoints,
                  b = t.graphics.group().attr({
                    class: "apexcharts-series",
                    "data:longestSeries": v,
                    seriesName: _.escapeString(a.globals.seriesNames[x]),
                    rel: x + 1,
                    "data:realIndex": x,
                  });
                (t.dataRadiusOfPercent[x] = []),
                  (t.dataRadius[x] = []),
                  (t.angleArr[x] = []),
                  m.forEach(function (M, O) {
                    var N = Math.abs(t.maxValue - t.minValue);
                    (M -= t.minValue),
                      t.isLog && (M = t.coreUtils.getLogVal(t.logBase, M, 0)),
                      (t.dataRadiusOfPercent[x][O] = M / N),
                      (t.dataRadius[x][O] =
                        t.dataRadiusOfPercent[x][O] * t.size),
                      (t.angleArr[x][O] = O * t.disAngle);
                  }),
                  (u = t.getDataPointsPos(t.dataRadius[x], t.angleArr[x]));
                var k = t.createPaths(u, { x: 0, y: 0 });
                (f = t.graphics.group({
                  class:
                    "apexcharts-series-markers-wrap apexcharts-element-hidden",
                })),
                  (g = t.graphics.group({
                    class: "apexcharts-datalabels",
                    "data:realIndex": x,
                  })),
                  a.globals.delayedElements.push({ el: f.node, index: x });
                var y = {
                    i: x,
                    realIndex: x,
                    animationDelay: x,
                    initialSpeed: a.config.chart.animations.speed,
                    dataChangeSpeed:
                      a.config.chart.animations.dynamicAnimation.speed,
                    className: "apexcharts-radar",
                    shouldClipToGrid: !1,
                    bindEventsOnPaths: !1,
                    stroke: a.globals.stroke.colors[x],
                    strokeLineCap: a.config.stroke.lineCap,
                  },
                  C = null;
                a.globals.previousPaths.length > 0 &&
                  (C = t.getPreviousPath(x));
                for (var A = 0; A < k.linePathsTo.length; A++) {
                  var S = t.graphics.renderPaths(
                    Y(
                      Y({}, y),
                      {},
                      {
                        pathFrom: C === null ? k.linePathsFrom[A] : C,
                        pathTo: k.linePathsTo[A],
                        strokeWidth: Array.isArray(t.strokeWidth)
                          ? t.strokeWidth[x]
                          : t.strokeWidth,
                        fill: "none",
                        drawShadow: !1,
                      }
                    )
                  );
                  b.add(S);
                  var T = i.fillPath({ seriesNumber: x }),
                    E = t.graphics.renderPaths(
                      Y(
                        Y({}, y),
                        {},
                        {
                          pathFrom: C === null ? k.areaPathsFrom[A] : C,
                          pathTo: k.areaPathsTo[A],
                          strokeWidth: 0,
                          fill: T,
                          drawShadow: !1,
                        }
                      )
                    );
                  if (a.config.chart.dropShadow.enabled) {
                    var L = new Ee(t.ctx),
                      I = a.config.chart.dropShadow;
                    L.dropShadow(
                      E,
                      Object.assign({}, I, { noUserSpaceOnUse: !0 }),
                      x
                    );
                  }
                  b.add(E);
                }
                m.forEach(function (M, O) {
                  var N = new da(t.ctx).getMarkerConfig({
                      cssClass: "apexcharts-marker",
                      seriesIndex: x,
                      dataPointIndex: O,
                    }),
                    F = t.graphics.drawMarker(u[O].x, u[O].y, N);
                  F.attr("rel", O),
                    F.attr("j", O),
                    F.attr("index", x),
                    F.node.setAttribute("default-marker-size", N.pSize);
                  var D = t.graphics.group({
                    class: "apexcharts-series-markers",
                  });
                  D && D.add(F), f.add(D), b.add(f);
                  var B = a.config.dataLabels;
                  if (B.enabled) {
                    var z = B.formatter(a.globals.series[x][O], {
                      seriesIndex: x,
                      dataPointIndex: O,
                      w: a,
                    });
                    n.plotDataLabelsText({
                      x: u[O].x,
                      y: u[O].y,
                      text: z,
                      textAnchor: "middle",
                      i: x,
                      j: x,
                      parent: g,
                      offsetCorrection: !1,
                      dataLabelsConfig: Y({}, B),
                    });
                  }
                  b.add(g);
                }),
                  s.push(b);
              }),
              this.drawPolygons({ parent: d }),
              a.config.xaxis.labels.show)
            ) {
              var p = this.drawXAxisTexts();
              d.add(p);
            }
            return (
              s.forEach(function (m) {
                d.add(m);
              }),
              d.add(this.yaxisLabels),
              d
            );
          },
        },
        {
          key: "drawPolygons",
          value: function (e) {
            for (
              var t = this,
                a = this.w,
                i = e.parent,
                s = new qc(this.ctx),
                n = a.globals.yAxisScale[0].result.reverse(),
                o = n.length,
                l = [],
                c = this.size / (o - 1),
                h = 0;
              h < o;
              h++
            )
              l[h] = c * h;
            l.reverse();
            var d = [],
              u = [];
            l.forEach(function (f, g) {
              var p = _.getPolygonPos(f, t.dataPointsLen),
                m = "";
              p.forEach(function (x, v) {
                if (g === 0) {
                  var b = t.graphics.drawLine(
                    x.x,
                    x.y,
                    0,
                    0,
                    Array.isArray(t.polygons.connectorColors)
                      ? t.polygons.connectorColors[v]
                      : t.polygons.connectorColors
                  );
                  u.push(b);
                }
                v === 0 && t.yaxisLabelsTextsPos.push({ x: x.x, y: x.y }),
                  (m += x.x + "," + x.y + " ");
              }),
                d.push(m);
            }),
              d.forEach(function (f, g) {
                var p = t.polygons.strokeColors,
                  m = t.polygons.strokeWidth,
                  x = t.graphics.drawPolygon(
                    f,
                    Array.isArray(p) ? p[g] : p,
                    Array.isArray(m) ? m[g] : m,
                    a.globals.radarPolygons.fill.colors[g]
                  );
                i.add(x);
              }),
              u.forEach(function (f) {
                i.add(f);
              }),
              a.config.yaxis[0].show &&
                this.yaxisLabelsTextsPos.forEach(function (f, g) {
                  var p = s.drawYAxisTexts(f.x, f.y, g, n[g]);
                  t.yaxisLabels.add(p);
                });
          },
        },
        {
          key: "drawXAxisTexts",
          value: function () {
            var e = this,
              t = this.w,
              a = t.config.xaxis.labels,
              i = this.graphics.group({ class: "apexcharts-xaxis" }),
              s = _.getPolygonPos(this.size, this.dataPointsLen);
            return (
              t.globals.labels.forEach(function (n, o) {
                var l = t.config.xaxis.labels.formatter,
                  c = new ia(e.ctx);
                if (s[o]) {
                  var h = e.getTextPos(s[o], e.size),
                    d = l(n, { seriesIndex: -1, dataPointIndex: o, w: t });
                  c.plotDataLabelsText({
                    x: h.newX,
                    y: h.newY,
                    text: d,
                    textAnchor: h.textAnchor,
                    i: o,
                    j: o,
                    parent: i,
                    className: "apexcharts-xaxis-label",
                    color:
                      Array.isArray(a.style.colors) && a.style.colors[o]
                        ? a.style.colors[o]
                        : "#a8a8a8",
                    dataLabelsConfig: Y(
                      { textAnchor: h.textAnchor, dropShadow: { enabled: !1 } },
                      a
                    ),
                    offsetCorrection: !1,
                  }).on("click", function (u) {
                    if (
                      typeof t.config.chart.events.xAxisLabelClick == "function"
                    ) {
                      var f = Object.assign({}, t, { labelIndex: o });
                      t.config.chart.events.xAxisLabelClick(u, e.ctx, f);
                    }
                  });
                }
              }),
              i
            );
          },
        },
        {
          key: "createPaths",
          value: function (e, t) {
            var a = this,
              i = [],
              s = [],
              n = [],
              o = [];
            if (e.length) {
              (s = [this.graphics.move(t.x, t.y)]),
                (o = [this.graphics.move(t.x, t.y)]);
              var l = this.graphics.move(e[0].x, e[0].y),
                c = this.graphics.move(e[0].x, e[0].y);
              e.forEach(function (h, d) {
                (l += a.graphics.line(h.x, h.y)),
                  (c += a.graphics.line(h.x, h.y)),
                  d === e.length - 1 && ((l += "Z"), (c += "Z"));
              }),
                i.push(l),
                n.push(c);
            }
            return {
              linePathsFrom: s,
              linePathsTo: i,
              areaPathsFrom: o,
              areaPathsTo: n,
            };
          },
        },
        {
          key: "getTextPos",
          value: function (e, t) {
            var a = "middle",
              i = e.x,
              s = e.y;
            return (
              Math.abs(e.x) >= 10
                ? e.x > 0
                  ? ((a = "start"), (i += 10))
                  : e.x < 0 && ((a = "end"), (i -= 10))
                : (a = "middle"),
              Math.abs(e.y) >= t - 10 &&
                (e.y < 0 ? (s -= 10) : e.y > 0 && (s += 10)),
              { textAnchor: a, newX: i, newY: s }
            );
          },
        },
        {
          key: "getPreviousPath",
          value: function (e) {
            for (
              var t = this.w, a = null, i = 0;
              i < t.globals.previousPaths.length;
              i++
            ) {
              var s = t.globals.previousPaths[i];
              s.paths.length > 0 &&
                parseInt(s.realIndex, 10) === parseInt(e, 10) &&
                t.globals.previousPaths[i].paths[0] !== void 0 &&
                (a = t.globals.previousPaths[i].paths[0].d);
            }
            return a;
          },
        },
        {
          key: "getDataPointsPos",
          value: function (e, t) {
            var a =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : this.dataPointsLen;
            (e = e || []), (t = t || []);
            for (var i = [], s = 0; s < a; s++) {
              var n = {};
              (n.x = e[s] * Math.sin(t[s])),
                (n.y = -e[s] * Math.cos(t[s])),
                i.push(n);
            }
            return i;
          },
        },
      ]),
      r
    );
  })(),
  Fm = (function (r) {
    Ua(t, Zc);
    var e = Ga(t);
    function t(a) {
      var i;
      U(this, t),
        ((i = e.call(this, a)).ctx = a),
        (i.w = a.w),
        (i.animBeginArr = [0]),
        (i.animDur = 0);
      var s = i.w;
      return (
        (i.startAngle = s.config.plotOptions.radialBar.startAngle),
        (i.endAngle = s.config.plotOptions.radialBar.endAngle),
        (i.totalAngle = Math.abs(
          s.config.plotOptions.radialBar.endAngle -
            s.config.plotOptions.radialBar.startAngle
        )),
        (i.trackStartAngle = s.config.plotOptions.radialBar.track.startAngle),
        (i.trackEndAngle = s.config.plotOptions.radialBar.track.endAngle),
        (i.barLabels = i.w.config.plotOptions.radialBar.barLabels),
        (i.donutDataLabels = i.w.config.plotOptions.radialBar.dataLabels),
        (i.radialDataLabels = i.donutDataLabels),
        i.trackStartAngle || (i.trackStartAngle = i.startAngle),
        i.trackEndAngle || (i.trackEndAngle = i.endAngle),
        i.endAngle === 360 && (i.endAngle = 359.99),
        (i.margin = parseInt(s.config.plotOptions.radialBar.track.margin, 10)),
        (i.onBarLabelClick = i.onBarLabelClick.bind(oc(i))),
        i
      );
    }
    return (
      $(t, [
        {
          key: "draw",
          value: function (a) {
            var i = this.w,
              s = new H(this.ctx),
              n = s.group({ class: "apexcharts-radialbar" });
            if (i.globals.noData) return n;
            var o = s.group(),
              l = this.defaultSize / 2,
              c = i.globals.gridWidth / 2,
              h = this.defaultSize / 2.05;
            i.config.chart.sparkline.enabled ||
              (h = h - i.config.stroke.width - i.config.chart.dropShadow.blur);
            var d = i.globals.fill.colors;
            if (i.config.plotOptions.radialBar.track.show) {
              var u = this.drawTracks({
                size: h,
                centerX: c,
                centerY: l,
                colorArr: d,
                series: a,
              });
              o.add(u);
            }
            var f = this.drawArcs({
                size: h,
                centerX: c,
                centerY: l,
                colorArr: d,
                series: a,
              }),
              g = 360;
            i.config.plotOptions.radialBar.startAngle < 0 &&
              (g = this.totalAngle);
            var p = (360 - g) / 360;
            if (
              ((i.globals.radialSize = h - h * p),
              this.radialDataLabels.value.show)
            ) {
              var m = Math.max(
                this.radialDataLabels.value.offsetY,
                this.radialDataLabels.name.offsetY
              );
              i.globals.radialSize += m * p;
            }
            return (
              o.add(f.g),
              i.config.plotOptions.radialBar.hollow.position === "front" &&
                (f.g.add(f.elHollow), f.dataLabels && f.g.add(f.dataLabels)),
              n.add(o),
              n
            );
          },
        },
        {
          key: "drawTracks",
          value: function (a) {
            var i = this.w,
              s = new H(this.ctx),
              n = s.group({ class: "apexcharts-tracks" }),
              o = new Ee(this.ctx),
              l = new tt(this.ctx),
              c = this.getStrokeWidth(a);
            a.size = a.size - c / 2;
            for (var h = 0; h < a.series.length; h++) {
              var d = s.group({
                class: "apexcharts-radialbar-track apexcharts-track",
              });
              n.add(d),
                d.attr({ rel: h + 1 }),
                (a.size = a.size - c - this.margin);
              var u = i.config.plotOptions.radialBar.track,
                f = l.fillPath({
                  seriesNumber: 0,
                  size: a.size,
                  fillColors: Array.isArray(u.background)
                    ? u.background[h]
                    : u.background,
                  solid: !0,
                }),
                g = this.trackStartAngle,
                p = this.trackEndAngle;
              Math.abs(p) + Math.abs(g) >= 360 &&
                (p = 360 - Math.abs(this.startAngle) - 0.1);
              var m = s.drawPath({
                d: "",
                stroke: f,
                strokeWidth: (c * parseInt(u.strokeWidth, 10)) / 100,
                fill: "none",
                strokeOpacity: u.opacity,
                classes: "apexcharts-radialbar-area",
              });
              if (u.dropShadow.enabled) {
                var x = u.dropShadow;
                o.dropShadow(m, x);
              }
              d.add(m),
                m.attr("id", "apexcharts-radialbarTrack-" + h),
                this.animatePaths(m, {
                  centerX: a.centerX,
                  centerY: a.centerY,
                  endAngle: p,
                  startAngle: g,
                  size: a.size,
                  i: h,
                  totalItems: 2,
                  animBeginArr: 0,
                  dur: 0,
                  isTrack: !0,
                });
            }
            return n;
          },
        },
        {
          key: "drawArcs",
          value: function (a) {
            var i = this.w,
              s = new H(this.ctx),
              n = new tt(this.ctx),
              o = new Ee(this.ctx),
              l = s.group(),
              c = this.getStrokeWidth(a);
            a.size = a.size - c / 2;
            var h = i.config.plotOptions.radialBar.hollow.background,
              d =
                a.size -
                c * a.series.length -
                this.margin * a.series.length -
                (c *
                  parseInt(
                    i.config.plotOptions.radialBar.track.strokeWidth,
                    10
                  )) /
                  100 /
                  2,
              u = d - i.config.plotOptions.radialBar.hollow.margin;
            i.config.plotOptions.radialBar.hollow.image !== void 0 &&
              (h = this.drawHollowImage(a, l, d, h));
            var f = this.drawHollow({
              size: u,
              centerX: a.centerX,
              centerY: a.centerY,
              fill: h || "transparent",
            });
            if (i.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
              var g = i.config.plotOptions.radialBar.hollow.dropShadow;
              o.dropShadow(f, g);
            }
            var p = 1;
            !this.radialDataLabels.total.show &&
              i.globals.series.length > 1 &&
              (p = 0);
            var m = null;
            if (this.radialDataLabels.show) {
              var x = i.globals.dom.Paper.findOne(
                ".apexcharts-datalabels-group"
              );
              m = this.renderInnerDataLabels(x, this.radialDataLabels, {
                hollowSize: d,
                centerX: a.centerX,
                centerY: a.centerY,
                opacity: p,
              });
            }
            i.config.plotOptions.radialBar.hollow.position === "back" &&
              (l.add(f), m && l.add(m));
            var v = !1;
            i.config.plotOptions.radialBar.inverseOrder && (v = !0);
            for (
              var b = v ? a.series.length - 1 : 0;
              v ? b >= 0 : b < a.series.length;
              v ? b-- : b++
            ) {
              var k = s.group({
                class: "apexcharts-series apexcharts-radial-series",
                seriesName: _.escapeString(i.globals.seriesNames[b]),
              });
              l.add(k),
                k.attr({ rel: b + 1, "data:realIndex": b }),
                this.ctx.series.addCollapsedClassToSeries(k, b),
                (a.size = a.size - c - this.margin);
              var y = n.fillPath({
                  seriesNumber: b,
                  size: a.size,
                  value: a.series[b],
                }),
                C = this.startAngle,
                A = void 0,
                S = _.negToZero(a.series[b] > 100 ? 100 : a.series[b]) / 100,
                T = Math.round(this.totalAngle * S) + this.startAngle,
                E = void 0;
              i.globals.dataChanged &&
                ((A = this.startAngle),
                (E =
                  Math.round(
                    (this.totalAngle *
                      _.negToZero(i.globals.previousPaths[b])) /
                      100
                  ) + A)),
                Math.abs(T) + Math.abs(C) > 360 && (T -= 0.01),
                Math.abs(E) + Math.abs(A) > 360 && (E -= 0.01);
              var L = T - C,
                I = Array.isArray(i.config.stroke.dashArray)
                  ? i.config.stroke.dashArray[b]
                  : i.config.stroke.dashArray,
                M = s.drawPath({
                  d: "",
                  stroke: y,
                  strokeWidth: c,
                  fill: "none",
                  fillOpacity: i.config.fill.opacity,
                  classes:
                    "apexcharts-radialbar-area apexcharts-radialbar-slice-" + b,
                  strokeDashArray: I,
                });
              if (
                (H.setAttrs(M.node, {
                  "data:angle": L,
                  "data:value": a.series[b],
                }),
                i.config.chart.dropShadow.enabled)
              ) {
                var O = i.config.chart.dropShadow;
                o.dropShadow(M, O, b);
              }
              if (
                (o.setSelectionFilter(M, 0, b),
                this.addListeners(M, this.radialDataLabels),
                k.add(M),
                M.attr({ index: 0, j: b }),
                this.barLabels.enabled)
              ) {
                var N = _.polarToCartesian(a.centerX, a.centerY, a.size, C),
                  F = this.barLabels.formatter(i.globals.seriesNames[b], {
                    seriesIndex: b,
                    w: i,
                  }),
                  D = ["apexcharts-radialbar-label"];
                this.barLabels.onClick || D.push("apexcharts-no-click");
                var B = this.barLabels.useSeriesColors
                  ? i.globals.colors[b]
                  : i.config.chart.foreColor;
                B || (B = i.config.chart.foreColor);
                var z = N.x + this.barLabels.offsetX,
                  G = N.y + this.barLabels.offsetY,
                  V = s.drawText({
                    x: z,
                    y: G,
                    text: F,
                    textAnchor: "end",
                    dominantBaseline: "middle",
                    fontFamily: this.barLabels.fontFamily,
                    fontWeight: this.barLabels.fontWeight,
                    fontSize: this.barLabels.fontSize,
                    foreColor: B,
                    cssClass: D.join(" "),
                  });
                V.on("click", this.onBarLabelClick),
                  V.attr({ rel: b + 1 }),
                  C !== 0 &&
                    V.attr({
                      "transform-origin": "".concat(z, " ").concat(G),
                      transform: "rotate(".concat(C, " 0 0)"),
                    }),
                  k.add(V);
              }
              var Q = 0;
              !this.initialAnim ||
                i.globals.resized ||
                i.globals.dataChanged ||
                (Q = i.config.chart.animations.speed),
                i.globals.dataChanged &&
                  (Q = i.config.chart.animations.dynamicAnimation.speed),
                (this.animDur = Q / (1.2 * a.series.length) + this.animDur),
                this.animBeginArr.push(this.animDur),
                this.animatePaths(M, {
                  centerX: a.centerX,
                  centerY: a.centerY,
                  endAngle: T,
                  startAngle: C,
                  prevEndAngle: E,
                  prevStartAngle: A,
                  size: a.size,
                  i: b,
                  totalItems: 2,
                  animBeginArr: this.animBeginArr,
                  dur: Q,
                  shouldSetPrevPaths: !0,
                });
            }
            return { g: l, elHollow: f, dataLabels: m };
          },
        },
        {
          key: "drawHollow",
          value: function (a) {
            var i = new H(this.ctx).drawCircle(2 * a.size);
            return (
              i.attr({
                class: "apexcharts-radialbar-hollow",
                cx: a.centerX,
                cy: a.centerY,
                r: a.size,
                fill: a.fill,
              }),
              i
            );
          },
        },
        {
          key: "drawHollowImage",
          value: function (a, i, s, n) {
            var o = this.w,
              l = new tt(this.ctx),
              c = _.randomId(),
              h = o.config.plotOptions.radialBar.hollow.image;
            if (o.config.plotOptions.radialBar.hollow.imageClipped)
              l.clippedImgArea({
                width: s,
                height: s,
                image: h,
                patternID: "pattern".concat(o.globals.cuid).concat(c),
              }),
                (n = "url(#pattern".concat(o.globals.cuid).concat(c, ")"));
            else {
              var d = o.config.plotOptions.radialBar.hollow.imageWidth,
                u = o.config.plotOptions.radialBar.hollow.imageHeight;
              if (d === void 0 && u === void 0) {
                var f = o.globals.dom.Paper.image(h, function (p) {
                  this.move(
                    a.centerX -
                      p.width / 2 +
                      o.config.plotOptions.radialBar.hollow.imageOffsetX,
                    a.centerY -
                      p.height / 2 +
                      o.config.plotOptions.radialBar.hollow.imageOffsetY
                  );
                });
                i.add(f);
              } else {
                var g = o.globals.dom.Paper.image(h, function (p) {
                  this.move(
                    a.centerX -
                      d / 2 +
                      o.config.plotOptions.radialBar.hollow.imageOffsetX,
                    a.centerY -
                      u / 2 +
                      o.config.plotOptions.radialBar.hollow.imageOffsetY
                  ),
                    this.size(d, u);
                });
                i.add(g);
              }
            }
            return n;
          },
        },
        {
          key: "getStrokeWidth",
          value: function (a) {
            var i = this.w;
            return (
              (a.size *
                (100 -
                  parseInt(i.config.plotOptions.radialBar.hollow.size, 10))) /
                100 /
                (a.series.length + 1) -
              this.margin
            );
          },
        },
        {
          key: "onBarLabelClick",
          value: function (a) {
            var i = parseInt(a.target.getAttribute("rel"), 10) - 1,
              s = this.barLabels.onClick,
              n = this.w;
            s && s(n.globals.seriesNames[i], { w: n, seriesIndex: i });
          },
        },
      ]),
      t
    );
  })(),
  Dm = (function (r) {
    Ua(t, ra);
    var e = Ga(t);
    function t() {
      return U(this, t), e.apply(this, arguments);
    }
    return (
      $(t, [
        {
          key: "draw",
          value: function (a, i) {
            var s = this.w,
              n = new H(this.ctx);
            (this.rangeBarOptions = this.w.config.plotOptions.rangeBar),
              (this.series = a),
              (this.seriesRangeStart = s.globals.seriesRangeStart),
              (this.seriesRangeEnd = s.globals.seriesRangeEnd),
              this.barHelpers.initVariables(a);
            for (
              var o = n.group({
                  class: "apexcharts-rangebar-series apexcharts-plot-series",
                }),
                l = 0;
              l < a.length;
              l++
            ) {
              var c,
                h,
                d,
                u,
                f = void 0,
                g = void 0,
                p = s.globals.comboCharts ? i[l] : l,
                m = this.barHelpers.getGroupIndex(p).columnGroupIndex,
                x = n.group({
                  class: "apexcharts-series",
                  seriesName: _.escapeString(s.globals.seriesNames[p]),
                  rel: l + 1,
                  "data:realIndex": p,
                });
              this.ctx.series.addCollapsedClassToSeries(x, p),
                a[l].length > 0 && (this.visibleI = this.visibleI + 1);
              var v = 0,
                b = 0,
                k = 0;
              this.yRatio.length > 1 &&
                ((this.yaxisIndex = s.globals.seriesYAxisReverseMap[p][0]),
                (k = p));
              var y = this.barHelpers.initialPositions(p);
              (g = y.y),
                (u = y.zeroW),
                (f = y.x),
                (b = y.barWidth),
                (v = y.barHeight),
                (c = y.xDivision),
                (h = y.yDivision),
                (d = y.zeroH);
              for (
                var C = n.group({
                    class: "apexcharts-datalabels",
                    "data:realIndex": p,
                  }),
                  A = n.group({ class: "apexcharts-rangebar-goals-markers" }),
                  S = 0;
                S < s.globals.dataPoints;
                S++
              ) {
                var T = this.barHelpers.getStrokeWidth(l, S, p),
                  E = this.seriesRangeStart[l][S],
                  L = this.seriesRangeEnd[l][S],
                  I = null,
                  M = null,
                  O = null,
                  N = { x: f, y: g, strokeWidth: T, elSeries: x },
                  F = this.seriesLen;
                if (
                  (s.config.plotOptions.bar.rangeBarGroupRows && (F = 1),
                  s.config.series[l].data[S] === void 0)
                )
                  break;
                if (this.isHorizontal) {
                  O = g + v * this.visibleI;
                  var D = (h - v * F) / 2;
                  if (s.config.series[l].data[S].x) {
                    var B = this.detectOverlappingBars({
                      i: l,
                      j: S,
                      barYPosition: O,
                      srty: D,
                      barHeight: v,
                      yDivision: h,
                      initPositions: y,
                    });
                    (v = B.barHeight), (O = B.barYPosition);
                  }
                  b = (I = this.drawRangeBarPaths(
                    Y(
                      {
                        indexes: { i: l, j: S, realIndex: p },
                        barHeight: v,
                        barYPosition: O,
                        zeroW: u,
                        yDivision: h,
                        y1: E,
                        y2: L,
                      },
                      N
                    )
                  )).barWidth;
                } else {
                  s.globals.isXNumeric &&
                    (f =
                      (s.globals.seriesX[l][S] - s.globals.minX) / this.xRatio -
                      b / 2),
                    (M = f + b * this.visibleI);
                  var z = (c - b * F) / 2;
                  if (s.config.series[l].data[S].x) {
                    var G = this.detectOverlappingBars({
                      i: l,
                      j: S,
                      barXPosition: M,
                      srtx: z,
                      barWidth: b,
                      xDivision: c,
                      initPositions: y,
                    });
                    (b = G.barWidth), (M = G.barXPosition);
                  }
                  v = (I = this.drawRangeColumnPaths(
                    Y(
                      {
                        indexes: {
                          i: l,
                          j: S,
                          realIndex: p,
                          translationsIndex: k,
                        },
                        barWidth: b,
                        barXPosition: M,
                        zeroH: d,
                        xDivision: c,
                      },
                      N
                    )
                  )).barHeight;
                }
                var V = this.barHelpers.drawGoalLine({
                  barXPosition: I.barXPosition,
                  barYPosition: O,
                  goalX: I.goalX,
                  goalY: I.goalY,
                  barHeight: v,
                  barWidth: b,
                });
                V && A.add(V), (g = I.y), (f = I.x);
                var Q = this.barHelpers.getPathFillColor(a, l, S, p);
                this.renderSeries({
                  realIndex: p,
                  pathFill: Q.color,
                  lineFill: Q.useRangeColor
                    ? Q.color
                    : s.globals.stroke.colors[p],
                  j: S,
                  i: l,
                  x: f,
                  y: g,
                  y1: E,
                  y2: L,
                  pathFrom: I.pathFrom,
                  pathTo: I.pathTo,
                  strokeWidth: T,
                  elSeries: x,
                  series: a,
                  barHeight: v,
                  barWidth: b,
                  barXPosition: M,
                  barYPosition: O,
                  columnGroupIndex: m,
                  elDataLabelsWrap: C,
                  elGoalsMarkers: A,
                  visibleSeries: this.visibleI,
                  type: "rangebar",
                });
              }
              o.add(x);
            }
            return o;
          },
        },
        {
          key: "detectOverlappingBars",
          value: function (a) {
            var i = a.i,
              s = a.j,
              n = a.barYPosition,
              o = a.barXPosition,
              l = a.srty,
              c = a.srtx,
              h = a.barHeight,
              d = a.barWidth,
              u = a.yDivision,
              f = a.xDivision,
              g = a.initPositions,
              p = this.w,
              m = [],
              x = p.config.series[i].data[s].rangeName,
              v = p.config.series[i].data[s].x,
              b = Array.isArray(v) ? v.join(" ") : v,
              k = p.globals.labels
                .map(function (C) {
                  return Array.isArray(C) ? C.join(" ") : C;
                })
                .indexOf(b),
              y = p.globals.seriesRange[i].findIndex(function (C) {
                return C.x === b && C.overlaps.length > 0;
              });
            return (
              this.isHorizontal
                ? ((n = p.config.plotOptions.bar.rangeBarGroupRows
                    ? l + u * k
                    : l + h * this.visibleI + u * k),
                  y > -1 &&
                    !p.config.plotOptions.bar.rangeBarOverlap &&
                    (m = p.globals.seriesRange[i][y].overlaps).indexOf(x) >
                      -1 &&
                    (n =
                      (h = g.barHeight / m.length) * this.visibleI +
                      (u * (100 - parseInt(this.barOptions.barHeight, 10))) /
                        100 /
                        2 +
                      h * (this.visibleI + m.indexOf(x)) +
                      u * k))
                : (k > -1 &&
                    !p.globals.timescaleLabels.length &&
                    (o = p.config.plotOptions.bar.rangeBarGroupRows
                      ? c + f * k
                      : c + d * this.visibleI + f * k),
                  y > -1 &&
                    !p.config.plotOptions.bar.rangeBarOverlap &&
                    (m = p.globals.seriesRange[i][y].overlaps).indexOf(x) >
                      -1 &&
                    (o =
                      (d = g.barWidth / m.length) * this.visibleI +
                      (f * (100 - parseInt(this.barOptions.barWidth, 10))) /
                        100 /
                        2 +
                      d * (this.visibleI + m.indexOf(x)) +
                      f * k)),
              { barYPosition: n, barXPosition: o, barHeight: h, barWidth: d }
            );
          },
        },
        {
          key: "drawRangeColumnPaths",
          value: function (a) {
            var i = a.indexes,
              s = a.x,
              n = a.xDivision,
              o = a.barWidth,
              l = a.barXPosition,
              c = a.zeroH,
              h = this.w,
              d = i.i,
              u = i.j,
              f = i.realIndex,
              g = i.translationsIndex,
              p = this.yRatio[g],
              m = this.getRangeValue(f, u),
              x = Math.min(m.start, m.end),
              v = Math.max(m.start, m.end);
            this.series[d][u] === void 0 || this.series[d][u] === null
              ? (x = c)
              : ((x = c - x / p), (v = c - v / p));
            var b = Math.abs(v - x),
              k = this.barHelpers.getColumnPaths({
                barXPosition: l,
                barWidth: o,
                y1: x,
                y2: v,
                strokeWidth: this.strokeWidth,
                series: this.seriesRangeEnd,
                realIndex: f,
                i: f,
                j: u,
                w: h,
              });
            if (h.globals.isXNumeric) {
              var y = this.getBarXForNumericXAxis({
                x: s,
                j: u,
                realIndex: f,
                barWidth: o,
              });
              (s = y.x), (l = y.barXPosition);
            } else s += n;
            return {
              pathTo: k.pathTo,
              pathFrom: k.pathFrom,
              barHeight: b,
              x: s,
              y: m.start < 0 && m.end < 0 ? x : v,
              goalY: this.barHelpers.getGoalValues("y", null, c, d, u, g),
              barXPosition: l,
            };
          },
        },
        {
          key: "preventBarOverflow",
          value: function (a) {
            var i = this.w;
            return (
              a < 0 && (a = 0),
              a > i.globals.gridWidth && (a = i.globals.gridWidth),
              a
            );
          },
        },
        {
          key: "drawRangeBarPaths",
          value: function (a) {
            var i = a.indexes,
              s = a.y,
              n = a.y1,
              o = a.y2,
              l = a.yDivision,
              c = a.barHeight,
              h = a.barYPosition,
              d = a.zeroW,
              u = this.w,
              f = i.realIndex,
              g = i.j,
              p = this.preventBarOverflow(d + n / this.invertedYRatio),
              m = this.preventBarOverflow(d + o / this.invertedYRatio),
              x = this.getRangeValue(f, g),
              v = Math.abs(m - p),
              b = this.barHelpers.getBarpaths({
                barYPosition: h,
                barHeight: c,
                x1: p,
                x2: m,
                strokeWidth: this.strokeWidth,
                series: this.seriesRangeEnd,
                i: f,
                realIndex: f,
                j: g,
                w: u,
              });
            return (
              u.globals.isXNumeric || (s += l),
              {
                pathTo: b.pathTo,
                pathFrom: b.pathFrom,
                barWidth: v,
                x: x.start < 0 && x.end < 0 ? p : m,
                goalX: this.barHelpers.getGoalValues("x", d, null, f, g),
                y: s,
              }
            );
          },
        },
        {
          key: "getRangeValue",
          value: function (a, i) {
            var s = this.w;
            return {
              start: s.globals.seriesRangeStart[a][i],
              end: s.globals.seriesRangeEnd[a][i],
            };
          },
        },
      ]),
      t
    );
  })(),
  zm = (function () {
    function r(e) {
      U(this, r), (this.w = e.w), (this.lineCtx = e);
    }
    return (
      $(r, [
        {
          key: "sameValueSeriesFix",
          value: function (e, t) {
            var a = this.w;
            if (
              (a.config.fill.type === "gradient" ||
                a.config.fill.type[e] === "gradient") &&
              new ke(this.lineCtx.ctx, a).seriesHaveSameValues(e)
            ) {
              var i = t[e].slice();
              (i[i.length - 1] = i[i.length - 1] + 1e-6), (t[e] = i);
            }
            return t;
          },
        },
        {
          key: "calculatePoints",
          value: function (e) {
            var t = e.series,
              a = e.realIndex,
              i = e.x,
              s = e.y,
              n = e.i,
              o = e.j,
              l = e.prevY,
              c = this.w,
              h = [],
              d = [],
              u =
                this.lineCtx.categoryAxisCorrection + c.config.markers.offsetX;
            return (
              c.globals.isXNumeric &&
                (u =
                  (c.globals.seriesX[a][0] - c.globals.minX) /
                    this.lineCtx.xRatio +
                  c.config.markers.offsetX),
              o === 0 &&
                (h.push(u),
                d.push(
                  _.isNumber(t[n][0]) ? l + c.config.markers.offsetY : null
                )),
              h.push(i + c.config.markers.offsetX),
              d.push(
                _.isNumber(t[n][o + 1]) ? s + c.config.markers.offsetY : null
              ),
              { x: h, y: d }
            );
          },
        },
        {
          key: "checkPreviousPaths",
          value: function (e) {
            for (
              var t = e.pathFromLine,
                a = e.pathFromArea,
                i = e.realIndex,
                s = this.w,
                n = 0;
              n < s.globals.previousPaths.length;
              n++
            ) {
              var o = s.globals.previousPaths[n];
              (o.type === "line" || o.type === "area") &&
                o.paths.length > 0 &&
                parseInt(o.realIndex, 10) === parseInt(i, 10) &&
                (o.type === "line"
                  ? ((this.lineCtx.appendPathFrom = !1),
                    (t = s.globals.previousPaths[n].paths[0].d))
                  : o.type === "area" &&
                    ((this.lineCtx.appendPathFrom = !1),
                    (a = s.globals.previousPaths[n].paths[0].d),
                    s.config.stroke.show &&
                      s.globals.previousPaths[n].paths[1] &&
                      (t = s.globals.previousPaths[n].paths[1].d)));
            }
            return { pathFromLine: t, pathFromArea: a };
          },
        },
        {
          key: "determineFirstPrevY",
          value: function (e) {
            var t,
              a,
              i,
              s = e.i,
              n = e.realIndex,
              o = e.series,
              l = e.prevY,
              c = e.lineYPosition,
              h = e.translationsIndex,
              d = this.w,
              u =
                (d.config.chart.stacked && !d.globals.comboCharts) ||
                (d.config.chart.stacked &&
                  d.globals.comboCharts &&
                  (!this.w.config.chart.stackOnlyBar ||
                    ((t = this.w.config.series[n]) === null || t === void 0
                      ? void 0
                      : t.type) === "bar" ||
                    ((a = this.w.config.series[n]) === null || a === void 0
                      ? void 0
                      : a.type) === "column"));
            if (
              ((i = o[s]) === null || i === void 0 ? void 0 : i[0]) !== void 0
            )
              l =
                (c =
                  u && s > 0
                    ? this.lineCtx.prevSeriesY[s - 1][0]
                    : this.lineCtx.zeroY) -
                o[s][0] / this.lineCtx.yRatio[h] +
                2 *
                  (this.lineCtx.isReversed
                    ? o[s][0] / this.lineCtx.yRatio[h]
                    : 0);
            else if (u && s > 0 && o[s][0] === void 0) {
              for (var f = s - 1; f >= 0; f--)
                if (o[f][0] !== null && o[f][0] !== void 0) {
                  l = c = this.lineCtx.prevSeriesY[f][0];
                  break;
                }
            }
            return { prevY: l, lineYPosition: c };
          },
        },
      ]),
      r
    );
  })(),
  Hm = function (r) {
    for (
      var e,
        t,
        a,
        i,
        s = (function (h) {
          for (
            var d = [],
              u = h[0],
              f = h[1],
              g = (d[0] = yr(u, f)),
              p = 1,
              m = h.length - 1;
            p < m;
            p++
          )
            (u = f), (f = h[p + 1]), (d[p] = 0.5 * (g + (g = yr(u, f))));
          return (d[p] = g), d;
        })(r),
        n = r.length - 1,
        o = [],
        l = 0;
      l < n;
      l++
    )
      (a = yr(r[l], r[l + 1])),
        Math.abs(a) < 1e-6
          ? (s[l] = s[l + 1] = 0)
          : (i = (e = s[l] / a) * e + (t = s[l + 1] / a) * t) > 9 &&
            ((i = (3 * a) / Math.sqrt(i)), (s[l] = i * e), (s[l + 1] = i * t));
    for (var c = 0; c <= n; c++)
      (i =
        (r[Math.min(n, c + 1)][0] - r[Math.max(0, c - 1)][0]) /
        (6 * (1 + s[c] * s[c]))),
        o.push([i || 0, s[c] * i || 0]);
    return o;
  },
  Xm = function (r) {
    var e = Hm(r),
      t = r[1],
      a = r[0],
      i = [],
      s = e[1],
      n = e[0];
    i.push(a, [a[0] + n[0], a[1] + n[1], t[0] - s[0], t[1] - s[1], t[0], t[1]]);
    for (var o = 2, l = e.length; o < l; o++) {
      var c = r[o],
        h = e[o];
      i.push([c[0] - h[0], c[1] - h[1], c[0], c[1]]);
    }
    return i;
  },
  Bm = function (r, e, t) {
    var a = r.slice(e, t);
    if (e) {
      if (t - e > 1 && a[1].length < 6) {
        var i = a[0].length;
        a[1] = [
          2 * a[0][i - 2] - a[0][i - 4],
          2 * a[0][i - 1] - a[0][i - 3],
        ].concat(a[1]);
      }
      a[0] = a[0].slice(-2);
    }
    return a;
  };
function yr(r, e) {
  return (e[1] - r[1]) / (e[0] - r[0]);
}
var wr = (function () {
  function r(e, t, a) {
    U(this, r),
      (this.ctx = e),
      (this.w = e.w),
      (this.xyRatios = t),
      (this.pointsChart =
        !(
          this.w.config.chart.type !== "bubble" &&
          this.w.config.chart.type !== "scatter"
        ) || a),
      (this.scatter = new Xc(this.ctx)),
      (this.noNegatives = this.w.globals.minX === Number.MAX_VALUE),
      (this.lineHelpers = new zm(this)),
      (this.markers = new da(this.ctx)),
      (this.prevSeriesY = []),
      (this.categoryAxisCorrection = 0),
      (this.yaxisIndex = 0);
  }
  return (
    $(r, [
      {
        key: "draw",
        value: function (e, t, a, i) {
          var s,
            n = this.w,
            o = new H(this.ctx),
            l = n.globals.comboCharts ? t : n.config.chart.type,
            c = o.group({
              class: "apexcharts-".concat(l, "-series apexcharts-plot-series"),
            }),
            h = new ke(this.ctx, n);
          (this.yRatio = this.xyRatios.yRatio),
            (this.zRatio = this.xyRatios.zRatio),
            (this.xRatio = this.xyRatios.xRatio),
            (this.baseLineY = this.xyRatios.baseLineY),
            (e = h.getLogSeries(e)),
            (this.yRatio = h.getLogYRatios(this.yRatio)),
            (this.prevSeriesY = []);
          for (var d = [], u = 0; u < e.length; u++) {
            e = this.lineHelpers.sameValueSeriesFix(u, e);
            var f = n.globals.comboCharts ? a[u] : u,
              g = this.yRatio.length > 1 ? f : 0;
            this._initSerieVariables(e, u, f);
            var p = [],
              m = [],
              x = [],
              v = n.globals.padHorizontal + this.categoryAxisCorrection;
            this.ctx.series.addCollapsedClassToSeries(this.elSeries, f),
              n.globals.isXNumeric &&
                n.globals.seriesX.length > 0 &&
                (v = (n.globals.seriesX[f][0] - n.globals.minX) / this.xRatio),
              x.push(v);
            var b,
              k = v,
              y = void 0,
              C = k,
              A = this.zeroY,
              S = this.zeroY;
            (A = this.lineHelpers.determineFirstPrevY({
              i: u,
              realIndex: f,
              series: e,
              prevY: A,
              lineYPosition: 0,
              translationsIndex: g,
            }).prevY),
              n.config.stroke.curve === "monotoneCubic" && e[u][0] === null
                ? p.push(null)
                : p.push(A),
              (b = A),
              l === "rangeArea" &&
                ((y = S =
                  this.lineHelpers.determineFirstPrevY({
                    i: u,
                    realIndex: f,
                    series: i,
                    prevY: S,
                    lineYPosition: 0,
                    translationsIndex: g,
                  }).prevY),
                m.push(p[0] !== null ? S : null));
            var T = this._calculatePathsFrom({
                type: l,
                series: e,
                i: u,
                realIndex: f,
                translationsIndex: g,
                prevX: C,
                prevY: A,
                prevY2: S,
              }),
              E = [p[0]],
              L = [m[0]],
              I = {
                type: l,
                series: e,
                realIndex: f,
                translationsIndex: g,
                i: u,
                x: v,
                y: 1,
                pX: k,
                pY: b,
                pathsFrom: T,
                linePaths: [],
                areaPaths: [],
                seriesIndex: a,
                lineYPosition: 0,
                xArrj: x,
                yArrj: p,
                y2Arrj: m,
                seriesRangeEnd: i,
              },
              M = this._iterateOverDataPoints(
                Y(
                  Y({}, I),
                  {},
                  {
                    iterations: l === "rangeArea" ? e[u].length - 1 : void 0,
                    isRangeStart: !0,
                  }
                )
              );
            if (l === "rangeArea") {
              for (
                var O = this._calculatePathsFrom({
                    series: i,
                    i: u,
                    realIndex: f,
                    prevX: C,
                    prevY: S,
                  }),
                  N = this._iterateOverDataPoints(
                    Y(
                      Y({}, I),
                      {},
                      {
                        series: i,
                        xArrj: [v],
                        yArrj: E,
                        y2Arrj: L,
                        pY: y,
                        areaPaths: M.areaPaths,
                        pathsFrom: O,
                        iterations: i[u].length - 1,
                        isRangeStart: !1,
                      }
                    )
                  ),
                  F = M.linePaths.length / 2,
                  D = 0;
                D < F;
                D++
              )
                M.linePaths[D] = N.linePaths[D + F] + M.linePaths[D];
              M.linePaths.splice(F),
                (M.pathFromLine = N.pathFromLine + M.pathFromLine);
            } else M.pathFromArea += "z";
            this._handlePaths({ type: l, realIndex: f, i: u, paths: M }),
              this.elSeries.add(this.elPointsMain),
              this.elSeries.add(this.elDataLabelsWrap),
              d.push(this.elSeries);
          }
          if (
            (((s = n.config.series[0]) === null || s === void 0
              ? void 0
              : s.zIndex) !== void 0 &&
              d.sort(function (G, V) {
                return (
                  Number(G.node.getAttribute("zIndex")) -
                  Number(V.node.getAttribute("zIndex"))
                );
              }),
            n.config.chart.stacked)
          )
            for (var B = d.length - 1; B >= 0; B--) c.add(d[B]);
          else for (var z = 0; z < d.length; z++) c.add(d[z]);
          return c;
        },
      },
      {
        key: "_initSerieVariables",
        value: function (e, t, a) {
          var i = this.w,
            s = new H(this.ctx);
          (this.xDivision =
            i.globals.gridWidth /
            (i.globals.dataPoints -
              (i.config.xaxis.tickPlacement === "on" ? 1 : 0))),
            (this.strokeWidth = Array.isArray(i.config.stroke.width)
              ? i.config.stroke.width[a]
              : i.config.stroke.width);
          var n = 0;
          if (
            (this.yRatio.length > 1 &&
              ((this.yaxisIndex = i.globals.seriesYAxisReverseMap[a]), (n = a)),
            (this.isReversed =
              i.config.yaxis[this.yaxisIndex] &&
              i.config.yaxis[this.yaxisIndex].reversed),
            (this.zeroY =
              i.globals.gridHeight -
              this.baseLineY[n] -
              (this.isReversed ? i.globals.gridHeight : 0) +
              (this.isReversed ? 2 * this.baseLineY[n] : 0)),
            (this.areaBottomY = this.zeroY),
            (this.zeroY > i.globals.gridHeight ||
              i.config.plotOptions.area.fillTo === "end") &&
              (this.areaBottomY = i.globals.gridHeight),
            (this.categoryAxisCorrection = this.xDivision / 2),
            (this.elSeries = s.group({
              class: "apexcharts-series",
              zIndex:
                i.config.series[a].zIndex !== void 0
                  ? i.config.series[a].zIndex
                  : a,
              seriesName: _.escapeString(i.globals.seriesNames[a]),
            })),
            (this.elPointsMain = s.group({
              class: "apexcharts-series-markers-wrap",
              "data:realIndex": a,
            })),
            i.globals.hasNullValues)
          ) {
            var o = this.markers.plotChartMarkers({
              pointsPos: {
                x: [0],
                y: [i.globals.gridHeight + i.globals.markers.largestSize],
              },
              seriesIndex: t,
              j: 0,
              pSize: 0.1,
              alwaysDrawMarker: !0,
              isVirtualPoint: !0,
            });
            o !== null && this.elPointsMain.add(o);
          }
          this.elDataLabelsWrap = s.group({
            class: "apexcharts-datalabels",
            "data:realIndex": a,
          });
          var l = e[t].length === i.globals.dataPoints;
          this.elSeries.attr({
            "data:longestSeries": l,
            rel: t + 1,
            "data:realIndex": a,
          }),
            (this.appendPathFrom = !0);
        },
      },
      {
        key: "_calculatePathsFrom",
        value: function (e) {
          var t,
            a,
            i,
            s,
            n = e.type,
            o = e.series,
            l = e.i,
            c = e.realIndex,
            h = e.translationsIndex,
            d = e.prevX,
            u = e.prevY,
            f = e.prevY2,
            g = this.w,
            p = new H(this.ctx);
          if (o[l][0] === null) {
            for (var m = 0; m < o[l].length; m++)
              if (o[l][m] !== null) {
                (d = this.xDivision * m),
                  (u = this.zeroY - o[l][m] / this.yRatio[h]),
                  (t = p.move(d, u)),
                  (a = p.move(d, this.areaBottomY));
                break;
              }
          } else
            (t = p.move(d, u)),
              n === "rangeArea" && (t = p.move(d, f) + p.line(d, u)),
              (a = p.move(d, this.areaBottomY) + p.line(d, u));
          if (
            ((i = p.move(0, this.areaBottomY) + p.line(0, this.areaBottomY)),
            (s = p.move(0, this.areaBottomY) + p.line(0, this.areaBottomY)),
            g.globals.previousPaths.length > 0)
          ) {
            var x = this.lineHelpers.checkPreviousPaths({
              pathFromLine: i,
              pathFromArea: s,
              realIndex: c,
            });
            (i = x.pathFromLine), (s = x.pathFromArea);
          }
          return {
            prevX: d,
            prevY: u,
            linePath: t,
            areaPath: a,
            pathFromLine: i,
            pathFromArea: s,
          };
        },
      },
      {
        key: "_handlePaths",
        value: function (e) {
          var t = e.type,
            a = e.realIndex,
            i = e.i,
            s = e.paths,
            n = this.w,
            o = new H(this.ctx),
            l = new tt(this.ctx);
          this.prevSeriesY.push(s.yArrj),
            (n.globals.seriesXvalues[a] = s.xArrj),
            (n.globals.seriesYvalues[a] = s.yArrj);
          var c = n.config.forecastDataPoints;
          if (c.count > 0 && t !== "rangeArea") {
            var h =
                n.globals.seriesXvalues[a][
                  n.globals.seriesXvalues[a].length - c.count - 1
                ],
              d = o.drawRect(
                h,
                0,
                n.globals.gridWidth,
                n.globals.gridHeight,
                0
              );
            n.globals.dom.elForecastMask.appendChild(d.node);
            var u = o.drawRect(0, 0, h, n.globals.gridHeight, 0);
            n.globals.dom.elNonForecastMask.appendChild(u.node);
          }
          this.pointsChart ||
            n.globals.delayedElements.push({
              el: this.elPointsMain.node,
              index: a,
            });
          var f = {
            i,
            realIndex: a,
            animationDelay: i,
            initialSpeed: n.config.chart.animations.speed,
            dataChangeSpeed: n.config.chart.animations.dynamicAnimation.speed,
            className: "apexcharts-".concat(t),
          };
          if (t === "area")
            for (
              var g = l.fillPath({ seriesNumber: a }), p = 0;
              p < s.areaPaths.length;
              p++
            ) {
              var m = o.renderPaths(
                Y(
                  Y({}, f),
                  {},
                  {
                    pathFrom: s.pathFromArea,
                    pathTo: s.areaPaths[p],
                    stroke: "none",
                    strokeWidth: 0,
                    strokeLineCap: null,
                    fill: g,
                  }
                )
              );
              this.elSeries.add(m);
            }
          if (n.config.stroke.show && !this.pointsChart) {
            var x = null;
            if (t === "line") x = l.fillPath({ seriesNumber: a, i });
            else if (n.config.stroke.fill.type === "solid")
              x = n.globals.stroke.colors[a];
            else {
              var v = n.config.fill;
              (n.config.fill = n.config.stroke.fill),
                (x = l.fillPath({ seriesNumber: a, i })),
                (n.config.fill = v);
            }
            for (var b = 0; b < s.linePaths.length; b++) {
              var k = x;
              t === "rangeArea" && (k = l.fillPath({ seriesNumber: a }));
              var y = Y(
                  Y({}, f),
                  {},
                  {
                    pathFrom: s.pathFromLine,
                    pathTo: s.linePaths[b],
                    stroke: x,
                    strokeWidth: this.strokeWidth,
                    strokeLineCap: n.config.stroke.lineCap,
                    fill: t === "rangeArea" ? k : "none",
                  }
                ),
                C = o.renderPaths(y);
              if (
                (this.elSeries.add(C),
                C.attr("fill-rule", "evenodd"),
                c.count > 0 && t !== "rangeArea")
              ) {
                var A = o.renderPaths(y);
                A.node.setAttribute("stroke-dasharray", c.dashArray),
                  c.strokeWidth &&
                    A.node.setAttribute("stroke-width", c.strokeWidth),
                  this.elSeries.add(A),
                  A.attr(
                    "clip-path",
                    "url(#forecastMask".concat(n.globals.cuid, ")")
                  ),
                  C.attr(
                    "clip-path",
                    "url(#nonForecastMask".concat(n.globals.cuid, ")")
                  );
              }
            }
          }
        },
      },
      {
        key: "_iterateOverDataPoints",
        value: function (e) {
          var t,
            a,
            i = this,
            s = e.type,
            n = e.series,
            o = e.iterations,
            l = e.realIndex,
            c = e.translationsIndex,
            h = e.i,
            d = e.x,
            u = e.y,
            f = e.pX,
            g = e.pY,
            p = e.pathsFrom,
            m = e.linePaths,
            x = e.areaPaths,
            v = e.seriesIndex,
            b = e.lineYPosition,
            k = e.xArrj,
            y = e.yArrj,
            C = e.y2Arrj,
            A = e.isRangeStart,
            S = e.seriesRangeEnd,
            T = this.w,
            E = new H(this.ctx),
            L = this.yRatio,
            I = p.prevY,
            M = p.linePath,
            O = p.areaPath,
            N = p.pathFromLine,
            F = p.pathFromArea,
            D = _.isNumber(T.globals.minYArr[l])
              ? T.globals.minYArr[l]
              : T.globals.minY;
          o ||
            (o =
              T.globals.dataPoints > 1
                ? T.globals.dataPoints - 1
                : T.globals.dataPoints);
          var B = function (xe, Ce) {
              return Ce - xe / L[c] + 2 * (i.isReversed ? xe / L[c] : 0);
            },
            z = u,
            G =
              (T.config.chart.stacked && !T.globals.comboCharts) ||
              (T.config.chart.stacked &&
                T.globals.comboCharts &&
                (!this.w.config.chart.stackOnlyBar ||
                  ((t = this.w.config.series[l]) === null || t === void 0
                    ? void 0
                    : t.type) === "bar" ||
                  ((a = this.w.config.series[l]) === null || a === void 0
                    ? void 0
                    : a.type) === "column")),
            V = T.config.stroke.curve;
          Array.isArray(V) && (V = Array.isArray(v) ? V[v[h]] : V[h]);
          for (var Q, Z = 0, X = 0; X < o && n[h].length !== 0; X++) {
            var q = n[h][X + 1] === void 0 || n[h][X + 1] === null;
            if (T.globals.isXNumeric) {
              var J = T.globals.seriesX[l][X + 1];
              T.globals.seriesX[l][X + 1] === void 0 &&
                (J = T.globals.seriesX[l][o - 1]),
                (d = (J - T.globals.minX) / this.xRatio);
            } else d += this.xDivision;
            G
              ? h > 0 &&
                T.globals.collapsedSeries.length < T.config.series.length - 1
                ? (b =
                    this.prevSeriesY[
                      (function (xe) {
                        for (var Ce = xe; Ce > 0; Ce--) {
                          if (
                            !(
                              T.globals.collapsedSeriesIndices.indexOf(
                                (v == null ? void 0 : v[Ce]) || Ce
                              ) > -1
                            )
                          )
                            return Ce;
                          Ce--;
                        }
                        return 0;
                      })(h - 1)
                    ][X + 1])
                : (b = this.zeroY)
              : (b = this.zeroY),
              q
                ? (u = B(D, b))
                : ((u = B(n[h][X + 1], b)),
                  s === "rangeArea" && (z = B(S[h][X + 1], b))),
              k.push(n[h][X + 1] === null ? null : d),
              !q ||
              (T.config.stroke.curve !== "smooth" &&
                T.config.stroke.curve !== "monotoneCubic")
                ? (y.push(u), C.push(z))
                : (y.push(null), C.push(null));
            var te = this.lineHelpers.calculatePoints({
                series: n,
                x: d,
                y: u,
                realIndex: l,
                i: h,
                j: X,
                prevY: I,
              }),
              se = this._createPaths({
                type: s,
                series: n,
                i: h,
                realIndex: l,
                j: X,
                x: d,
                y: u,
                y2: z,
                xArrj: k,
                yArrj: y,
                y2Arrj: C,
                pX: f,
                pY: g,
                pathState: Z,
                segmentStartX: Q,
                linePath: M,
                areaPath: O,
                linePaths: m,
                areaPaths: x,
                curve: V,
                isRangeStart: A,
              });
            (x = se.areaPaths),
              (m = se.linePaths),
              (f = se.pX),
              (g = se.pY),
              (Z = se.pathState),
              (Q = se.segmentStartX),
              (O = se.areaPath),
              (M = se.linePath),
              !this.appendPathFrom ||
                T.globals.hasNullValues ||
                (V === "monotoneCubic" && s === "rangeArea") ||
                ((N += E.line(d, this.areaBottomY)),
                (F += E.line(d, this.areaBottomY))),
              this.handleNullDataPoints(n, te, h, X, l),
              this._handleMarkersAndLabels({
                type: s,
                pointsPos: te,
                i: h,
                j: X,
                realIndex: l,
                isRangeStart: A,
              });
          }
          return {
            yArrj: y,
            xArrj: k,
            pathFromArea: F,
            areaPaths: x,
            pathFromLine: N,
            linePaths: m,
            linePath: M,
            areaPath: O,
          };
        },
      },
      {
        key: "_handleMarkersAndLabels",
        value: function (e) {
          var t = e.type,
            a = e.pointsPos,
            i = e.isRangeStart,
            s = e.i,
            n = e.j,
            o = e.realIndex,
            l = this.w,
            c = new ia(this.ctx);
          if (this.pointsChart)
            this.scatter.draw(this.elSeries, n, {
              realIndex: o,
              pointsPos: a,
              zRatio: this.zRatio,
              elParent: this.elPointsMain,
            });
          else {
            l.globals.series[s].length > 1 &&
              this.elPointsMain.node.classList.add("apexcharts-element-hidden");
            var h = this.markers.plotChartMarkers({
              pointsPos: a,
              seriesIndex: o,
              j: n + 1,
            });
            h !== null && this.elPointsMain.add(h);
          }
          var d = c.drawDataLabel({
            type: t,
            isRangeStart: i,
            pos: a,
            i: o,
            j: n + 1,
          });
          d !== null && this.elDataLabelsWrap.add(d);
        },
      },
      {
        key: "_createPaths",
        value: function (e) {
          var t = e.type,
            a = e.series,
            i = e.i;
          e.realIndex;
          var s,
            n = e.j,
            o = e.x,
            l = e.y,
            c = e.xArrj,
            h = e.yArrj,
            d = e.y2,
            u = e.y2Arrj,
            f = e.pX,
            g = e.pY,
            p = e.pathState,
            m = e.segmentStartX,
            x = e.linePath,
            v = e.areaPath,
            b = e.linePaths,
            k = e.areaPaths,
            y = e.curve,
            C = e.isRangeStart,
            A = new H(this.ctx),
            S = this.areaBottomY,
            T = t === "rangeArea",
            E = t === "rangeArea" && C;
          switch (y) {
            case "monotoneCubic":
              var L = C ? h : u;
              switch (p) {
                case 0:
                  if (L[n + 1] === null) break;
                  p = 1;
                case 1:
                  if (!(T ? c.length === a[i].length : n === a[i].length - 2))
                    break;
                case 2:
                  var I = C ? c : c.slice().reverse(),
                    M = C ? L : L.slice().reverse(),
                    O =
                      ((s = M),
                      I.map(function (J, te) {
                        return [J, s[te]];
                      }).filter(function (J) {
                        return J[1] !== null;
                      })),
                    N = O.length > 1 ? Xm(O) : O,
                    F = [];
                  T && (E ? (k = O) : (F = k.reverse()));
                  var D = 0,
                    B = 0;
                  if (
                    ((function (J, te) {
                      for (
                        var se = (function (fa) {
                            var Oe = [],
                              st = 0;
                            return (
                              fa.forEach(function (ch) {
                                ch !== null
                                  ? st++
                                  : st > 0 && (Oe.push(st), (st = 0));
                              }),
                              st > 0 && Oe.push(st),
                              Oe
                            );
                          })(J),
                          xe = [],
                          Ce = 0,
                          Re = 0;
                        Ce < se.length;
                        Re += se[Ce++]
                      )
                        xe[Ce] = Bm(te, Re, Re + se[Ce]);
                      return xe;
                    })(M, N).forEach(function (J) {
                      D++;
                      var te = (function (Ce) {
                          for (var Re = "", fa = 0; fa < Ce.length; fa++) {
                            var Oe = Ce[fa],
                              st = Oe.length;
                            st > 4
                              ? ((Re += "C".concat(Oe[0], ", ").concat(Oe[1])),
                                (Re += ", ".concat(Oe[2], ", ").concat(Oe[3])),
                                (Re += ", ".concat(Oe[4], ", ").concat(Oe[5])))
                              : st > 2 &&
                                ((Re += "S".concat(Oe[0], ", ").concat(Oe[1])),
                                (Re += ", ".concat(Oe[2], ", ").concat(Oe[3])));
                          }
                          return Re;
                        })(J),
                        se = B,
                        xe = (B += J.length) - 1;
                      E
                        ? (x = A.move(O[se][0], O[se][1]) + te)
                        : T
                        ? (x =
                            A.move(F[se][0], F[se][1]) +
                            A.line(O[se][0], O[se][1]) +
                            te +
                            A.line(F[xe][0], F[xe][1]))
                        : ((x = A.move(O[se][0], O[se][1]) + te),
                          (v =
                            x +
                            A.line(O[xe][0], S) +
                            A.line(O[se][0], S) +
                            "z"),
                          k.push(v)),
                        b.push(x);
                    }),
                    T && D > 1 && !E)
                  ) {
                    var z = b.slice(D).reverse();
                    b.splice(D),
                      z.forEach(function (J) {
                        return b.push(J);
                      });
                  }
                  p = 0;
              }
              break;
            case "smooth":
              var G = 0.35 * (o - f);
              if (a[i][n] === null) p = 0;
              else
                switch (p) {
                  case 0:
                    if (
                      ((m = f),
                      (x = E ? A.move(f, u[n]) + A.line(f, g) : A.move(f, g)),
                      (v = A.move(f, g)),
                      a[i][n + 1] === null || a[i][n + 1] === void 0)
                    ) {
                      b.push(x), k.push(v);
                      break;
                    }
                    if (((p = 1), n < a[i].length - 2)) {
                      var V = A.curve(f + G, g, o - G, l, o, l);
                      (x += V), (v += V);
                      break;
                    }
                  case 1:
                    if (a[i][n + 1] === null)
                      (x += E ? A.line(f, d) : A.move(f, g)),
                        (v += A.line(f, S) + A.line(m, S) + "z"),
                        b.push(x),
                        k.push(v),
                        (p = -1);
                    else {
                      var Q = A.curve(f + G, g, o - G, l, o, l);
                      (x += Q),
                        (v += Q),
                        n >= a[i].length - 2 &&
                          (E && (x += A.curve(o, l, o, l, o, d) + A.move(o, d)),
                          (v += A.curve(o, l, o, l, o, S) + A.line(m, S) + "z"),
                          b.push(x),
                          k.push(v),
                          (p = -1));
                    }
                }
              (f = o), (g = l);
              break;
            default:
              var Z = function (J, te, se) {
                var xe = [];
                switch (J) {
                  case "stepline":
                    xe = A.line(te, null, "H") + A.line(null, se, "V");
                    break;
                  case "linestep":
                    xe = A.line(null, se, "V") + A.line(te, null, "H");
                    break;
                  case "straight":
                    xe = A.line(te, se);
                }
                return xe;
              };
              if (a[i][n] === null) p = 0;
              else
                switch (p) {
                  case 0:
                    if (
                      ((m = f),
                      (x = E ? A.move(f, u[n]) + A.line(f, g) : A.move(f, g)),
                      (v = A.move(f, g)),
                      a[i][n + 1] === null || a[i][n + 1] === void 0)
                    ) {
                      b.push(x), k.push(v);
                      break;
                    }
                    if (((p = 1), n < a[i].length - 2)) {
                      var X = Z(y, o, l);
                      (x += X), (v += X);
                      break;
                    }
                  case 1:
                    if (a[i][n + 1] === null)
                      (x += E ? A.line(f, d) : A.move(f, g)),
                        (v += A.line(f, S) + A.line(m, S) + "z"),
                        b.push(x),
                        k.push(v),
                        (p = -1);
                    else {
                      var q = Z(y, o, l);
                      (x += q),
                        (v += q),
                        n >= a[i].length - 2 &&
                          (E && (x += A.line(o, d)),
                          (v += A.line(o, S) + A.line(m, S) + "z"),
                          b.push(x),
                          k.push(v),
                          (p = -1));
                    }
                }
              (f = o), (g = l);
          }
          return {
            linePaths: b,
            areaPaths: k,
            pX: f,
            pY: g,
            pathState: p,
            segmentStartX: m,
            linePath: x,
            areaPath: v,
          };
        },
      },
      {
        key: "handleNullDataPoints",
        value: function (e, t, a, i, s) {
          var n = this.w;
          if (
            (e[a][i] === null && n.config.markers.showNullDataPoints) ||
            e[a].length === 1
          ) {
            var o = this.strokeWidth - n.config.markers.strokeWidth / 2;
            o > 0 || (o = 0);
            var l = this.markers.plotChartMarkers({
              pointsPos: t,
              seriesIndex: s,
              j: i + 1,
              pSize: o,
              alwaysDrawMarker: !0,
            });
            l !== null && this.elPointsMain.add(l);
          }
        },
      },
    ]),
    r
  );
})();
(window.TreemapSquared = {}),
  (window.TreemapSquared.generate = (function () {
    function r(o, l, c, h) {
      (this.xoffset = o),
        (this.yoffset = l),
        (this.height = h),
        (this.width = c),
        (this.shortestEdge = function () {
          return Math.min(this.height, this.width);
        }),
        (this.getCoordinates = function (d) {
          var u,
            f = [],
            g = this.xoffset,
            p = this.yoffset,
            m = s(d) / this.height,
            x = s(d) / this.width;
          if (this.width >= this.height)
            for (u = 0; u < d.length; u++)
              f.push([g, p, g + m, p + d[u] / m]), (p += d[u] / m);
          else
            for (u = 0; u < d.length; u++)
              f.push([g, p, g + d[u] / x, p + x]), (g += d[u] / x);
          return f;
        }),
        (this.cutArea = function (d) {
          var u;
          if (this.width >= this.height) {
            var f = d / this.height,
              g = this.width - f;
            u = new r(this.xoffset + f, this.yoffset, g, this.height);
          } else {
            var p = d / this.width,
              m = this.height - p;
            u = new r(this.xoffset, this.yoffset + p, this.width, m);
          }
          return u;
        });
    }
    function e(o, l, c, h, d) {
      (h = h === void 0 ? 0 : h), (d = d === void 0 ? 0 : d);
      var u = t(
        (function (f, g) {
          var p,
            m = [],
            x = g / s(f);
          for (p = 0; p < f.length; p++) m[p] = f[p] * x;
          return m;
        })(o, l * c),
        [],
        new r(h, d, l, c),
        []
      );
      return (function (f) {
        var g,
          p,
          m = [];
        for (g = 0; g < f.length; g++)
          for (p = 0; p < f[g].length; p++) m.push(f[g][p]);
        return m;
      })(u);
    }
    function t(o, l, c, h) {
      var d, u, f;
      if (o.length !== 0)
        return (
          (d = c.shortestEdge()),
          (function (g, p, m) {
            var x;
            if (g.length === 0) return !0;
            (x = g.slice()).push(p);
            var v = a(g, m),
              b = a(x, m);
            return v >= b;
          })(l, (u = o[0]), d)
            ? (l.push(u), t(o.slice(1), l, c, h))
            : ((f = c.cutArea(s(l), h)),
              h.push(c.getCoordinates(l)),
              t(o, [], f, h)),
          h
        );
      h.push(c.getCoordinates(l));
    }
    function a(o, l) {
      var c = Math.min.apply(Math, o),
        h = Math.max.apply(Math, o),
        d = s(o);
      return Math.max(
        (Math.pow(l, 2) * h) / Math.pow(d, 2),
        Math.pow(d, 2) / (Math.pow(l, 2) * c)
      );
    }
    function i(o) {
      return o && o.constructor === Array;
    }
    function s(o) {
      var l,
        c = 0;
      for (l = 0; l < o.length; l++) c += o[l];
      return c;
    }
    function n(o) {
      var l,
        c = 0;
      if (i(o[0])) for (l = 0; l < o.length; l++) c += n(o[l]);
      else c = s(o);
      return c;
    }
    return function o(l, c, h, d, u) {
      (d = d === void 0 ? 0 : d), (u = u === void 0 ? 0 : u);
      var f,
        g,
        p = [],
        m = [];
      if (i(l[0])) {
        for (g = 0; g < l.length; g++) p[g] = n(l[g]);
        for (f = e(p, c, h, d, u), g = 0; g < l.length; g++)
          m.push(
            o(l[g], f[g][2] - f[g][0], f[g][3] - f[g][1], f[g][0], f[g][1])
          );
      } else m = e(l, c, h, d, u);
      return m;
    };
  })());
var Ym = (function () {
    function r(e, t) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.strokeWidth = this.w.config.stroke.width),
        (this.helpers = new $c(e)),
        (this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation),
        (this.labels = []);
    }
    return (
      $(r, [
        {
          key: "draw",
          value: function (e) {
            var t = this,
              a = this.w,
              i = new H(this.ctx),
              s = new tt(this.ctx),
              n = i.group({ class: "apexcharts-treemap" });
            if (a.globals.noData) return n;
            var o = [];
            return (
              e.forEach(function (l) {
                var c = l.map(function (h) {
                  return Math.abs(h);
                });
                o.push(c);
              }),
              (this.negRange = this.helpers.checkColorRange()),
              a.config.series.forEach(function (l, c) {
                l.data.forEach(function (h) {
                  Array.isArray(t.labels[c]) || (t.labels[c] = []),
                    t.labels[c].push(h.x);
                });
              }),
              window.TreemapSquared.generate(
                o,
                a.globals.gridWidth,
                a.globals.gridHeight
              ).forEach(function (l, c) {
                var h = i.group({
                  class: "apexcharts-series apexcharts-treemap-series",
                  seriesName: _.escapeString(a.globals.seriesNames[c]),
                  rel: c + 1,
                  "data:realIndex": c,
                });
                if (a.config.chart.dropShadow.enabled) {
                  var d = a.config.chart.dropShadow;
                  new Ee(t.ctx).dropShadow(n, d, c);
                }
                var u = i.group({ class: "apexcharts-data-labels" }),
                  f = { xMin: 1 / 0, yMin: 1 / 0, xMax: -1 / 0, yMax: -1 / 0 };
                l.forEach(function (N, F) {
                  var D = N[0],
                    B = N[1],
                    z = N[2],
                    G = N[3];
                  (f.xMin = Math.min(f.xMin, D)),
                    (f.yMin = Math.min(f.yMin, B)),
                    (f.xMax = Math.max(f.xMax, z)),
                    (f.yMax = Math.max(f.yMax, G));
                  var V = t.helpers.getShadeColor(
                      a.config.chart.type,
                      c,
                      F,
                      t.negRange
                    ),
                    Q = V.color,
                    Z = s.fillPath({
                      color: Q,
                      seriesNumber: c,
                      dataPointIndex: F,
                    }),
                    X = i.drawRect(
                      D,
                      B,
                      z - D,
                      G - B,
                      a.config.plotOptions.treemap.borderRadius,
                      "#fff",
                      1,
                      t.strokeWidth,
                      a.config.plotOptions.treemap.useFillColorAsStroke
                        ? Q
                        : a.globals.stroke.colors[c]
                    );
                  X.attr({
                    cx: D,
                    cy: B,
                    index: c,
                    i: c,
                    j: F,
                    width: z - D,
                    height: G - B,
                    fill: Z,
                  }),
                    X.node.classList.add("apexcharts-treemap-rect"),
                    t.helpers.addListeners(X);
                  var q = {
                      x: D + (z - D) / 2,
                      y: B + (G - B) / 2,
                      width: 0,
                      height: 0,
                    },
                    J = { x: D, y: B, width: z - D, height: G - B };
                  if (
                    a.config.chart.animations.enabled &&
                    !a.globals.dataChanged
                  ) {
                    var te = 1;
                    a.globals.resized || (te = a.config.chart.animations.speed),
                      t.animateTreemap(X, q, J, te);
                  }
                  if (a.globals.dataChanged) {
                    var se = 1;
                    t.dynamicAnim.enabled &&
                      a.globals.shouldAnimate &&
                      ((se = t.dynamicAnim.speed),
                      a.globals.previousPaths[c] &&
                        a.globals.previousPaths[c][F] &&
                        a.globals.previousPaths[c][F].rect &&
                        (q = a.globals.previousPaths[c][F].rect),
                      t.animateTreemap(X, q, J, se));
                  }
                  var xe = t.getFontSize(N),
                    Ce = a.config.dataLabels.formatter(t.labels[c][F], {
                      value: a.globals.series[c][F],
                      seriesIndex: c,
                      dataPointIndex: F,
                      w: a,
                    });
                  a.config.plotOptions.treemap.dataLabels.format ===
                    "truncate" &&
                    ((xe = parseInt(a.config.dataLabels.style.fontSize, 10)),
                    (Ce = t.truncateLabels(Ce, xe, D, B, z, G)));
                  var Re = null;
                  a.globals.series[c][F] &&
                    (Re = t.helpers.calculateDataLabels({
                      text: Ce,
                      x: (D + z) / 2,
                      y: (B + G) / 2 + t.strokeWidth / 2 + xe / 3,
                      i: c,
                      j: F,
                      colorProps: V,
                      fontSize: xe,
                      series: e,
                    })),
                    a.config.dataLabels.enabled &&
                      Re &&
                      t.rotateToFitLabel(Re, xe, Ce, D, B, z, G),
                    h.add(X),
                    Re !== null && h.add(Re);
                });
                var g = a.config.plotOptions.treemap.seriesTitle;
                if (a.config.series.length > 1 && g && g.show) {
                  var p = a.config.series[c].name || "";
                  if (p && f.xMin < 1 / 0 && f.yMin < 1 / 0) {
                    var m = g.offsetX,
                      x = g.offsetY,
                      v = g.borderColor,
                      b = g.borderWidth,
                      k = g.borderRadius,
                      y = g.style,
                      C = y.color || a.config.chart.foreColor,
                      A = {
                        left: y.padding.left,
                        right: y.padding.right,
                        top: y.padding.top,
                        bottom: y.padding.bottom,
                      },
                      S = i.getTextRects(p, y.fontSize, y.fontFamily),
                      T = S.width + A.left + A.right,
                      E = S.height + A.top + A.bottom,
                      L = f.xMin + (m || 0),
                      I = f.yMin + (x || 0),
                      M = i.drawRect(L, I, T, E, k, y.background, 1, b, v),
                      O = i.drawText({
                        x: L + A.left,
                        y: I + A.top + 0.75 * S.height,
                        text: p,
                        fontSize: y.fontSize,
                        fontFamily: y.fontFamily,
                        fontWeight: y.fontWeight,
                        foreColor: C,
                        cssClass: y.cssClass || "",
                      });
                    h.add(M), h.add(O);
                  }
                }
                h.add(u), n.add(h);
              }),
              n
            );
          },
        },
        {
          key: "getFontSize",
          value: function (e) {
            var t = this.w,
              a =
                (function i(s) {
                  var n,
                    o = 0;
                  if (Array.isArray(s[0]))
                    for (n = 0; n < s.length; n++) o += i(s[n]);
                  else for (n = 0; n < s.length; n++) o += s[n].length;
                  return o;
                })(this.labels) /
                (function i(s) {
                  var n,
                    o = 0;
                  if (Array.isArray(s[0]))
                    for (n = 0; n < s.length; n++) o += i(s[n]);
                  else for (n = 0; n < s.length; n++) o += 1;
                  return o;
                })(this.labels);
            return (function (i, s) {
              var n = i * s,
                o = Math.pow(n, 0.5);
              return Math.min(
                o / a,
                parseInt(t.config.dataLabels.style.fontSize, 10)
              );
            })(e[2] - e[0], e[3] - e[1]);
          },
        },
        {
          key: "rotateToFitLabel",
          value: function (e, t, a, i, s, n, o) {
            var l = new H(this.ctx),
              c = l.getTextRects(a, t);
            if (
              c.width + this.w.config.stroke.width + 5 > n - i &&
              c.width <= o - s
            ) {
              var h = l.rotateAroundCenter(e.node);
              e.node.setAttribute(
                "transform",
                "rotate(-90 "
                  .concat(h.x, " ")
                  .concat(h.y, ") translate(")
                  .concat(c.height / 3, ")")
              );
            }
          },
        },
        {
          key: "truncateLabels",
          value: function (e, t, a, i, s, n) {
            var o = new H(this.ctx),
              l =
                o.getTextRects(e, t).width + this.w.config.stroke.width + 5 >
                  s - a && n - i > s - a
                  ? n - i
                  : s - a,
              c = o.getTextBasedOnMaxWidth({
                text: e,
                maxWidth: l,
                fontSize: t,
              });
            return e.length !== c.length && l / t < 5 ? "" : c;
          },
        },
        {
          key: "animateTreemap",
          value: function (e, t, a, i) {
            var s = new oa(this.ctx);
            s.animateRect(e, t, a, i, function () {
              s.animationCompleted(e);
            });
          },
        },
      ]),
      r
    );
  })(),
  Kc = 86400,
  Wm = 10 / Kc,
  Vm = (function () {
    function r(e) {
      U(this, r),
        (this.ctx = e),
        (this.w = e.w),
        (this.timeScaleArray = []),
        (this.utc = this.w.config.xaxis.labels.datetimeUTC);
    }
    return (
      $(r, [
        {
          key: "calculateTimeScaleTicks",
          value: function (e, t) {
            var a = this,
              i = this.w;
            if (i.globals.allSeriesCollapsed)
              return (
                (i.globals.labels = []), (i.globals.timescaleLabels = []), []
              );
            var s = new Me(this.ctx),
              n = (t - e) / 864e5;
            this.determineInterval(n),
              (i.globals.disableZoomIn = !1),
              (i.globals.disableZoomOut = !1),
              n < Wm
                ? (i.globals.disableZoomIn = !0)
                : n > 5e4 && (i.globals.disableZoomOut = !0);
            var o = s.getTimeUnitsfromTimestamp(e, t, this.utc),
              l = i.globals.gridWidth / n,
              c = l / 24,
              h = c / 60,
              d = h / 60,
              u = Math.floor(24 * n),
              f = Math.floor(1440 * n),
              g = Math.floor(n * Kc),
              p = Math.floor(n),
              m = Math.floor(n / 30),
              x = Math.floor(n / 365),
              v = {
                minMillisecond: o.minMillisecond,
                minSecond: o.minSecond,
                minMinute: o.minMinute,
                minHour: o.minHour,
                minDate: o.minDate,
                minMonth: o.minMonth,
                minYear: o.minYear,
              },
              b = {
                firstVal: v,
                currentMillisecond: v.minMillisecond,
                currentSecond: v.minSecond,
                currentMinute: v.minMinute,
                currentHour: v.minHour,
                currentMonthDate: v.minDate,
                currentDate: v.minDate,
                currentMonth: v.minMonth,
                currentYear: v.minYear,
                daysWidthOnXAxis: l,
                hoursWidthOnXAxis: c,
                minutesWidthOnXAxis: h,
                secondsWidthOnXAxis: d,
                numberOfSeconds: g,
                numberOfMinutes: f,
                numberOfHours: u,
                numberOfDays: p,
                numberOfMonths: m,
                numberOfYears: x,
              };
            switch (this.tickInterval) {
              case "years":
                this.generateYearScale(b);
                break;
              case "months":
              case "half_year":
                this.generateMonthScale(b);
                break;
              case "months_days":
              case "months_fortnight":
              case "days":
              case "week_days":
                this.generateDayScale(b);
                break;
              case "hours":
                this.generateHourScale(b);
                break;
              case "minutes_fives":
              case "minutes":
                this.generateMinuteScale(b);
                break;
              case "seconds_tens":
              case "seconds_fives":
              case "seconds":
                this.generateSecondScale(b);
            }
            var k = this.timeScaleArray.map(function (y) {
              var C = {
                position: y.position,
                unit: y.unit,
                year: y.year,
                day: y.day ? y.day : 1,
                hour: y.hour ? y.hour : 0,
                month: y.month + 1,
              };
              return y.unit === "month"
                ? Y(Y({}, C), {}, { day: 1, value: y.value + 1 })
                : y.unit === "day" || y.unit === "hour"
                ? Y(Y({}, C), {}, { value: y.value })
                : y.unit === "minute"
                ? Y(Y({}, C), {}, { value: y.value, minute: y.value })
                : y.unit === "second"
                ? Y(
                    Y({}, C),
                    {},
                    { value: y.value, minute: y.minute, second: y.second }
                  )
                : y;
            });
            return k.filter(function (y) {
              var C = 1,
                A = Math.ceil(i.globals.gridWidth / 120),
                S = y.value;
              i.config.xaxis.tickAmount !== void 0 &&
                (A = i.config.xaxis.tickAmount),
                k.length > A && (C = Math.floor(k.length / A));
              var T = !1,
                E = !1;
              switch (a.tickInterval) {
                case "years":
                  y.unit === "year" && (T = !0);
                  break;
                case "half_year":
                  (C = 7), y.unit === "year" && (T = !0);
                  break;
                case "months":
                  (C = 1), y.unit === "year" && (T = !0);
                  break;
                case "months_fortnight":
                  (C = 15),
                    (y.unit !== "year" && y.unit !== "month") || (T = !0),
                    S === 30 && (E = !0);
                  break;
                case "months_days":
                  (C = 10),
                    y.unit === "month" && (T = !0),
                    S === 30 && (E = !0);
                  break;
                case "week_days":
                  (C = 8), y.unit === "month" && (T = !0);
                  break;
                case "days":
                  (C = 1), y.unit === "month" && (T = !0);
                  break;
                case "hours":
                  y.unit === "day" && (T = !0);
                  break;
                case "minutes_fives":
                case "seconds_fives":
                  S % 5 != 0 && (E = !0);
                  break;
                case "seconds_tens":
                  S % 10 != 0 && (E = !0);
              }
              if (
                a.tickInterval === "hours" ||
                a.tickInterval === "minutes_fives" ||
                a.tickInterval === "seconds_tens" ||
                a.tickInterval === "seconds_fives"
              ) {
                if (!E) return !0;
              } else if ((S % C == 0 || T) && !E) return !0;
            });
          },
        },
        {
          key: "recalcDimensionsBasedOnFormat",
          value: function (e, t) {
            var a = this.w,
              i = this.formatDates(e),
              s = this.removeOverlappingTS(i);
            (a.globals.timescaleLabels = s.slice()),
              new _i(this.ctx).plotCoords();
          },
        },
        {
          key: "determineInterval",
          value: function (e) {
            var t = 24 * e,
              a = 60 * t;
            switch (!0) {
              case e / 365 > 5:
                this.tickInterval = "years";
                break;
              case e > 800:
                this.tickInterval = "half_year";
                break;
              case e > 180:
                this.tickInterval = "months";
                break;
              case e > 90:
                this.tickInterval = "months_fortnight";
                break;
              case e > 60:
                this.tickInterval = "months_days";
                break;
              case e > 30:
                this.tickInterval = "week_days";
                break;
              case e > 2:
                this.tickInterval = "days";
                break;
              case t > 2.4:
                this.tickInterval = "hours";
                break;
              case a > 15:
                this.tickInterval = "minutes_fives";
                break;
              case a > 5:
                this.tickInterval = "minutes";
                break;
              case a > 1:
                this.tickInterval = "seconds_tens";
                break;
              case 60 * a > 20:
                this.tickInterval = "seconds_fives";
                break;
              default:
                this.tickInterval = "seconds";
            }
          },
        },
        {
          key: "generateYearScale",
          value: function (e) {
            var t = e.firstVal,
              a = e.currentMonth,
              i = e.currentYear,
              s = e.daysWidthOnXAxis,
              n = e.numberOfYears,
              o = t.minYear,
              l = 0,
              c = new Me(this.ctx),
              h = "year";
            if (t.minDate > 1 || t.minMonth > 0) {
              var d = c.determineRemainingDaysOfYear(
                t.minYear,
                t.minMonth,
                t.minDate
              );
              (l = (c.determineDaysOfYear(t.minYear) - d + 1) * s),
                (o = t.minYear + 1),
                this.timeScaleArray.push({
                  position: l,
                  value: o,
                  unit: h,
                  year: o,
                  month: _.monthMod(a + 1),
                });
            } else
              t.minDate === 1 &&
                t.minMonth === 0 &&
                this.timeScaleArray.push({
                  position: l,
                  value: o,
                  unit: h,
                  year: i,
                  month: _.monthMod(a + 1),
                });
            for (var u = o, f = l, g = 0; g < n; g++)
              u++,
                (f = c.determineDaysOfYear(u - 1) * s + f),
                this.timeScaleArray.push({
                  position: f,
                  value: u,
                  unit: h,
                  year: u,
                  month: 1,
                });
          },
        },
        {
          key: "generateMonthScale",
          value: function (e) {
            var t = e.firstVal,
              a = e.currentMonthDate,
              i = e.currentMonth,
              s = e.currentYear,
              n = e.daysWidthOnXAxis,
              o = e.numberOfMonths,
              l = i,
              c = 0,
              h = new Me(this.ctx),
              d = "month",
              u = 0;
            if (t.minDate > 1) {
              (c = (h.determineDaysOfMonths(i + 1, t.minYear) - a + 1) * n),
                (l = _.monthMod(i + 1));
              var f = s + u,
                g = _.monthMod(l),
                p = l;
              l === 0 && ((d = "year"), (p = f), (g = 1), (f += u += 1)),
                this.timeScaleArray.push({
                  position: c,
                  value: p,
                  unit: d,
                  year: f,
                  month: g,
                });
            } else
              this.timeScaleArray.push({
                position: c,
                value: l,
                unit: d,
                year: s,
                month: _.monthMod(i),
              });
            for (var m = l + 1, x = c, v = 0, b = 1; v < o; v++, b++) {
              (m = _.monthMod(m)) === 0
                ? ((d = "year"), (u += 1))
                : (d = "month");
              var k = this._getYear(s, m, u);
              x = h.determineDaysOfMonths(m, k) * n + x;
              var y = m === 0 ? k : m;
              this.timeScaleArray.push({
                position: x,
                value: y,
                unit: d,
                year: k,
                month: m === 0 ? 1 : m,
              }),
                m++;
            }
          },
        },
        {
          key: "generateDayScale",
          value: function (e) {
            var t = e.firstVal,
              a = e.currentMonth,
              i = e.currentYear,
              s = e.hoursWidthOnXAxis,
              n = e.numberOfDays,
              o = new Me(this.ctx),
              l = "day",
              c = t.minDate + 1,
              h = c,
              d = function (b, k, y) {
                return (
                  b > o.determineDaysOfMonths(k + 1, y) &&
                    ((h = 1), (l = "month"), (f = k += 1)),
                  k
                );
              },
              u = (24 - t.minHour) * s,
              f = c,
              g = d(h, a, i);
            t.minHour === 0 && t.minDate === 1
              ? ((u = 0),
                (f = _.monthMod(t.minMonth)),
                (l = "month"),
                (h = t.minDate))
              : t.minDate !== 1 &&
                t.minHour === 0 &&
                t.minMinute === 0 &&
                ((u = 0),
                (c = t.minDate),
                (f = c),
                (g = d((h = c), a, i)),
                f !== 1 && (l = "day")),
              this.timeScaleArray.push({
                position: u,
                value: f,
                unit: l,
                year: this._getYear(i, g, 0),
                month: _.monthMod(g),
                day: h,
              });
            for (var p = u, m = 0; m < n; m++) {
              (l = "day"), (g = d((h += 1), g, this._getYear(i, g, 0)));
              var x = this._getYear(i, g, 0);
              p = 24 * s + p;
              var v = h === 1 ? _.monthMod(g) : h;
              this.timeScaleArray.push({
                position: p,
                value: v,
                unit: l,
                year: x,
                month: _.monthMod(g),
                day: v,
              });
            }
          },
        },
        {
          key: "generateHourScale",
          value: function (e) {
            var t = e.firstVal,
              a = e.currentDate,
              i = e.currentMonth,
              s = e.currentYear,
              n = e.minutesWidthOnXAxis,
              o = e.numberOfHours,
              l = new Me(this.ctx),
              c = "hour",
              h = function (C, A) {
                return (
                  C > l.determineDaysOfMonths(A + 1, s) && ((m = 1), (A += 1)),
                  { month: A, date: m }
                );
              },
              d = function (C, A) {
                return C > l.determineDaysOfMonths(A + 1, s) ? (A += 1) : A;
              },
              u = 60 - (t.minMinute + t.minSecond / 60),
              f = u * n,
              g = t.minHour + 1,
              p = g;
            u === 60 && ((f = 0), (p = g = t.minHour));
            var m = a;
            p >= 24 && ((p = 0), (c = "day"), (g = m += 1));
            var x = h(m, i).month;
            (x = d(m, x)),
              g > 31 && (g = m = 1),
              this.timeScaleArray.push({
                position: f,
                value: g,
                unit: c,
                day: m,
                hour: p,
                year: s,
                month: _.monthMod(x),
              }),
              p++;
            for (var v = f, b = 0; b < o; b++) {
              (c = "hour"),
                p >= 24 &&
                  ((p = 0),
                  (c = "day"),
                  (x = h((m += 1), x).month),
                  (x = d(m, x)));
              var k = this._getYear(s, x, 0);
              v = 60 * n + v;
              var y = p === 0 ? m : p;
              this.timeScaleArray.push({
                position: v,
                value: y,
                unit: c,
                hour: p,
                day: m,
                year: k,
                month: _.monthMod(x),
              }),
                p++;
            }
          },
        },
        {
          key: "generateMinuteScale",
          value: function (e) {
            for (
              var t = e.currentMillisecond,
                a = e.currentSecond,
                i = e.currentMinute,
                s = e.currentHour,
                n = e.currentDate,
                o = e.currentMonth,
                l = e.currentYear,
                c = e.minutesWidthOnXAxis,
                h = e.secondsWidthOnXAxis,
                d = e.numberOfMinutes,
                u = i + 1,
                f = n,
                g = o,
                p = l,
                m = s,
                x = (60 - a - t / 1e3) * h,
                v = 0;
              v < d;
              v++
            )
              u >= 60 && ((u = 0), (m += 1) === 24 && (m = 0)),
                this.timeScaleArray.push({
                  position: x,
                  value: u,
                  unit: "minute",
                  hour: m,
                  minute: u,
                  day: f,
                  year: this._getYear(p, g, 0),
                  month: _.monthMod(g),
                }),
                (x += c),
                u++;
          },
        },
        {
          key: "generateSecondScale",
          value: function (e) {
            for (
              var t = e.currentMillisecond,
                a = e.currentSecond,
                i = e.currentMinute,
                s = e.currentHour,
                n = e.currentDate,
                o = e.currentMonth,
                l = e.currentYear,
                c = e.secondsWidthOnXAxis,
                h = e.numberOfSeconds,
                d = a + 1,
                u = i,
                f = n,
                g = o,
                p = l,
                m = s,
                x = ((1e3 - t) / 1e3) * c,
                v = 0;
              v < h;
              v++
            )
              d >= 60 &&
                ((d = 0), ++u >= 60 && ((u = 0), ++m === 24 && (m = 0))),
                this.timeScaleArray.push({
                  position: x,
                  value: d,
                  unit: "second",
                  hour: m,
                  minute: u,
                  second: d,
                  day: f,
                  year: this._getYear(p, g, 0),
                  month: _.monthMod(g),
                }),
                (x += c),
                d++;
          },
        },
        {
          key: "createRawDateString",
          value: function (e, t) {
            var a = e.year;
            return (
              e.month === 0 && (e.month = 1),
              (a += "-" + ("0" + e.month.toString()).slice(-2)),
              e.unit === "day"
                ? (a += e.unit === "day" ? "-" + ("0" + t).slice(-2) : "-01")
                : (a += "-" + ("0" + (e.day ? e.day : "1")).slice(-2)),
              e.unit === "hour"
                ? (a += e.unit === "hour" ? "T" + ("0" + t).slice(-2) : "T00")
                : (a += "T" + ("0" + (e.hour ? e.hour : "0")).slice(-2)),
              e.unit === "minute"
                ? (a += ":" + ("0" + t).slice(-2))
                : (a += ":" + (e.minute ? ("0" + e.minute).slice(-2) : "00")),
              e.unit === "second"
                ? (a += ":" + ("0" + t).slice(-2))
                : (a += ":00"),
              this.utc && (a += ".000Z"),
              a
            );
          },
        },
        {
          key: "formatDates",
          value: function (e) {
            var t = this,
              a = this.w;
            return e.map(function (i) {
              var s = i.value.toString(),
                n = new Me(t.ctx),
                o = t.createRawDateString(i, s),
                l = n.getDate(n.parseDate(o));
              if (
                (t.utc || (l = n.getDate(n.parseDateWithTimezone(o))),
                a.config.xaxis.labels.format === void 0)
              ) {
                var c = "dd MMM",
                  h = a.config.xaxis.labels.datetimeFormatter;
                i.unit === "year" && (c = h.year),
                  i.unit === "month" && (c = h.month),
                  i.unit === "day" && (c = h.day),
                  i.unit === "hour" && (c = h.hour),
                  i.unit === "minute" && (c = h.minute),
                  i.unit === "second" && (c = h.second),
                  (s = n.formatDate(l, c));
              } else s = n.formatDate(l, a.config.xaxis.labels.format);
              return {
                dateString: o,
                position: i.position,
                value: s,
                unit: i.unit,
                year: i.year,
                month: i.month,
              };
            });
          },
        },
        {
          key: "removeOverlappingTS",
          value: function (e) {
            var t,
              a = this,
              i = new H(this.ctx),
              s = !1;
            e.length > 0 &&
              e[0].value &&
              e.every(function (l) {
                return l.value.length === e[0].value.length;
              }) &&
              ((s = !0), (t = i.getTextRects(e[0].value).width));
            var n = 0,
              o = e.map(function (l, c) {
                if (c > 0 && a.w.config.xaxis.labels.hideOverlappingLabels) {
                  var h = s ? t : i.getTextRects(e[n].value).width,
                    d = e[n].position;
                  return l.position > d + h + 10 ? ((n = c), l) : null;
                }
                return l;
              });
            return (o = o.filter(function (l) {
              return l !== null;
            }));
          },
        },
        {
          key: "_getYear",
          value: function (e, t, a) {
            return e + Math.floor(t / 12) + a;
          },
        },
      ]),
      r
    );
  })(),
  Gm = (function () {
    function r(e, t) {
      U(this, r), (this.ctx = t), (this.w = t.w), (this.el = e);
    }
    return (
      $(r, [
        {
          key: "setupElements",
          value: function () {
            var e = this.w,
              t = e.globals,
              a = e.config,
              i = a.chart.type;
            (t.axisCharts = [
              "line",
              "area",
              "bar",
              "rangeBar",
              "rangeArea",
              "candlestick",
              "boxPlot",
              "scatter",
              "bubble",
              "radar",
              "heatmap",
              "treemap",
            ].includes(i)),
              (t.xyCharts = [
                "line",
                "area",
                "bar",
                "rangeBar",
                "rangeArea",
                "candlestick",
                "boxPlot",
                "scatter",
                "bubble",
              ].includes(i)),
              (t.isBarHorizontal =
                ["bar", "rangeBar", "boxPlot"].includes(i) &&
                a.plotOptions.bar.horizontal),
              (t.chartClass = ".apexcharts".concat(t.chartID)),
              (t.dom.baseEl = this.el),
              (t.dom.elWrap = document.createElement("div")),
              H.setAttrs(t.dom.elWrap, {
                id: t.chartClass.substring(1),
                class: "apexcharts-canvas ".concat(t.chartClass.substring(1)),
              }),
              this.el.appendChild(t.dom.elWrap),
              (t.dom.Paper = window.SVG().addTo(t.dom.elWrap)),
              t.dom.Paper.attr({
                class: "apexcharts-svg",
                "xmlns:data": "ApexChartsNS",
                transform: "translate("
                  .concat(a.chart.offsetX, ", ")
                  .concat(a.chart.offsetY, ")"),
              }),
              (t.dom.Paper.node.style.background =
                a.theme.mode !== "dark" || a.chart.background
                  ? a.theme.mode !== "light" || a.chart.background
                    ? a.chart.background
                    : "#fff"
                  : "#424242"),
              this.setSVGDimensions(),
              (t.dom.elLegendForeign = document.createElementNS(
                t.SVGNS,
                "foreignObject"
              )),
              H.setAttrs(t.dom.elLegendForeign, {
                x: 0,
                y: 0,
                width: t.svgWidth,
                height: t.svgHeight,
              }),
              (t.dom.elLegendWrap = document.createElement("div")),
              t.dom.elLegendWrap.classList.add("apexcharts-legend"),
              t.dom.elLegendWrap.setAttribute(
                "xmlns",
                "http://www.w3.org/1999/xhtml"
              ),
              t.dom.elLegendForeign.appendChild(t.dom.elLegendWrap),
              t.dom.Paper.node.appendChild(t.dom.elLegendForeign),
              (t.dom.elGraphical = t.dom.Paper.group().attr({
                class: "apexcharts-inner apexcharts-graphical",
              })),
              (t.dom.elDefs = t.dom.Paper.defs()),
              t.dom.Paper.add(t.dom.elGraphical),
              t.dom.elGraphical.add(t.dom.elDefs);
          },
        },
        {
          key: "plotChartType",
          value: function (e, t) {
            var a = this.w,
              i = this.ctx,
              s = a.config,
              n = a.globals,
              o = {
                line: { series: [], i: [] },
                area: { series: [], i: [] },
                scatter: { series: [], i: [] },
                bubble: { series: [], i: [] },
                column: { series: [], i: [] },
                candlestick: { series: [], i: [] },
                boxPlot: { series: [], i: [] },
                rangeBar: { series: [], i: [] },
                rangeArea: { series: [], seriesRangeEnd: [], i: [] },
              },
              l = s.chart.type || "line",
              c = null,
              h = 0;
            n.series.forEach(function (C, A) {
              var S = e[A].type || l;
              o[S]
                ? (S === "rangeArea"
                    ? (o[S].series.push(n.seriesRangeStart[A]),
                      o[S].seriesRangeEnd.push(n.seriesRangeEnd[A]))
                    : o[S].series.push(C),
                  o[S].i.push(A),
                  (S !== "column" && S !== "bar") ||
                    (a.globals.columnSeries = o.column))
                : [
                    "heatmap",
                    "treemap",
                    "pie",
                    "donut",
                    "polarArea",
                    "radialBar",
                    "radar",
                  ].includes(S)
                ? (c = S)
                : S === "bar"
                ? (o.column.series.push(C), o.column.i.push(A))
                : console.warn(
                    "You have specified an unrecognized series type (".concat(
                      S,
                      ")."
                    )
                  ),
                l !== S && S !== "scatter" && h++;
            }),
              h > 0 &&
                (c &&
                  console.warn(
                    "Chart or series type ".concat(
                      c,
                      " cannot appear with other chart or series types."
                    )
                  ),
                o.column.series.length > 0 &&
                  s.plotOptions.bar.horizontal &&
                  ((h -= o.column.series.length),
                  (o.column = { series: [], i: [] }),
                  (a.globals.columnSeries = { series: [], i: [] }),
                  console.warn(
                    "Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"
                  ))),
              n.comboCharts || (n.comboCharts = h > 0);
            var d = new wr(i, t),
              u = new br(i, t);
            i.pie = new Zc(i);
            var f = new Fm(i);
            i.rangeBar = new Dm(i, t);
            var g = new jm(i),
              p = [];
            if (n.comboCharts) {
              var m,
                x,
                v = new ke(i);
              if (
                (o.area.series.length > 0 &&
                  (m = p).push.apply(
                    m,
                    Pe(v.drawSeriesByGroup(o.area, n.areaGroups, "area", d))
                  ),
                o.column.series.length > 0)
              )
                if (s.chart.stacked) {
                  var b = new wo(i, t);
                  p.push(b.draw(o.column.series, o.column.i));
                } else
                  (i.bar = new ra(i, t)),
                    p.push(i.bar.draw(o.column.series, o.column.i));
              if (
                (o.rangeArea.series.length > 0 &&
                  p.push(
                    d.draw(
                      o.rangeArea.series,
                      "rangeArea",
                      o.rangeArea.i,
                      o.rangeArea.seriesRangeEnd
                    )
                  ),
                o.line.series.length > 0 &&
                  (x = p).push.apply(
                    x,
                    Pe(v.drawSeriesByGroup(o.line, n.lineGroups, "line", d))
                  ),
                o.candlestick.series.length > 0 &&
                  p.push(
                    u.draw(o.candlestick.series, "candlestick", o.candlestick.i)
                  ),
                o.boxPlot.series.length > 0 &&
                  p.push(u.draw(o.boxPlot.series, "boxPlot", o.boxPlot.i)),
                o.rangeBar.series.length > 0 &&
                  p.push(i.rangeBar.draw(o.rangeBar.series, o.rangeBar.i)),
                o.scatter.series.length > 0)
              ) {
                var k = new wr(i, t, !0);
                p.push(k.draw(o.scatter.series, "scatter", o.scatter.i));
              }
              if (o.bubble.series.length > 0) {
                var y = new wr(i, t, !0);
                p.push(y.draw(o.bubble.series, "bubble", o.bubble.i));
              }
            } else
              switch (s.chart.type) {
                case "line":
                  p = d.draw(n.series, "line");
                  break;
                case "area":
                  p = d.draw(n.series, "area");
                  break;
                case "bar":
                  s.chart.stacked
                    ? (p = new wo(i, t).draw(n.series))
                    : ((i.bar = new ra(i, t)), (p = i.bar.draw(n.series)));
                  break;
                case "candlestick":
                  p = new br(i, t).draw(n.series, "candlestick");
                  break;
                case "boxPlot":
                  p = new br(i, t).draw(n.series, s.chart.type);
                  break;
                case "rangeBar":
                  p = i.rangeBar.draw(n.series);
                  break;
                case "rangeArea":
                  p = d.draw(
                    n.seriesRangeStart,
                    "rangeArea",
                    void 0,
                    n.seriesRangeEnd
                  );
                  break;
                case "heatmap":
                  p = new Nm(i, t).draw(n.series);
                  break;
                case "treemap":
                  p = new Ym(i, t).draw(n.series);
                  break;
                case "pie":
                case "donut":
                case "polarArea":
                  p = i.pie.draw(n.series);
                  break;
                case "radialBar":
                  p = f.draw(n.series);
                  break;
                case "radar":
                  p = g.draw(n.series);
                  break;
                default:
                  p = d.draw(n.series);
              }
            return p;
          },
        },
        {
          key: "setSVGDimensions",
          value: function () {
            var e = this.w,
              t = e.globals,
              a = e.config;
            (a.chart.width = a.chart.width || "100%"),
              (a.chart.height = a.chart.height || "auto"),
              (t.svgWidth = a.chart.width),
              (t.svgHeight = a.chart.height);
            var i = _.getDimensions(this.el),
              s = a.chart.width
                .toString()
                .split(/[0-9]+/g)
                .pop();
            s === "%"
              ? _.isNumber(i[0]) &&
                (i[0].width === 0 && (i = _.getDimensions(this.el.parentNode)),
                (t.svgWidth = (i[0] * parseInt(a.chart.width, 10)) / 100))
              : (s !== "px" && s !== "") ||
                (t.svgWidth = parseInt(a.chart.width, 10));
            var n = String(a.chart.height)
              .toString()
              .split(/[0-9]+/g)
              .pop();
            if (t.svgHeight !== "auto" && t.svgHeight !== "")
              if (n === "%") {
                var o = _.getDimensions(this.el.parentNode);
                t.svgHeight = (o[1] * parseInt(a.chart.height, 10)) / 100;
              } else t.svgHeight = parseInt(a.chart.height, 10);
            else
              t.svgHeight = t.axisCharts ? t.svgWidth / 1.61 : t.svgWidth / 1.2;
            if (
              ((t.svgWidth = Math.max(t.svgWidth, 0)),
              (t.svgHeight = Math.max(t.svgHeight, 0)),
              H.setAttrs(t.dom.Paper.node, {
                width: t.svgWidth,
                height: t.svgHeight,
              }),
              n !== "%")
            ) {
              var l = a.chart.sparkline.enabled
                ? 0
                : t.axisCharts
                ? a.chart.parentHeightOffset
                : 0;
              t.dom.Paper.node.parentNode.parentNode.style.minHeight =
                "".concat(t.svgHeight + l, "px");
            }
            (t.dom.elWrap.style.width = "".concat(t.svgWidth, "px")),
              (t.dom.elWrap.style.height = "".concat(t.svgHeight, "px"));
          },
        },
        {
          key: "shiftGraphPosition",
          value: function () {
            var e = this.w.globals,
              t = e.translateY,
              a = e.translateX;
            H.setAttrs(e.dom.elGraphical.node, {
              transform: "translate(".concat(a, ", ").concat(t, ")"),
            });
          },
        },
        {
          key: "resizeNonAxisCharts",
          value: function () {
            var e = this.w,
              t = e.globals,
              a = 0,
              i = e.config.chart.sparkline.enabled ? 1 : 15;
            (i += e.config.grid.padding.bottom),
              ["top", "bottom"].includes(e.config.legend.position) &&
                e.config.legend.show &&
                !e.config.legend.floating &&
                (a =
                  new Wc(this.ctx).legendHelpers.getLegendDimensions().clwh +
                  7);
            var s = e.globals.dom.baseEl.querySelector(
                ".apexcharts-radialbar, .apexcharts-pie"
              ),
              n = 2.05 * e.globals.radialSize;
            if (
              s &&
              !e.config.chart.sparkline.enabled &&
              e.config.plotOptions.radialBar.startAngle !== 0
            ) {
              var o = _.getBoundingClientRect(s);
              n = o.bottom;
              var l = o.bottom - o.top;
              n = Math.max(2.05 * e.globals.radialSize, l);
            }
            var c = Math.ceil(n + t.translateY + a + i);
            t.dom.elLegendForeign &&
              t.dom.elLegendForeign.setAttribute("height", c),
              (e.config.chart.height &&
                String(e.config.chart.height).includes("%")) ||
                ((t.dom.elWrap.style.height = "".concat(c, "px")),
                H.setAttrs(t.dom.Paper.node, { height: c }),
                (t.dom.Paper.node.parentNode.parentNode.style.minHeight =
                  "".concat(c, "px")));
          },
        },
        {
          key: "coreCalculations",
          value: function () {
            new Jr(this.ctx).init();
          },
        },
        {
          key: "resetGlobals",
          value: function () {
            var e = this,
              t = function () {
                return e.w.config.series.map(function () {
                  return [];
                });
              },
              a = new Hc(),
              i = this.w.globals;
            a.initGlobalVars(i),
              (i.seriesXvalues = t()),
              (i.seriesYvalues = t());
          },
        },
        {
          key: "isMultipleY",
          value: function () {
            return (
              !!(
                Array.isArray(this.w.config.yaxis) &&
                this.w.config.yaxis.length > 1
              ) && ((this.w.globals.isMultipleYAxis = !0), !0)
            );
          },
        },
        {
          key: "xySettings",
          value: function () {
            var e = this.w,
              t = null;
            if (e.globals.axisCharts) {
              if (
                (e.config.xaxis.crosshairs.position === "back" &&
                  new es(this.ctx).drawXCrosshairs(),
                e.config.yaxis[0].crosshairs.position === "back" &&
                  new es(this.ctx).drawYCrosshairs(),
                e.config.xaxis.type === "datetime" &&
                  e.config.xaxis.labels.formatter === void 0)
              ) {
                this.ctx.timeScale = new Vm(this.ctx);
                var a = [];
                isFinite(e.globals.minX) &&
                isFinite(e.globals.maxX) &&
                !e.globals.isBarHorizontal
                  ? (a = this.ctx.timeScale.calculateTimeScaleTicks(
                      e.globals.minX,
                      e.globals.maxX
                    ))
                  : e.globals.isBarHorizontal &&
                    (a = this.ctx.timeScale.calculateTimeScaleTicks(
                      e.globals.minY,
                      e.globals.maxY
                    )),
                  this.ctx.timeScale.recalcDimensionsBasedOnFormat(a);
              }
              t = new ke(this.ctx).getCalculatedRatios();
            }
            return t;
          },
        },
        {
          key: "updateSourceChart",
          value: function (e) {
            (this.ctx.w.globals.selection = void 0),
              this.ctx.updateHelpers._updateOptions(
                {
                  chart: {
                    selection: {
                      xaxis: { min: e.w.globals.minX, max: e.w.globals.maxX },
                    },
                  },
                },
                !1,
                !1
              );
          },
        },
        {
          key: "setupBrushHandler",
          value: function () {
            var e = this,
              t = this.ctx,
              a = this.w;
            if (
              a.config.chart.brush.enabled &&
              typeof a.config.chart.events.selection != "function"
            ) {
              var i = Array.isArray(a.config.chart.brush.targets)
                ? a.config.chart.brush.targets
                : [a.config.chart.brush.target];
              i.forEach(function (s) {
                var n = t.constructor.getChartByID(s);
                (n.w.globals.brushSource = e.ctx),
                  typeof n.w.config.chart.events.zoomed != "function" &&
                    (n.w.config.chart.events.zoomed = function () {
                      return e.updateSourceChart(n);
                    }),
                  typeof n.w.config.chart.events.scrolled != "function" &&
                    (n.w.config.chart.events.scrolled = function () {
                      return e.updateSourceChart(n);
                    });
              }),
                (a.config.chart.events.selection = function (s, n) {
                  i.forEach(function (o) {
                    t.constructor
                      .getChartByID(o)
                      .ctx.updateHelpers._updateOptions(
                        { xaxis: { min: n.xaxis.min, max: n.xaxis.max } },
                        !1,
                        !1,
                        !1,
                        !1
                      );
                  });
                });
            }
          },
        },
      ]),
      r
    );
  })(),
  Um = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "_updateOptions",
          value: function (e) {
            var t = this,
              a =
                arguments.length > 1 && arguments[1] !== void 0 && arguments[1],
              i =
                !(arguments.length > 2 && arguments[2] !== void 0) ||
                arguments[2],
              s =
                !(arguments.length > 3 && arguments[3] !== void 0) ||
                arguments[3],
              n =
                arguments.length > 4 && arguments[4] !== void 0 && arguments[4];
            return new Promise(function (o) {
              var l = [t.ctx];
              s && (l = t.ctx.getSyncedCharts()),
                t.ctx.w.globals.isExecCalled &&
                  ((l = [t.ctx]), (t.ctx.w.globals.isExecCalled = !1)),
                l.forEach(function (c, h) {
                  var d = c.w;
                  if (
                    ((d.globals.shouldAnimate = i),
                    a ||
                      ((d.globals.resized = !0),
                      (d.globals.dataChanged = !0),
                      i && c.series.getPreviousPaths()),
                    e &&
                      aa(e) === "object" &&
                      ((c.config = new ja(e)),
                      (e = ke.extendArrayProps(c.config, e, d)),
                      c.w.globals.chartID !== t.ctx.w.globals.chartID &&
                        delete e.series,
                      (d.config = _.extend(d.config, e)),
                      n &&
                        ((d.globals.lastXAxis = e.xaxis
                          ? _.clone(e.xaxis)
                          : []),
                        (d.globals.lastYAxis = e.yaxis ? _.clone(e.yaxis) : []),
                        (d.globals.initialConfig = _.extend({}, d.config)),
                        (d.globals.initialSeries = _.clone(d.config.series)),
                        e.series)))
                  ) {
                    for (
                      var u = 0;
                      u < d.globals.collapsedSeriesIndices.length;
                      u++
                    ) {
                      var f =
                        d.config.series[d.globals.collapsedSeriesIndices[u]];
                      d.globals.collapsedSeries[u].data = d.globals.axisCharts
                        ? f.data.slice()
                        : f;
                    }
                    for (
                      var g = 0;
                      g < d.globals.ancillaryCollapsedSeriesIndices.length;
                      g++
                    ) {
                      var p =
                        d.config.series[
                          d.globals.ancillaryCollapsedSeriesIndices[g]
                        ];
                      d.globals.ancillaryCollapsedSeries[g].data = d.globals
                        .axisCharts
                        ? p.data.slice()
                        : p;
                    }
                    c.series.emptyCollapsedSeries(d.config.series);
                  }
                  return c.update(e).then(function () {
                    h === l.length - 1 && o(c);
                  });
                });
            });
          },
        },
        {
          key: "_updateSeries",
          value: function (e, t) {
            var a = this,
              i =
                arguments.length > 2 && arguments[2] !== void 0 && arguments[2];
            return new Promise(function (s) {
              var n,
                o = a.w;
              return (
                (o.globals.shouldAnimate = t),
                (o.globals.dataChanged = !0),
                t && a.ctx.series.getPreviousPaths(),
                o.globals.axisCharts
                  ? ((n = e.map(function (l, c) {
                      return a._extendSeries(l, c);
                    })).length === 0 && (n = [{ data: [] }]),
                    (o.config.series = n))
                  : (o.config.series = e.slice()),
                i &&
                  ((o.globals.initialConfig.series = _.clone(o.config.series)),
                  (o.globals.initialSeries = _.clone(o.config.series))),
                a.ctx.update().then(function () {
                  s(a.ctx);
                })
              );
            });
          },
        },
        {
          key: "_extendSeries",
          value: function (e, t) {
            var a = this.w,
              i = a.config.series[t];
            return Y(
              Y({}, a.config.series[t]),
              {},
              {
                name: e.name ? e.name : i == null ? void 0 : i.name,
                color: e.color ? e.color : i == null ? void 0 : i.color,
                type: e.type ? e.type : i == null ? void 0 : i.type,
                group: e.group ? e.group : i == null ? void 0 : i.group,
                hidden:
                  e.hidden !== void 0
                    ? e.hidden
                    : i == null
                    ? void 0
                    : i.hidden,
                data: e.data ? e.data : i == null ? void 0 : i.data,
                zIndex: e.zIndex !== void 0 ? e.zIndex : t,
              }
            );
          },
        },
        {
          key: "toggleDataPointSelection",
          value: function (e, t) {
            var a = this.w,
              i = null,
              s = ".apexcharts-series[data\\:realIndex='".concat(e, "']");
            return (
              a.globals.axisCharts
                ? (i = a.globals.dom.Paper.findOne(
                    ""
                      .concat(s, " path[j='")
                      .concat(t, "'], ")
                      .concat(s, " circle[j='")
                      .concat(t, "'], ")
                      .concat(s, " rect[j='")
                      .concat(t, "']")
                  ))
                : t === void 0 &&
                  ((i = a.globals.dom.Paper.findOne(
                    "".concat(s, " path[j='").concat(e, "']")
                  )),
                  (a.config.chart.type !== "pie" &&
                    a.config.chart.type !== "polarArea" &&
                    a.config.chart.type !== "donut") ||
                    this.ctx.pie.pieClicked(e)),
              i
                ? (new H(this.ctx).pathMouseDown(i, null),
                  i.node ? i.node : null)
                : (console.warn("toggleDataPointSelection: Element not found"),
                  null)
            );
          },
        },
        {
          key: "forceXAxisUpdate",
          value: function (e) {
            var t = this.w;
            if (
              (["min", "max"].forEach(function (i) {
                e.xaxis[i] !== void 0 &&
                  ((t.config.xaxis[i] = e.xaxis[i]),
                  (t.globals.lastXAxis[i] = e.xaxis[i]));
              }),
              e.xaxis.categories &&
                e.xaxis.categories.length &&
                (t.config.xaxis.categories = e.xaxis.categories),
              t.config.xaxis.convertedCatToNumeric)
            ) {
              var a = new Na(e);
              e = a.convertCatToNumericXaxis(e, this.ctx);
            }
            return e;
          },
        },
        {
          key: "forceYAxisUpdate",
          value: function (e) {
            return (
              e.chart &&
                e.chart.stacked &&
                e.chart.stackType === "100%" &&
                (Array.isArray(e.yaxis)
                  ? e.yaxis.forEach(function (t, a) {
                      (e.yaxis[a].min = 0), (e.yaxis[a].max = 100);
                    })
                  : ((e.yaxis.min = 0), (e.yaxis.max = 100))),
              e
            );
          },
        },
        {
          key: "revertDefaultAxisMinMax",
          value: function (e) {
            var t = this,
              a = this.w,
              i = a.globals.lastXAxis,
              s = a.globals.lastYAxis;
            e && e.xaxis && (i = e.xaxis),
              e && e.yaxis && (s = e.yaxis),
              (a.config.xaxis.min = i.min),
              (a.config.xaxis.max = i.max);
            var n = function (o) {
              s[o] !== void 0 &&
                ((a.config.yaxis[o].min = s[o].min),
                (a.config.yaxis[o].max = s[o].max));
            };
            a.config.yaxis.map(function (o, l) {
              a.globals.zoomed || s[l] !== void 0
                ? n(l)
                : t.ctx.opts.yaxis[l] !== void 0 &&
                  ((o.min = t.ctx.opts.yaxis[l].min),
                  (o.max = t.ctx.opts.yaxis[l].max));
            });
          },
        },
      ]),
      r
    );
  })();
(function () {
  function r() {
    for (
      var s = arguments.length > 0 && arguments[0] !== d ? arguments[0] : [],
        n = arguments.length > 1 ? arguments[1] : d,
        o = arguments.length > 2 ? arguments[2] : d,
        l = arguments.length > 3 ? arguments[3] : d,
        c = arguments.length > 4 ? arguments[4] : d,
        h = arguments.length > 5 ? arguments[5] : d,
        d = arguments.length > 6 ? arguments[6] : d,
        u = s.slice(n, o || d),
        f = l.slice(c, h || d),
        g = 0,
        p = { pos: [0, 0], start: [0, 0] },
        m = { pos: [0, 0], start: [0, 0] };
      (u[g] = e.call(p, u[g])),
        (f[g] = e.call(m, f[g])),
        u[g][0] != f[g][0] ||
        u[g][0] == "M" ||
        (u[g][0] == "A" && (u[g][4] != f[g][4] || u[g][5] != f[g][5]))
          ? (Array.prototype.splice.apply(u, [g, 1].concat(a.call(p, u[g]))),
            Array.prototype.splice.apply(f, [g, 1].concat(a.call(m, f[g]))))
          : ((u[g] = t.call(p, u[g])), (f[g] = t.call(m, f[g]))),
        !(++g == u.length && g == f.length);

    )
      g == u.length &&
        u.push([
          "C",
          p.pos[0],
          p.pos[1],
          p.pos[0],
          p.pos[1],
          p.pos[0],
          p.pos[1],
        ]),
        g == f.length &&
          f.push([
            "C",
            m.pos[0],
            m.pos[1],
            m.pos[0],
            m.pos[1],
            m.pos[0],
            m.pos[1],
          ]);
    return { start: u, dest: f };
  }
  function e(s) {
    switch (s[0]) {
      case "z":
      case "Z":
        (s[0] = "L"), (s[1] = this.start[0]), (s[2] = this.start[1]);
        break;
      case "H":
        (s[0] = "L"), (s[2] = this.pos[1]);
        break;
      case "V":
        (s[0] = "L"), (s[2] = s[1]), (s[1] = this.pos[0]);
        break;
      case "T":
        (s[0] = "Q"),
          (s[3] = s[1]),
          (s[4] = s[2]),
          (s[1] = this.reflection[1]),
          (s[2] = this.reflection[0]);
        break;
      case "S":
        (s[0] = "C"),
          (s[6] = s[4]),
          (s[5] = s[3]),
          (s[4] = s[2]),
          (s[3] = s[1]),
          (s[2] = this.reflection[1]),
          (s[1] = this.reflection[0]);
    }
    return s;
  }
  function t(s) {
    var n = s.length;
    return (
      (this.pos = [s[n - 2], s[n - 1]]),
      "SCQT".indexOf(s[0]) != -1 &&
        (this.reflection = [
          2 * this.pos[0] - s[n - 4],
          2 * this.pos[1] - s[n - 3],
        ]),
      s
    );
  }
  function a(s) {
    var n = [s];
    switch (s[0]) {
      case "M":
        return (this.pos = this.start = [s[1], s[2]]), n;
      case "L":
        (s[5] = s[3] = s[1]),
          (s[6] = s[4] = s[2]),
          (s[1] = this.pos[0]),
          (s[2] = this.pos[1]);
        break;
      case "Q":
        (s[6] = s[4]),
          (s[5] = s[3]),
          (s[4] = (1 * s[4]) / 3 + (2 * s[2]) / 3),
          (s[3] = (1 * s[3]) / 3 + (2 * s[1]) / 3),
          (s[2] = (1 * this.pos[1]) / 3 + (2 * s[2]) / 3),
          (s[1] = (1 * this.pos[0]) / 3 + (2 * s[1]) / 3);
        break;
      case "A":
        (n = (function (o, l) {
          var c,
            h,
            d,
            u,
            f,
            g,
            p,
            m,
            x,
            v,
            b,
            k,
            y,
            C,
            A,
            S,
            T,
            E,
            L,
            I,
            M,
            O,
            N,
            F,
            D,
            B,
            z = Math.abs(l[1]),
            G = Math.abs(l[2]),
            V = l[3] % 360,
            Q = l[4],
            Z = l[5],
            X = l[6],
            q = l[7],
            J = new ue(o),
            te = new ue(X, q),
            se = [];
          if (z === 0 || G === 0 || (J.x === te.x && J.y === te.y))
            return [["C", J.x, J.y, te.x, te.y, te.x, te.y]];
          for (
            c = new ue((J.x - te.x) / 2, (J.y - te.y) / 2).transform(
              new re().rotate(V)
            ),
              h = (c.x * c.x) / (z * z) + (c.y * c.y) / (G * G),
              h > 1 && ((z *= h = Math.sqrt(h)), (G *= h)),
              d = new re()
                .rotate(V)
                .scale(1 / z, 1 / G)
                .rotate(-V),
              J = J.transform(d),
              te = te.transform(d),
              u = [te.x - J.x, te.y - J.y],
              g = u[0] * u[0] + u[1] * u[1],
              f = Math.sqrt(g),
              u[0] /= f,
              u[1] /= f,
              p = g < 4 ? Math.sqrt(1 - g / 4) : 0,
              Q === Z && (p *= -1),
              m = new ue(
                (te.x + J.x) / 2 + p * -u[1],
                (te.y + J.y) / 2 + p * u[0]
              ),
              x = new ue(J.x - m.x, J.y - m.y),
              v = new ue(te.x - m.x, te.y - m.y),
              b = Math.acos(x.x / Math.sqrt(x.x * x.x + x.y * x.y)),
              x.y < 0 && (b *= -1),
              k = Math.acos(v.x / Math.sqrt(v.x * v.x + v.y * v.y)),
              v.y < 0 && (k *= -1),
              Z && b > k && (k += 2 * Math.PI),
              !Z && b < k && (k -= 2 * Math.PI),
              C = Math.ceil((2 * Math.abs(b - k)) / Math.PI),
              S = [],
              T = b,
              y = (k - b) / C,
              A = (4 * Math.tan(y / 4)) / 3,
              M = 0;
            M <= C;
            M++
          )
            (L = Math.cos(T)),
              (E = Math.sin(T)),
              (I = new ue(m.x + L, m.y + E)),
              (S[M] = [
                new ue(I.x + A * E, I.y - A * L),
                I,
                new ue(I.x - A * E, I.y + A * L),
              ]),
              (T += y);
          for (
            S[0][0] = S[0][1].clone(),
              S[S.length - 1][2] = S[S.length - 1][1].clone(),
              d = new re().rotate(V).scale(z, G).rotate(-V),
              M = 0,
              O = S.length;
            M < O;
            M++
          )
            (S[M][0] = S[M][0].transform(d)),
              (S[M][1] = S[M][1].transform(d)),
              (S[M][2] = S[M][2].transform(d));
          for (M = 1, O = S.length; M < O; M++)
            (N = (I = S[M - 1][2]).x),
              (F = I.y),
              (D = (I = S[M][0]).x),
              (B = I.y),
              (X = (I = S[M][1]).x),
              (q = I.y),
              se.push(["C", N, F, D, B, X, q]);
          return se;
        })(this.pos, s)),
          (s = n[0]);
    }
    return (
      (s[0] = "C"),
      (this.pos = [s[5], s[6]]),
      (this.reflection = [2 * s[5] - s[3], 2 * s[6] - s[4]]),
      n
    );
  }
  function i() {
    var s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],
      n = arguments.length > 1 ? arguments[1] : void 0;
    if (n === !1) return !1;
    for (var o = n, l = s.length; o < l; ++o) if (s[o][0] == "M") return o;
    return !1;
  }
  K(Ke, {
    morph: function (s, n, o, l, c) {
      for (
        var h = this.parse(s), d = this.parse(n), u = 0, f = 0, g = !1, p = !1;
        u !== !1 || f !== !1;

      ) {
        var m;
        (g = i(h, u !== !1 && u + 1)),
          (p = i(d, f !== !1 && f + 1)),
          u === !1 &&
            (u =
              (m = new Ke(x.start).bbox()).height == 0 || m.width == 0
                ? h.push(h[0]) - 1
                : h.push(["M", m.x + m.width / 2, m.y + m.height / 2]) - 1),
          f === !1 &&
            (f =
              (m = new Ke(x.dest).bbox()).height == 0 || m.width == 0
                ? d.push(d[0]) - 1
                : d.push(["M", m.x + m.width / 2, m.y + m.height / 2]) - 1);
        var x = r(h, u, g, d, f, p);
        (h = h.slice(0, u).concat(x.start, g === !1 ? [] : h.slice(g))),
          (d = d.slice(0, f).concat(x.dest, p === !1 ? [] : d.slice(p))),
          (u = g !== !1 && u + x.start.length),
          (f = p !== !1 && f + x.dest.length);
      }
      (this._array = h),
        (this.destination = new Ke()),
        (this.destination._array = d);
      var v = this.fromArray(
        h.map(function (b, k) {
          var y = d[k].map(function (C, A) {
            return A === 0 ? C : l.step(b[A], d[k][A], o, c[k], c);
          });
          return y;
        })
      );
      return v;
    },
  });
})();
const ko = (r) => (
  r.changedTouches && (r = r.changedTouches[0]), { x: r.clientX, y: r.clientY }
);
class $m {
  constructor(e) {
    e.remember("_draggable", this),
      (this.el = e),
      (this.drag = this.drag.bind(this)),
      (this.startDrag = this.startDrag.bind(this)),
      (this.endDrag = this.endDrag.bind(this));
  }
  init(e) {
    e
      ? (this.el.on("mousedown.drag", this.startDrag),
        this.el.on("touchstart.drag", this.startDrag, { passive: !1 }))
      : (this.el.off("mousedown.drag"), this.el.off("touchstart.drag"));
  }
  startDrag(e) {
    const t = !e.type.indexOf("mouse");
    if (
      (t && e.which !== 1 && e.buttons !== 0) ||
      this.el.dispatch("beforedrag", { event: e, handler: this })
        .defaultPrevented
    )
      return;
    e.preventDefault(),
      e.stopPropagation(),
      this.init(!1),
      (this.box = this.el.bbox()),
      (this.lastClick = this.el.point(ko(e)));
    const a = (t ? "mouseup" : "touchend") + ".drag";
    lt(window, (t ? "mousemove" : "touchmove") + ".drag", this.drag, this, {
      passive: !1,
    }),
      lt(window, a, this.endDrag, this, { passive: !1 }),
      this.el.fire("dragstart", { event: e, handler: this, box: this.box });
  }
  drag(e) {
    const { box: t, lastClick: a } = this,
      i = this.el.point(ko(e)),
      s = i.x - a.x,
      n = i.y - a.y;
    if (!s && !n) return t;
    const o = t.x + s,
      l = t.y + n;
    (this.box = new we(o, l, t.w, t.h)),
      (this.lastClick = i),
      this.el.dispatch("dragmove", { event: e, handler: this, box: this.box })
        .defaultPrevented || this.move(o, l);
  }
  move(e, t) {
    this.el.type === "svg"
      ? kt.prototype.move.call(this.el, e, t)
      : this.el.move(e, t);
  }
  endDrag(e) {
    this.drag(e),
      this.el.fire("dragend", { event: e, handler: this, box: this.box }),
      We(window, "mousemove.drag"),
      We(window, "touchmove.drag"),
      We(window, "mouseup.drag"),
      We(window, "touchend.drag"),
      this.init(!0);
  }
}
/*!
 * @svgdotjs/svg.select.js - An extension of svg.js which allows to select elements with mouse
 * @version 4.0.1
 * https://github.com/svgdotjs/svg.select.js
 *
 * @copyright Ulrich-Matthias Schäfer
 * @license MIT
 *
 * BUILT: Mon Jul 01 2024 15:04:42 GMT+0200 (Central European Summer Time)
 */ function ts(r, e, t, a = null) {
  return function (i) {
    i.preventDefault(), i.stopPropagation();
    var s = i.pageX || i.touches[0].pageX,
      n = i.pageY || i.touches[0].pageY;
    e.fire(r, { x: s, y: n, event: i, index: a, points: t });
  };
}
function as([r, e], { a: t, b: a, c: i, d: s, e: n, f: o }) {
  return [r * t + e * i + n, r * a + e * s + o];
}
K(Ie, {
  draggable(r = !0) {
    return (this.remember("_draggable") || new $m(this)).init(r), this;
  },
});
let Qc = class {
  constructor(r) {
    (this.el = r),
      r.remember("_selectHandler", this),
      (this.selection = new kt()),
      (this.order = ["lt", "t", "rt", "r", "rb", "b", "lb", "l", "rot"]),
      (this.mutationHandler = this.mutationHandler.bind(this));
    const e = $a();
    this.observer = new e.MutationObserver(this.mutationHandler);
  }
  init(r) {
    (this.createHandle = r.createHandle || this.createHandleFn),
      (this.createRot = r.createRot || this.createRotFn),
      (this.updateHandle = r.updateHandle || this.updateHandleFn),
      (this.updateRot = r.updateRot || this.updateRotFn),
      this.el.root().put(this.selection),
      this.updatePoints(),
      this.createSelection(),
      this.createResizeHandles(),
      this.updateResizeHandles(),
      this.createRotationHandle(),
      this.updateRotationHandle(),
      this.observer.observe(this.el.node, { attributes: !0 });
  }
  active(r, e) {
    if (!r)
      return this.selection.clear().remove(), void this.observer.disconnect();
    this.init(e);
  }
  createSelection() {
    this.selection.polygon(this.handlePoints).addClass("svg_select_shape");
  }
  updateSelection() {
    this.selection.get(0).plot(this.handlePoints);
  }
  createResizeHandles() {
    this.handlePoints.forEach((r, e, t) => {
      const a = this.order[e];
      this.createHandle.call(this, this.selection, r, e, t, a),
        this.selection
          .get(e + 1)
          .addClass("svg_select_handle svg_select_handle_" + a)
          .on(
            "mousedown.selection touchstart.selection",
            ts(a, this.el, this.handlePoints, e)
          );
    });
  }
  createHandleFn(r) {
    r.polyline();
  }
  updateHandleFn(r, e, t, a) {
    const i = a.at(t - 1),
      s = a[(t + 1) % a.length],
      n = e,
      o = [n[0] - i[0], n[1] - i[1]],
      l = [n[0] - s[0], n[1] - s[1]],
      c = Math.sqrt(o[0] * o[0] + o[1] * o[1]),
      h = Math.sqrt(l[0] * l[0] + l[1] * l[1]),
      d = [o[0] / c, o[1] / c],
      u = [l[0] / h, l[1] / h],
      f = [n[0] - 10 * d[0], n[1] - 10 * d[1]],
      g = [n[0] - 10 * u[0], n[1] - 10 * u[1]];
    r.plot([f, n, g]);
  }
  updateResizeHandles() {
    this.handlePoints.forEach((r, e, t) => {
      const a = this.order[e];
      this.updateHandle.call(this, this.selection.get(e + 1), r, e, t, a);
    });
  }
  createRotFn(r) {
    r.line(), r.circle(5);
  }
  getPoint(r) {
    return this.handlePoints[this.order.indexOf(r)];
  }
  getPointHandle(r) {
    return this.selection.get(this.order.indexOf(r) + 1);
  }
  updateRotFn(r, e) {
    const t = this.getPoint("t");
    r.get(0).plot(t[0], t[1], e[0], e[1]), r.get(1).center(e[0], e[1]);
  }
  createRotationHandle() {
    const r = this.selection
      .group()
      .addClass("svg_select_handle_rot")
      .on(
        "mousedown.selection touchstart.selection",
        ts("rot", this.el, this.handlePoints)
      );
    this.createRot.call(this, r);
  }
  updateRotationHandle() {
    const r = this.selection.findOne("g.svg_select_handle_rot");
    this.updateRot(r, this.rotationPoint, this.handlePoints);
  }
  updatePoints() {
    const r = this.el.bbox(),
      e = this.el
        .parent()
        .screenCTM()
        .inverseO()
        .multiplyO(this.el.screenCTM());
    (this.handlePoints = this.getHandlePoints(r).map((t) => as(t, e))),
      (this.rotationPoint = as(this.getRotationPoint(r), e));
  }
  getHandlePoints({ x: r, x2: e, y: t, y2: a, cx: i, cy: s } = this.el.bbox()) {
    return [
      [r, t],
      [i, t],
      [e, t],
      [e, s],
      [e, a],
      [i, a],
      [r, a],
      [r, s],
    ];
  }
  getRotationPoint({ y: r, cx: e } = this.el.bbox()) {
    return [e, r - 20];
  }
  mutationHandler() {
    this.updatePoints(),
      this.updateSelection(),
      this.updateResizeHandles(),
      this.updateRotationHandle();
  }
};
const Ao = (r) =>
  function (e = !0, t = {}) {
    typeof e == "object" && ((t = e), (e = !0));
    let a = this.remember("_" + r.name);
    return (
      a ||
        (e.prototype instanceof Qc
          ? ((a = new e(this)), (e = !0))
          : (a = new r(this)),
        this.remember("_" + r.name, a)),
      a.active(e, t),
      this
    );
  };
/*!
 * @svgdotjs/svg.resize.js - An extension for svg.js which allows to resize elements which are selected
 * @version 2.0.4
 * https://github.com/svgdotjs/svg.resize.js
 *
 * @copyright [object Object]
 * @license MIT
 *
 * BUILT: Fri Sep 13 2024 12:43:14 GMT+0200 (Central European Summer Time)
 */ /*!
 * @svgdotjs/svg.select.js - An extension of svg.js which allows to select elements with mouse
 * @version 4.0.1
 * https://github.com/svgdotjs/svg.select.js
 *
 * @copyright Ulrich-Matthias Schäfer
 * @license MIT
 *
 * BUILT: Mon Jul 01 2024 15:04:42 GMT+0200 (Central European Summer Time)
 */ function is(r, e, t, a = null) {
  return function (i) {
    i.preventDefault(), i.stopPropagation();
    var s = i.pageX || i.touches[0].pageX,
      n = i.pageY || i.touches[0].pageY;
    e.fire(r, { x: s, y: n, event: i, index: a, points: t });
  };
}
function rs([r, e], { a: t, b: a, c: i, d: s, e: n, f: o }) {
  return [r * t + e * i + n, r * a + e * s + o];
}
K(Ie, { select: Ao(Qc) }),
  K([Nt, jt, Ot], {
    pointSelect: Ao(
      class {
        constructor(r) {
          (this.el = r),
            r.remember("_pointSelectHandler", this),
            (this.selection = new kt()),
            (this.order = ["lt", "t", "rt", "r", "rb", "b", "lb", "l", "rot"]),
            (this.mutationHandler = this.mutationHandler.bind(this));
          const e = $a();
          this.observer = new e.MutationObserver(this.mutationHandler);
        }
        init(r) {
          (this.createHandle = r.createHandle || this.createHandleFn),
            (this.updateHandle = r.updateHandle || this.updateHandleFn),
            this.el.root().put(this.selection),
            this.updatePoints(),
            this.createSelection(),
            this.createPointHandles(),
            this.updatePointHandles(),
            this.observer.observe(this.el.node, { attributes: !0 });
        }
        active(r, e) {
          if (!r)
            return (
              this.selection.clear().remove(), void this.observer.disconnect()
            );
          this.init(e);
        }
        createSelection() {
          this.selection
            .polygon(this.points)
            .addClass("svg_select_shape_pointSelect");
        }
        updateSelection() {
          this.selection.get(0).plot(this.points);
        }
        createPointHandles() {
          this.points.forEach((r, e, t) => {
            this.createHandle.call(this, this.selection, r, e, t),
              this.selection
                .get(e + 1)
                .addClass("svg_select_handle_point")
                .on(
                  "mousedown.selection touchstart.selection",
                  ts("point", this.el, this.points, e)
                );
          });
        }
        createHandleFn(r) {
          r.circle(5);
        }
        updateHandleFn(r, e) {
          r.center(e[0], e[1]);
        }
        updatePointHandles() {
          this.points.forEach((r, e, t) => {
            this.updateHandle.call(this, this.selection.get(e + 1), r, e, t);
          });
        }
        updatePoints() {
          const r = this.el
            .parent()
            .screenCTM()
            .inverseO()
            .multiplyO(this.el.screenCTM());
          this.points = this.el.array().map((e) => as(e, r));
        }
        mutationHandler() {
          this.updatePoints(),
            this.updateSelection(),
            this.updatePointHandles();
        }
      }
    ),
  });
class Jc {
  constructor(e) {
    (this.el = e),
      e.remember("_selectHandler", this),
      (this.selection = new kt()),
      (this.order = ["lt", "t", "rt", "r", "rb", "b", "lb", "l", "rot"]),
      (this.mutationHandler = this.mutationHandler.bind(this));
    const t = $a();
    this.observer = new t.MutationObserver(this.mutationHandler);
  }
  init(e) {
    (this.createHandle = e.createHandle || this.createHandleFn),
      (this.createRot = e.createRot || this.createRotFn),
      (this.updateHandle = e.updateHandle || this.updateHandleFn),
      (this.updateRot = e.updateRot || this.updateRotFn),
      this.el.root().put(this.selection),
      this.updatePoints(),
      this.createSelection(),
      this.createResizeHandles(),
      this.updateResizeHandles(),
      this.createRotationHandle(),
      this.updateRotationHandle(),
      this.observer.observe(this.el.node, { attributes: !0 });
  }
  active(e, t) {
    if (!e)
      return this.selection.clear().remove(), void this.observer.disconnect();
    this.init(t);
  }
  createSelection() {
    this.selection.polygon(this.handlePoints).addClass("svg_select_shape");
  }
  updateSelection() {
    this.selection.get(0).plot(this.handlePoints);
  }
  createResizeHandles() {
    this.handlePoints.forEach((e, t, a) => {
      const i = this.order[t];
      this.createHandle.call(this, this.selection, e, t, a, i),
        this.selection
          .get(t + 1)
          .addClass("svg_select_handle svg_select_handle_" + i)
          .on(
            "mousedown.selection touchstart.selection",
            is(i, this.el, this.handlePoints, t)
          );
    });
  }
  createHandleFn(e) {
    e.polyline();
  }
  updateHandleFn(e, t, a, i) {
    const s = i.at(a - 1),
      n = i[(a + 1) % i.length],
      o = t,
      l = [o[0] - s[0], o[1] - s[1]],
      c = [o[0] - n[0], o[1] - n[1]],
      h = Math.sqrt(l[0] * l[0] + l[1] * l[1]),
      d = Math.sqrt(c[0] * c[0] + c[1] * c[1]),
      u = [l[0] / h, l[1] / h],
      f = [c[0] / d, c[1] / d],
      g = [o[0] - 10 * u[0], o[1] - 10 * u[1]],
      p = [o[0] - 10 * f[0], o[1] - 10 * f[1]];
    e.plot([g, o, p]);
  }
  updateResizeHandles() {
    this.handlePoints.forEach((e, t, a) => {
      const i = this.order[t];
      this.updateHandle.call(this, this.selection.get(t + 1), e, t, a, i);
    });
  }
  createRotFn(e) {
    e.line(), e.circle(5);
  }
  getPoint(e) {
    return this.handlePoints[this.order.indexOf(e)];
  }
  getPointHandle(e) {
    return this.selection.get(this.order.indexOf(e) + 1);
  }
  updateRotFn(e, t) {
    const a = this.getPoint("t");
    e.get(0).plot(a[0], a[1], t[0], t[1]), e.get(1).center(t[0], t[1]);
  }
  createRotationHandle() {
    const e = this.selection
      .group()
      .addClass("svg_select_handle_rot")
      .on(
        "mousedown.selection touchstart.selection",
        is("rot", this.el, this.handlePoints)
      );
    this.createRot.call(this, e);
  }
  updateRotationHandle() {
    const e = this.selection.findOne("g.svg_select_handle_rot");
    this.updateRot(e, this.rotationPoint, this.handlePoints);
  }
  updatePoints() {
    const e = this.el.bbox(),
      t = this.el
        .parent()
        .screenCTM()
        .inverseO()
        .multiplyO(this.el.screenCTM());
    (this.handlePoints = this.getHandlePoints(e).map((a) => rs(a, t))),
      (this.rotationPoint = rs(this.getRotationPoint(e), t));
  }
  getHandlePoints({ x: e, x2: t, y: a, y2: i, cx: s, cy: n } = this.el.bbox()) {
    return [
      [e, a],
      [s, a],
      [t, a],
      [t, n],
      [t, i],
      [s, i],
      [e, i],
      [e, n],
    ];
  }
  getRotationPoint({ y: e, cx: t } = this.el.bbox()) {
    return [t, e - 20];
  }
  mutationHandler() {
    this.updatePoints(),
      this.updateSelection(),
      this.updateResizeHandles(),
      this.updateRotationHandle();
  }
}
const Co = (r) =>
  function (e = !0, t = {}) {
    typeof e == "object" && ((t = e), (e = !0));
    let a = this.remember("_" + r.name);
    return (
      a ||
        (e.prototype instanceof Jc
          ? ((a = new e(this)), (e = !0))
          : (a = new r(this)),
        this.remember("_" + r.name, a)),
      a.active(e, t),
      this
    );
  };
K(Ie, { select: Co(Jc) }),
  K([Nt, jt, Ot], {
    pointSelect: Co(
      class {
        constructor(r) {
          (this.el = r),
            r.remember("_pointSelectHandler", this),
            (this.selection = new kt()),
            (this.order = ["lt", "t", "rt", "r", "rb", "b", "lb", "l", "rot"]),
            (this.mutationHandler = this.mutationHandler.bind(this));
          const e = $a();
          this.observer = new e.MutationObserver(this.mutationHandler);
        }
        init(r) {
          (this.createHandle = r.createHandle || this.createHandleFn),
            (this.updateHandle = r.updateHandle || this.updateHandleFn),
            this.el.root().put(this.selection),
            this.updatePoints(),
            this.createSelection(),
            this.createPointHandles(),
            this.updatePointHandles(),
            this.observer.observe(this.el.node, { attributes: !0 });
        }
        active(r, e) {
          if (!r)
            return (
              this.selection.clear().remove(), void this.observer.disconnect()
            );
          this.init(e);
        }
        createSelection() {
          this.selection
            .polygon(this.points)
            .addClass("svg_select_shape_pointSelect");
        }
        updateSelection() {
          this.selection.get(0).plot(this.points);
        }
        createPointHandles() {
          this.points.forEach((r, e, t) => {
            this.createHandle.call(this, this.selection, r, e, t),
              this.selection
                .get(e + 1)
                .addClass("svg_select_handle_point")
                .on(
                  "mousedown.selection touchstart.selection",
                  is("point", this.el, this.points, e)
                );
          });
        }
        createHandleFn(r) {
          r.circle(5);
        }
        updateHandleFn(r, e) {
          r.center(e[0], e[1]);
        }
        updatePointHandles() {
          this.points.forEach((r, e, t) => {
            this.updateHandle.call(this, this.selection.get(e + 1), r, e, t);
          });
        }
        updatePoints() {
          const r = this.el
            .parent()
            .screenCTM()
            .inverseO()
            .multiplyO(this.el.screenCTM());
          this.points = this.el.array().map((e) => rs(e, r));
        }
        mutationHandler() {
          this.updatePoints(),
            this.updateSelection(),
            this.updatePointHandles();
        }
      }
    ),
  });
const oi = (r) => (
    r.changedTouches && (r = r.changedTouches[0]),
    { x: r.clientX, y: r.clientY }
  ),
  So = (r) => {
    let e = 1 / 0,
      t = 1 / 0,
      a = -1 / 0,
      i = -1 / 0;
    for (let s = 0; s < r.length; s++) {
      const n = r[s];
      (e = Math.min(e, n[0])),
        (t = Math.min(t, n[1])),
        (a = Math.max(a, n[0])),
        (i = Math.max(i, n[1]));
    }
    return new we(e, t, a - e, i - t);
  };
class To {
  constructor(e) {
    (this.el = e),
      e.remember("_ResizeHandler", this),
      (this.lastCoordinates = null),
      (this.eventType = ""),
      (this.lastEvent = null),
      (this.handleResize = this.handleResize.bind(this)),
      (this.resize = this.resize.bind(this)),
      (this.endResize = this.endResize.bind(this)),
      (this.rotate = this.rotate.bind(this)),
      (this.movePoint = this.movePoint.bind(this));
  }
  active(e, t) {
    (this.preserveAspectRatio = t.preserveAspectRatio ?? !1),
      (this.aroundCenter = t.aroundCenter ?? !1),
      (this.grid = t.grid ?? 0),
      (this.degree = t.degree ?? 0),
      this.el.off(".resize"),
      e &&
        (this.el.on(
          [
            "lt.resize",
            "rt.resize",
            "rb.resize",
            "lb.resize",
            "t.resize",
            "r.resize",
            "b.resize",
            "l.resize",
            "rot.resize",
            "point.resize",
          ],
          this.handleResize
        ),
        this.lastEvent &&
          (this.eventType === "rot"
            ? this.rotate(this.lastEvent)
            : this.eventType === "point"
            ? this.movePoint(this.lastEvent)
            : this.resize(this.lastEvent)));
  }
  handleResize(e) {
    this.eventType = e.type;
    const { event: t, index: a, points: i } = e.detail,
      s = !t.type.indexOf("mouse");
    if (
      (s && (t.which || t.buttons) !== 1) ||
      this.el.dispatch("beforeresize", { event: e, handler: this })
        .defaultPrevented
    )
      return;
    (this.box = this.el.bbox()),
      (this.startPoint = this.el.point(oi(t))),
      (this.index = a),
      (this.points = i.slice());
    const n = (s ? "mousemove" : "touchmove") + ".resize",
      o = (s ? "mouseup" : "touchcancel.resize touchend") + ".resize";
    e.type === "point"
      ? lt(window, n, this.movePoint)
      : e.type === "rot"
      ? lt(window, n, this.rotate)
      : lt(window, n, this.resize),
      lt(window, o, this.endResize);
  }
  resize(e) {
    this.lastEvent = e;
    const t = this.snapToGrid(this.el.point(oi(e)));
    let a = t.x - this.startPoint.x,
      i = t.y - this.startPoint.y;
    this.preserveAspectRatio && this.aroundCenter && ((a *= 2), (i *= 2));
    const s = this.box.x + a,
      n = this.box.y + i,
      o = this.box.x2 + a,
      l = this.box.y2 + i;
    let c = new we(this.box);
    if (
      (this.eventType.includes("l") &&
        ((c.x = Math.min(s, this.box.x2)), (c.x2 = Math.max(s, this.box.x2))),
      this.eventType.includes("r") &&
        ((c.x = Math.min(o, this.box.x)), (c.x2 = Math.max(o, this.box.x))),
      this.eventType.includes("t") &&
        ((c.y = Math.min(n, this.box.y2)), (c.y2 = Math.max(n, this.box.y2))),
      this.eventType.includes("b") &&
        ((c.y = Math.min(l, this.box.y)), (c.y2 = Math.max(l, this.box.y))),
      (c.width = c.x2 - c.x),
      (c.height = c.y2 - c.y),
      this.preserveAspectRatio)
    ) {
      const h = c.width / this.box.width,
        d = c.height / this.box.height,
        u = ["lt", "t", "rt", "r", "rb", "b", "lb", "l"],
        f = (u.indexOf(this.eventType) + 4) % u.length,
        g = this.aroundCenter ? [this.box.cx, this.box.cy] : this.points[f];
      let p =
        this.eventType.includes("t") || this.eventType.includes("b") ? d : h;
      (p = this.eventType.length === 2 ? Math.max(h, d) : p),
        (c = (function (m, x, v) {
          const b = [
            [m.x, m.y],
            [m.x + m.width, m.y],
            [m.x + m.width, m.y + m.height],
            [m.x, m.y + m.height],
          ].map(([k, y]) => {
            const C = k - x[0],
              A = (y - x[1]) * v;
            return [C * v + x[0], A + x[1]];
          });
          return So(b);
        })(this.box, g, p));
    }
    this.el.dispatch("resize", {
      box: new we(c),
      angle: 0,
      eventType: this.eventType,
      event: e,
      handler: this,
    }).defaultPrevented || this.el.size(c.width, c.height).move(c.x, c.y);
  }
  movePoint(e) {
    this.lastEvent = e;
    const { x: t, y: a } = this.snapToGrid(this.el.point(oi(e))),
      i = this.el.array().slice();
    (i[this.index] = [t, a]),
      this.el.dispatch("resize", {
        box: So(i),
        angle: 0,
        eventType: this.eventType,
        event: e,
        handler: this,
      }).defaultPrevented || this.el.plot(i);
  }
  rotate(e) {
    this.lastEvent = e;
    const t = this.startPoint,
      a = this.el.point(oi(e)),
      { cx: i, cy: s } = this.box,
      n = t.x - i,
      o = t.y - s,
      l = a.x - i,
      c = a.y - s,
      h = Math.sqrt(n * n + o * o) * Math.sqrt(l * l + c * c);
    if (h === 0) return;
    let d = (Math.acos((n * l + o * c) / h) / Math.PI) * 180;
    if (!d) return;
    a.x < t.x && (d = -d);
    const u = new re(this.el),
      { x: f, y: g } = new ue(i, s).transformO(u),
      { rotate: p } = u.decompose(),
      m = this.snapToAngle(p + d) - p;
    this.el.dispatch("resize", {
      box: this.box,
      angle: m,
      eventType: this.eventType,
      event: e,
      handler: this,
    }).defaultPrevented || this.el.transform(u.rotateO(m, f, g));
  }
  endResize(e) {
    this.eventType !== "rot" && this.eventType !== "point" && this.resize(e),
      (this.lastEvent = null),
      (this.eventType = ""),
      We(window, "mousemove.resize touchmove.resize"),
      We(window, "mouseup.resize touchend.resize");
  }
  snapToGrid(e) {
    return (
      this.grid &&
        ((e.x = Math.round(e.x / this.grid) * this.grid),
        (e.y = Math.round(e.y / this.grid) * this.grid)),
      e
    );
  }
  snapToAngle(e) {
    return this.degree && (e = Math.round(e / this.degree) * this.degree), e;
  }
}
K(Ie, {
  resize: function (r = !0, e = {}) {
    typeof r == "object" && ((e = r), (r = !0));
    let t = this.remember("_ResizeHandler");
    return (
      t ||
        (r.prototype instanceof To
          ? ((t = new r(this)), (r = !0))
          : (t = new To(this)),
        this.remember("_resizeHandler", t)),
      t.active(r, e),
      this
    );
  },
}),
  window.SVG === void 0 && (window.SVG = cm),
  window.Apex === void 0 && (window.Apex = {});
var Po = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "initModules",
          value: function () {
            (this.ctx.publicMethods = [
              "updateOptions",
              "updateSeries",
              "appendData",
              "appendSeries",
              "isSeriesHidden",
              "highlightSeries",
              "toggleSeries",
              "showSeries",
              "hideSeries",
              "setLocale",
              "resetSeries",
              "zoomX",
              "toggleDataPointSelection",
              "dataURI",
              "exportToCSV",
              "addXaxisAnnotation",
              "addYaxisAnnotation",
              "addPointAnnotation",
              "clearAnnotations",
              "removeAnnotation",
              "paper",
              "destroy",
            ]),
              (this.ctx.eventList = [
                "click",
                "mousedown",
                "mousemove",
                "mouseleave",
                "touchstart",
                "touchmove",
                "touchleave",
                "mouseup",
                "touchend",
              ]),
              (this.ctx.animations = new oa(this.ctx)),
              (this.ctx.axes = new bm(this.ctx)),
              (this.ctx.core = new Gm(this.ctx.el, this.ctx)),
              (this.ctx.config = new ja({})),
              (this.ctx.data = new Us(this.ctx)),
              (this.ctx.grid = new Bc(this.ctx)),
              (this.ctx.graphics = new H(this.ctx)),
              (this.ctx.coreUtils = new ke(this.ctx)),
              (this.ctx.crosshairs = new es(this.ctx)),
              (this.ctx.events = new xm(this.ctx)),
              (this.ctx.exports = new Ri(this.ctx)),
              (this.ctx.fill = new tt(this.ctx)),
              (this.ctx.localization = new vm(this.ctx)),
              (this.ctx.options = new Rt()),
              (this.ctx.responsive = new ym(this.ctx)),
              (this.ctx.series = new Ve(this.ctx)),
              (this.ctx.theme = new wm(this.ctx)),
              (this.ctx.formatters = new Ka(this.ctx)),
              (this.ctx.titleSubtitle = new km(this.ctx)),
              (this.ctx.legend = new Wc(this.ctx)),
              (this.ctx.toolbar = new Vc(this.ctx)),
              (this.ctx.tooltip = new yo(this.ctx)),
              (this.ctx.dimensions = new _i(this.ctx)),
              (this.ctx.updateHelpers = new Um(this.ctx)),
              (this.ctx.zoomPanSelection = new Lm(this.ctx)),
              (this.ctx.w.globals.tooltip = new yo(this.ctx));
          },
        },
      ]),
      r
    );
  })(),
  Lo = (function () {
    function r(e) {
      U(this, r), (this.ctx = e), (this.w = e.w);
    }
    return (
      $(r, [
        {
          key: "clear",
          value: function (e) {
            var t = e.isUpdating;
            this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(),
              this.ctx.toolbar && this.ctx.toolbar.destroy(),
              (this.ctx.animations = null),
              (this.ctx.axes = null),
              (this.ctx.annotations = null),
              (this.ctx.core = null),
              (this.ctx.data = null),
              (this.ctx.grid = null),
              (this.ctx.series = null),
              (this.ctx.responsive = null),
              (this.ctx.theme = null),
              (this.ctx.formatters = null),
              (this.ctx.titleSubtitle = null),
              (this.ctx.legend = null),
              (this.ctx.dimensions = null),
              (this.ctx.options = null),
              (this.ctx.crosshairs = null),
              (this.ctx.zoomPanSelection = null),
              (this.ctx.updateHelpers = null),
              (this.ctx.toolbar = null),
              (this.ctx.localization = null),
              (this.ctx.w.globals.tooltip = null),
              this.clearDomElements({ isUpdating: t });
          },
        },
        {
          key: "killSVG",
          value: function (e) {
            e.each(function () {
              this.removeClass("*"), this.off();
            }, !0),
              e.clear();
          },
        },
        {
          key: "clearDomElements",
          value: function (e) {
            var t = this,
              a = e.isUpdating,
              i = this.w.globals.dom.Paper.node;
            i.parentNode &&
              i.parentNode.parentNode &&
              !a &&
              (i.parentNode.parentNode.style.minHeight = "unset");
            var s = this.w.globals.dom.baseEl;
            s &&
              this.ctx.eventList.forEach(function (o) {
                s.removeEventListener(o, t.ctx.events.documentEvent);
              });
            var n = this.w.globals.dom;
            if (this.ctx.el !== null)
              for (; this.ctx.el.firstChild; )
                this.ctx.el.removeChild(this.ctx.el.firstChild);
            this.killSVG(n.Paper),
              n.Paper.remove(),
              (n.elWrap = null),
              (n.elGraphical = null),
              (n.elLegendWrap = null),
              (n.elLegendForeign = null),
              (n.baseEl = null),
              (n.elGridRect = null),
              (n.elGridRectMask = null),
              (n.elGridRectBarMask = null),
              (n.elGridRectMarkerMask = null),
              (n.elForecastMask = null),
              (n.elNonForecastMask = null),
              (n.elDefs = null);
          },
        },
      ]),
      r
    );
  })(),
  kr = new WeakMap(),
  qm = (function () {
    function r(e, t) {
      U(this, r),
        (this.opts = t),
        (this.ctx = this),
        (this.w = new mm(t).init()),
        (this.el = e),
        (this.w.globals.cuid = _.randomId()),
        (this.w.globals.chartID = this.w.config.chart.id
          ? _.escapeString(this.w.config.chart.id)
          : this.w.globals.cuid),
        new Po(this).initModules(),
        (this.create = _.bind(this.create, this)),
        (this.windowResizeHandler = this._windowResizeHandler.bind(this)),
        (this.parentResizeHandler = this._parentResizeCallback.bind(this));
    }
    return (
      $(
        r,
        [
          {
            key: "render",
            value: function () {
              var e = this;
              return new Promise(function (t, a) {
                if (_.elementExists(e.el)) {
                  Apex._chartInstances === void 0 &&
                    (Apex._chartInstances = []),
                    e.w.config.chart.id &&
                      Apex._chartInstances.push({
                        id: e.w.globals.chartID,
                        group: e.w.config.chart.group,
                        chart: e,
                      }),
                    e.setLocale(e.w.config.chart.defaultLocale);
                  var i = e.w.config.chart.events.beforeMount;
                  typeof i == "function" && i(e, e.w),
                    e.events.fireEvent("beforeMount", [e, e.w]),
                    window.addEventListener("resize", e.windowResizeHandler),
                    (function (u, f) {
                      var g = !1;
                      if (u.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                        var p = u.getBoundingClientRect();
                        (u.style.display !== "none" && p.width !== 0) ||
                          (g = !0);
                      }
                      var m = new ResizeObserver(function (x) {
                        g && f.call(u, x), (g = !0);
                      });
                      u.nodeType === Node.DOCUMENT_FRAGMENT_NODE
                        ? Array.from(u.children).forEach(function (x) {
                            return m.observe(x);
                          })
                        : m.observe(u),
                        kr.set(f, m);
                    })(e.el.parentNode, e.parentResizeHandler);
                  var s = e.el.getRootNode && e.el.getRootNode(),
                    n = _.is("ShadowRoot", s),
                    o = e.el.ownerDocument,
                    l = n
                      ? s.getElementById("apexcharts-css")
                      : o.getElementById("apexcharts-css");
                  if (!l) {
                    var c;
                    ((l = document.createElement("style")).id =
                      "apexcharts-css"),
                      (l.textContent = `@keyframes opaque {
  0% {
    opacity: 0
  }

  to {
    opacity: 1
  }
}

@keyframes resizeanim {

  0%,
  to {
    opacity: 0
  }
}

.apexcharts-canvas {
  position: relative;
  direction: ltr !important;
  user-select: none
}

.apexcharts-canvas ::-webkit-scrollbar {
  -webkit-appearance: none;
  width: 6px
}

.apexcharts-canvas ::-webkit-scrollbar-thumb {
  border-radius: 4px;
  background-color: rgba(0, 0, 0, .5);
  box-shadow: 0 0 1px rgba(255, 255, 255, .5);
  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5)
}

.apexcharts-inner {
  position: relative
}

.apexcharts-text tspan {
  font-family: inherit
}

rect.legend-mouseover-inactive,
.legend-mouseover-inactive rect,
.legend-mouseover-inactive path,
.legend-mouseover-inactive circle,
.legend-mouseover-inactive line,
.legend-mouseover-inactive text.apexcharts-yaxis-title-text,
.legend-mouseover-inactive text.apexcharts-yaxis-label {
  transition: .15s ease all;
  opacity: .2
}

.apexcharts-legend-text {
  padding-left: 15px;
  margin-left: -15px;
}

.apexcharts-series-collapsed {
  opacity: 0
}

.apexcharts-tooltip {
  border-radius: 5px;
  box-shadow: 2px 2px 6px -4px #999;
  cursor: default;
  font-size: 14px;
  left: 62px;
  opacity: 0;
  pointer-events: none;
  position: absolute;
  top: 20px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  white-space: nowrap;
  z-index: 12;
  transition: .15s ease all
}

.apexcharts-tooltip.apexcharts-active {
  opacity: 1;
  transition: .15s ease all
}

.apexcharts-tooltip.apexcharts-theme-light {
  border: 1px solid #e3e3e3;
  background: rgba(255, 255, 255, .96)
}

.apexcharts-tooltip.apexcharts-theme-dark {
  color: #fff;
  background: rgba(30, 30, 30, .8)
}

.apexcharts-tooltip * {
  font-family: inherit
}

.apexcharts-tooltip-title {
  padding: 6px;
  font-size: 15px;
  margin-bottom: 4px
}

.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {
  background: #eceff1;
  border-bottom: 1px solid #ddd
}

.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {
  background: rgba(0, 0, 0, .7);
  border-bottom: 1px solid #333
}

.apexcharts-tooltip-text-goals-value,
.apexcharts-tooltip-text-y-value,
.apexcharts-tooltip-text-z-value {
  display: inline-block;
  margin-left: 5px;
  font-weight: 600
}

.apexcharts-tooltip-text-goals-label:empty,
.apexcharts-tooltip-text-goals-value:empty,
.apexcharts-tooltip-text-y-label:empty,
.apexcharts-tooltip-text-y-value:empty,
.apexcharts-tooltip-text-z-value:empty,
.apexcharts-tooltip-title:empty {
  display: none
}

.apexcharts-tooltip-text-goals-label,
.apexcharts-tooltip-text-goals-value {
  padding: 6px 0 5px
}

.apexcharts-tooltip-goals-group,
.apexcharts-tooltip-text-goals-label,
.apexcharts-tooltip-text-goals-value {
  display: flex
}

.apexcharts-tooltip-text-goals-label:not(:empty),
.apexcharts-tooltip-text-goals-value:not(:empty) {
  margin-top: -6px
}

.apexcharts-tooltip-marker {
  display: inline-block;
  position: relative;
  width: 16px;
  height: 16px;
  font-size: 16px;
  line-height: 16px;
  margin-right: 4px;
  text-align: center;
  vertical-align: middle;
  color: inherit;
}

.apexcharts-tooltip-marker::before {
  content: "";
  display: inline-block;
  width: 100%;
  text-align: center;
  color: currentcolor;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  font-size: 26px;
  line-height: 14px;
  font-weight: 900;
}

.apexcharts-tooltip-marker[shape="circle"]::before {
  content: "\\25CF";
}

.apexcharts-tooltip-marker[shape="square"]::before,
.apexcharts-tooltip-marker[shape="rect"]::before {
  content: "\\25A0";
  transform: translate(-1px, -2px);
}

.apexcharts-tooltip-marker[shape="line"]::before {
  content: "\\2500";
}

.apexcharts-tooltip-marker[shape="diamond"]::before {
  content: "\\25C6";
  font-size: 28px;
}

.apexcharts-tooltip-marker[shape="triangle"]::before {
  content: "\\25B2";
  font-size: 22px;
}

.apexcharts-tooltip-marker[shape="cross"]::before {
  content: "\\2715";
  font-size: 18px;
}

.apexcharts-tooltip-marker[shape="plus"]::before {
  content: "\\2715";
  transform: rotate(45deg) translate(-1px, -1px);
  font-size: 18px;
}

.apexcharts-tooltip-marker[shape="star"]::before {
  content: "\\2605";
  font-size: 18px;
}

.apexcharts-tooltip-marker[shape="sparkle"]::before {
  content: "\\2726";
  font-size: 20px;
}

.apexcharts-tooltip-series-group {
  padding: 0 10px;
  display: none;
  text-align: left;
  justify-content: left;
  align-items: center
}

.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {
  opacity: 1
}

.apexcharts-tooltip-series-group.apexcharts-active,
.apexcharts-tooltip-series-group:last-child {
  padding-bottom: 4px
}

.apexcharts-tooltip-y-group {
  padding: 6px 0 5px
}

.apexcharts-custom-tooltip,
.apexcharts-tooltip-box {
  padding: 4px 8px
}

.apexcharts-tooltip-boxPlot {
  display: flex;
  flex-direction: column-reverse
}

.apexcharts-tooltip-box>div {
  margin: 4px 0
}

.apexcharts-tooltip-box span.value {
  font-weight: 700
}

.apexcharts-tooltip-rangebar {
  padding: 5px 8px
}

.apexcharts-tooltip-rangebar .category {
  font-weight: 600;
  color: #777
}

.apexcharts-tooltip-rangebar .series-name {
  font-weight: 700;
  display: block;
  margin-bottom: 5px
}

.apexcharts-xaxistooltip,
.apexcharts-yaxistooltip {
  opacity: 0;
  pointer-events: none;
  color: #373d3f;
  font-size: 13px;
  text-align: center;
  border-radius: 2px;
  position: absolute;
  z-index: 10;
  background: #eceff1;
  border: 1px solid #90a4ae
}

.apexcharts-xaxistooltip {
  padding: 9px 10px;
  transition: .15s ease all
}

.apexcharts-xaxistooltip.apexcharts-theme-dark {
  background: rgba(0, 0, 0, .7);
  border: 1px solid rgba(0, 0, 0, .5);
  color: #fff
}

.apexcharts-xaxistooltip:after,
.apexcharts-xaxistooltip:before {
  left: 50%;
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none
}

.apexcharts-xaxistooltip:after {
  border-color: transparent;
  border-width: 6px;
  margin-left: -6px
}

.apexcharts-xaxistooltip:before {
  border-color: transparent;
  border-width: 7px;
  margin-left: -7px
}

.apexcharts-xaxistooltip-bottom:after,
.apexcharts-xaxistooltip-bottom:before {
  bottom: 100%
}

.apexcharts-xaxistooltip-top:after,
.apexcharts-xaxistooltip-top:before {
  top: 100%
}

.apexcharts-xaxistooltip-bottom:after {
  border-bottom-color: #eceff1
}

.apexcharts-xaxistooltip-bottom:before {
  border-bottom-color: #90a4ae
}

.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,
.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {
  border-bottom-color: rgba(0, 0, 0, .5)
}

.apexcharts-xaxistooltip-top:after {
  border-top-color: #eceff1
}

.apexcharts-xaxistooltip-top:before {
  border-top-color: #90a4ae
}

.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,
.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {
  border-top-color: rgba(0, 0, 0, .5)
}

.apexcharts-xaxistooltip.apexcharts-active {
  opacity: 1;
  transition: .15s ease all
}

.apexcharts-yaxistooltip {
  padding: 4px 10px
}

.apexcharts-yaxistooltip.apexcharts-theme-dark {
  background: rgba(0, 0, 0, .7);
  border: 1px solid rgba(0, 0, 0, .5);
  color: #fff
}

.apexcharts-yaxistooltip:after,
.apexcharts-yaxistooltip:before {
  top: 50%;
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none
}

.apexcharts-yaxistooltip:after {
  border-color: transparent;
  border-width: 6px;
  margin-top: -6px
}

.apexcharts-yaxistooltip:before {
  border-color: transparent;
  border-width: 7px;
  margin-top: -7px
}

.apexcharts-yaxistooltip-left:after,
.apexcharts-yaxistooltip-left:before {
  left: 100%
}

.apexcharts-yaxistooltip-right:after,
.apexcharts-yaxistooltip-right:before {
  right: 100%
}

.apexcharts-yaxistooltip-left:after {
  border-left-color: #eceff1
}

.apexcharts-yaxistooltip-left:before {
  border-left-color: #90a4ae
}

.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,
.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {
  border-left-color: rgba(0, 0, 0, .5)
}

.apexcharts-yaxistooltip-right:after {
  border-right-color: #eceff1
}

.apexcharts-yaxistooltip-right:before {
  border-right-color: #90a4ae
}

.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,
.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {
  border-right-color: rgba(0, 0, 0, .5)
}

.apexcharts-yaxistooltip.apexcharts-active {
  opacity: 1
}

.apexcharts-yaxistooltip-hidden {
  display: none
}

.apexcharts-xcrosshairs,
.apexcharts-ycrosshairs {
  pointer-events: none;
  opacity: 0;
  transition: .15s ease all
}

.apexcharts-xcrosshairs.apexcharts-active,
.apexcharts-ycrosshairs.apexcharts-active {
  opacity: 1;
  transition: .15s ease all
}

.apexcharts-ycrosshairs-hidden {
  opacity: 0
}

.apexcharts-selection-rect {
  cursor: move
}

.svg_select_shape {
  stroke-width: 1;
  stroke-dasharray: 10 10;
  stroke: black;
  stroke-opacity: 0.1;
  pointer-events: none;
  fill: none;
}

.svg_select_handle {
  stroke-width: 3;
  stroke: black;
  fill: none;
}

.svg_select_handle_r {
  cursor: e-resize;
}

.svg_select_handle_l {
  cursor: w-resize;
}

.apexcharts-svg.apexcharts-zoomable.hovering-zoom {
  cursor: crosshair
}

.apexcharts-svg.apexcharts-zoomable.hovering-pan {
  cursor: move
}

.apexcharts-menu-icon,
.apexcharts-pan-icon,
.apexcharts-reset-icon,
.apexcharts-selection-icon,
.apexcharts-toolbar-custom-icon,
.apexcharts-zoom-icon,
.apexcharts-zoomin-icon,
.apexcharts-zoomout-icon {
  cursor: pointer;
  width: 20px;
  height: 20px;
  line-height: 24px;
  color: #6e8192;
  text-align: center
}

.apexcharts-menu-icon svg,
.apexcharts-reset-icon svg,
.apexcharts-zoom-icon svg,
.apexcharts-zoomin-icon svg,
.apexcharts-zoomout-icon svg {
  fill: #6e8192
}

.apexcharts-selection-icon svg {
  fill: #444;
  transform: scale(.76)
}

.apexcharts-theme-dark .apexcharts-menu-icon svg,
.apexcharts-theme-dark .apexcharts-pan-icon svg,
.apexcharts-theme-dark .apexcharts-reset-icon svg,
.apexcharts-theme-dark .apexcharts-selection-icon svg,
.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,
.apexcharts-theme-dark .apexcharts-zoom-icon svg,
.apexcharts-theme-dark .apexcharts-zoomin-icon svg,
.apexcharts-theme-dark .apexcharts-zoomout-icon svg {
  fill: #f3f4f5
}

.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,
.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,
.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {
  fill: #008ffb
}

.apexcharts-theme-light .apexcharts-menu-icon:hover svg,
.apexcharts-theme-light .apexcharts-reset-icon:hover svg,
.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,
.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,
.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,
.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {
  fill: #333
}

.apexcharts-menu-icon,
.apexcharts-selection-icon {
  position: relative
}

.apexcharts-reset-icon {
  margin-left: 5px
}

.apexcharts-menu-icon,
.apexcharts-reset-icon,
.apexcharts-zoom-icon {
  transform: scale(.85)
}

.apexcharts-zoomin-icon,
.apexcharts-zoomout-icon {
  transform: scale(.7)
}

.apexcharts-zoomout-icon {
  margin-right: 3px
}

.apexcharts-pan-icon {
  transform: scale(.62);
  position: relative;
  left: 1px;
  top: 0
}

.apexcharts-pan-icon svg {
  fill: #fff;
  stroke: #6e8192;
  stroke-width: 2
}

.apexcharts-pan-icon.apexcharts-selected svg {
  stroke: #008ffb
}

.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {
  stroke: #333
}

.apexcharts-toolbar {
  position: absolute;
  z-index: 11;
  max-width: 176px;
  text-align: right;
  border-radius: 3px;
  padding: 0 6px 2px;
  display: flex;
  justify-content: space-between;
  align-items: center
}

.apexcharts-menu {
  background: #fff;
  position: absolute;
  top: 100%;
  border: 1px solid #ddd;
  border-radius: 3px;
  padding: 3px;
  right: 10px;
  opacity: 0;
  min-width: 110px;
  transition: .15s ease all;
  pointer-events: none
}

.apexcharts-menu.apexcharts-menu-open {
  opacity: 1;
  pointer-events: all;
  transition: .15s ease all
}

.apexcharts-menu-item {
  padding: 6px 7px;
  font-size: 12px;
  cursor: pointer
}

.apexcharts-theme-light .apexcharts-menu-item:hover {
  background: #eee
}

.apexcharts-theme-dark .apexcharts-menu {
  background: rgba(0, 0, 0, .7);
  color: #fff
}

@media screen and (min-width:768px) {
  .apexcharts-canvas:hover .apexcharts-toolbar {
    opacity: 1
  }
}

.apexcharts-canvas .apexcharts-element-hidden,
.apexcharts-datalabel.apexcharts-element-hidden,
.apexcharts-hide .apexcharts-series-points {
  opacity: 0;
}

.apexcharts-hidden-element-shown {
  opacity: 1;
  transition: 0.25s ease all;
}

.apexcharts-datalabel,
.apexcharts-datalabel-label,
.apexcharts-datalabel-value,
.apexcharts-datalabels,
.apexcharts-pie-label {
  cursor: default;
  pointer-events: none
}

.apexcharts-pie-label-delay {
  opacity: 0;
  animation-name: opaque;
  animation-duration: .3s;
  animation-fill-mode: forwards;
  animation-timing-function: ease
}

.apexcharts-radialbar-label {
  cursor: pointer;
}

.apexcharts-annotation-rect,
.apexcharts-area-series .apexcharts-area,
.apexcharts-gridline,
.apexcharts-line,
.apexcharts-point-annotation-label,
.apexcharts-radar-series path:not(.apexcharts-marker),
.apexcharts-radar-series polygon,
.apexcharts-toolbar svg,
.apexcharts-tooltip .apexcharts-marker,
.apexcharts-xaxis-annotation-label,
.apexcharts-yaxis-annotation-label,
.apexcharts-zoom-rect,
.no-pointer-events {
  pointer-events: none
}

.apexcharts-tooltip-active .apexcharts-marker {
  transition: .15s ease all
}

.apexcharts-radar-series .apexcharts-yaxis {
  pointer-events: none;
}

.resize-triggers {
  animation: 1ms resizeanim;
  visibility: hidden;
  opacity: 0;
  height: 100%;
  width: 100%;
  overflow: hidden
}

.contract-trigger:before,
.resize-triggers,
.resize-triggers>div {
  content: " ";
  display: block;
  position: absolute;
  top: 0;
  left: 0
}

.resize-triggers>div {
  height: 100%;
  width: 100%;
  background: #eee;
  overflow: auto
}

.contract-trigger:before {
  overflow: hidden;
  width: 200%;
  height: 200%
}

.apexcharts-bar-goals-markers {
  pointer-events: none
}

.apexcharts-bar-shadows {
  pointer-events: none
}

.apexcharts-rangebar-goals-markers {
  pointer-events: none
}`);
                    var h =
                      ((c = e.opts.chart) === null || c === void 0
                        ? void 0
                        : c.nonce) || e.w.config.chart.nonce;
                    h && l.setAttribute("nonce", h),
                      n ? s.prepend(l) : o.head.appendChild(l);
                  }
                  var d = e.create(e.w.config.series, {});
                  if (!d) return t(e);
                  e.mount(d)
                    .then(function () {
                      typeof e.w.config.chart.events.mounted == "function" &&
                        e.w.config.chart.events.mounted(e, e.w),
                        e.events.fireEvent("mounted", [e, e.w]),
                        t(d);
                    })
                    .catch(function (u) {
                      a(u);
                    });
                } else a(new Error("Element not found"));
              });
            },
          },
          {
            key: "create",
            value: function (e, t) {
              var a = this,
                i = this.w;
              new Po(this).initModules();
              var s = this.w.globals;
              if (
                ((s.noData = !1),
                (s.animationEnded = !1),
                !_.elementExists(this.el))
              )
                return (s.animationEnded = !0), this.destroy(), null;
              if (
                (this.responsive.checkResponsiveConfig(t),
                i.config.xaxis.convertedCatToNumeric &&
                  new Na(i.config).convertCatToNumericXaxis(i.config, this.ctx),
                this.core.setupElements(),
                i.config.chart.type === "treemap" &&
                  ((i.config.grid.show = !1), (i.config.yaxis[0].show = !1)),
                s.svgWidth === 0)
              )
                return (s.animationEnded = !0), null;
              var n = e;
              e.forEach(function (u, f) {
                u.hidden &&
                  (n = a.legend.legendHelpers.getSeriesAfterCollapsing({
                    realIndex: f,
                  }));
              });
              var o = ke.checkComboSeries(n, i.config.chart.type);
              (s.comboCharts = o.comboCharts),
                (s.comboBarCount = o.comboBarCount);
              var l = n.every(function (u) {
                return u.data && u.data.length === 0;
              });
              (n.length === 0 || (l && s.collapsedSeries.length < 1)) &&
                this.series.handleNoData(),
                this.events.setupEventHandlers(),
                this.data.parseData(n),
                this.theme.init(),
                new da(this).setGlobalMarkerSize(),
                this.formatters.setLabelFormatters(),
                this.titleSubtitle.draw(),
                (s.noData &&
                  s.collapsedSeries.length !== s.series.length &&
                  !i.config.legend.showForSingleSeries) ||
                  this.legend.init(),
                this.series.hasAllSeriesEqualX(),
                s.axisCharts &&
                  (this.core.coreCalculations(),
                  i.config.xaxis.type !== "category" &&
                    this.formatters.setLabelFormatters(),
                  (this.ctx.toolbar.minX = i.globals.minX),
                  (this.ctx.toolbar.maxX = i.globals.maxX)),
                this.formatters.heatmapLabelFormatters(),
                new ke(this).getLargestMarkerSize(),
                this.dimensions.plotCoords();
              var c = this.core.xySettings();
              this.grid.createGridMask();
              var h = this.core.plotChartType(n, c),
                d = new ia(this);
              return (
                d.bringForward(),
                i.config.dataLabels.background.enabled &&
                  d.dataLabelsBackground(),
                this.core.shiftGraphPosition(),
                {
                  elGraph: h,
                  xyRatios: c,
                  dimensions: {
                    plot: {
                      left: i.globals.translateX,
                      top: i.globals.translateY,
                      width: i.globals.gridWidth,
                      height: i.globals.gridHeight,
                    },
                  },
                }
              );
            },
          },
          {
            key: "mount",
            value: function () {
              var e = this,
                t =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : null,
                a = this,
                i = a.w;
              return new Promise(function (s, n) {
                if (a.el === null)
                  return n(
                    new Error(
                      "Not enough data to display or target element not found"
                    )
                  );
                (t === null || i.globals.allSeriesCollapsed) &&
                  a.series.handleNoData(),
                  (a.grid = new Bc(a));
                var o,
                  l,
                  c = a.grid.drawGrid();
                if (
                  ((a.annotations = new pm(a)),
                  a.annotations.drawImageAnnos(),
                  a.annotations.drawTextAnnos(),
                  i.config.grid.position === "back" &&
                    (c && i.globals.dom.elGraphical.add(c.el),
                    c != null &&
                      (o = c.elGridBorders) !== null &&
                      o !== void 0 &&
                      o.node &&
                      i.globals.dom.elGraphical.add(c.elGridBorders)),
                  Array.isArray(t.elGraph))
                )
                  for (var h = 0; h < t.elGraph.length; h++)
                    i.globals.dom.elGraphical.add(t.elGraph[h]);
                else i.globals.dom.elGraphical.add(t.elGraph);
                i.config.grid.position === "front" &&
                  (c && i.globals.dom.elGraphical.add(c.el),
                  c != null &&
                    (l = c.elGridBorders) !== null &&
                    l !== void 0 &&
                    l.node &&
                    i.globals.dom.elGraphical.add(c.elGridBorders)),
                  i.config.xaxis.crosshairs.position === "front" &&
                    a.crosshairs.drawXCrosshairs(),
                  i.config.yaxis[0].crosshairs.position === "front" &&
                    a.crosshairs.drawYCrosshairs(),
                  i.config.chart.type !== "treemap" &&
                    a.axes.drawAxis(i.config.chart.type, c);
                var d = new Fa(e.ctx, c),
                  u = new $s(e.ctx, c);
                if (
                  (c !== null &&
                    (d.xAxisLabelCorrections(c.xAxisTickWidth),
                    u.setYAxisTextAlignments(),
                    i.config.yaxis.map(function (g, p) {
                      i.globals.ignoreYAxisIndexes.indexOf(p) === -1 &&
                        u.yAxisTitleRotate(p, g.opposite);
                    })),
                  a.annotations.drawAxesAnnotations(),
                  !i.globals.noData)
                ) {
                  if (
                    (i.config.tooltip.enabled &&
                      !i.globals.noData &&
                      a.w.globals.tooltip.drawTooltip(t.xyRatios),
                    i.globals.axisCharts &&
                      (i.globals.isXNumeric ||
                        i.config.xaxis.convertedCatToNumeric ||
                        i.globals.isRangeBar))
                  )
                    (i.config.chart.zoom.enabled ||
                      (i.config.chart.selection &&
                        i.config.chart.selection.enabled) ||
                      (i.config.chart.pan && i.config.chart.pan.enabled)) &&
                      a.zoomPanSelection.init({ xyRatios: t.xyRatios });
                  else {
                    var f = i.config.chart.toolbar.tools;
                    [
                      "zoom",
                      "zoomin",
                      "zoomout",
                      "selection",
                      "pan",
                      "reset",
                    ].forEach(function (g) {
                      f[g] = !1;
                    });
                  }
                  i.config.chart.toolbar.show &&
                    !i.globals.allSeriesCollapsed &&
                    a.toolbar.createToolbar();
                }
                i.globals.memory.methodsToExec.length > 0 &&
                  i.globals.memory.methodsToExec.forEach(function (g) {
                    g.method(g.params, !1, g.context);
                  }),
                  i.globals.axisCharts ||
                    i.globals.noData ||
                    a.core.resizeNonAxisCharts(),
                  s(a);
              });
            },
          },
          {
            key: "destroy",
            value: function () {
              window.removeEventListener("resize", this.windowResizeHandler),
                (function (t, a) {
                  var i = kr.get(a);
                  i && (i.disconnect(), kr.delete(a));
                })(this.el.parentNode, this.parentResizeHandler);
              var e = this.w.config.chart.id;
              e &&
                Apex._chartInstances.forEach(function (t, a) {
                  t.id === _.escapeString(e) &&
                    Apex._chartInstances.splice(a, 1);
                }),
                new Lo(this.ctx).clear({ isUpdating: !1 });
            },
          },
          {
            key: "updateOptions",
            value: function (e) {
              var t = this,
                a =
                  arguments.length > 1 &&
                  arguments[1] !== void 0 &&
                  arguments[1],
                i =
                  !(arguments.length > 2 && arguments[2] !== void 0) ||
                  arguments[2],
                s =
                  !(arguments.length > 3 && arguments[3] !== void 0) ||
                  arguments[3],
                n =
                  !(arguments.length > 4 && arguments[4] !== void 0) ||
                  arguments[4],
                o = this.w;
              return (
                (o.globals.selection = void 0),
                e.series &&
                  (this.series.resetSeries(!1, !0, !1),
                  e.series.length &&
                    e.series[0].data &&
                    (e.series = e.series.map(function (l, c) {
                      return t.updateHelpers._extendSeries(l, c);
                    })),
                  this.updateHelpers.revertDefaultAxisMinMax()),
                e.xaxis && (e = this.updateHelpers.forceXAxisUpdate(e)),
                e.yaxis && (e = this.updateHelpers.forceYAxisUpdate(e)),
                o.globals.collapsedSeriesIndices.length > 0 &&
                  this.series.clearPreviousPaths(),
                e.theme && (e = this.theme.updateThemeOptions(e)),
                this.updateHelpers._updateOptions(e, a, i, s, n)
              );
            },
          },
          {
            key: "updateSeries",
            value: function () {
              var e =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : [],
                t =
                  !(arguments.length > 1 && arguments[1] !== void 0) ||
                  arguments[1],
                a =
                  !(arguments.length > 2 && arguments[2] !== void 0) ||
                  arguments[2];
              return (
                this.series.resetSeries(!1),
                this.updateHelpers.revertDefaultAxisMinMax(),
                this.updateHelpers._updateSeries(e, t, a)
              );
            },
          },
          {
            key: "appendSeries",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && arguments[1] !== void 0) ||
                  arguments[1],
                a =
                  !(arguments.length > 2 && arguments[2] !== void 0) ||
                  arguments[2],
                i = this.w.config.series.slice();
              return (
                i.push(e),
                this.series.resetSeries(!1),
                this.updateHelpers.revertDefaultAxisMinMax(),
                this.updateHelpers._updateSeries(i, t, a)
              );
            },
          },
          {
            key: "appendData",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && arguments[1] !== void 0) ||
                  arguments[1],
                a = this;
              (a.w.globals.dataChanged = !0), a.series.getPreviousPaths();
              for (var i = a.w.config.series.slice(), s = 0; s < i.length; s++)
                if (e[s] !== null && e[s] !== void 0)
                  for (var n = 0; n < e[s].data.length; n++)
                    i[s].data.push(e[s].data[n]);
              return (
                (a.w.config.series = i),
                t && (a.w.globals.initialSeries = _.clone(a.w.config.series)),
                this.update()
              );
            },
          },
          {
            key: "update",
            value: function (e) {
              var t = this;
              return new Promise(function (a, i) {
                new Lo(t.ctx).clear({ isUpdating: !0 });
                var s = t.create(t.w.config.series, e);
                if (!s) return a(t);
                t.mount(s)
                  .then(function () {
                    typeof t.w.config.chart.events.updated == "function" &&
                      t.w.config.chart.events.updated(t, t.w),
                      t.events.fireEvent("updated", [t, t.w]),
                      (t.w.globals.isDirty = !0),
                      a(t);
                  })
                  .catch(function (n) {
                    i(n);
                  });
              });
            },
          },
          {
            key: "getSyncedCharts",
            value: function () {
              var e = this.getGroupedCharts(),
                t = [this];
              return (
                e.length &&
                  ((t = []),
                  e.forEach(function (a) {
                    t.push(a);
                  })),
                t
              );
            },
          },
          {
            key: "getGroupedCharts",
            value: function () {
              var e = this;
              return Apex._chartInstances
                .filter(function (t) {
                  if (t.group) return !0;
                })
                .map(function (t) {
                  return e.w.config.chart.group === t.group ? t.chart : e;
                });
            },
          },
          {
            key: "toggleSeries",
            value: function (e) {
              return this.series.toggleSeries(e);
            },
          },
          {
            key: "highlightSeriesOnLegendHover",
            value: function (e, t) {
              return this.series.toggleSeriesOnHover(e, t);
            },
          },
          {
            key: "showSeries",
            value: function (e) {
              this.series.showSeries(e);
            },
          },
          {
            key: "hideSeries",
            value: function (e) {
              this.series.hideSeries(e);
            },
          },
          {
            key: "highlightSeries",
            value: function (e) {
              this.series.highlightSeries(e);
            },
          },
          {
            key: "isSeriesHidden",
            value: function (e) {
              this.series.isSeriesHidden(e);
            },
          },
          {
            key: "resetSeries",
            value: function () {
              var e =
                  !(arguments.length > 0 && arguments[0] !== void 0) ||
                  arguments[0],
                t =
                  !(arguments.length > 1 && arguments[1] !== void 0) ||
                  arguments[1];
              this.series.resetSeries(e, t);
            },
          },
          {
            key: "addEventListener",
            value: function (e, t) {
              this.events.addEventListener(e, t);
            },
          },
          {
            key: "removeEventListener",
            value: function (e, t) {
              this.events.removeEventListener(e, t);
            },
          },
          {
            key: "addXaxisAnnotation",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && arguments[1] !== void 0) ||
                  arguments[1],
                a =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : void 0,
                i = this;
              a && (i = a), i.annotations.addXaxisAnnotationExternal(e, t, i);
            },
          },
          {
            key: "addYaxisAnnotation",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && arguments[1] !== void 0) ||
                  arguments[1],
                a =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : void 0,
                i = this;
              a && (i = a), i.annotations.addYaxisAnnotationExternal(e, t, i);
            },
          },
          {
            key: "addPointAnnotation",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && arguments[1] !== void 0) ||
                  arguments[1],
                a =
                  arguments.length > 2 && arguments[2] !== void 0
                    ? arguments[2]
                    : void 0,
                i = this;
              a && (i = a), i.annotations.addPointAnnotationExternal(e, t, i);
            },
          },
          {
            key: "clearAnnotations",
            value: function () {
              var e =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : void 0,
                t = this;
              e && (t = e), t.annotations.clearAnnotations(t);
            },
          },
          {
            key: "removeAnnotation",
            value: function (e) {
              var t =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : void 0,
                a = this;
              t && (a = t), a.annotations.removeAnnotation(a, e);
            },
          },
          {
            key: "getChartArea",
            value: function () {
              return this.w.globals.dom.baseEl.querySelector(
                ".apexcharts-inner"
              );
            },
          },
          {
            key: "getSeriesTotalXRange",
            value: function (e, t) {
              return this.coreUtils.getSeriesTotalsXRange(e, t);
            },
          },
          {
            key: "getHighestValueInSeries",
            value: function () {
              var e =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : 0;
              return new Jr(this.ctx).getMinYMaxY(e).highestY;
            },
          },
          {
            key: "getLowestValueInSeries",
            value: function () {
              var e =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : 0;
              return new Jr(this.ctx).getMinYMaxY(e).lowestY;
            },
          },
          {
            key: "getSeriesTotal",
            value: function () {
              return this.w.globals.seriesTotals;
            },
          },
          {
            key: "toggleDataPointSelection",
            value: function (e, t) {
              return this.updateHelpers.toggleDataPointSelection(e, t);
            },
          },
          {
            key: "zoomX",
            value: function (e, t) {
              this.ctx.toolbar.zoomUpdateOptions(e, t);
            },
          },
          {
            key: "setLocale",
            value: function (e) {
              this.localization.setCurrentLocaleValues(e);
            },
          },
          {
            key: "dataURI",
            value: function (e) {
              return new Ri(this.ctx).dataURI(e);
            },
          },
          {
            key: "exportToCSV",
            value: function () {
              var e =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {};
              return new Ri(this.ctx).exportToCSV(e);
            },
          },
          {
            key: "paper",
            value: function () {
              return this.w.globals.dom.Paper;
            },
          },
          {
            key: "_parentResizeCallback",
            value: function () {
              this.w.globals.animationEnded &&
                this.w.config.chart.redrawOnParentResize &&
                this._windowResize();
            },
          },
          {
            key: "_windowResize",
            value: function () {
              var e = this;
              clearTimeout(this.w.globals.resizeTimer),
                (this.w.globals.resizeTimer = window.setTimeout(function () {
                  (e.w.globals.resized = !0),
                    (e.w.globals.dataChanged = !1),
                    e.ctx.update();
                }, 150));
            },
          },
          {
            key: "_windowResizeHandler",
            value: function () {
              var e = this.w.config.chart.redrawOnWindowResize;
              typeof e == "function" && (e = e()), e && this._windowResize();
            },
          },
        ],
        [
          {
            key: "getChartByID",
            value: function (e) {
              var t = _.escapeString(e);
              if (Apex._chartInstances) {
                var a = Apex._chartInstances.filter(function (i) {
                  return i.id === t;
                })[0];
                return a && a.chart;
              }
            },
          },
          {
            key: "initOnLoad",
            value: function () {
              for (
                var e = document.querySelectorAll("[data-apexcharts]"), t = 0;
                t < e.length;
                t++
              )
                new r(
                  e[t],
                  JSON.parse(e[t].getAttribute("data-options"))
                ).render();
            },
          },
          {
            key: "exec",
            value: function (e, t) {
              var a = this.getChartByID(e);
              if (a) {
                a.w.globals.isExecCalled = !0;
                var i = null;
                if (a.publicMethods.indexOf(t) !== -1) {
                  for (
                    var s = arguments.length,
                      n = new Array(s > 2 ? s - 2 : 0),
                      o = 2;
                    o < s;
                    o++
                  )
                    n[o - 2] = arguments[o];
                  i = a[t].apply(a, n);
                }
                return i;
              }
            },
          },
          {
            key: "merge",
            value: function (e, t) {
              return _.extend(e, t);
            },
          },
        ]
      ),
      r
    );
  })();
const Zm = Object.freeze(
    Object.defineProperty(
      { __proto__: null, default: qm },
      Symbol.toStringTag,
      { value: "Module" }
    )
  ),
  Km = uh(Zm);
var Mo;
function Qm() {
  return (
    Mo ||
      ((Mo = 1),
      (function (r) {
        Object.defineProperty(r, "__esModule", { value: !0 }), (r.default = b);
        var e = o(fh()),
          t = s(Km),
          a = s(Ro()),
          i = ["type", "width", "height", "series", "options"];
        function s(k) {
          return k && k.__esModule ? k : { default: k };
        }
        function n(k) {
          var y, C;
          return typeof WeakMap != "function"
            ? null
            : ((y = new WeakMap()),
              (C = new WeakMap()),
              (n = function (A) {
                return A ? C : y;
              })(k));
        }
        function o(k, y) {
          if (!y && k && k.__esModule) return k;
          if (k === null || (d(k) != "object" && typeof k != "function"))
            return { default: k };
          if (((y = n(y)), y && y.has(k))) return y.get(k);
          var C,
            A,
            S = { __proto__: null },
            T = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (C in k)
            C !== "default" &&
              {}.hasOwnProperty.call(k, C) &&
              ((A = T ? Object.getOwnPropertyDescriptor(k, C) : null) &&
              (A.get || A.set)
                ? Object.defineProperty(S, C, A)
                : (S[C] = k[C]));
          return (S.default = k), y && y.set(k, S), S;
        }
        function l() {
          return (l = Object.assign
            ? Object.assign.bind()
            : function (k) {
                for (var y = 1; y < arguments.length; y++) {
                  var C,
                    A = arguments[y];
                  for (C in A) !{}.hasOwnProperty.call(A, C) || (k[C] = A[C]);
                }
                return k;
              }).apply(null, arguments);
        }
        function c(k, y) {
          if (k == null) return {};
          var C,
            A = h(k, y);
          if (Object.getOwnPropertySymbols)
            for (
              var S = Object.getOwnPropertySymbols(k), T = 0;
              T < S.length;
              T++
            )
              (C = S[T]),
                y.includes(C) ||
                  ({}.propertyIsEnumerable.call(k, C) && (A[C] = k[C]));
          return A;
        }
        function h(k, y) {
          if (k == null) return {};
          var C,
            A = {};
          for (C in k)
            if ({}.hasOwnProperty.call(k, C)) {
              if (y.includes(C)) continue;
              A[C] = k[C];
            }
          return A;
        }
        function d(k) {
          return (d =
            typeof Symbol == "function" && typeof Symbol.iterator == "symbol"
              ? function (y) {
                  return typeof y;
                }
              : function (y) {
                  return y &&
                    typeof Symbol == "function" &&
                    y.constructor === Symbol &&
                    y !== Symbol.prototype
                    ? "symbol"
                    : typeof y;
                })(k);
        }
        function u(k, y) {
          var C,
            A = Object.keys(k);
          return (
            Object.getOwnPropertySymbols &&
              ((C = Object.getOwnPropertySymbols(k)),
              y &&
                (C = C.filter(function (S) {
                  return Object.getOwnPropertyDescriptor(k, S).enumerable;
                })),
              A.push.apply(A, C)),
            A
          );
        }
        function f(k) {
          for (var y = 1; y < arguments.length; y++) {
            var C = arguments[y] != null ? arguments[y] : {};
            y % 2
              ? u(Object(C), !0).forEach(function (A) {
                  g(k, A, C[A]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(k, Object.getOwnPropertyDescriptors(C))
              : u(Object(C)).forEach(function (A) {
                  Object.defineProperty(
                    k,
                    A,
                    Object.getOwnPropertyDescriptor(C, A)
                  );
                });
          }
          return k;
        }
        function g(k, y, C) {
          return (
            (y = p(y)) in k
              ? Object.defineProperty(k, y, {
                  value: C,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (k[y] = C),
            k
          );
        }
        function p(k) {
          return (k = m(k, "string")), d(k) == "symbol" ? k : k + "";
        }
        function m(k, y) {
          if (d(k) != "object" || !k) return k;
          var C = k[Symbol.toPrimitive];
          if (C === void 0) return (y === "string" ? String : Number)(k);
          if (((C = C.call(k, y)), d(C) != "object")) return C;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        function x(k, y) {
          var C = f({}, k);
          return (
            y.forEach(function (A) {
              delete C[A];
            }),
            C
          );
        }
        function v(k, y) {
          var C =
            2 < arguments.length && arguments[2] !== void 0
              ? arguments[2]
              : new WeakSet();
          if (k !== y) {
            if (
              d(k) !== "object" ||
              k === null ||
              d(y) !== "object" ||
              y === null
            )
              return !1;
            if (!C.has(k) && !C.has(y)) {
              C.add(k), C.add(y);
              var A = Object.keys(k),
                S = Object.keys(y);
              if (A.length !== S.length) return !1;
              for (var T = 0, E = A; T < E.length; T++) {
                var L = E[T];
                if (!S.includes(L) || !v(k[L], y[L], C)) return !1;
              }
            }
          }
          return !0;
        }
        function b(D) {
          function y(B) {
            return B && d(B) === "object" && !Array.isArray(B);
          }
          var L = D.type,
            C = L === void 0 ? "line" : L,
            L = D.width,
            A = L === void 0 ? "100%" : L,
            L = D.height,
            S = L === void 0 ? "auto" : L,
            T = D.series,
            E = D.options,
            L = c(D, i),
            I = (0, e.useRef)(null),
            M = (0, e.useRef)(null),
            O = (0, e.useRef)(),
            N =
              ((0, e.useEffect)(function () {
                O.current = E;
                var B = I.current;
                return (
                  (M.current = new t.default(B, N())),
                  M.current.render(),
                  function () {
                    M.current &&
                      typeof M.current.destroy == "function" &&
                      M.current.destroy();
                  }
                );
              }, []),
              (0, e.useEffect)(
                function () {
                  var B = !v(M.current.w.config.series, T),
                    z =
                      !v(O.current, E) ||
                      S !== M.current.opts.chart.height ||
                      A !== M.current.opts.chart.width;
                  (B || z) &&
                    (!B || z
                      ? M.current.updateOptions(N())
                      : M.current.updateSeries(T)),
                    (O.current = E);
                },
                [E, T, S, A]
              ),
              function () {
                return F(E, {
                  chart: { type: C, height: S, width: A },
                  series: T,
                });
              }),
            F = function (B, z) {
              var G = f({}, B);
              return (
                y(B) &&
                  y(z) &&
                  Object.keys(z).forEach(function (V) {
                    y(z[V]) && V in B
                      ? (G[V] = F(B[V], z[V]))
                      : Object.assign(G, g({}, V, z[V]));
                  }),
                G
              );
            },
            D = x(L, Object.keys(b.propTypes));
          return e.default.createElement("div", l({ ref: I }, D));
        }
        b.propTypes = {
          type: a.default.string.isRequired,
          series: a.default.array.isRequired,
          options: a.default.object.isRequired,
          width: a.default.oneOfType([a.default.string, a.default.number]),
          height: a.default.oneOfType([a.default.string, a.default.number]),
        };
      })(rr)),
    rr
  );
}
Qm();
ie.oneOf([
  "white",
  "blue-gray",
  "gray",
  "brown",
  "deep-orange",
  "orange",
  "amber",
  "yellow",
  "lime",
  "light-green",
  "green",
  "teal",
  "cyan",
  "light-blue",
  "blue",
  "indigo",
  "deep-purple",
  "purple",
  "pink",
  "red",
]),
  ie.object.isRequired,
  ie.node.isRequired,
  ie.node.isRequired,
  ie.node;
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const Jm = (r) => r.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase(),
  eh = (...r) =>
    r
      .filter((e, t, a) => !!e && e.trim() !== "" && a.indexOf(e) === t)
      .join(" ")
      .trim();
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ var ex = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
};
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const tx = P.forwardRef(
  (
    {
      color: r = "currentColor",
      size: e = 24,
      strokeWidth: t = 2,
      absoluteStrokeWidth: a,
      className: i = "",
      children: s,
      iconNode: n,
      ...o
    },
    l
  ) =>
    P.createElement(
      "svg",
      {
        ref: l,
        ...ex,
        width: e,
        height: e,
        stroke: r,
        strokeWidth: a ? (Number(t) * 24) / Number(e) : t,
        className: eh("lucide", i),
        ...o,
      },
      [
        ...n.map(([c, h]) => P.createElement(c, h)),
        ...(Array.isArray(s) ? s : [s]),
      ]
    )
);
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const qs = (r, e) => {
  const t = P.forwardRef(({ className: a, ...i }, s) =>
    P.createElement(tx, {
      ref: s,
      iconNode: e,
      className: eh(`lucide-${Jm(r)}`, a),
      ...i,
    })
  );
  return (t.displayName = `${r}`), t;
};
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const ax = [
    ["path", { d: "M2 10v3", key: "1fnikh" }],
    ["path", { d: "M6 6v11", key: "11sgs0" }],
    ["path", { d: "M10 3v18", key: "yhl04a" }],
    ["path", { d: "M14 8v7", key: "3a1oy3" }],
    ["path", { d: "M18 5v13", key: "123xd1" }],
    ["path", { d: "M22 10v3", key: "154ddg" }],
  ],
  mi = qs("AudioLines", ax);
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const ix = [
    [
      "path",
      {
        d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",
        key: "1nclc0",
      },
    ],
    ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
  ],
  Wi = qs("Eye", ix);
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const rx = [
    [
      "path",
      {
        d: "m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5",
        key: "ftymec",
      },
    ],
    [
      "rect",
      { x: "2", y: "6", width: "14", height: "12", rx: "2", key: "158x01" },
    ],
  ],
  th = qs("Video", rx);
function sx() {
  const r = Le.get("token"),
    [e, t] = P.useState(null);
  if (
    (P.useEffect(() => {
      r &&
        (async () => {
          try {
            const s = await ne.get(
              "http://103.189.173.127:3000/admin/dashboard",
              {
                headers: {
                  Authorization: `Bearer ${r}`,
                  "Content-Type": "application/x-www-form-urlencoded",
                },
              }
            );
            t(s.data.data);
          } catch (s) {
            console.error("Error fetching data:", s);
          }
        })();
    }, [r]),
    !e)
  )
    return w.jsx("div", {
      className: "flex items-center justify-center min-h-screen",
      children: w.jsx(R.Typography, {
        variant: "h5",
        color: "blue-gray",
        children: "Loading Dashboard...",
      }),
    });
  const a = [
    {
      color: "gray",
      icon: _p,
      title: " All Users",
      value: e.totalUsers,
      footer: {
        color: "text-green-500",
        value: "+5%",
        label: "than last month",
      },
    },
    {
      color: "gray",
      icon: mi,
      title: "Total AudioBooks",
      value: e.totalAudiobooks,
      footer: {
        color: "text-green-500",
        value: "+2%",
        label: "than last month",
      },
    },
    {
      color: "gray",
      icon: th,
      title: "Total VideoBooks",
      value: e.totalVideos,
      footer: { color: "text-red-500", value: "-1%", label: "than last month" },
    },
    {
      color: "gray",
      icon: Th,
      title: "Total FAQs",
      value: e.totalFaqs,
      footer: {
        color: "text-green-500",
        value: "+7%",
        label: "than last month",
      },
    },
  ];
  return w.jsxs("div", {
    className: "mt-12",
    children: [
      w.jsx("div", {
        className: "mb-12 grid gap-y-10 gap-x-6 md:grid-cols-2 xl:grid-cols-4",
        children: a.map(({ color: i, icon: s, title: n, value: o }, l) =>
          w.jsx(
            Xi,
            {
              title: n,
              value: o,
              color: i,
              icon: ge.createElement(s, { className: "w-6 h-6 text-white" }),
            },
            l
          )
        ),
      }),
      w.jsx("div", { className: "mb-4 grid grid-cols-1 gap-6 xl:grid-cols-3" }),
    ],
  });
}
const ot = ({ children: r }) => {
  const e = Tt(),
    t = Le.get("token");
  return (
    P.useEffect(() => {
      t || e("/login");
    }, [t, e]),
    t ? r : null
  );
};
ot.propTypes = { children: ie.node.isRequired };
const Pt = ({ columns: r, data: e }) =>
  w.jsx("div", {
    className: "overflow-x-auto",
    children: w.jsxs("table", {
      className: "w-full  table-auto border-collapse text-left ",
      children: [
        w.jsx("thead", {
          children: w.jsx("tr", {
            className: "border-b border-gray-200 bg-gray-100 text-sm",
            children: r.map((t) =>
              w.jsx(
                "th",
                { className: `px-4 py-2 ${t.width || ""}`, children: t.label },
                t.key
              )
            ),
          }),
        }),
        w.jsx("tbody", {
          children: e.map((t, a) =>
            w.jsx(
              "tr",
              {
                className: "border-b border-gray-200 hover:bg-gray-200 text-sm",
                children: r.map((i) =>
                  w.jsx(
                    "td",
                    {
                      className: `px-4 py-2 ${i.width || ""}`,
                      children: i.render ? i.render(t) : t[i.key],
                    },
                    i.key
                  )
                ),
              },
              a
            )
          ),
        }),
      ],
    }),
  });
Pt.propTypes = {
  columns: ie.arrayOf(
    ie.shape({
      key: ie.string.isRequired,
      label: ie.string.isRequired,
      render: ie.func,
    })
  ).isRequired,
  data: ie.arrayOf(ie.object).isRequired,
  onEdit: ie.func.isRequired,
  onDelete: ie.func.isRequired,
};
function ah(r) {
  var e,
    t,
    a = "";
  if (typeof r == "string" || typeof r == "number") a += r;
  else if (typeof r == "object")
    if (Array.isArray(r)) {
      var i = r.length;
      for (e = 0; e < i; e++)
        r[e] && (t = ah(r[e])) && (a && (a += " "), (a += t));
    } else for (t in r) r[t] && (a && (a += " "), (a += t));
  return a;
}
function Dt() {
  for (var r, e, t = 0, a = "", i = arguments.length; t < i; t++)
    (r = arguments[t]) && (e = ah(r)) && (a && (a += " "), (a += e));
  return a;
}
function nx(r) {
  if (typeof document > "u") return;
  let e = document.head || document.getElementsByTagName("head")[0],
    t = document.createElement("style");
  (t.type = "text/css"),
    e.firstChild ? e.insertBefore(t, e.firstChild) : e.appendChild(t),
    t.styleSheet
      ? (t.styleSheet.cssText = r)
      : t.appendChild(document.createTextNode(r));
}
nx(`:root{--toastify-color-light: #fff;--toastify-color-dark: #121212;--toastify-color-info: #3498db;--toastify-color-success: #07bc0c;--toastify-color-warning: #f1c40f;--toastify-color-error: hsl(6, 78%, 57%);--toastify-color-transparent: rgba(255, 255, 255, .7);--toastify-icon-color-info: var(--toastify-color-info);--toastify-icon-color-success: var(--toastify-color-success);--toastify-icon-color-warning: var(--toastify-color-warning);--toastify-icon-color-error: var(--toastify-color-error);--toastify-container-width: fit-content;--toastify-toast-width: 320px;--toastify-toast-offset: 16px;--toastify-toast-top: max(var(--toastify-toast-offset), env(safe-area-inset-top));--toastify-toast-right: max(var(--toastify-toast-offset), env(safe-area-inset-right));--toastify-toast-left: max(var(--toastify-toast-offset), env(safe-area-inset-left));--toastify-toast-bottom: max(var(--toastify-toast-offset), env(safe-area-inset-bottom));--toastify-toast-background: #fff;--toastify-toast-padding: 14px;--toastify-toast-min-height: 64px;--toastify-toast-max-height: 800px;--toastify-toast-bd-radius: 6px;--toastify-toast-shadow: 0px 4px 12px rgba(0, 0, 0, .1);--toastify-font-family: sans-serif;--toastify-z-index: 9999;--toastify-text-color-light: #757575;--toastify-text-color-dark: #fff;--toastify-text-color-info: #fff;--toastify-text-color-success: #fff;--toastify-text-color-warning: #fff;--toastify-text-color-error: #fff;--toastify-spinner-color: #616161;--toastify-spinner-color-empty-area: #e0e0e0;--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);--toastify-color-progress-dark: #bb86fc;--toastify-color-progress-info: var(--toastify-color-info);--toastify-color-progress-success: var(--toastify-color-success);--toastify-color-progress-warning: var(--toastify-color-warning);--toastify-color-progress-error: var(--toastify-color-error);--toastify-color-progress-bgo: .2}.Toastify__toast-container{z-index:var(--toastify-z-index);-webkit-transform:translate3d(0,0,var(--toastify-z-index));position:fixed;width:var(--toastify-container-width);box-sizing:border-box;color:#fff;display:flex;flex-direction:column}.Toastify__toast-container--top-left{top:var(--toastify-toast-top);left:var(--toastify-toast-left)}.Toastify__toast-container--top-center{top:var(--toastify-toast-top);left:50%;transform:translate(-50%);align-items:center}.Toastify__toast-container--top-right{top:var(--toastify-toast-top);right:var(--toastify-toast-right);align-items:end}.Toastify__toast-container--bottom-left{bottom:var(--toastify-toast-bottom);left:var(--toastify-toast-left)}.Toastify__toast-container--bottom-center{bottom:var(--toastify-toast-bottom);left:50%;transform:translate(-50%);align-items:center}.Toastify__toast-container--bottom-right{bottom:var(--toastify-toast-bottom);right:var(--toastify-toast-right);align-items:end}.Toastify__toast{--y: 0;position:relative;touch-action:none;width:var(--toastify-toast-width);min-height:var(--toastify-toast-min-height);box-sizing:border-box;margin-bottom:1rem;padding:var(--toastify-toast-padding);border-radius:var(--toastify-toast-bd-radius);box-shadow:var(--toastify-toast-shadow);max-height:var(--toastify-toast-max-height);font-family:var(--toastify-font-family);z-index:0;display:flex;flex:1 auto;align-items:center;word-break:break-word}@media only screen and (max-width: 480px){.Toastify__toast-container{width:100vw;left:env(safe-area-inset-left);margin:0}.Toastify__toast-container--top-left,.Toastify__toast-container--top-center,.Toastify__toast-container--top-right{top:env(safe-area-inset-top);transform:translate(0)}.Toastify__toast-container--bottom-left,.Toastify__toast-container--bottom-center,.Toastify__toast-container--bottom-right{bottom:env(safe-area-inset-bottom);transform:translate(0)}.Toastify__toast-container--rtl{right:env(safe-area-inset-right);left:initial}.Toastify__toast{--toastify-toast-width: 100%;margin-bottom:0;border-radius:0}}.Toastify__toast-container[data-stacked=true]{width:var(--toastify-toast-width)}.Toastify__toast--stacked{position:absolute;width:100%;transform:translate3d(0,var(--y),0) scale(var(--s));transition:transform .3s}.Toastify__toast--stacked[data-collapsed] .Toastify__toast-body,.Toastify__toast--stacked[data-collapsed] .Toastify__close-button{transition:opacity .1s}.Toastify__toast--stacked[data-collapsed=false]{overflow:visible}.Toastify__toast--stacked[data-collapsed=true]:not(:last-child)>*{opacity:0}.Toastify__toast--stacked:after{content:"";position:absolute;left:0;right:0;height:calc(var(--g) * 1px);bottom:100%}.Toastify__toast--stacked[data-pos=top]{top:0}.Toastify__toast--stacked[data-pos=bot]{bottom:0}.Toastify__toast--stacked[data-pos=bot].Toastify__toast--stacked:before{transform-origin:top}.Toastify__toast--stacked[data-pos=top].Toastify__toast--stacked:before{transform-origin:bottom}.Toastify__toast--stacked:before{content:"";position:absolute;left:0;right:0;bottom:0;height:100%;transform:scaleY(3);z-index:-1}.Toastify__toast--rtl{direction:rtl}.Toastify__toast--close-on-click{cursor:pointer}.Toastify__toast-icon{margin-inline-end:10px;width:22px;flex-shrink:0;display:flex}.Toastify--animate{animation-fill-mode:both;animation-duration:.5s}.Toastify--animate-icon{animation-fill-mode:both;animation-duration:.3s}.Toastify__toast-theme--dark{background:var(--toastify-color-dark);color:var(--toastify-text-color-dark)}.Toastify__toast-theme--light,.Toastify__toast-theme--colored.Toastify__toast--default{background:var(--toastify-color-light);color:var(--toastify-text-color-light)}.Toastify__toast-theme--colored.Toastify__toast--info{color:var(--toastify-text-color-info);background:var(--toastify-color-info)}.Toastify__toast-theme--colored.Toastify__toast--success{color:var(--toastify-text-color-success);background:var(--toastify-color-success)}.Toastify__toast-theme--colored.Toastify__toast--warning{color:var(--toastify-text-color-warning);background:var(--toastify-color-warning)}.Toastify__toast-theme--colored.Toastify__toast--error{color:var(--toastify-text-color-error);background:var(--toastify-color-error)}.Toastify__progress-bar-theme--light{background:var(--toastify-color-progress-light)}.Toastify__progress-bar-theme--dark{background:var(--toastify-color-progress-dark)}.Toastify__progress-bar--info{background:var(--toastify-color-progress-info)}.Toastify__progress-bar--success{background:var(--toastify-color-progress-success)}.Toastify__progress-bar--warning{background:var(--toastify-color-progress-warning)}.Toastify__progress-bar--error{background:var(--toastify-color-progress-error)}.Toastify__progress-bar-theme--colored.Toastify__progress-bar--info,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--success,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--warning,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--error{background:var(--toastify-color-transparent)}.Toastify__close-button{color:#fff;position:absolute;top:6px;right:6px;background:transparent;outline:none;border:none;padding:0;cursor:pointer;opacity:.7;transition:.3s ease;z-index:1}.Toastify__toast--rtl .Toastify__close-button{left:6px;right:unset}.Toastify__close-button--light{color:#000;opacity:.3}.Toastify__close-button>svg{fill:currentColor;height:16px;width:14px}.Toastify__close-button:hover,.Toastify__close-button:focus{opacity:1}@keyframes Toastify__trackProgress{0%{transform:scaleX(1)}to{transform:scaleX(0)}}.Toastify__progress-bar{position:absolute;bottom:0;left:0;width:100%;height:100%;z-index:1;opacity:.7;transform-origin:left}.Toastify__progress-bar--animated{animation:Toastify__trackProgress linear 1 forwards}.Toastify__progress-bar--controlled{transition:transform .2s}.Toastify__progress-bar--rtl{right:0;left:initial;transform-origin:right;border-bottom-left-radius:initial}.Toastify__progress-bar--wrp{position:absolute;overflow:hidden;bottom:0;left:0;width:100%;height:5px;border-bottom-left-radius:var(--toastify-toast-bd-radius);border-bottom-right-radius:var(--toastify-toast-bd-radius)}.Toastify__progress-bar--wrp[data-hidden=true]{opacity:0}.Toastify__progress-bar--bg{opacity:var(--toastify-color-progress-bgo);width:100%;height:100%}.Toastify__spinner{width:20px;height:20px;box-sizing:border-box;border:2px solid;border-radius:100%;border-color:var(--toastify-spinner-color-empty-area);border-right-color:var(--toastify-spinner-color);animation:Toastify__spin .65s linear infinite}@keyframes Toastify__bounceInRight{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(3000px,0,0)}60%{opacity:1;transform:translate3d(-25px,0,0)}75%{transform:translate3d(10px,0,0)}90%{transform:translate3d(-5px,0,0)}to{transform:none}}@keyframes Toastify__bounceOutRight{20%{opacity:1;transform:translate3d(-20px,var(--y),0)}to{opacity:0;transform:translate3d(2000px,var(--y),0)}}@keyframes Toastify__bounceInLeft{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(-3000px,0,0)}60%{opacity:1;transform:translate3d(25px,0,0)}75%{transform:translate3d(-10px,0,0)}90%{transform:translate3d(5px,0,0)}to{transform:none}}@keyframes Toastify__bounceOutLeft{20%{opacity:1;transform:translate3d(20px,var(--y),0)}to{opacity:0;transform:translate3d(-2000px,var(--y),0)}}@keyframes Toastify__bounceInUp{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,3000px,0)}60%{opacity:1;transform:translate3d(0,-20px,0)}75%{transform:translate3d(0,10px,0)}90%{transform:translate3d(0,-5px,0)}to{transform:translateZ(0)}}@keyframes Toastify__bounceOutUp{20%{transform:translate3d(0,calc(var(--y) - 10px),0)}40%,45%{opacity:1;transform:translate3d(0,calc(var(--y) + 20px),0)}to{opacity:0;transform:translate3d(0,-2000px,0)}}@keyframes Toastify__bounceInDown{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,-3000px,0)}60%{opacity:1;transform:translate3d(0,25px,0)}75%{transform:translate3d(0,-10px,0)}90%{transform:translate3d(0,5px,0)}to{transform:none}}@keyframes Toastify__bounceOutDown{20%{transform:translate3d(0,calc(var(--y) - 10px),0)}40%,45%{opacity:1;transform:translate3d(0,calc(var(--y) + 20px),0)}to{opacity:0;transform:translate3d(0,2000px,0)}}.Toastify__bounce-enter--top-left,.Toastify__bounce-enter--bottom-left{animation-name:Toastify__bounceInLeft}.Toastify__bounce-enter--top-right,.Toastify__bounce-enter--bottom-right{animation-name:Toastify__bounceInRight}.Toastify__bounce-enter--top-center{animation-name:Toastify__bounceInDown}.Toastify__bounce-enter--bottom-center{animation-name:Toastify__bounceInUp}.Toastify__bounce-exit--top-left,.Toastify__bounce-exit--bottom-left{animation-name:Toastify__bounceOutLeft}.Toastify__bounce-exit--top-right,.Toastify__bounce-exit--bottom-right{animation-name:Toastify__bounceOutRight}.Toastify__bounce-exit--top-center{animation-name:Toastify__bounceOutUp}.Toastify__bounce-exit--bottom-center{animation-name:Toastify__bounceOutDown}@keyframes Toastify__zoomIn{0%{opacity:0;transform:scale3d(.3,.3,.3)}50%{opacity:1}}@keyframes Toastify__zoomOut{0%{opacity:1}50%{opacity:0;transform:translate3d(0,var(--y),0) scale3d(.3,.3,.3)}to{opacity:0}}.Toastify__zoom-enter{animation-name:Toastify__zoomIn}.Toastify__zoom-exit{animation-name:Toastify__zoomOut}@keyframes Toastify__flipIn{0%{transform:perspective(400px) rotateX(90deg);animation-timing-function:ease-in;opacity:0}40%{transform:perspective(400px) rotateX(-20deg);animation-timing-function:ease-in}60%{transform:perspective(400px) rotateX(10deg);opacity:1}80%{transform:perspective(400px) rotateX(-5deg)}to{transform:perspective(400px)}}@keyframes Toastify__flipOut{0%{transform:translate3d(0,var(--y),0) perspective(400px)}30%{transform:translate3d(0,var(--y),0) perspective(400px) rotateX(-20deg);opacity:1}to{transform:translate3d(0,var(--y),0) perspective(400px) rotateX(90deg);opacity:0}}.Toastify__flip-enter{animation-name:Toastify__flipIn}.Toastify__flip-exit{animation-name:Toastify__flipOut}@keyframes Toastify__slideInRight{0%{transform:translate3d(110%,0,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInLeft{0%{transform:translate3d(-110%,0,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInUp{0%{transform:translate3d(0,110%,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInDown{0%{transform:translate3d(0,-110%,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideOutRight{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(110%,var(--y),0)}}@keyframes Toastify__slideOutLeft{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(-110%,var(--y),0)}}@keyframes Toastify__slideOutDown{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(0,500px,0)}}@keyframes Toastify__slideOutUp{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(0,-500px,0)}}.Toastify__slide-enter--top-left,.Toastify__slide-enter--bottom-left{animation-name:Toastify__slideInLeft}.Toastify__slide-enter--top-right,.Toastify__slide-enter--bottom-right{animation-name:Toastify__slideInRight}.Toastify__slide-enter--top-center{animation-name:Toastify__slideInDown}.Toastify__slide-enter--bottom-center{animation-name:Toastify__slideInUp}.Toastify__slide-exit--top-left,.Toastify__slide-exit--bottom-left{animation-name:Toastify__slideOutLeft;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--top-right,.Toastify__slide-exit--bottom-right{animation-name:Toastify__slideOutRight;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--top-center{animation-name:Toastify__slideOutUp;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--bottom-center{animation-name:Toastify__slideOutDown;animation-timing-function:ease-in;animation-duration:.3s}@keyframes Toastify__spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}
`);
var Qa = (r) => typeof r == "number" && !isNaN(r),
  Xt = (r) => typeof r == "string",
  ut = (r) => typeof r == "function",
  ox = (r) => Xt(r) || Qa(r),
  ss = (r) => (Xt(r) || ut(r) ? r : null),
  lx = (r, e) => (r === !1 || (Qa(r) && r > 0) ? r : e),
  ns = (r) => P.isValidElement(r) || Xt(r) || ut(r) || Qa(r);
function cx(r, e, t = 300) {
  let { scrollHeight: a, style: i } = r;
  requestAnimationFrame(() => {
    (i.minHeight = "initial"),
      (i.height = a + "px"),
      (i.transition = `all ${t}ms`),
      requestAnimationFrame(() => {
        (i.height = "0"), (i.padding = "0"), (i.margin = "0"), setTimeout(e, t);
      });
  });
}
function hx({
  enter: r,
  exit: e,
  appendPosition: t = !1,
  collapse: a = !0,
  collapseDuration: i = 300,
}) {
  return function ({
    children: s,
    position: n,
    preventExitTransition: o,
    done: l,
    nodeRef: c,
    isIn: h,
    playToast: d,
  }) {
    let u = t ? `${r}--${n}` : r,
      f = t ? `${e}--${n}` : e,
      g = P.useRef(0);
    return (
      P.useLayoutEffect(() => {
        let p = c.current,
          m = u.split(" "),
          x = (v) => {
            v.target === c.current &&
              (d(),
              p.removeEventListener("animationend", x),
              p.removeEventListener("animationcancel", x),
              g.current === 0 &&
                v.type !== "animationcancel" &&
                p.classList.remove(...m));
          };
        p.classList.add(...m),
          p.addEventListener("animationend", x),
          p.addEventListener("animationcancel", x);
      }, []),
      P.useEffect(() => {
        let p = c.current,
          m = () => {
            p.removeEventListener("animationend", m), a ? cx(p, l, i) : l();
          };
        h ||
          (o
            ? m()
            : ((g.current = 1),
              (p.className += ` ${f}`),
              p.addEventListener("animationend", m)));
      }, [h]),
      ge.createElement(ge.Fragment, null, s)
    );
  };
}
function Eo(r, e) {
  return {
    content: ih(r.content, r.props),
    containerId: r.props.containerId,
    id: r.props.toastId,
    theme: r.props.theme,
    type: r.props.type,
    data: r.props.data || {},
    isLoading: r.props.isLoading,
    icon: r.props.icon,
    reason: r.removalReason,
    status: e,
  };
}
function ih(r, e, t = !1) {
  return P.isValidElement(r) && !Xt(r.type)
    ? P.cloneElement(r, {
        closeToast: e.closeToast,
        toastProps: e,
        data: e.data,
        isPaused: t,
      })
    : ut(r)
    ? r({ closeToast: e.closeToast, toastProps: e, data: e.data, isPaused: t })
    : r;
}
function dx({ closeToast: r, theme: e, ariaLabel: t = "close" }) {
  return ge.createElement(
    "button",
    {
      className: `Toastify__close-button Toastify__close-button--${e}`,
      type: "button",
      onClick: (a) => {
        a.stopPropagation(), r(!0);
      },
      "aria-label": t,
    },
    ge.createElement(
      "svg",
      { "aria-hidden": "true", viewBox: "0 0 14 16" },
      ge.createElement("path", {
        fillRule: "evenodd",
        d: "M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z",
      })
    )
  );
}
function ux({
  delay: r,
  isRunning: e,
  closeToast: t,
  type: a = "default",
  hide: i,
  className: s,
  controlledProgress: n,
  progress: o,
  rtl: l,
  isIn: c,
  theme: h,
}) {
  let d = i || (n && o === 0),
    u = {
      animationDuration: `${r}ms`,
      animationPlayState: e ? "running" : "paused",
    };
  n && (u.transform = `scaleX(${o})`);
  let f = Dt(
      "Toastify__progress-bar",
      n
        ? "Toastify__progress-bar--controlled"
        : "Toastify__progress-bar--animated",
      `Toastify__progress-bar-theme--${h}`,
      `Toastify__progress-bar--${a}`,
      { "Toastify__progress-bar--rtl": l }
    ),
    g = ut(s) ? s({ rtl: l, type: a, defaultClassName: f }) : Dt(f, s),
    p = {
      [n && o >= 1 ? "onTransitionEnd" : "onAnimationEnd"]:
        n && o < 1
          ? null
          : () => {
              c && t();
            },
    };
  return ge.createElement(
    "div",
    { className: "Toastify__progress-bar--wrp", "data-hidden": d },
    ge.createElement("div", {
      className: `Toastify__progress-bar--bg Toastify__progress-bar-theme--${h} Toastify__progress-bar--${a}`,
    }),
    ge.createElement("div", {
      role: "progressbar",
      "aria-hidden": d ? "true" : "false",
      "aria-label": "notification timer",
      className: g,
      style: u,
      ...p,
    })
  );
}
var fx = 1,
  rh = () => `${fx++}`;
function gx(r, e, t) {
  let a = 1,
    i = 0,
    s = [],
    n = [],
    o = e,
    l = new Map(),
    c = new Set(),
    h = (v) => (c.add(v), () => c.delete(v)),
    d = () => {
      (n = Array.from(l.values())), c.forEach((v) => v());
    },
    u = ({ containerId: v, toastId: b, updateId: k }) => {
      let y = v ? v !== r : r !== 1,
        C = l.has(b) && k == null;
      return y || C;
    },
    f = (v, b) => {
      l.forEach((k) => {
        var y;
        (b == null || b === k.props.toastId) &&
          ((y = k.toggle) == null || y.call(k, v));
      });
    },
    g = (v) => {
      var b, k;
      (k = (b = v.props) == null ? void 0 : b.onClose) == null ||
        k.call(b, v.removalReason),
        (v.isActive = !1);
    },
    p = (v) => {
      if (v == null) l.forEach(g);
      else {
        let b = l.get(v);
        b && g(b);
      }
      d();
    },
    m = () => {
      (i -= s.length), (s = []);
    },
    x = (v) => {
      var b, k;
      let { toastId: y, updateId: C } = v.props,
        A = C == null;
      v.staleId && l.delete(v.staleId),
        (v.isActive = !0),
        l.set(y, v),
        d(),
        t(Eo(v, A ? "added" : "updated")),
        A && ((k = (b = v.props).onOpen) == null || k.call(b));
    };
  return {
    id: r,
    props: o,
    observe: h,
    toggle: f,
    removeToast: p,
    toasts: l,
    clearQueue: m,
    buildToast: (v, b) => {
      if (u(b)) return;
      let { toastId: k, updateId: y, data: C, staleId: A, delay: S } = b,
        T = y == null;
      T && i++;
      let E = {
        ...o,
        style: o.toastStyle,
        key: a++,
        ...Object.fromEntries(Object.entries(b).filter(([I, M]) => M != null)),
        toastId: k,
        updateId: y,
        data: C,
        isIn: !1,
        className: ss(b.className || o.toastClassName),
        progressClassName: ss(b.progressClassName || o.progressClassName),
        autoClose: b.isLoading ? !1 : lx(b.autoClose, o.autoClose),
        closeToast(I) {
          (l.get(k).removalReason = I), p(k);
        },
        deleteToast() {
          let I = l.get(k);
          if (I != null) {
            if (
              (t(Eo(I, "removed")),
              l.delete(k),
              i--,
              i < 0 && (i = 0),
              s.length > 0)
            ) {
              x(s.shift());
              return;
            }
            d();
          }
        },
      };
      (E.closeButton = o.closeButton),
        b.closeButton === !1 || ns(b.closeButton)
          ? (E.closeButton = b.closeButton)
          : b.closeButton === !0 &&
            (E.closeButton = ns(o.closeButton) ? o.closeButton : !0);
      let L = { content: v, props: E, staleId: A };
      o.limit && o.limit > 0 && i > o.limit && T
        ? s.push(L)
        : Qa(S)
        ? setTimeout(() => {
            x(L);
          }, S)
        : x(L);
    },
    setProps(v) {
      o = v;
    },
    setToggle: (v, b) => {
      let k = l.get(v);
      k && (k.toggle = b);
    },
    isToastActive: (v) => {
      var b;
      return (b = l.get(v)) == null ? void 0 : b.isActive;
    },
    getSnapshot: () => n,
  };
}
var Fe = new Map(),
  Da = [],
  os = new Set(),
  px = (r) => os.forEach((e) => e(r)),
  sh = () => Fe.size > 0;
function mx() {
  Da.forEach((r) => oh(r.content, r.options)), (Da = []);
}
var xx = (r, { containerId: e }) => {
  var t;
  return (t = Fe.get(e || 1)) == null ? void 0 : t.toasts.get(r);
};
function nh(r, e) {
  var t;
  if (e) return !!((t = Fe.get(e)) != null && t.isToastActive(r));
  let a = !1;
  return (
    Fe.forEach((i) => {
      i.isToastActive(r) && (a = !0);
    }),
    a
  );
}
function vx(r) {
  if (!sh()) {
    Da = Da.filter((e) => r != null && e.options.toastId !== r);
    return;
  }
  if (r == null || ox(r))
    Fe.forEach((e) => {
      e.removeToast(r);
    });
  else if (r && ("containerId" in r || "id" in r)) {
    let e = Fe.get(r.containerId);
    e
      ? e.removeToast(r.id)
      : Fe.forEach((t) => {
          t.removeToast(r.id);
        });
  }
}
var bx = (r = {}) => {
  Fe.forEach((e) => {
    e.props.limit &&
      (!r.containerId || e.id === r.containerId) &&
      e.clearQueue();
  });
};
function oh(r, e) {
  ns(r) &&
    (sh() || Da.push({ content: r, options: e }),
    Fe.forEach((t) => {
      t.buildToast(r, e);
    }));
}
function yx(r) {
  var e;
  (e = Fe.get(r.containerId || 1)) == null || e.setToggle(r.id, r.fn);
}
function lh(r, e) {
  Fe.forEach((t) => {
    (e == null ||
      !(e != null && e.containerId) ||
      (e == null ? void 0 : e.containerId) === t.id) &&
      t.toggle(r, e == null ? void 0 : e.id);
  });
}
function wx(r) {
  let e = r.containerId || 1;
  return {
    subscribe(t) {
      let a = gx(e, r, px);
      Fe.set(e, a);
      let i = a.observe(t);
      return (
        mx(),
        () => {
          i(), Fe.delete(e);
        }
      );
    },
    setProps(t) {
      var a;
      (a = Fe.get(e)) == null || a.setProps(t);
    },
    getSnapshot() {
      var t;
      return (t = Fe.get(e)) == null ? void 0 : t.getSnapshot();
    },
  };
}
function kx(r) {
  return (
    os.add(r),
    () => {
      os.delete(r);
    }
  );
}
function Ax(r) {
  return r && (Xt(r.toastId) || Qa(r.toastId)) ? r.toastId : rh();
}
function Ja(r, e) {
  return oh(r, e), e.toastId;
}
function Vi(r, e) {
  return { ...e, type: (e && e.type) || r, toastId: Ax(e) };
}
function Gi(r) {
  return (e, t) => Ja(e, Vi(r, t));
}
function fe(r, e) {
  return Ja(r, Vi("default", e));
}
fe.loading = (r, e) =>
  Ja(
    r,
    Vi("default", {
      isLoading: !0,
      autoClose: !1,
      closeOnClick: !1,
      closeButton: !1,
      draggable: !1,
      ...e,
    })
  );
function Cx(r, { pending: e, error: t, success: a }, i) {
  let s;
  e && (s = Xt(e) ? fe.loading(e, i) : fe.loading(e.render, { ...i, ...e }));
  let n = {
      isLoading: null,
      autoClose: null,
      closeOnClick: null,
      closeButton: null,
      draggable: null,
    },
    o = (c, h, d) => {
      if (h == null) {
        fe.dismiss(s);
        return;
      }
      let u = { type: c, ...n, ...i, data: d },
        f = Xt(h) ? { render: h } : h;
      return s ? fe.update(s, { ...u, ...f }) : fe(f.render, { ...u, ...f }), d;
    },
    l = ut(r) ? r() : r;
  return l.then((c) => o("success", a, c)).catch((c) => o("error", t, c)), l;
}
fe.promise = Cx;
fe.success = Gi("success");
fe.info = Gi("info");
fe.error = Gi("error");
fe.warning = Gi("warning");
fe.warn = fe.warning;
fe.dark = (r, e) => Ja(r, Vi("default", { theme: "dark", ...e }));
function Sx(r) {
  vx(r);
}
fe.dismiss = Sx;
fe.clearWaitingQueue = bx;
fe.isActive = nh;
fe.update = (r, e = {}) => {
  let t = xx(r, e);
  if (t) {
    let { props: a, content: i } = t,
      s = { delay: 100, ...a, ...e, toastId: e.toastId || r, updateId: rh() };
    s.toastId !== r && (s.staleId = r);
    let n = s.render || i;
    delete s.render, Ja(n, s);
  }
};
fe.done = (r) => {
  fe.update(r, { progress: 1 });
};
fe.onChange = kx;
fe.play = (r) => lh(!0, r);
fe.pause = (r) => lh(!1, r);
function Tx(r) {
  var e;
  let { subscribe: t, getSnapshot: a, setProps: i } = P.useRef(wx(r)).current;
  i(r);
  let s = (e = P.useSyncExternalStore(t, a, a)) == null ? void 0 : e.slice();
  function n(o) {
    if (!s) return [];
    let l = new Map();
    return (
      r.newestOnTop && s.reverse(),
      s.forEach((c) => {
        let { position: h } = c.props;
        l.has(h) || l.set(h, []), l.get(h).push(c);
      }),
      Array.from(l, (c) => o(c[0], c[1]))
    );
  }
  return {
    getToastToRender: n,
    isToastActive: nh,
    count: s == null ? void 0 : s.length,
  };
}
function Px(r) {
  let [e, t] = P.useState(!1),
    [a, i] = P.useState(!1),
    s = P.useRef(null),
    n = P.useRef({
      start: 0,
      delta: 0,
      removalDistance: 0,
      canCloseOnClick: !0,
      canDrag: !1,
      didMove: !1,
    }).current,
    {
      autoClose: o,
      pauseOnHover: l,
      closeToast: c,
      onClick: h,
      closeOnClick: d,
    } = r;
  yx({ id: r.toastId, containerId: r.containerId, fn: t }),
    P.useEffect(() => {
      if (r.pauseOnFocusLoss)
        return (
          u(),
          () => {
            f();
          }
        );
    }, [r.pauseOnFocusLoss]);
  function u() {
    document.hasFocus() || x(),
      window.addEventListener("focus", m),
      window.addEventListener("blur", x);
  }
  function f() {
    window.removeEventListener("focus", m),
      window.removeEventListener("blur", x);
  }
  function g(A) {
    if (r.draggable === !0 || r.draggable === A.pointerType) {
      v();
      let S = s.current;
      (n.canCloseOnClick = !0),
        (n.canDrag = !0),
        (S.style.transition = "none"),
        r.draggableDirection === "x"
          ? ((n.start = A.clientX),
            (n.removalDistance = S.offsetWidth * (r.draggablePercent / 100)))
          : ((n.start = A.clientY),
            (n.removalDistance =
              (S.offsetHeight *
                (r.draggablePercent === 80
                  ? r.draggablePercent * 1.5
                  : r.draggablePercent)) /
              100));
    }
  }
  function p(A) {
    let {
      top: S,
      bottom: T,
      left: E,
      right: L,
    } = s.current.getBoundingClientRect();
    A.nativeEvent.type !== "touchend" &&
    r.pauseOnHover &&
    A.clientX >= E &&
    A.clientX <= L &&
    A.clientY >= S &&
    A.clientY <= T
      ? x()
      : m();
  }
  function m() {
    t(!0);
  }
  function x() {
    t(!1);
  }
  function v() {
    (n.didMove = !1),
      document.addEventListener("pointermove", k),
      document.addEventListener("pointerup", y);
  }
  function b() {
    document.removeEventListener("pointermove", k),
      document.removeEventListener("pointerup", y);
  }
  function k(A) {
    let S = s.current;
    if (n.canDrag && S) {
      (n.didMove = !0),
        e && x(),
        r.draggableDirection === "x"
          ? (n.delta = A.clientX - n.start)
          : (n.delta = A.clientY - n.start),
        n.start !== A.clientX && (n.canCloseOnClick = !1);
      let T =
        r.draggableDirection === "x"
          ? `${n.delta}px, var(--y)`
          : `0, calc(${n.delta}px + var(--y))`;
      (S.style.transform = `translate3d(${T},0)`),
        (S.style.opacity = `${1 - Math.abs(n.delta / n.removalDistance)}`);
    }
  }
  function y() {
    b();
    let A = s.current;
    if (n.canDrag && n.didMove && A) {
      if (((n.canDrag = !1), Math.abs(n.delta) > n.removalDistance)) {
        i(!0), r.closeToast(!0), r.collapseAll();
        return;
      }
      (A.style.transition = "transform 0.2s, opacity 0.2s"),
        A.style.removeProperty("transform"),
        A.style.removeProperty("opacity");
    }
  }
  let C = { onPointerDown: g, onPointerUp: p };
  return (
    o && l && ((C.onMouseEnter = x), r.stacked || (C.onMouseLeave = m)),
    d &&
      (C.onClick = (A) => {
        h && h(A), n.canCloseOnClick && c(!0);
      }),
    {
      playToast: m,
      pauseToast: x,
      isRunning: e,
      preventExitTransition: a,
      toastRef: s,
      eventHandlers: C,
    }
  );
}
var Lx = typeof window < "u" ? P.useLayoutEffect : P.useEffect,
  Ui = ({ theme: r, type: e, isLoading: t, ...a }) =>
    ge.createElement("svg", {
      viewBox: "0 0 24 24",
      width: "100%",
      height: "100%",
      fill:
        r === "colored" ? "currentColor" : `var(--toastify-icon-color-${e})`,
      ...a,
    });
function Mx(r) {
  return ge.createElement(
    Ui,
    { ...r },
    ge.createElement("path", {
      d: "M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z",
    })
  );
}
function Ex(r) {
  return ge.createElement(
    Ui,
    { ...r },
    ge.createElement("path", {
      d: "M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z",
    })
  );
}
function Ix(r) {
  return ge.createElement(
    Ui,
    { ...r },
    ge.createElement("path", {
      d: "M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z",
    })
  );
}
function Rx(r) {
  return ge.createElement(
    Ui,
    { ...r },
    ge.createElement("path", {
      d: "M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z",
    })
  );
}
function _x() {
  return ge.createElement("div", { className: "Toastify__spinner" });
}
var ls = { info: Ex, warning: Mx, success: Ix, error: Rx, spinner: _x },
  Ox = (r) => r in ls;
function Nx({ theme: r, type: e, isLoading: t, icon: a }) {
  let i = null,
    s = { theme: r, type: e };
  return (
    a === !1 ||
      (ut(a)
        ? (i = a({ ...s, isLoading: t }))
        : P.isValidElement(a)
        ? (i = P.cloneElement(a, s))
        : t
        ? (i = ls.spinner())
        : Ox(e) && (i = ls[e](s))),
    i
  );
}
var jx = (r) => {
    let {
        isRunning: e,
        preventExitTransition: t,
        toastRef: a,
        eventHandlers: i,
        playToast: s,
      } = Px(r),
      {
        closeButton: n,
        children: o,
        autoClose: l,
        onClick: c,
        type: h,
        hideProgressBar: d,
        closeToast: u,
        transition: f,
        position: g,
        className: p,
        style: m,
        progressClassName: x,
        updateId: v,
        role: b,
        progress: k,
        rtl: y,
        toastId: C,
        deleteToast: A,
        isIn: S,
        isLoading: T,
        closeOnClick: E,
        theme: L,
        ariaLabel: I,
      } = r,
      M = Dt(
        "Toastify__toast",
        `Toastify__toast-theme--${L}`,
        `Toastify__toast--${h}`,
        { "Toastify__toast--rtl": y },
        { "Toastify__toast--close-on-click": E }
      ),
      O = ut(p)
        ? p({ rtl: y, position: g, type: h, defaultClassName: M })
        : Dt(M, p),
      N = Nx(r),
      F = !!k || !l,
      D = { closeToast: u, type: h, theme: L },
      B = null;
    return (
      n === !1 ||
        (ut(n)
          ? (B = n(D))
          : P.isValidElement(n)
          ? (B = P.cloneElement(n, D))
          : (B = dx(D))),
      ge.createElement(
        f,
        {
          isIn: S,
          done: A,
          position: g,
          preventExitTransition: t,
          nodeRef: a,
          playToast: s,
        },
        ge.createElement(
          "div",
          {
            id: C,
            tabIndex: 0,
            onClick: c,
            "data-in": S,
            className: O,
            ...i,
            style: m,
            ref: a,
            ...(S && { role: b, "aria-label": I }),
          },
          N != null &&
            ge.createElement(
              "div",
              {
                className: Dt("Toastify__toast-icon", {
                  "Toastify--animate-icon Toastify__zoom-enter": !T,
                }),
              },
              N
            ),
          ih(o, r, !e),
          B,
          !r.customProgressBar &&
            ge.createElement(ux, {
              ...(v && !F ? { key: `p-${v}` } : {}),
              rtl: y,
              theme: L,
              delay: l,
              isRunning: e,
              isIn: S,
              closeToast: u,
              hide: d,
              type: h,
              className: x,
              controlledProgress: F,
              progress: k || 0,
            })
        )
      )
    );
  },
  Fx = (r, e = !1) => ({
    enter: `Toastify--animate Toastify__${r}-enter`,
    exit: `Toastify--animate Toastify__${r}-exit`,
    appendPosition: e,
  }),
  Dx = hx(Fx("bounce", !0)),
  zx = {
    position: "top-right",
    transition: Dx,
    autoClose: 5e3,
    closeButton: !0,
    pauseOnHover: !0,
    pauseOnFocusLoss: !0,
    draggable: "touch",
    draggablePercent: 80,
    draggableDirection: "x",
    role: "alert",
    theme: "light",
    "aria-label": "Notifications Alt+T",
    hotKeys: (r) => r.altKey && r.code === "KeyT",
  };
function Hx(r) {
  let e = { ...zx, ...r },
    t = r.stacked,
    [a, i] = P.useState(!0),
    s = P.useRef(null),
    { getToastToRender: n, isToastActive: o, count: l } = Tx(e),
    { className: c, style: h, rtl: d, containerId: u, hotKeys: f } = e;
  function g(m) {
    let x = Dt("Toastify__toast-container", `Toastify__toast-container--${m}`, {
      "Toastify__toast-container--rtl": d,
    });
    return ut(c)
      ? c({ position: m, rtl: d, defaultClassName: x })
      : Dt(x, ss(c));
  }
  function p() {
    t && (i(!0), fe.play());
  }
  return (
    Lx(() => {
      var m;
      if (t) {
        let x = s.current.querySelectorAll('[data-in="true"]'),
          v = 12,
          b = (m = e.position) == null ? void 0 : m.includes("top"),
          k = 0,
          y = 0;
        Array.from(x)
          .reverse()
          .forEach((C, A) => {
            let S = C;
            S.classList.add("Toastify__toast--stacked"),
              A > 0 && (S.dataset.collapsed = `${a}`),
              S.dataset.pos || (S.dataset.pos = b ? "top" : "bot");
            let T = k * (a ? 0.2 : 1) + (a ? 0 : v * A);
            S.style.setProperty("--y", `${b ? T : T * -1}px`),
              S.style.setProperty("--g", `${v}`),
              S.style.setProperty("--s", `${1 - (a ? y : 0)}`),
              (k += S.offsetHeight),
              (y += 0.025);
          });
      }
    }, [a, l, t]),
    P.useEffect(() => {
      function m(x) {
        var v;
        let b = s.current;
        f(x) &&
          ((v = b.querySelector('[tabIndex="0"]')) == null || v.focus(),
          i(!1),
          fe.pause()),
          x.key === "Escape" &&
            (document.activeElement === b ||
              (b != null && b.contains(document.activeElement))) &&
            (i(!0), fe.play());
      }
      return (
        document.addEventListener("keydown", m),
        () => {
          document.removeEventListener("keydown", m);
        }
      );
    }, [f]),
    ge.createElement(
      "section",
      {
        ref: s,
        className: "Toastify",
        id: u,
        onMouseEnter: () => {
          t && (i(!1), fe.pause());
        },
        onMouseLeave: p,
        "aria-live": "polite",
        "aria-atomic": "false",
        "aria-relevant": "additions text",
        "aria-label": e["aria-label"],
      },
      n((m, x) => {
        let v = x.length ? { ...h } : { ...h, pointerEvents: "none" };
        return ge.createElement(
          "div",
          {
            tabIndex: -1,
            className: g(m),
            "data-stacked": t,
            style: v,
            key: `c-${m}`,
          },
          x.map(({ content: b, props: k }) =>
            ge.createElement(
              jx,
              {
                ...k,
                stacked: t,
                collapseAll: p,
                isIn: o(k.toastId, k.containerId),
                key: `t-${k.key}`,
              },
              b
            )
          )
        );
      })
    )
  );
}
const ua = () =>
    w.jsx(Hx, {
      position: "top-right",
      autoClose: 3e3,
      hideProgressBar: !1,
      closeOnClick: !0,
      pauseOnHover: !0,
      draggable: !0,
    }),
  Ge = (r) => {
    fe.success(r, {
      position: "top-right",
      autoClose: 3e3,
      hideProgressBar: !1,
      closeOnClick: !0,
      pauseOnHover: !0,
      draggable: !0,
    });
  },
  he = (r) => {
    fe.error(r, {
      position: "top-right",
      autoClose: 3e3,
      hideProgressBar: !1,
      closeOnClick: !0,
      pauseOnHover: !0,
      draggable: !0,
    });
  };
function Xx() {
  const [r, e] = P.useState([]),
    [t, a] = P.useState(!0),
    [i, s] = P.useState(1),
    [n, o] = P.useState(1),
    [l, c] = P.useState(!1),
    h = Le.get("token"),
    d = () => c((C) => !C),
    [u, f] = P.useState(""),
    [g, p] = P.useState(""),
    [m, x] = P.useState(!1),
    v = P.useCallback(
      async (C) => {
        var A;
        if (h) {
          a(!0);
          try {
            const { data: S } = await ne.get(
              `http://103.189.173.127:3000/admin/faqs?page=${C}&limit=10`,
              { headers: { Authorization: `Bearer ${h}` } }
            );
            console.log("FAQs:", S.faqs),
              e(S.faqs || []),
              o(((A = S.meta) == null ? void 0 : A.totalPages) || 1);
          } catch (S) {
            console.error("Error fetching FAQs:", S),
              he("Failed to fetch FAQs");
          } finally {
            a(!1);
          }
        }
      },
      [h]
    );
  P.useEffect(() => {
    v(i);
  }, [v, i]);
  const b = async (C) => {
      try {
        await ne.delete(`http://103.189.173.127:3000/admin/faqs/delete/${C}`, {
          headers: { Authorization: `Bearer ${h}` },
        }),
          Ge("FAQ deleted"),
          v(i);
      } catch (A) {
        console.error("Error deleting FAQ:", A), he("Failed to delete FAQ");
      }
    },
    k = async () => {
      if (!u.trim() || !g.trim()) {
        he("Both question and answer are required.");
        return;
      }
      try {
        x(!0),
          await ne.post(
            "http://103.189.173.127:3000/admin/faqs/create",
            { question: u, answer: g },
            {
              headers: {
                Authorization: `Bearer ${h}`,
                "Content-Type": "application/json",
              },
            }
          ),
          Ge("FAQ created"),
          f(""),
          p(""),
          v(i);
      } catch (C) {
        console.error("Error creating FAQ:", C), he("Failed to create FAQ");
      } finally {
        x(!1);
      }
    },
    y = [
      {
        key: "question",
        label: "Question",
        render: (C) => w.jsx("div", { children: C.question }),
      },
      {
        key: "answer",
        label: "Answer",
        render: (C) => w.jsx("div", { children: C.answer }),
      },
      {
        key: "actions",
        label: "Actions",
        render: (C) =>
          w.jsx(R.Tooltip, {
            content: "Delete",
            children: w.jsx("button", {
              onClick: () => b(C.id),
              children: w.jsx(Yt, { className: "h-5 w-5 text-red-500" }),
            }),
          }),
      },
    ];
  return w.jsxs(R.Card, {
    children: [
      w.jsx(ua, {}),
      w.jsx(R.CardHeader, {
        floated: !1,
        shadow: !1,
        className: "rounded-none",
        children: w.jsxs("div", {
          className: "flex items-center justify-between",
          children: [
            w.jsxs("div", {
              children: [
                w.jsx(R.Typography, {
                  variant: "h5",
                  color: "blue-gray",
                  children: "FAQ List",
                }),
                w.jsx(R.Typography, {
                  color: "gray",
                  className: "mt-1 font-normal",
                  children: "View all FAQs and create new ones",
                }),
              ],
            }),
            w.jsx(R.Button, {
              onClick: d,
              className: "bg-blue-500",
              children: "Add FAQ",
            }),
          ],
        }),
      }),
      w.jsxs(R.Dialog, {
        open: l,
        handler: d,
        children: [
          w.jsx(R.DialogHeader, { children: "Add a New FAQ" }),
          w.jsx(R.DialogBody, {
            divider: !0,
            children: w.jsxs("div", {
              className: "flex flex-col gap-4",
              children: [
                w.jsx(R.Input, {
                  label: "Question",
                  value: u,
                  onChange: (C) => f(C.target.value),
                }),
                w.jsx(R.Textarea, {
                  label: "Answer",
                  value: g,
                  onChange: (C) => p(C.target.value),
                }),
              ],
            }),
          }),
          w.jsxs(R.DialogFooter, {
            children: [
              w.jsx(R.Button, {
                variant: "text",
                color: "red",
                onClick: d,
                className: "mr-1",
                children: "Cancel",
              }),
              w.jsx(R.Button, {
                onClick: async () => {
                  await k(), c(!1);
                },
                disabled: m,
                className: "bg-blue-500",
                children: m ? "Creating..." : "Create",
              }),
            ],
          }),
        ],
      }),
      w.jsx(R.CardBody, {
        children: t
          ? w.jsx("div", {
              className: "flex justify-center items-center",
              children: w.jsx(R.Spinner, {
                className: "h-8 w-8 text-blue-500",
              }),
            })
          : w.jsx(Pt, { columns: y, data: r }),
      }),
      w.jsxs(R.CardFooter, {
        className: "flex justify-between",
        children: [
          w.jsx(R.Button, {
            onClick: () => s((C) => Math.max(C - 1, 1)),
            disabled: i === 1,
            children: "Previous",
          }),
          w.jsxs("div", {
            className: "flex items-center gap-2",
            children: [
              i > 3 &&
                w.jsxs(w.Fragment, {
                  children: [
                    w.jsx(R.IconButton, {
                      variant: "text",
                      size: "sm",
                      onClick: () => s(1),
                      children: "1",
                    }),
                    i > 4 && w.jsx("p", { children: "..." }),
                  ],
                }),
              Array.from({ length: Math.min(5, n) }, (C, A) => {
                const S = Math.max(1, i - 2) + A;
                return S > n
                  ? null
                  : w.jsx(
                      R.IconButton,
                      {
                        variant: "text",
                        size: "sm",
                        onClick: () => s(S),
                        disabled: i === S,
                        children: S,
                      },
                      S
                    );
              }),
              i < n - 2 &&
                w.jsxs(w.Fragment, {
                  children: [
                    i < n - 3 && w.jsx("p", { children: "..." }),
                    w.jsx(R.IconButton, {
                      variant: "text",
                      size: "sm",
                      onClick: () => s(n),
                      children: n,
                    }),
                  ],
                }),
            ],
          }),
          w.jsx(R.Button, {
            onClick: () => s((C) => Math.min(C + 1, n)),
            disabled: i === n,
            children: "Next",
          }),
        ],
      }),
    ],
  });
}
const Bx = () => {
    const r = Le.get("token"),
      [e, t] = P.useState([]),
      [a, i] = P.useState(null),
      [s, n] = P.useState(null),
      [o, l] = P.useState(!0),
      [c, h] = P.useState(!1),
      [d, u] = P.useState(1),
      [f, g] = P.useState(1),
      p = Tt(),
      [m, x] = P.useState(""),
      [v, b] = P.useState(""),
      [k, y] = P.useState(""),
      [C, A] = P.useState(!1),
      S = async (N) => {
        const F = new FormData();
        F.append("file", N);
        try {
          const { data: D } = await ne.post(
            "http://103.189.173.127:3000/audio-upload",
            F,
            {
              headers: {
                Authorization: `Bearer ${r}`,
                "Content-Type": "multipart/form-data",
              },
            }
          );
          return D == null ? void 0 : D.url;
        } catch (D) {
          throw (
            (console.error("Error uploading file:", D),
            new Error("Failed to upload"))
          );
        }
      },
      T = async (N) => {
        const F = new FormData();
        F.append("file", N);
        try {
          const { data: D } = await ne.post(
            "http://103.189.173.127:3000/upload",
            F,
            {
              headers: {
                Authorization: `Bearer ${r}`,
                "Content-Type": "multipart/form-data",
              },
            }
          );
          return D == null ? void 0 : D.url;
        } catch (D) {
          throw (
            (console.error("Error uploading file:", D),
            new Error("Failed to upload"))
          );
        }
      },
      E = P.useCallback(
        async (N) => {
          var F;
          try {
            l(!0);
            const { data: D } = await ne.get(
              `http://103.189.173.127:3000/admin/audiobook?page=${N}&limit=10`,
              { headers: { Authorization: `Bearer ${r}` } }
            );
            t(D.audiobooks || []),
              g(((F = D.meta) == null ? void 0 : F.totalPages) || 1);
          } catch (D) {
            console.error("Error fetching audiobooks:", D),
              he("Failed to fetch audiobooks");
          } finally {
            l(!1);
          }
        },
        [r]
      );
    P.useEffect(() => {
      E(d);
    }, [E, d]);
    const L = async () => {
        if (!m || !v || !a || !s || !k) {
          he("All fields are required.");
          return;
        }
        try {
          A(!0),
            await ne.post(
              "http://103.189.173.127:3000/admin/audiobook/create",
              {
                title: m,
                description: v,
                price: parseFloat(k),
                image: a,
                audio: s,
              },
              { headers: { Authorization: `Bearer ${r}` } }
            ),
            Ge("Audiobook created successfully"),
            h(!1),
            x(""),
            b(""),
            i(null),
            n(null),
            y(""),
            E(d);
        } catch (N) {
          console.error("Error creating audiobook:", N),
            he("Failed to create audiobook");
        } finally {
          A(!1);
        }
      },
      I = async (N) => {
        try {
          await ne.delete(
            `http://103.189.173.127:3000/admin/audiobook/delete/${N}`,
            { headers: { Authorization: `Bearer ${r}` } }
          ),
            Ge("Audiobook deleted"),
            E(d);
        } catch (F) {
          console.error("Error deleting audiobook:", F),
            he("Failed to delete audiobook");
        }
      },
      M = (N) => {
        p(`/audio-detail/${N}`);
      },
      O = [
        {
          key: "image",
          label: "Image",
          render: (N) =>
            w.jsx("img", {
              src: `http://103.189.173.127:3000${N.image}`,
              alt: N.title,
              className: "w-16 h-16 rounded",
            }),
        },
        { key: "title", label: "Title", render: (N) => `${N.title}` },
        { key: "price", label: "Price", render: (N) => `${N.price}` },
        {
          key: "audio",
          label: "Audio",
          render: (N) =>
            w.jsx("audio", {
              controls: !0,
              src: `http://103.189.173.127:3000${N.audio}`,
            }),
        },
        {
          key: "actions",
          label: "Actions",
          render: (N) =>
            w.jsxs("div", {
              className: "flex items-center gap-2",
              children: [
                w.jsx(R.Tooltip, {
                  content: "Details",
                  children: w.jsx("button", {
                    onClick: () => M(N.id),
                    children: w.jsx(Wi, { className: "h-5 w-5 text-blue-500" }),
                  }),
                }),
                w.jsx(R.Tooltip, {
                  content: "Delete",
                  children: w.jsx("button", {
                    onClick: () => I(N.id),
                    children: w.jsx(Yt, { className: "h-5 w-5 text-red-500" }),
                  }),
                }),
              ],
            }),
        },
      ];
    return w.jsxs(R.Card, {
      children: [
        w.jsx(ua, {}),
        w.jsx(R.CardHeader, {
          floated: !1,
          shadow: !1,
          className: "rounded-none",
          children: w.jsxs("div", {
            className: "flex items-center justify-between",
            children: [
              w.jsxs("div", {
                children: [
                  w.jsx(R.Typography, {
                    variant: "h5",
                    color: "blue-gray",
                    children: "Audiobooks",
                  }),
                  w.jsx(R.Typography, {
                    color: "gray",
                    className: "mt-1 font-normal",
                    children: "Manage all audiobooks",
                  }),
                ],
              }),
              w.jsx(R.Button, {
                className: "bg-blue-500",
                onClick: () => h(!0),
                children: "Add Audiobook",
              }),
            ],
          }),
        }),
        w.jsxs(R.Dialog, {
          open: c,
          handler: () => h(!1),
          children: [
            w.jsx(R.DialogHeader, { children: "Add a New Audiobook" }),
            w.jsx(R.DialogBody, {
              divider: !0,
              children: w.jsxs("div", {
                className: "flex flex-col gap-4",
                children: [
                  w.jsx(R.Input, {
                    label: "Title",
                    value: m,
                    onChange: (N) => x(N.target.value),
                  }),
                  w.jsx(R.Textarea, {
                    label: "Description",
                    value: v,
                    onChange: (N) => b(N.target.value),
                  }),
                  w.jsx("label", {
                    className: "text-sm text-gray-700 font-medium",
                    children: "Upload Image",
                  }),
                  w.jsx(R.Input, {
                    type: "file",
                    accept: "image/*",
                    onChange: async (N) => {
                      const F = N.target.files[0];
                      if (F)
                        try {
                          const D = await T(F);
                          i(D);
                        } catch {
                          he("Failed to upload image");
                        }
                    },
                    icon: w.jsx(na, { className: "h-5 w-5 text-gray-400" }),
                  }),
                  w.jsx(R.Input, {
                    label: "Audio",
                    type: "file",
                    accept: "audio/*",
                    onChange: async (N) => {
                      const F = N.target.files[0];
                      if (F)
                        try {
                          const D = await S(F);
                          n(D);
                        } catch {
                          he("Failed to upload audio");
                        }
                    },
                    icon: w.jsx(Os, { className: "h-5 w-5 text-gray-400" }),
                  }),
                  w.jsx(R.Input, {
                    label: "Price",
                    value: k,
                    type: "number",
                    onChange: (N) => y(N.target.value),
                  }),
                ],
              }),
            }),
            w.jsxs(R.DialogFooter, {
              children: [
                w.jsx(R.Button, {
                  variant: "text",
                  color: "red",
                  onClick: () => h(!1),
                  children: "Cancel",
                }),
                w.jsx(R.Button, {
                  className: "bg-blue-500",
                  onClick: L,
                  disabled: C,
                  children: C ? "Creating..." : "Create",
                }),
              ],
            }),
          ],
        }),
        w.jsx(R.CardBody, {
          children: o
            ? w.jsx("div", {
                className: "flex justify-center items-center",
                children: w.jsx(R.Spinner, {
                  className: "h-8 w-8 text-blue-500",
                }),
              })
            : w.jsx(Pt, { columns: O, data: e }),
        }),
        w.jsxs(R.CardFooter, {
          className: "flex justify-between",
          children: [
            w.jsx(R.Button, {
              onClick: () => u((N) => Math.max(N - 1, 1)),
              disabled: d === 1,
              children: "Previous",
            }),
            w.jsx("div", {
              className: "flex items-center gap-2",
              children: [...Array(f)].map((N, F) =>
                w.jsx(
                  R.IconButton,
                  {
                    variant: "text",
                    size: "sm",
                    onClick: () => u(F + 1),
                    disabled: d === F + 1,
                    children: F + 1,
                  },
                  F + 1
                )
              ),
            }),
            w.jsx(R.Button, {
              onClick: () => u((N) => Math.min(N + 1, f)),
              disabled: d === f,
              children: "Next",
            }),
          ],
        }),
      ],
    });
  },
  Yx = () => {
    const r = Le.get("token"),
      [e, t] = P.useState([]),
      [a, i] = P.useState(null),
      [s, n] = P.useState(null),
      [o, l] = P.useState(!0),
      [c, h] = P.useState(!1),
      [d, u] = P.useState(1),
      [f, g] = P.useState(1),
      p = Tt(),
      [m, x] = P.useState(""),
      [v, b] = P.useState(""),
      [k, y] = P.useState(!1),
      C = async (I) => {
        const M = new FormData();
        M.append("file", I);
        try {
          const { data: O } = await ne.post(
            "http://103.189.173.127:3000/upload",
            M,
            {
              headers: {
                Authorization: `Bearer ${r}`,
                "Content-Type": "multipart/form-data",
              },
            }
          );
          return O == null ? void 0 : O.url;
        } catch (O) {
          throw (
            (console.error("Error uploading file:", O),
            new Error("Failed to upload"))
          );
        }
      },
      A = P.useCallback(
        async (I) => {
          var M;
          try {
            l(!0);
            const { data: O } = await ne.get(
              `http://103.189.173.127:3000/admin/video?page=${I}&limit=10`,
              { headers: { Authorization: `Bearer ${r}` } }
            );
            t(O.videos || []),
              g(((M = O.meta) == null ? void 0 : M.totalPages) || 1);
          } catch (O) {
            console.error("Error fetching video books:", O),
              he("Failed to fetch video books");
          } finally {
            l(!1);
          }
        },
        [r]
      );
    P.useEffect(() => {
      A(d);
    }, [A, d]);
    const S = async () => {
        if (!m || !v || !a || !s) {
          he("All fields are required.");
          return;
        }
        try {
          y(!0),
            await ne.post(
              "http://103.189.173.127:3000/admin/video/create",
              { title: m, description: v, image: a, video: s },
              { headers: { Authorization: `Bearer ${r}` } }
            ),
            Ge("Video book created successfully"),
            h(!1),
            x(""),
            b(""),
            i(null),
            n(""),
            A(d);
        } catch (I) {
          console.error("Error creating video book:", I),
            he("Failed to create video book");
        } finally {
          y(!1);
        }
      },
      T = async (I) => {
        try {
          await ne.delete(
            `http://103.189.173.127:3000/admin/video/delete/${I}`,
            { headers: { Authorization: `Bearer ${r}` } }
          ),
            Ge("Video book deleted"),
            A(d);
        } catch (M) {
          console.error("Error deleting video book:", M),
            he("Failed to delete video book");
        }
      },
      E = (I) => {
        p(`/visa-detail/${I}`);
      },
      L = [
        {
          key: "image",
          label: "Image",
          render: (I) =>
            w.jsx("img", {
              src: I.image,
              alt: I.title,
              className: "w-16 h-16 rounded",
            }),
        },
        { key: "title", label: "Title", render: (I) => `${I.title}` },
        {
          key: "actions",
          label: "Actions",
          render: (I) =>
            w.jsxs("div", {
              className: "flex items-center gap-2",
              children: [
                w.jsx(R.Tooltip, {
                  content: "Edit",
                  children: w.jsx("button", {
                    onClick: () => E(I.id),
                    children: w.jsx(Wi, { className: "h-5 w-5 text-blue-500" }),
                  }),
                }),
                w.jsx(R.Tooltip, {
                  content: "Delete",
                  children: w.jsx("button", {
                    onClick: () => T(I.id),
                    children: w.jsx(Yt, { className: "h-5 w-5 text-red-500" }),
                  }),
                }),
              ],
            }),
        },
      ];
    return w.jsxs(R.Card, {
      children: [
        w.jsx(ua, {}),
        w.jsx(R.CardHeader, {
          floated: !1,
          shadow: !1,
          className: "rounded-none",
          children: w.jsxs("div", {
            className: "flex items-center justify-between",
            children: [
              w.jsxs("div", {
                children: [
                  w.jsx(R.Typography, {
                    variant: "h5",
                    color: "blue-gray",
                    children: "Video Books",
                  }),
                  w.jsx(R.Typography, {
                    color: "gray",
                    className: "mt-1 font-normal",
                    children: "Manage all video books",
                  }),
                ],
              }),
              w.jsx(R.Button, {
                className: "bg-blue-500",
                onClick: () => h(!0),
                children: "Add Video Book",
              }),
            ],
          }),
        }),
        w.jsxs(R.Dialog, {
          open: c,
          handler: () => h(!1),
          children: [
            w.jsx(R.DialogHeader, { children: "Add a New Video Book" }),
            w.jsx(R.DialogBody, {
              divider: !0,
              children: w.jsxs("div", {
                className: "flex flex-col gap-4",
                children: [
                  w.jsx(R.Input, {
                    label: "Title",
                    value: m,
                    onChange: (I) => x(I.target.value),
                  }),
                  w.jsx(R.Textarea, {
                    label: "Description",
                    value: v,
                    onChange: (I) => b(I.target.value),
                  }),
                  w.jsx("label", {
                    className: "text-sm text-gray-700 font-medium",
                    children: "Upload Image",
                  }),
                  w.jsx(R.Input, {
                    type: "file",
                    accept: "image/*",
                    onChange: async (I) => {
                      const M = I.target.files[0];
                      if (M)
                        try {
                          const O = await C(M);
                          i(O);
                        } catch {
                          he("Failed to upload image");
                        }
                    },
                    icon: w.jsx(na, { className: "h-5 w-5 text-gray-400" }),
                  }),
                  w.jsx(R.Input, {
                    label: "Video URL",
                    type: "text",
                    value: s,
                    onChange: (I) => n(I.target.value),
                    icon: w.jsx(Os, { className: "h-5 w-5 text-gray-400" }),
                  }),
                ],
              }),
            }),
            w.jsxs(R.DialogFooter, {
              children: [
                w.jsx(R.Button, {
                  variant: "text",
                  color: "red",
                  onClick: () => h(!1),
                  children: "Cancel",
                }),
                w.jsx(R.Button, {
                  className: "bg-blue-500",
                  onClick: S,
                  disabled: k,
                  children: k ? "Creating..." : "Create",
                }),
              ],
            }),
          ],
        }),
        w.jsx(R.CardBody, {
          children: o
            ? w.jsx("div", {
                className: "flex justify-center items-center",
                children: w.jsx(R.Spinner, {
                  className: "h-8 w-8 text-blue-500",
                }),
              })
            : w.jsx(Pt, { columns: L, data: e }),
        }),
        w.jsxs(R.CardFooter, {
          className: "flex justify-between",
          children: [
            w.jsx(R.Button, {
              onClick: () => u((I) => Math.max(I - 1, 1)),
              disabled: d === 1,
              children: "Previous",
            }),
            w.jsx("div", {
              className: "flex items-center gap-2",
              children: [...Array(f)].map((I, M) =>
                w.jsx(
                  R.IconButton,
                  {
                    variant: "text",
                    size: "sm",
                    onClick: () => u(M + 1),
                    disabled: d === M + 1,
                    children: M + 1,
                  },
                  M + 1
                )
              ),
            }),
            w.jsx(R.Button, {
              onClick: () => u((I) => Math.min(I + 1, f)),
              disabled: d === f,
              children: "Next",
            }),
          ],
        }),
      ],
    });
  };
function Wx() {
  const [r, e] = P.useState([]),
    [t, a] = P.useState(!0),
    [i, s] = P.useState(1),
    [n, o] = P.useState(1),
    l = Le.get("token"),
    c = Tt(),
    h = P.useCallback(
      async (g) => {
        if (l) {
          a(!0);
          try {
            const { data: p } = await ne.get(
              `http://103.189.173.127:3000/admin/users?page=${g}&limit=10`,
              {
                headers: {
                  Authorization: `Bearer ${l}`,
                  "Content-Type": "application/json",
                },
              }
            );
            console.log("leads", p.users), e(p.users), o(p.meta.totalPages);
          } catch (p) {
            console.error("Error fetching leads:", p);
          } finally {
            a(!1);
          }
        }
      },
      [l]
    );
  P.useEffect(() => {
    l && h(i);
  }, [l, i, h]);
  const d = async (g) => {
      try {
        await ne.delete(`http://103.189.173.127:3000/admin/users/delete/${g}`, {
          headers: { Authorization: `Bearer ${l}` },
        }),
          e(r.filter((p) => p.id !== g));
      } catch (p) {
        console.error("Error deleting lead:", p);
      }
    },
    u = (g) => {
      c(`/user-detail/${g}`);
    },
    f = [
      {
        key: "profilePic",
        label: "Profile",
        render: (g) =>
          w.jsx("div", {
            className: "w-10 h-10 rounded-full overflow-hidden",
            children: g.profilePic
              ? w.jsx("img", {
                  src: `http://103.189.173.127:3000${g.profilePic}`,
                  alt: "Profile",
                  className: "object-cover w-full h-full",
                })
              : w.jsx("div", {
                  className:
                    "w-full h-full bg-gray-200 flex items-center justify-center text-gray-500",
                  children: "N/A",
                }),
          }),
        width: "w-20",
      },
      {
        key: "name",
        label: "Name",
        render: (g) => w.jsx("div", { children: g.name || "N/A" }),
        width: "w-48",
      },
      {
        key: "phone",
        label: "Mobile",
        render: (g) => w.jsx("div", { children: g.phone || "N/A" }),
        width: "w-40",
      },
      {
        key: "email",
        label: "Email",
        render: (g) => w.jsx("div", { children: g.email || "N/A" }),
        width: "w-60",
      },
      {
        key: "actions",
        label: "Actions",
        render: (g) =>
          w.jsxs("div", {
            className: "flex gap-2",
            children: [
              w.jsx(R.Tooltip, {
                content: "Edit",
                children: w.jsx("button", {
                  onClick: () => u(g.id),
                  children: w.jsx(Cp, { className: "h-5 w-5 text-blue-500" }),
                }),
              }),
              w.jsx(R.Tooltip, {
                content: "Delete",
                children: w.jsx("button", {
                  onClick: () => d(g.id),
                  children: w.jsx(Yt, { className: "h-5 w-5 text-red-500" }),
                }),
              }),
            ],
          }),
        width: "w-28",
      },
    ];
  return w.jsxs(R.Card, {
    children: [
      w.jsx(R.CardHeader, {
        floated: !1,
        shadow: !1,
        className: "rounded-none",
        children: w.jsx("div", {
          className: "flex items-center justify-between",
          children: w.jsxs("div", {
            children: [
              w.jsx(R.Typography, {
                variant: "h5",
                color: "blue-gray",
                children: "User List",
              }),
              w.jsx(R.Typography, {
                color: "gray",
                className: "mt-1 font-normal",
                children: "View the current active Users",
              }),
            ],
          }),
        }),
      }),
      w.jsx(R.CardBody, {
        children: t
          ? w.jsx("div", {
              className: "flex justify-center items-center",
              children: w.jsx(R.Spinner, {
                className: "h-8 w-8 text-blue-500",
              }),
            })
          : w.jsx(Pt, { columns: f, data: r }),
      }),
      w.jsxs(R.CardFooter, {
        className: "flex justify-between",
        children: [
          w.jsx(R.Button, {
            onClick: () => s((g) => Math.max(g - 1, 1)),
            disabled: i === 1,
            children: "Previous",
          }),
          w.jsxs("div", {
            className: "flex items-center gap-2",
            children: [
              i > 3 &&
                w.jsxs(w.Fragment, {
                  children: [
                    w.jsx(R.IconButton, {
                      variant: "text",
                      size: "sm",
                      onClick: () => s(1),
                      children: "1",
                    }),
                    i > 4 && w.jsx("p", { children: "..." }),
                  ],
                }),
              Array.from({ length: Math.min(5, n) }, (g, p) => {
                const m = Math.max(1, i - 2) + p;
                return m > n
                  ? null
                  : w.jsx(
                      R.IconButton,
                      {
                        variant: "text",
                        size: "sm",
                        onClick: () => s(m),
                        disabled: i === m,
                        children: m,
                      },
                      m
                    );
              }),
              i < n - 2 &&
                w.jsxs(w.Fragment, {
                  children: [
                    i < n - 3 && w.jsx("p", { children: "..." }),
                    w.jsx(R.IconButton, {
                      variant: "text",
                      size: "sm",
                      onClick: () => s(n),
                      children: n,
                    }),
                  ],
                }),
            ],
          }),
          w.jsx(R.Button, {
            onClick: () => s((g) => Math.min(g + 1, n)),
            disabled: i === n,
            children: "Next",
          }),
        ],
      }),
    ],
  });
}
const Vx = () => {
  const r = Le.get("token"),
    [e, t] = P.useState([]),
    [a, i] = P.useState(null),
    [s, n] = P.useState(null),
    [o, l] = P.useState(!0),
    [c, h] = P.useState(!1),
    [d, u] = P.useState(1),
    [f, g] = P.useState(1),
    p = Tt(),
    [m, x] = P.useState(""),
    [v, b] = P.useState(""),
    [k, y] = P.useState(!1),
    C = async (M) => {
      const O = new FormData();
      O.append("file", M);
      try {
        const { data: N } = await ne.post(
          "http://103.189.173.127:3000/audio-upload",
          O,
          {
            headers: {
              Authorization: `Bearer ${r}`,
              "Content-Type": "multipart/form-data",
            },
          }
        );
        return N == null ? void 0 : N.url;
      } catch (N) {
        throw (
          (console.error("Error uploading file:", N),
          new Error("Failed to upload"))
        );
      }
    },
    A = async (M) => {
      const O = new FormData();
      O.append("file", M);
      try {
        const { data: N } = await ne.post(
          "http://103.189.173.127:3000/upload",
          O,
          {
            headers: {
              Authorization: `Bearer ${r}`,
              "Content-Type": "multipart/form-data",
            },
          }
        );
        return N == null ? void 0 : N.url;
      } catch (N) {
        throw (
          (console.error("Error uploading file:", N),
          new Error("Failed to upload"))
        );
      }
    },
    S = P.useCallback(
      async (M) => {
        var O;
        try {
          l(!0);
          const { data: N } = await ne.get(
            `http://103.189.173.127:3000/admin/audiobook/free?page=${M}&limit=10`,
            { headers: { Authorization: `Bearer ${r}` } }
          );
          t(N.data || []),
            g(((O = N.meta) == null ? void 0 : O.totalPages) || 1);
        } catch (N) {
          console.error("Error fetching audiobooks:", N),
            he("Failed to fetch audiobooks");
        } finally {
          l(!1);
        }
      },
      [r]
    );
  P.useEffect(() => {
    S(d);
  }, [S, d]);
  const T = async () => {
      if (!m || !v || !a || !s) {
        he("All fields are required.");
        return;
      }
      try {
        y(!0),
          await ne.post(
            "http://103.189.173.127:3000/admin/audiobook/create/free",
            { title: m, description: v, image: a, audio: s },
            { headers: { Authorization: `Bearer ${r}` } }
          ),
          Ge("Audiobook created successfully"),
          h(!1),
          x(""),
          b(""),
          i(null),
          n(null),
          S(d);
      } catch (M) {
        console.error("Error creating audiobook:", M),
          he("Failed to create audiobook");
      } finally {
        y(!1);
      }
    },
    E = async (M) => {
      try {
        await ne.delete(
          `http://103.189.173.127:3000/admin/audiobook/delete/${M}`,
          { headers: { Authorization: `Bearer ${r}` } }
        ),
          Ge("Audiobook deleted"),
          S(d);
      } catch (O) {
        console.error("Error deleting audiobook:", O),
          he("Failed to delete audiobook");
      }
    },
    L = (M) => {
      p(`/audio-detail/${M}`);
    },
    I = [
      {
        key: "image",
        label: "Image",
        render: (M) =>
          w.jsx("img", {
            src: `http://103.189.173.127:3000${M.image}`,
            alt: M.title,
            className: "w-16 h-16 rounded",
          }),
      },
      { key: "title", label: "Title", render: (M) => `${M.title}` },
      {
        key: "audio",
        label: "Audio",
        render: (M) =>
          w.jsx("audio", {
            controls: !0,
            src: `http://103.189.173.127:3000${M.audio}`,
          }),
      },
      {
        key: "actions",
        label: "Actions",
        render: (M) =>
          w.jsxs("div", {
            className: "flex items-center gap-2",
            children: [
              w.jsx(R.Tooltip, {
                content: "Details",
                children: w.jsx("button", {
                  onClick: () => L(M.id),
                  children: w.jsx(Wi, { className: "h-5 w-5 text-blue-500" }),
                }),
              }),
              w.jsx(R.Tooltip, {
                content: "Delete",
                children: w.jsx("button", {
                  onClick: () => E(M.id),
                  children: w.jsx(Yt, { className: "h-5 w-5 text-red-500" }),
                }),
              }),
            ],
          }),
      },
    ];
  return w.jsxs(R.Card, {
    children: [
      w.jsx(ua, {}),
      w.jsx(R.CardHeader, {
        floated: !1,
        shadow: !1,
        className: "rounded-none",
        children: w.jsxs("div", {
          className: "flex items-center justify-between",
          children: [
            w.jsxs("div", {
              children: [
                w.jsx(R.Typography, {
                  variant: "h5",
                  color: "blue-gray",
                  children: "Audiobooks",
                }),
                w.jsx(R.Typography, {
                  color: "gray",
                  className: "mt-1 font-normal",
                  children: "Manage all audiobooks",
                }),
              ],
            }),
            w.jsx(R.Button, {
              className: "bg-blue-500",
              onClick: () => h(!0),
              children: "Add Audiobook",
            }),
          ],
        }),
      }),
      w.jsxs(R.Dialog, {
        open: c,
        handler: () => h(!1),
        children: [
          w.jsx(R.DialogHeader, { children: "Add a New Audiobook" }),
          w.jsx(R.DialogBody, {
            divider: !0,
            children: w.jsxs("div", {
              className: "flex flex-col gap-4",
              children: [
                w.jsx(R.Input, {
                  label: "Title",
                  value: m,
                  onChange: (M) => x(M.target.value),
                }),
                w.jsx(R.Textarea, {
                  label: "Description",
                  value: v,
                  onChange: (M) => b(M.target.value),
                }),
                w.jsx("label", {
                  className: "text-sm text-gray-700 font-medium",
                  children: "Upload Image",
                }),
                w.jsx(R.Input, {
                  type: "file",
                  accept: "image/*",
                  onChange: async (M) => {
                    const O = M.target.files[0];
                    if (O)
                      try {
                        const N = await A(O);
                        i(N);
                      } catch {
                        he("Failed to upload image");
                      }
                  },
                  icon: w.jsx(na, { className: "h-5 w-5 text-gray-400" }),
                }),
                w.jsx(R.Input, {
                  label: "Audio",
                  type: "file",
                  accept: "audio/*",
                  onChange: async (M) => {
                    const O = M.target.files[0];
                    if (O)
                      try {
                        const N = await C(O);
                        n(N);
                      } catch {
                        he("Failed to upload audio");
                      }
                  },
                  icon: w.jsx(Os, { className: "h-5 w-5 text-gray-400" }),
                }),
              ],
            }),
          }),
          w.jsxs(R.DialogFooter, {
            children: [
              w.jsx(R.Button, {
                variant: "text",
                color: "red",
                onClick: () => h(!1),
                children: "Cancel",
              }),
              w.jsx(R.Button, {
                className: "bg-blue-500",
                onClick: T,
                disabled: k,
                children: k ? "Creating..." : "Create",
              }),
            ],
          }),
        ],
      }),
      w.jsx(R.CardBody, {
        children: o
          ? w.jsx("div", {
              className: "flex justify-center items-center",
              children: w.jsx(R.Spinner, {
                className: "h-8 w-8 text-blue-500",
              }),
            })
          : w.jsx(Pt, { columns: I, data: e }),
      }),
      w.jsxs(R.CardFooter, {
        className: "flex justify-between",
        children: [
          w.jsx(R.Button, {
            onClick: () => u((M) => Math.max(M - 1, 1)),
            disabled: d === 1,
            children: "Previous",
          }),
          w.jsx("div", {
            className: "flex items-center gap-2",
            children: [...Array(f)].map((M, O) =>
              w.jsx(
                R.IconButton,
                {
                  variant: "text",
                  size: "sm",
                  onClick: () => u(O + 1),
                  disabled: d === O + 1,
                  children: O + 1,
                },
                O + 1
              )
            ),
          }),
          w.jsx(R.Button, {
            onClick: () => u((M) => Math.min(M + 1, f)),
            disabled: d === f,
            children: "Next",
          }),
        ],
      }),
    ],
  });
};
function Gx() {
  const [r, e] = P.useState([]),
    [t, a] = P.useState(!0),
    [i, s] = P.useState(1),
    [n, o] = P.useState(1),
    [l, c] = P.useState(!1),
    [h, d] = P.useState(null),
    u = Tt(),
    f = Le.get("token"),
    g = () => c((L) => !L),
    [p, m] = P.useState(""),
    [x, v] = P.useState(""),
    [b, k] = P.useState(!1),
    y = async (L) => {
      const I = new FormData();
      I.append("file", L);
      try {
        const { data: M } = await ne.post(
          "http://103.189.173.127:3000/upload",
          I,
          {
            headers: {
              Authorization: `Bearer ${f}`,
              "Content-Type": "multipart/form-data",
            },
          }
        );
        return M == null ? void 0 : M.url;
      } catch (M) {
        throw (
          (console.error("Error uploading file:", M),
          new Error("Failed to upload"))
        );
      }
    },
    C = P.useCallback(
      async (L) => {
        var I;
        if (f) {
          a(!0);
          try {
            const { data: M } = await ne.get(
              `http://103.189.173.127:3000/admin/testimonial?page=${L}&limit=10`,
              { headers: { Authorization: `Bearer ${f}` } }
            );
            console.log("Testimonial:", M.testimonials),
              e(M.testimonials || []),
              o(((I = M.meta) == null ? void 0 : I.totalPages) || 1);
          } catch (M) {
            console.error("Error fetching Testimonial:", M),
              he("Failed to fetch Testimonial");
          } finally {
            a(!1);
          }
        }
      },
      [f]
    );
  P.useEffect(() => {
    C(i);
  }, [C, i]);
  const A = async (L) => {
      try {
        await ne.delete(`http://103.189.173.127:3000/admin/testimonial/${L}`, {
          headers: { Authorization: `Bearer ${f}` },
        }),
          Ge("Testimonial deleted"),
          C(i);
      } catch (I) {
        console.error("Error deleting Testimonial:", I),
          he("Failed to delete Testimonial");
      }
    },
    S = async () => {
      if (!p.trim() || !x.trim()) {
        he("Both question and Description are required.");
        return;
      }
      try {
        k(!0),
          await ne.post(
            "http://103.189.173.127:3000/admin/testimonial",
            { name: p, image: h, description: x },
            {
              headers: {
                Authorization: `Bearer ${f}`,
                "Content-Type": "application/json",
              },
            }
          ),
          Ge("Testimonial created"),
          m(""),
          v(""),
          d(null),
          c(!1),
          C(i);
      } catch (L) {
        console.error("Error creating Testimonial:", L),
          he("Failed to create Testimonial");
      } finally {
        k(!1);
      }
    },
    T = (L) => {
      u(`/testimonials-detail/${L}`);
    },
    E = [
      {
        key: "image",
        label: "image",
        render: (L) =>
          w.jsx("div", {
            className: "w-10 h-10 rounded-full overflow-hidden",
            children: L.image
              ? w.jsx("img", {
                  src: `http://103.189.173.127:3000${L.image}`,
                  alt: "Profile",
                  className: "object-cover w-full h-full",
                })
              : w.jsx("div", {
                  className:
                    "w-full h-full bg-gray-200 flex items-center justify-center text-gray-500",
                  children: "N/A",
                }),
          }),
        width: "w-20",
      },
      {
        key: "name",
        label: "Name",
        render: (L) => w.jsx("div", { children: L.name }),
      },
      {
        key: "description",
        label: "Description",
        render: (L) => w.jsx("div", { children: L.description }),
      },
      {
        key: "actions",
        label: "Actions",
        render: (L) =>
          w.jsxs("div", {
            className: "flex items-center gap-2",
            children: [
              w.jsx(R.Tooltip, {
                content: "Edit",
                children: w.jsx("button", {
                  onClick: () => T(L.id),
                  children: w.jsx(Ih, { className: "h-5 w-5 text-blue-500" }),
                }),
              }),
              w.jsx(R.Tooltip, {
                content: "Delete",
                children: w.jsx("button", {
                  onClick: () => A(L.id),
                  children: w.jsx(Yt, { className: "h-5 w-5 text-red-500" }),
                }),
              }),
            ],
          }),
      },
    ];
  return w.jsxs(R.Card, {
    children: [
      w.jsx(ua, {}),
      w.jsx(R.CardHeader, {
        floated: !1,
        shadow: !1,
        className: "rounded-none",
        children: w.jsxs("div", {
          className: "flex items-center justify-between",
          children: [
            w.jsxs("div", {
              children: [
                w.jsx(R.Typography, {
                  variant: "h5",
                  color: "blue-gray",
                  children: "Testimonial List",
                }),
                w.jsx(R.Typography, {
                  color: "gray",
                  className: "mt-1 font-normal",
                  children: "View all Testimonial and create new ones",
                }),
              ],
            }),
            w.jsx(R.Button, {
              onClick: g,
              className: "bg-blue-500",
              children: "Add Testimonial",
            }),
          ],
        }),
      }),
      w.jsxs(R.Dialog, {
        open: l,
        handler: g,
        children: [
          w.jsx(R.DialogHeader, { children: "Add a New Testimonial" }),
          w.jsx(R.DialogBody, {
            divider: !0,
            children: w.jsxs("div", {
              className: "flex flex-col gap-4",
              children: [
                w.jsx("label", {
                  className: "text-sm text-gray-700 font-medium",
                  children: "Upload Image",
                }),
                w.jsx(R.Input, {
                  type: "file",
                  accept: "image/*",
                  onChange: async (L) => {
                    const I = L.target.files[0];
                    if (I)
                      try {
                        const M = await y(I);
                        d(M);
                      } catch {
                        he("Failed to upload image");
                      }
                  },
                  icon: w.jsx(na, { className: "h-5 w-5 text-gray-400" }),
                }),
                w.jsx(R.Input, {
                  label: "Name",
                  value: p,
                  onChange: (L) => m(L.target.value),
                }),
                w.jsx(R.Textarea, {
                  label: "Description",
                  value: x,
                  onChange: (L) => v(L.target.value),
                }),
              ],
            }),
          }),
          w.jsxs(R.DialogFooter, {
            children: [
              w.jsx(R.Button, {
                variant: "text",
                color: "red",
                onClick: g,
                className: "mr-1",
                children: "Cancel",
              }),
              w.jsx(R.Button, {
                onClick: async () => {
                  await S(), c(!1);
                },
                disabled: b,
                className: "bg-blue-500",
                children: b ? "Creating..." : "Create",
              }),
            ],
          }),
        ],
      }),
      w.jsx(R.CardBody, {
        children: t
          ? w.jsx("div", {
              className: "flex justify-center items-center",
              children: w.jsx(R.Spinner, {
                className: "h-8 w-8 text-blue-500",
              }),
            })
          : w.jsx(Pt, { columns: E, data: r }),
      }),
      w.jsxs(R.CardFooter, {
        className: "flex justify-between",
        children: [
          w.jsx(R.Button, {
            onClick: () => s((L) => Math.max(L - 1, 1)),
            disabled: i === 1,
            children: "Previous",
          }),
          w.jsxs("div", {
            className: "flex items-center gap-2",
            children: [
              i > 3 &&
                w.jsxs(w.Fragment, {
                  children: [
                    w.jsx(R.IconButton, {
                      variant: "text",
                      size: "sm",
                      onClick: () => s(1),
                      children: "1",
                    }),
                    i > 4 && w.jsx("p", { children: "..." }),
                  ],
                }),
              Array.from({ length: Math.min(5, n) }, (L, I) => {
                const M = Math.max(1, i - 2) + I;
                return M > n
                  ? null
                  : w.jsx(
                      R.IconButton,
                      {
                        variant: "text",
                        size: "sm",
                        onClick: () => s(M),
                        disabled: i === M,
                        children: M,
                      },
                      M
                    );
              }),
              i < n - 2 &&
                w.jsxs(w.Fragment, {
                  children: [
                    i < n - 3 && w.jsx("p", { children: "..." }),
                    w.jsx(R.IconButton, {
                      variant: "text",
                      size: "sm",
                      onClick: () => s(n),
                      children: n,
                    }),
                  ],
                }),
            ],
          }),
          w.jsx(R.Button, {
            onClick: () => s((L) => Math.min(L + 1, n)),
            disabled: i === n,
            children: "Next",
          }),
        ],
      }),
    ],
  });
}
const Ux = () => {
    const r = Le.get("token"),
      [e, t] = P.useState([]),
      [a, i] = P.useState([]),
      [s, n] = P.useState(null),
      [o, l] = P.useState([]),
      [c, h] = P.useState(!0),
      [d, u] = P.useState(!1),
      [f, g] = P.useState(1),
      [p, m] = P.useState(1),
      x = Tt(),
      [v, b] = P.useState(""),
      [k, y] = P.useState(""),
      [C, A] = P.useState(""),
      [S, T] = P.useState(""),
      [E, L] = P.useState(!1),
      I = async (z) => {
        const G = new FormData();
        G.append("file", z);
        try {
          const { data: V } = await ne.post(
            "http://103.189.173.127:3000/upload",
            G,
            {
              headers: {
                Authorization: `Bearer ${r}`,
                "Content-Type": "multipart/form-data",
              },
            }
          );
          return V == null ? void 0 : V.url;
        } catch (V) {
          throw (
            (console.error("Error uploading file:", V),
            new Error("Failed to upload"))
          );
        }
      },
      M = P.useCallback(
        async (z) => {
          var G;
          try {
            h(!0);
            const { data: V } = await ne.get(
              `http://103.189.173.127:3000/admin/audiobook?page=${z}&limit=10`,
              { headers: { Authorization: `Bearer ${r}` } }
            );
            t(V.audiobooks || []),
              m(((G = V.meta) == null ? void 0 : G.totalPages) || 1);
          } catch (V) {
            console.error("Error fetching audiobooks:", V),
              he("Failed to fetch audiobooks");
          } finally {
            h(!1);
          }
        },
        [r]
      ),
      O = P.useCallback(
        async (z) => {
          var G;
          try {
            h(!0);
            const { data: V } = await ne.get(
              `http://103.189.173.127:3000/admin/pack?page=${z}&limit=10`,
              { headers: { Authorization: `Bearer ${r}` } }
            );
            i(V.packs || []),
              m(((G = V.meta) == null ? void 0 : G.totalPages) || 1);
          } catch (V) {
            console.error("Error fetching audiobooks:", V),
              he("Failed to fetch audiobooks");
          } finally {
            h(!1);
          }
        },
        [r]
      );
    P.useEffect(() => {
      M(f), O(f);
    }, [M, f, O]);
    const N = async () => {
        if (!v || !k || !s || !o || !C) {
          he("All fields are required.");
          return;
        }
        try {
          L(!0),
            await ne.post(
              "http://103.189.173.127:3000/admin/pack",
              {
                title: v,
                description: k,
                price: parseFloat(C),
                discountedPrice: parseFloat(S),
                image: s,
                audioBookIds: o,
              },
              { headers: { Authorization: `Bearer ${r}` } }
            ),
            Ge("Audiobook created successfully"),
            u(!1),
            b(""),
            y(""),
            n(null),
            l([]),
            A(""),
            O(f);
        } catch (z) {
          console.error("Error creating audiobook:", z),
            he("Failed to create audiobook");
        } finally {
          L(!1);
        }
      },
      F = async (z) => {
        try {
          await ne.delete(`http://103.189.173.127:3000/admin/pack/${z}`, {
            headers: { Authorization: `Bearer ${r}` },
          }),
            Ge("Audiobook deleted"),
            O(f);
        } catch (G) {
          console.error("Error deleting audiobook:", G),
            he("Failed to delete audiobook");
        }
      },
      D = (z) => {
        x(`/audio-package-detail/${z}`);
      },
      B = [
        {
          key: "image",
          label: "Image",
          render: (z) =>
            w.jsx("img", {
              src: `http://103.189.173.127:3000${z.image}`,
              alt: z.title,
              className: "w-16 h-16 rounded",
            }),
        },
        { key: "title", label: "Title", render: (z) => `${z.title}` },
        { key: "price", label: "Price", render: (z) => `${z.price}` },
        {
          key: "actions",
          label: "Actions",
          render: (z) =>
            w.jsxs("div", {
              className: "flex items-center gap-2",
              children: [
                w.jsx(R.Tooltip, {
                  content: "detail",
                  children: w.jsx("button", {
                    onClick: () => D(z.id),
                    children: w.jsx(Wi, { className: "h-5 w-5 text-blue-500" }),
                  }),
                }),
                w.jsx(R.Tooltip, {
                  content: "Delete",
                  children: w.jsx("button", {
                    onClick: () => F(z.id),
                    children: w.jsx(Yt, { className: "h-5 w-5 text-red-500" }),
                  }),
                }),
              ],
            }),
        },
      ];
    return w.jsxs(R.Card, {
      children: [
        w.jsx(ua, {}),
        w.jsx(R.CardHeader, {
          floated: !1,
          shadow: !1,
          className: "rounded-none",
          children: w.jsxs("div", {
            className: "flex items-center justify-between",
            children: [
              w.jsxs("div", {
                children: [
                  w.jsx(R.Typography, {
                    variant: "h5",
                    color: "blue-gray",
                    children: "Audiobooks Package",
                  }),
                  w.jsx(R.Typography, {
                    color: "gray",
                    className: "mt-1 font-normal",
                    children: "Manage all Audiobooks packages here.",
                  }),
                ],
              }),
              w.jsx(R.Button, {
                className: "bg-blue-500",
                onClick: () => u(!0),
                children: "Add Audiobook Package",
              }),
            ],
          }),
        }),
        w.jsxs(R.Dialog, {
          open: d,
          handler: () => u(!1),
          size: "md",
          children: [
            w.jsx(R.DialogHeader, { children: "Add a New Audiobook" }),
            w.jsx(R.DialogBody, {
              divider: !0,
              children: w.jsxs("div", {
                className: "flex flex-col gap-4 h-[500px] p-2 overflow-y-auto",
                children: [
                  w.jsx(R.Input, {
                    label: "Title",
                    value: v,
                    onChange: (z) => b(z.target.value),
                  }),
                  w.jsx(R.Textarea, {
                    label: "Description",
                    value: k,
                    onChange: (z) => y(z.target.value),
                  }),
                  w.jsx("label", {
                    className: "text-sm text-gray-700 font-medium",
                    children: "Upload Image",
                  }),
                  w.jsx(R.Input, {
                    type: "file",
                    accept: "image/*",
                    onChange: async (z) => {
                      const G = z.target.files[0];
                      if (G)
                        try {
                          const V = await I(G);
                          n(V);
                        } catch {
                          he("Failed to upload image");
                        }
                    },
                    icon: w.jsx(na, { className: "h-5 w-5 text-gray-400" }),
                  }),
                  w.jsx("label", {
                    className: "text-sm text-gray-700 font-medium",
                    children: "Select Audiobooks",
                  }),
                  w.jsx("div", {
                    className:
                      "max-h-40 overflow-y-auto border rounded p-2 space-y-2",
                    children: e.map((z) =>
                      w.jsxs(
                        "div",
                        {
                          className: "flex items-center gap-2",
                          children: [
                            w.jsx("input", {
                              type: "checkbox",
                              id: `audio-${z.id}`,
                              value: z.id,
                              checked: o.includes(z.id),
                              onChange: (G) => {
                                const V = z.id;
                                l((Q) =>
                                  G.target.checked
                                    ? [...Q, V]
                                    : Q.filter((Z) => Z !== V)
                                );
                              },
                            }),
                            w.jsx("label", {
                              htmlFor: `audio-${z.id}`,
                              className: "text-sm font-semibold",
                              children: z.title,
                            }),
                          ],
                        },
                        z.id
                      )
                    ),
                  }),
                  w.jsx(R.Input, {
                    label: "Price",
                    value: C,
                    type: "number",
                    onChange: (z) => A(z.target.value),
                  }),
                  w.jsx(R.Input, {
                    label: "Discounted Price",
                    value: S,
                    type: "number",
                    onChange: (z) => T(z.target.value),
                  }),
                ],
              }),
            }),
            w.jsxs(R.DialogFooter, {
              children: [
                w.jsx(R.Button, {
                  variant: "text",
                  color: "red",
                  onClick: () => u(!1),
                  children: "Cancel",
                }),
                w.jsx(R.Button, {
                  className: "bg-blue-500",
                  onClick: N,
                  disabled: E,
                  children: E ? "Creating..." : "Create",
                }),
              ],
            }),
          ],
        }),
        w.jsx(R.CardBody, {
          children: c
            ? w.jsx("div", {
                className: "flex justify-center items-center",
                children: w.jsx(R.Spinner, {
                  className: "h-8 w-8 text-blue-500",
                }),
              })
            : w.jsx(Pt, { columns: B, data: a }),
        }),
        w.jsxs(R.CardFooter, {
          className: "flex justify-between",
          children: [
            w.jsx(R.Button, {
              onClick: () => g((z) => Math.max(z - 1, 1)),
              disabled: f === 1,
              children: "Previous",
            }),
            w.jsx("div", {
              className: "flex items-center gap-2",
              children: [...Array(p)].map((z, G) =>
                w.jsx(
                  R.IconButton,
                  {
                    variant: "text",
                    size: "sm",
                    onClick: () => g(G + 1),
                    disabled: f === G + 1,
                    children: G + 1,
                  },
                  G + 1
                )
              ),
            }),
            w.jsx(R.Button, {
              onClick: () => g((z) => Math.min(z + 1, p)),
              disabled: f === p,
              children: "Next",
            }),
          ],
        }),
      ],
    });
  },
  pt = "w-5 h-5 text-inherit",
  Io = [
    {
      layout: "dashboard",
      pages: [
        {
          icon: w.jsx(kp, { className: pt }),
          name: "Dashboard",
          path: "/home",
          element: w.jsx(ot, { children: w.jsx(sx, {}) }),
        },
        {
          icon: w.jsx(Ip, { className: pt }),
          name: "All Users",
          path: "/all-users",
          element: w.jsx(ot, { children: w.jsx(Wx, {}) }),
        },
        {
          icon: w.jsx(mi, { className: pt }),
          name: "Audio Book",
          path: "/audio-book",
          element: w.jsx(ot, { children: w.jsx(Bx, {}) }),
        },
        {
          icon: w.jsx(mi, { className: pt }),
          name: "Free Audio Book",
          path: "/free-audio-book",
          element: w.jsx(ot, { children: w.jsx(Vx, {}) }),
        },
        {
          icon: w.jsx(mi, { className: pt }),
          name: "Audio Package",
          path: "/audio-package",
          element: w.jsx(ot, { children: w.jsx(Ux, {}) }),
        },
        {
          icon: w.jsx(th, { className: pt }),
          name: "Video Book",
          path: "/Video-book",
          element: w.jsx(ot, { children: w.jsx(Yx, {}) }),
        },
        {
          icon: w.jsx(ro, { className: pt }),
          name: "Create FAQ",
          path: "/create-faq",
          element: w.jsx(ot, { children: w.jsx(Xx, {}) }),
        },
        {
          icon: w.jsx(ro, { className: pt }),
          name: "Create Testimonial",
          path: "/create-testimonial",
          element: w.jsx(ot, { children: w.jsx(Gx, {}) }),
        },
      ],
    },
  ];
function Zs({ isOpen: r, setIsOpen: e }) {
  const { pathname: t } = gh(),
    [a, i] = t.split("/").filter((o) => o !== ""),
    s = Tt(),
    n = () => {
      Le.remove("token"),
        Le.remove("user"),
        Le.remove("permissions"),
        s("/login");
    };
  return w.jsx(R.Navbar, {
    color: "transparent",
    className: "rounded-xl transition-all px-0 py-1",
    fullWidth: !0,
    children: w.jsxs("div", {
      className:
        "flex flex-col-reverse justify-between gap-6 md:flex-row md:items-center",
      children: [
        w.jsxs("div", {
          className: "capitalize",
          children: [
            w.jsxs(R.Breadcrumbs, {
              className: "bg-transparent p-0 transition-all",
              children: [
                w.jsx(ph, {
                  to: `/${a}`,
                  children: w.jsx(R.Typography, {
                    variant: "small",
                    color: "gray",
                    className:
                      "font-normal opacity-50 transition-all hover:text-blue-500 hover:opacity-100",
                    children: a,
                  }),
                }),
                w.jsx(R.Typography, {
                  variant: "small",
                  color: "gray",
                  className: "font-normal",
                  children: i,
                }),
              ],
            }),
            w.jsx(R.Typography, { variant: "h6", color: "gray", children: i }),
          ],
        }),
        w.jsxs("div", {
          className: "flex items-center",
          children: [
            w.jsx(R.IconButton, {
              variant: "text",
              color: "gray",
              className: "grid md:hidden",
              onClick: () => e(!r),
              children: r
                ? w.jsx(_h, { className: "h-6 w-6 text-gray-700" })
                : w.jsx(vp, { className: "h-6 w-6 text-gray-700" }),
            }),
            w.jsxs(R.Button, {
              onClick: n,
              variant: "text",
              color: "gray",
              className: "hidden items-center gap-1 px-4 xl:flex normal-case",
              children: [
                w.jsx(so, { className: "h-5 w-5 text-gray-500" }),
                "Log Out",
              ],
            }),
            w.jsx(R.IconButton, {
              onClick: n,
              variant: "text",
              color: "gray",
              className: "grid xl:hidden",
              children: w.jsx(so, { className: "h-5 w-5 text-gray-500" }),
            }),
            w.jsx(R.IconButton, {
              variant: "text",
              color: "gray",
              children: w.jsx(yp, { className: "h-5 w-5 text-gray-500" }),
            }),
          ],
        }),
      ],
    }),
  });
}
Zs.propTypes = { isOpen: ie.bool.isRequired, setIsOpen: ie.func.isRequired };
Zs.displayName = "/src/widgets/layout/dashboard-navbar.jsx";
const $x = () => {
    const { id: r } = za(),
      [e, t] = P.useState({
        name: "",
        email: "",
        phone: "",
        type: "",
        profilePic: null,
      }),
      [a, i] = P.useState(""),
      [s, n] = P.useState(""),
      [o, l] = P.useState(!0),
      [c, h] = P.useState(null),
      d = Le.get("token"),
      u = async (x) => {
        const v = new FormData();
        v.append("file", x);
        try {
          const { data: b } = await ne.post(
            "http://103.189.173.127:3000/upload",
            v,
            {
              headers: {
                Authorization: `Bearer ${d}`,
                "Content-Type": "multipart/form-data",
              },
            }
          );
          return b == null ? void 0 : b.url;
        } catch (b) {
          throw (
            (console.error("Error uploading file:", b),
            new Error("Failed to upload"))
          );
        }
      },
      f = async () => {
        try {
          if (!d) {
            console.error("Admin token is missing."), l(!1);
            return;
          }
          const x = await ne.get(
            `http://103.189.173.127:3000/admin/users/${r}`,
            { headers: { Authorization: `Bearer ${d}` } }
          );
          if (x.status === 200 && x.data.user) {
            const v = x.data.user;
            t({
              name: v.name || "",
              email: v.email || "",
              phone: v.phone || "",
              type: v.type || "",
              profilePic: v.profilePic || null,
            });
          }
        } catch (x) {
          console.error("Error fetching user:", x);
        } finally {
          l(!1);
        }
      };
    P.useEffect(() => {
      f();
    }, [r, d]);
    const g = async (x) => {
        x.preventDefault();
        try {
          const v = Le.get("token");
          if (!v) {
            console.error("Admin token is missing.");
            return;
          }
          const b = {};
          e.name && (b.name = e.name),
            e.phone && (b.phone = e.phone),
            c && (b.image = c),
            (
              await ne.post(
                `http://103.189.173.127:3000/admin/user/profile/${r}`,
                b,
                {
                  headers: {
                    Authorization: `Bearer ${v}`,
                    "Content-Type": "application/json",
                  },
                }
              )
            ).status === 200 &&
              (alert("User profile updated successfully!"), f());
        } catch (v) {
          console.error("Error updating profile:", v),
            alert("Failed to update user profile.");
        }
      },
      p = async (x) => {
        x.preventDefault();
        try {
          if (!d) {
            console.error("Admin token is missing.");
            return;
          }
          if (a !== s) {
            alert("Passwords do not match!");
            return;
          }
          ne.post(
            `http://103.189.173.127:3000/admin/user/password/${r}`,
            { password: a },
            {
              headers: {
                Authorization: `Bearer ${d}`,
                "Content-Type": "application/json",
              },
            }
          ),
            alert("Password updated successfully!"),
            i(""),
            n("");
        } catch (v) {
          console.error("Error updating password:", v),
            alert("Failed to update password.");
        }
      },
      m = (x) => {
        const { name: v, value: b } = x.target;
        t((k) => ({ ...k, [v]: b }));
      };
    return o
      ? w.jsx("div", { className: "text-center p-4", children: "Loading..." })
      : w.jsxs(w.Fragment, {
          children: [
            w.jsxs("div", {
              className:
                "p-6 max-w-3xl mx-auto border rounded-lg shadow-md bg-white",
              children: [
                w.jsx("h2", {
                  className: "text-2xl font-semibold mb-4",
                  children: "Edit User",
                }),
                w.jsxs("form", {
                  onSubmit: g,
                  className: "grid grid-cols-1 sm:grid-cols-2 gap-4",
                  children: [
                    w.jsxs("div", {
                      children: [
                        w.jsx("label", {
                          className: "block font-medium mb-1",
                          children: "Name",
                        }),
                        w.jsx("input", {
                          type: "text",
                          name: "name",
                          value: e.name,
                          onChange: m,
                          className: "w-full border px-3 py-2 rounded",
                        }),
                      ],
                    }),
                    w.jsxs("div", {
                      children: [
                        w.jsx("label", {
                          className: "block font-medium mb-1",
                          children: "Email",
                        }),
                        w.jsx("input", {
                          type: "email",
                          name: "email",
                          value: e.email,
                          onChange: m,
                          disabled: !0,
                          className: "w-full border px-3 py-2 rounded",
                        }),
                      ],
                    }),
                    w.jsxs("div", {
                      children: [
                        w.jsx("label", {
                          className: "block font-medium mb-1",
                          children: "Phone",
                        }),
                        w.jsx("input", {
                          type: "text",
                          name: "phone",
                          value: e.phone,
                          onChange: m,
                          className: "w-full border px-3 py-2 rounded",
                        }),
                      ],
                    }),
                    w.jsxs("div", {
                      children: [
                        w.jsx("label", {
                          className: "block font-medium mb-1",
                          children: "Type",
                        }),
                        w.jsx("input", {
                          type: "text",
                          name: "type",
                          value: e.type,
                          disabled: !0,
                          onChange: m,
                          className: "w-full border px-3 py-2 rounded",
                        }),
                      ],
                    }),
                    w.jsxs("div", {
                      className: "sm:col-span-2 mt-4",
                      children: [
                        w.jsx("label", {
                          className: "block font-medium mb-1",
                          children: "Profile Picture",
                        }),
                        w.jsx("img", {
                          src: e.profilePic
                            ? `http://103.189.173.127:3000${e.profilePic}`
                            : "https://via.placeholder.com/150",
                          alt: "Profile",
                          className: "w-32 h-32 rounded-full object-cover",
                        }),
                      ],
                    }),
                    w.jsxs("div", {
                      className: "sm:col-span-2",
                      children: [
                        w.jsx("label", {
                          className: "block font-medium mb-1",
                          children: "Upload New Profile Picture",
                        }),
                        w.jsx(R.Input, {
                          type: "file",
                          accept: "image/*",
                          onChange: async (x) => {
                            const v = x.target.files[0];
                            if (v)
                              try {
                                const b = await u(v);
                                h(b);
                              } catch {
                                console.log("Failed to upload image");
                              }
                          },
                          icon: w.jsx(na, {
                            className: "h-5 w-5 text-gray-400",
                          }),
                        }),
                      ],
                    }),
                    w.jsx("div", {
                      className: "sm:col-span-2 mt-6",
                      children: w.jsx("button", {
                        type: "submit",
                        className:
                          "bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700",
                        children: "Update Profile",
                      }),
                    }),
                  ],
                }),
              ],
            }),
            w.jsxs("div", {
              className:
                "p-6 max-w-3xl mx-auto border rounded-lg shadow-md bg-white mt-8",
              children: [
                w.jsx("h2", {
                  className: "text-2xl font-semibold mb-4",
                  children: "Update Password",
                }),
                w.jsxs("form", {
                  onSubmit: p,
                  className: "grid grid-cols-1 sm:grid-cols-2 gap-4",
                  children: [
                    w.jsxs("div", {
                      children: [
                        w.jsx("label", {
                          className: "block font-medium mb-1",
                          children: "New Password",
                        }),
                        w.jsx("input", {
                          type: "password",
                          name: "newPassword",
                          value: a,
                          onChange: (x) => i(x.target.value),
                          required: !0,
                          className: "w-full border px-3 py-2 rounded",
                        }),
                      ],
                    }),
                    w.jsxs("div", {
                      children: [
                        w.jsx("label", {
                          className: "block font-medium mb-1",
                          children: "Confirm New Password",
                        }),
                        w.jsx("input", {
                          type: "password",
                          name: "confirmNewPassword",
                          value: s,
                          onChange: (x) => n(x.target.value),
                          required: !0,
                          className: "w-full border px-3 py-2 rounded",
                        }),
                      ],
                    }),
                    w.jsx("div", {
                      className: "sm:col-span-2 mt-6",
                      children: w.jsx("button", {
                        type: "submit",
                        className:
                          "bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700",
                        children: "Update Password",
                      }),
                    }),
                  ],
                }),
              ],
            }),
          ],
        });
  },
  qx = () => {
    const { id: r } = za(),
      e = Le.get("token"),
      [t, a] = P.useState(null),
      [i, s] = P.useState(!1),
      [n, o] = P.useState(!0);
    if (
      (P.useEffect(() => {
        (async () => {
          try {
            const { data: h } = await ne.get(
              `http://103.189.173.127:3000/admin/audiobook/details/${r}`,
              { headers: { Authorization: `Bearer ${e}` } }
            );
            a(h.audiobook);
          } catch (h) {
            console.error("Failed to fetch audiobook details", h);
          } finally {
            o(!1);
          }
        })();
      }, [r, e]),
      n)
    )
      return w.jsx("div", {
        className: "flex justify-center items-center h-64",
        children: w.jsx(R.Spinner, { className: "h-10 w-10 text-blue-500" }),
      });
    if (!t)
      return w.jsx("div", {
        className: "text-center mt-10 text-red-500",
        children: "Audiobook not found.",
      });
    const l = () => {
      s(!i);
    };
    return w.jsx("div", {
      className: "max-w-4xl mx-auto mt-8 px-4",
      children: w.jsx(R.Card, {
        className: "shadow-lg",
        children: w.jsxs("div", {
          className: "flex flex-col md:flex-row",
          children: [
            w.jsx("div", {
              className: "md:w-1/2",
              children: w.jsx("img", {
                src: `http://103.189.173.127:3000${t.image}`,
                alt: t.title,
                className:
                  "h-full w-full object-cover rounded-t-xl md:rounded-l-xl md:rounded-tr-none",
              }),
            }),
            w.jsxs(R.CardBody, {
              className: "md:w-1/2 p-6 space-y-4",
              children: [
                w.jsx(R.Typography, {
                  variant: "h4",
                  color: "blue-gray",
                  children: t.title,
                }),
                w.jsxs("audio", {
                  controls: !0,
                  className: "w-full rounded-md shadow-sm",
                  children: [
                    w.jsx("source", {
                      src: `http://103.189.173.127:3000${t.audio}`,
                      type: "audio/mpeg",
                    }),
                    "Your browser does not support the audio element.",
                  ],
                }),
                w.jsx(R.Typography, {
                  color: "green",
                  className: "text-xl font-semibold",
                  children: t.price,
                }),
                w.jsx(R.Typography, {
                  color: "gray",
                  className: "text-lg",
                  children: i
                    ? t.description
                    : `${t.description.slice(0, 100)}...`,
                }),
                w.jsx("button", {
                  onClick: l,
                  className: "text-blue-500 underline mt-2",
                  children: i ? "Show Less" : "Show More",
                }),
              ],
            }),
          ],
        }),
      }),
    });
  },
  Zx = () => {
    const { id: r } = za(),
      e = Le.get("token"),
      [t, a] = P.useState(null),
      [i, s] = P.useState(!1),
      [n, o] = P.useState(!0);
    if (
      (P.useEffect(() => {
        (async () => {
          try {
            const { data: u } = await ne.get(
              `http://103.189.173.127:3000/admin/video/details/${r}`,
              { headers: { Authorization: `Bearer ${e}` } }
            );
            a(u.video);
          } catch (u) {
            console.error("Failed to fetch video details", u);
          } finally {
            o(!1);
          }
        })();
      }, [r, e]),
      n)
    )
      return w.jsx("div", {
        className: "flex justify-center items-center h-64",
        children: w.jsx(R.Spinner, { className: "h-10 w-10 text-blue-500" }),
      });
    if (!t)
      return w.jsx("div", {
        className: "text-center mt-10 text-red-500",
        children: "Video not found.",
      });
    const l = () => {
        s(!i);
      },
      h = ((d) => {
        const u = /(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n]+)/,
          f = d.match(u);
        return f ? `https://www.youtube.com/embed/${f[1]}` : null;
      })(t.video);
    return w.jsx("div", {
      className: "max-w-4xl mx-auto mt-8 px-4",
      children: w.jsx(R.Card, {
        className: "shadow-lg",
        children: w.jsxs("div", {
          className: "flex flex-col md:flex-row",
          children: [
            w.jsx("div", {
              className: "md:w-1/2",
              children: w.jsx("img", {
                src: t.image,
                alt: t.title,
                className:
                  "h-full w-full object-cover rounded-t-xl md:rounded-l-xl md:rounded-tr-none",
              }),
            }),
            w.jsxs(R.CardBody, {
              className: "md:w-1/2 p-6 space-y-4",
              children: [
                w.jsx(R.Typography, {
                  variant: "h4",
                  color: "blue-gray",
                  children: t.title,
                }),
                h
                  ? w.jsx("div", {
                      className: "aspect-w-16 aspect-h-9",
                      children: w.jsx("iframe", {
                        src: h,
                        title: t.title,
                        frameBorder: "0",
                        allow:
                          "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
                        allowFullScreen: !0,
                        className: "w-full h-64 rounded-md",
                      }),
                    })
                  : w.jsx(R.Typography, {
                      color: "red",
                      children: "Invalid YouTube link",
                    }),
                w.jsx(R.Typography, {
                  color: "gray",
                  className: "text-lg",
                  children: i
                    ? t.description
                    : `${t.description.slice(0, 100)}...`,
                }),
                w.jsx("button", {
                  onClick: l,
                  className: "text-blue-500 underline mt-2",
                  children: i ? "Show Less" : "Show More",
                }),
              ],
            }),
          ],
        }),
      }),
    });
  },
  Kx = () => {
    const { id: r } = za(),
      e = Le.get("token"),
      [t, a] = P.useState(null),
      [i, s] = P.useState(!1),
      [n, o] = P.useState(!0);
    if (
      (P.useEffect(() => {
        (async () => {
          try {
            const { data: h } = await ne.get(
              `http://103.189.173.127:3000/admin/testimonial/${r}`,
              { headers: { Authorization: `Bearer ${e}` } }
            );
            a(h.testimonial);
          } catch (h) {
            console.error("Failed to fetch audiobook details", h);
          } finally {
            o(!1);
          }
        })();
      }, [r, e]),
      n)
    )
      return w.jsx("div", {
        className: "flex justify-center items-center h-64",
        children: w.jsx(R.Spinner, { className: "h-10 w-10 text-blue-500" }),
      });
    if (!t)
      return w.jsx("div", {
        className: "text-center mt-10 text-red-500",
        children: "Audiobook not found.",
      });
    const l = () => {
      s(!i);
    };
    return w.jsx("div", {
      className: "max-w-md mx-auto mt-8 px-4",
      children: w.jsx(R.Card, {
        className: "shadow-lg ",
        children: w.jsxs("div", {
          className: "",
          children: [
            w.jsx("div", {
              children: w.jsx("img", {
                src: `http://103.189.173.127:3000${t.image}`,
                alt: t.title,
                className:
                  "h-full w-full object-cover rounded-t-xl md:rounded-xl",
              }),
            }),
            w.jsxs(R.CardBody, {
              className: "md:w-1/2 p-6 space-y-4",
              children: [
                w.jsx(R.Typography, {
                  variant: "h4",
                  color: "blue-gray",
                  children: t.title,
                }),
                w.jsx(R.Typography, {
                  color: "blue-gray",
                  className: "text-lg font-semibold",
                  children: t.name,
                }),
                w.jsx(R.Typography, {
                  color: "green",
                  className: "text-xl font-semibold",
                  children: t.price,
                }),
                w.jsx(R.Typography, {
                  color: "gray",
                  className: "text-lg",
                  children: i
                    ? t.description
                    : `${t.description.slice(0, 100)}...`,
                }),
                w.jsx("button", {
                  onClick: l,
                  className: "text-blue-500 underline mt-2",
                  children: i ? "Show Less" : "Show More",
                }),
              ],
            }),
          ],
        }),
      }),
    });
  },
  Qx = () => {
    const { id: r } = za(),
      e = Le.get("token"),
      [t, a] = P.useState(null),
      [i, s] = P.useState([]),
      [n, o] = P.useState(!0),
      [l, c] = P.useState(null);
    if (
      (P.useEffect(() => {
        (async () => {
          try {
            const { data: u } = await ne.get(
              `http://103.189.173.127:3000/admin/pack/${r}`,
              { headers: { Authorization: `Bearer ${e}` } }
            );
            a(u.pack),
              s(u.audioBooks),
              u.audioBooks.length > 0 && c(u.audioBooks[0]);
          } catch (u) {
            console.error("Failed to fetch package details", u);
          } finally {
            o(!1);
          }
        })();
      }, [r, e]),
      n)
    )
      return w.jsx("div", {
        className: "flex justify-center items-center h-64",
        children: w.jsx(R.Spinner, { className: "h-10 w-10 text-blue-500" }),
      });
    if (!t)
      return w.jsx("div", {
        className: "text-center mt-10 text-red-500",
        children: "Audio package not found.",
      });
    const h = () =>
      t.price && t.discountedPrice
        ? (((t.price - t.discountedPrice) / t.price) * 100).toFixed(0)
        : 0;
    return w.jsxs("div", {
      className: "max-w-6xl mx-auto mt-8 px-4",
      children: [
        w.jsx(R.Card, {
          className: "shadow-lg mb-8",
          children: w.jsxs("div", {
            className: "flex flex-col md:flex-row",
            children: [
              w.jsx("div", {
                className: "md:w-1/3",
                children: w.jsx("img", {
                  src: `http://103.189.173.127:3000${t.image}`,
                  alt: t.title,
                  className:
                    "h-full w-full object-cover rounded-t-xl md:rounded-l-xl md:rounded-tr-none",
                }),
              }),
              w.jsxs(R.CardBody, {
                className: "md:w-2/3 p-6 space-y-4",
                children: [
                  w.jsxs("div", {
                    className: "flex justify-between items-start",
                    children: [
                      w.jsx(R.Typography, {
                        variant: "h3",
                        color: "blue-gray",
                        className: "font-bold",
                        children: t.title,
                      }),
                      t.free
                        ? w.jsx("div", {
                            className:
                              "bg-green-500 text-white px-4 py-1 rounded-full",
                            children: "Free",
                          })
                        : null,
                    ],
                  }),
                  w.jsx(R.Typography, {
                    color: "gray",
                    className: "text-lg",
                    children: t.description,
                  }),
                  w.jsx("div", {
                    className: "flex items-center space-x-4",
                    children:
                      !t.free &&
                      w.jsxs(w.Fragment, {
                        children: [
                          w.jsxs(R.Typography, {
                            color: "green",
                            className: "text-2xl font-bold",
                            children: ["$", t.discountedPrice],
                          }),
                          w.jsxs(R.Typography, {
                            color: "gray",
                            className: "text-lg line-through",
                            children: ["$", t.price],
                          }),
                          w.jsxs("div", {
                            className:
                              "bg-red-100 text-red-800 px-2 py-1 rounded",
                            children: ["Save ", h(), "%"],
                          }),
                        ],
                      }),
                  }),
                  w.jsxs("div", {
                    className: "pt-4",
                    children: [
                      w.jsx(R.Typography, {
                        variant: "h6",
                        color: "blue-gray",
                        children: "Package Includes:",
                      }),
                      w.jsxs(R.Typography, {
                        color: "gray",
                        children: [i.length, " audiobooks"],
                      }),
                    ],
                  }),
                ],
              }),
            ],
          }),
        }),
        l &&
          w.jsx(R.Card, {
            className: "shadow-lg mb-8",
            children: w.jsxs("div", {
              className: "flex flex-col md:flex-row",
              children: [
                w.jsx("div", {
                  className: "md:w-1/4",
                  children: w.jsx("img", {
                    src: `http://103.189.173.127:3000${l.image}`,
                    alt: l.title,
                    className:
                      "h-full w-full object-cover rounded-t-xl md:rounded-l-xl md:rounded-tr-none",
                  }),
                }),
                w.jsxs(R.CardBody, {
                  className: "md:w-3/4 p-6 space-y-4",
                  children: [
                    w.jsxs(R.Typography, {
                      variant: "h5",
                      color: "blue-gray",
                      className: "font-bold",
                      children: ["Now Playing: ", l.title],
                    }),
                    w.jsxs("audio", {
                      controls: !0,
                      className: "w-full rounded-md shadow-sm",
                      children: [
                        w.jsx("source", {
                          src: `http://103.189.173.127:3000${l.audio}`,
                          type: "audio/mpeg",
                        }),
                        "Your browser does not support the audio element.",
                      ],
                    }),
                    w.jsx(R.Typography, {
                      color: "gray",
                      className: "text-base",
                      children: l.description,
                    }),
                  ],
                }),
              ],
            }),
          }),
        w.jsx(R.Typography, {
          variant: "h4",
          color: "blue-gray",
          className: "font-bold mb-4",
          children: "Included Audiobooks",
        }),
        w.jsx("div", {
          className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",
          children:
            i == null
              ? void 0
              : i.map((d) =>
                  w.jsxs(
                    R.Card,
                    {
                      className: "shadow-md hover:shadow-xl transition-shadow",
                      children: [
                        w.jsx("div", {
                          className: "relative pb-2/3",
                          children: w.jsx("img", {
                            src: `http://103.189.173.127:3000${
                              d == null ? void 0 : d.image
                            }`,
                            alt: d.title,
                            className: "h-48 w-full object-cover rounded-t-xl",
                          }),
                        }),
                        w.jsxs(R.CardBody, {
                          className: "p-4",
                          children: [
                            w.jsx(R.Typography, {
                              variant: "h6",
                              color: "blue-gray",
                              className: "font-semibold mb-2",
                              children: d == null ? void 0 : d.title,
                            }),
                            w.jsx(R.Typography, {
                              color: "gray",
                              className: "text-sm mb-3 line-clamp-2",
                              children: d.description,
                            }),
                            w.jsx(R.Button, {
                              color: "blue",
                              size: "sm",
                              fullWidth: !0,
                              onClick: () => c(d),
                              children: "Play Now",
                            }),
                          ],
                        }),
                      ],
                    },
                    d.id
                  )
                ),
        }),
      ],
    });
  },
  rv = () => {
    const [r, e] = P.useState(!1);
    return w.jsxs("div", {
      className: "flex min-h-screen bg-blue-gray-50/50",
      children: [
        w.jsx("div", {
          className: `transition-all duration-300 ${
            r ? "w-72" : "w-0"
          } md:w-72`,
          children: w.jsx(nc, { routes: Io, isOpen: r }),
        }),
        w.jsxs("div", {
          className:
            "flex-1 p-4 md:ml-4 h-screen overflow-y-auto transition-all duration-300",
          children: [
            w.jsx(Zs, { isOpen: r, setIsOpen: e }),
            w.jsxs(mh, {
              children: [
                w.jsx(gt, {
                  path: "/",
                  element: w.jsx(xh, { to: "/home", replace: !0 }),
                }),
                w.jsx(gt, { path: "/user-detail/:id", element: w.jsx($x, {}) }),
                w.jsx(gt, {
                  path: "/audio-detail/:id",
                  element: w.jsx(qx, {}),
                }),
                w.jsx(gt, {
                  path: "/visa-detail/:id",
                  element: w.jsx(Zx, {}),
                }),
                w.jsx(gt, {
                  path: "/testimonials-detail/:id",
                  element: w.jsx(Kx, {}),
                }),
                w.jsx(gt, {
                  path: "/audio-package-detail/:id",
                  element: w.jsx(Qx, {}),
                }),
                Io.map(({ layout: t, pages: a }) =>
                  t === "dashboard"
                    ? a.map(({ path: i, element: s, subPages: n }) =>
                        w.jsxs(w.Fragment, {
                          children: [
                            w.jsx(
                              gt,
                              { path: i.replace("/", ""), element: s },
                              i
                            ),
                            n == null
                              ? void 0
                              : n.map((o) =>
                                  w.jsx(
                                    gt,
                                    {
                                      path: o.path,
                                      element:
                                        o.element ||
                                        w.jsx("div", {
                                          children: "Not Implemented",
                                        }),
                                    },
                                    o.path
                                  )
                                ),
                          ],
                        })
                      )
                    : null
                ),
              ],
            }),
          ],
        }),
      ],
    });
  };
export { rv as default };
